
PhobosMainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c68c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800c860  0800c860  0001c860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d090  0800d090  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d090  0800d090  0001d090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d098  0800d098  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d098  0800d098  0001d098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d09c  0800d09c  0001d09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200001dc  0800d27c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  0800d27c  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d83  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003669  00000000  00000000  00035f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000395f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  0003a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025afb  00000000  00000000  0003b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185a1  00000000  00000000  000611fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d376b  00000000  00000000  0007979c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014cf07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a3c  00000000  00000000  0014cf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c844 	.word	0x0800c844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800c844 	.word	0x0800c844

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <avoidance_initialize>:
AvoidanceState avoidanceState;
Bezier* avoidanceCurve;
float backtrackingAim;
float avoidanceSpeedFactor;

void avoidance_initialize() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	avoidanceState = PATH_CLEAR;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <avoidance_initialize+0x28>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	avoidanceCurve = bezier_newEmpty();
 8000f96:	f000 f913 	bl	80011c0 <bezier_newEmpty>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <avoidance_initialize+0x2c>)
 8000f9e:	6013      	str	r3, [r2, #0]
	backtrackingAim = 0;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <avoidance_initialize+0x30>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	avoidanceSpeedFactor = 1;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <avoidance_initialize+0x34>)
 8000faa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200001f8 	.word	0x200001f8
 8000fb8:	200001fc 	.word	0x200001fc
 8000fbc:	20000200 	.word	0x20000200
 8000fc0:	20000204 	.word	0x20000204
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <avoidance_update>:


void avoidance_update(float t, Direction dir) {
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	70fb      	strb	r3, [r7, #3]
	int distance = lidar_getDistance(dir);
 8000fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fe88 	bl	8001cf0 <lidar_getDistance>
 8000fe0:	60f8      	str	r0, [r7, #12]

	if ((avoidanceState == PATH_CLEAR || avoidanceState == PATH_CROWDED) && distance < LIDAR_THRESHOLD) {
 8000fe2:	4b55      	ldr	r3, [pc, #340]	; (8001138 <avoidance_update+0x170>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <avoidance_update+0x2a>
 8000fea:	4b53      	ldr	r3, [pc, #332]	; (8001138 <avoidance_update+0x170>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d112      	bne.n	8001018 <avoidance_update+0x50>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2b27      	cmp	r3, #39	; 0x27
 8000ff6:	dc0f      	bgt.n	8001018 <avoidance_update+0x50>
		avoidanceState = PATH_OBSTRUCTED;
 8000ff8:	4b4f      	ldr	r3, [pc, #316]	; (8001138 <avoidance_update+0x170>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	701a      	strb	r2, [r3, #0]
		printf("Obstacle detected. Waiting 2s...\r\n");
 8000ffe:	484f      	ldr	r0, [pc, #316]	; (800113c <avoidance_update+0x174>)
 8001000:	f007 ff3e 	bl	8008e80 <puts>
		propulsion_setSpeeds(0, 0);
 8001004:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8001140 <avoidance_update+0x178>
 8001008:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001140 <avoidance_update+0x178>
 800100c:	f001 f90c 	bl	8002228 <propulsion_setSpeeds>
		HAL_Delay(2000);
 8001010:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001014:	f003 fd12 	bl	8004a3c <HAL_Delay>
	}

	if ((avoidanceState == PATH_CLEAR || avoidanceState == PATH_OBSTRUCTED) && distance > LIDAR_THRESHOLD && distance < LIDAR_MAX_DISTANCE) {
 8001018:	4b47      	ldr	r3, [pc, #284]	; (8001138 <avoidance_update+0x170>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <avoidance_update+0x60>
 8001020:	4b45      	ldr	r3, [pc, #276]	; (8001138 <avoidance_update+0x170>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d117      	bne.n	8001058 <avoidance_update+0x90>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b28      	cmp	r3, #40	; 0x28
 800102c:	dd14      	ble.n	8001058 <avoidance_update+0x90>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b3b      	cmp	r3, #59	; 0x3b
 8001032:	dc11      	bgt.n	8001058 <avoidance_update+0x90>
		avoidanceSpeedFactor = (distance - LIDAR_THRESHOLD) / (LIDAR_MAX_DISTANCE - LIDAR_THRESHOLD);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3b28      	subs	r3, #40	; 0x28
 8001038:	4a42      	ldr	r2, [pc, #264]	; (8001144 <avoidance_update+0x17c>)
 800103a:	fb82 1203 	smull	r1, r2, r2, r3
 800103e:	10d2      	asrs	r2, r2, #3
 8001040:	17db      	asrs	r3, r3, #31
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104c:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <avoidance_update+0x180>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
		avoidanceState = PATH_CROWDED;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <avoidance_update+0x170>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
	}

	if (avoidanceState == PATH_CROWDED && distance > LIDAR_MAX_DISTANCE) {
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <avoidance_update+0x170>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d105      	bne.n	800106c <avoidance_update+0xa4>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b3c      	cmp	r3, #60	; 0x3c
 8001064:	dd02      	ble.n	800106c <avoidance_update+0xa4>
		avoidanceState = PATH_CLEAR;
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <avoidance_update+0x170>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
	}

	if (avoidanceState == PATH_OBSTRUCTED && distance >= LIDAR_THRESHOLD) {
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <avoidance_update+0x170>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d108      	bne.n	8001086 <avoidance_update+0xbe>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b27      	cmp	r3, #39	; 0x27
 8001078:	dd05      	ble.n	8001086 <avoidance_update+0xbe>
		avoidanceState = PATH_CLEAR;
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <avoidance_update+0x170>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
		printf("Path cleared.\r\n");
 8001080:	4832      	ldr	r0, [pc, #200]	; (800114c <avoidance_update+0x184>)
 8001082:	f007 fefd 	bl	8008e80 <puts>
	}

	if (avoidanceState == PATH_OBSTRUCTED && distance < LIDAR_THRESHOLD) {
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <avoidance_update+0x170>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d125      	bne.n	80010da <avoidance_update+0x112>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b27      	cmp	r3, #39	; 0x27
 8001092:	dc22      	bgt.n	80010da <avoidance_update+0x112>
		avoidanceState = BACKTRACKING;
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <avoidance_update+0x170>)
 8001096:	2203      	movs	r2, #3
 8001098:	701a      	strb	r2, [r3, #0]
		printf("Backtracking...\r\n");
 800109a:	482d      	ldr	r0, [pc, #180]	; (8001150 <avoidance_update+0x188>)
 800109c:	f007 fef0 	bl	8008e80 <puts>
		backtrackingAim = t - 0.2;
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fa71 	bl	8000588 <__aeabi_f2d>
 80010a6:	a320      	add	r3, pc, #128	; (adr r3, 8001128 <avoidance_update+0x160>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff f90c 	bl	80002c8 <__aeabi_dsub>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fd96 	bl	8000be8 <__aeabi_d2f>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <avoidance_update+0x18c>)
 80010c0:	6013      	str	r3, [r2, #0]
		if (backtrackingAim < 0) {
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <avoidance_update+0x18c>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	d503      	bpl.n	80010da <avoidance_update+0x112>
			backtrackingAim = 0;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <avoidance_update+0x18c>)
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
		}
	}

	if (avoidanceState == BACKTRACKING && t <= backtrackingAim + 0.01) {
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <avoidance_update+0x170>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d11e      	bne.n	8001120 <avoidance_update+0x158>
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fa50 	bl	8000588 <__aeabi_f2d>
 80010e8:	4604      	mov	r4, r0
 80010ea:	460d      	mov	r5, r1
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <avoidance_update+0x18c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa49 	bl	8000588 <__aeabi_f2d>
 80010f6:	a30e      	add	r3, pc, #56	; (adr r3, 8001130 <avoidance_update+0x168>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff f8e6 	bl	80002cc <__adddf3>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4620      	mov	r0, r4
 8001106:	4629      	mov	r1, r5
 8001108:	f7ff fd12 	bl	8000b30 <__aeabi_dcmple>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d100      	bne.n	8001114 <avoidance_update+0x14c>
		avoidanceState = PATH_CLEAR;
		printf("Trying again...\r\n");
	}
}
 8001112:	e005      	b.n	8001120 <avoidance_update+0x158>
		avoidanceState = PATH_CLEAR;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <avoidance_update+0x170>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
		printf("Trying again...\r\n");
 800111a:	480f      	ldr	r0, [pc, #60]	; (8001158 <avoidance_update+0x190>)
 800111c:	f007 feb0 	bl	8008e80 <puts>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bdb0      	pop	{r4, r5, r7, pc}
 8001128:	9999999a 	.word	0x9999999a
 800112c:	3fc99999 	.word	0x3fc99999
 8001130:	47ae147b 	.word	0x47ae147b
 8001134:	3f847ae1 	.word	0x3f847ae1
 8001138:	200001f8 	.word	0x200001f8
 800113c:	0800c860 	.word	0x0800c860
 8001140:	00000000 	.word	0x00000000
 8001144:	66666667 	.word	0x66666667
 8001148:	20000204 	.word	0x20000204
 800114c:	0800c884 	.word	0x0800c884
 8001150:	0800c894 	.word	0x0800c894
 8001154:	20000200 	.word	0x20000200
 8001158:	0800c8a8 	.word	0x0800c8a8

0800115c <bezier_new>:
#include "bezier.h"


Bezier* bezier_new(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001166:	edc7 0a08 	vstr	s1, [r7, #32]
 800116a:	ed87 1a07 	vstr	s2, [r7, #28]
 800116e:	edc7 1a06 	vstr	s3, [r7, #24]
 8001172:	ed87 2a05 	vstr	s4, [r7, #20]
 8001176:	edc7 2a04 	vstr	s5, [r7, #16]
 800117a:	ed87 3a03 	vstr	s6, [r7, #12]
 800117e:	edc7 3a02 	vstr	s7, [r7, #8]
 8001182:	6078      	str	r0, [r7, #4]
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8001184:	2028      	movs	r0, #40	; 0x28
 8001186:	f007 f885 	bl	8008294 <malloc>
 800118a:	4603      	mov	r3, r0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    bezier_set(b, x1, y1, x2, y2, x3, y3, x4, y4, lutLength);
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	edd7 3a02 	vldr	s7, [r7, #8]
 8001194:	ed97 3a03 	vldr	s6, [r7, #12]
 8001198:	edd7 2a04 	vldr	s5, [r7, #16]
 800119c:	ed97 2a05 	vldr	s4, [r7, #20]
 80011a0:	edd7 1a06 	vldr	s3, [r7, #24]
 80011a4:	ed97 1a07 	vldr	s2, [r7, #28]
 80011a8:	edd7 0a08 	vldr	s1, [r7, #32]
 80011ac:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80011b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011b2:	f000 f812 	bl	80011da <bezier_set>
    return b;
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3730      	adds	r7, #48	; 0x30
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <bezier_newEmpty>:


Bezier* bezier_newEmpty() {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 80011c6:	2028      	movs	r0, #40	; 0x28
 80011c8:	f007 f864 	bl	8008294 <malloc>
 80011cc:	4603      	mov	r3, r0
 80011ce:	607b      	str	r3, [r7, #4]
    return b;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <bezier_set>:


void bezier_set(Bezier* b, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 80011da:	b590      	push	{r4, r7, lr}
 80011dc:	b08f      	sub	sp, #60	; 0x3c
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6278      	str	r0, [r7, #36]	; 0x24
 80011e2:	ed87 0a08 	vstr	s0, [r7, #32]
 80011e6:	edc7 0a07 	vstr	s1, [r7, #28]
 80011ea:	ed87 1a06 	vstr	s2, [r7, #24]
 80011ee:	edc7 1a05 	vstr	s3, [r7, #20]
 80011f2:	ed87 2a04 	vstr	s4, [r7, #16]
 80011f6:	edc7 2a03 	vstr	s5, [r7, #12]
 80011fa:	ed87 3a02 	vstr	s6, [r7, #8]
 80011fe:	edc7 3a01 	vstr	s7, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
    b->p1 = vector2_new(x1, y1);
 8001204:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001206:	edd7 0a07 	vldr	s1, [r7, #28]
 800120a:	ed97 0a08 	vldr	s0, [r7, #32]
 800120e:	f001 ff09 	bl	8003024 <vector2_new>
 8001212:	eeb0 7a40 	vmov.f32	s14, s0
 8001216:	eef0 7a60 	vmov.f32	s15, s1
 800121a:	ed84 7a00 	vstr	s14, [r4]
 800121e:	edc4 7a01 	vstr	s15, [r4, #4]
    b->p2 = vector2_new(x2, y2);
 8001222:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001224:	edd7 0a05 	vldr	s1, [r7, #20]
 8001228:	ed97 0a06 	vldr	s0, [r7, #24]
 800122c:	f001 fefa 	bl	8003024 <vector2_new>
 8001230:	eeb0 7a40 	vmov.f32	s14, s0
 8001234:	eef0 7a60 	vmov.f32	s15, s1
 8001238:	ed84 7a02 	vstr	s14, [r4, #8]
 800123c:	edc4 7a03 	vstr	s15, [r4, #12]
    b->p3 = vector2_new(x3, y3);
 8001240:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001242:	edd7 0a03 	vldr	s1, [r7, #12]
 8001246:	ed97 0a04 	vldr	s0, [r7, #16]
 800124a:	f001 feeb 	bl	8003024 <vector2_new>
 800124e:	eeb0 7a40 	vmov.f32	s14, s0
 8001252:	eef0 7a60 	vmov.f32	s15, s1
 8001256:	ed84 7a04 	vstr	s14, [r4, #16]
 800125a:	edc4 7a05 	vstr	s15, [r4, #20]
    b->p4 = vector2_new(x4, y4);
 800125e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001260:	edd7 0a01 	vldr	s1, [r7, #4]
 8001264:	ed97 0a02 	vldr	s0, [r7, #8]
 8001268:	f001 fedc 	bl	8003024 <vector2_new>
 800126c:	eeb0 7a40 	vmov.f32	s14, s0
 8001270:	eef0 7a60 	vmov.f32	s15, s1
 8001274:	ed84 7a06 	vstr	s14, [r4, #24]
 8001278:	edc4 7a07 	vstr	s15, [r4, #28]
    b->lutLength = lutLength;
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
    b->lut = (Vector2*) malloc(sizeof(Vector2) * b->lutLength);
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4618      	mov	r0, r3
 800128a:	f007 f803 	bl	8008294 <malloc>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	621a      	str	r2, [r3, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
 800129a:	e02b      	b.n	80012f4 <bezier_set+0x11a>
        float t = (float) i/(b->lutLength-1);
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	3b01      	subs	r3, #1
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Vector2 eval = bezier_eval(b, t);
 80012bc:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80012c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012c2:	f000 f821 	bl	8001308 <bezier_eval>
 80012c6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ca:	eef0 7a60 	vmov.f32	s15, s1
 80012ce:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80012d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        b->lut[i] = eval;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	6a1a      	ldr	r2, [r3, #32]
 80012da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ea:	e882 0003 	stmia.w	r2, {r0, r1}
    for (int i=0; i<b->lutLength; i++) {
 80012ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f0:	3301      	adds	r3, #1
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbce      	blt.n	800129c <bezier_set+0xc2>
    }
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	373c      	adds	r7, #60	; 0x3c
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}

08001308 <bezier_eval>:
    vector2_display(b->p4);
    printf("}\r\n");
}


Vector2 bezier_eval(Bezier* b, float t) {
 8001308:	b480      	push	{r7}
 800130a:	b08d      	sub	sp, #52	; 0x34
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8001314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001318:	edd7 7a02 	vldr	s15, [r7, #8]
 800131c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001320:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = b->p1.x * u*u*u + b->p2.x * 3*u*u*t + b->p3.x * 3*u*t*t + b->p4.x * t*t*t;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001332:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	edd3 7a02 	vldr	s15, [r3, #8]
 8001348:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800134c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001350:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001354:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001358:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800135c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001360:	edd7 7a02 	vldr	s15, [r7, #8]
 8001364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001368:	ee37 7a27 	vadd.f32	s14, s14, s15
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001372:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001376:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800137a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800137e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001382:	edd7 7a02 	vldr	s15, [r7, #8]
 8001386:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800138a:	edd7 7a02 	vldr	s15, [r7, #8]
 800138e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	edd3 6a06 	vldr	s13, [r3, #24]
 800139c:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = b->p1.y * u*u*u + b->p2.y * 3*u*u*t + b->p3.y * 3*u*t*t + b->p4.y * t*t*t;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	ed93 7a01 	vldr	s14, [r3, #4]
 80013c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80013e0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80013e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	edd3 7a05 	vldr	s15, [r3, #20]
 800140a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800140e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001412:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001416:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800141a:	edd7 7a02 	vldr	s15, [r7, #8]
 800141e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001422:	edd7 7a02 	vldr	s15, [r7, #8]
 8001426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	edd3 6a07 	vldr	s13, [r3, #28]
 8001434:	edd7 7a02 	vldr	s15, [r7, #8]
 8001438:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800143c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001440:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001444:	edd7 7a02 	vldr	s15, [r7, #8]
 8001448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	61bb      	str	r3, [r7, #24]
    return eval;
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	f107 0214 	add.w	r2, r7, #20
 8001464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001468:	e883 0003 	stmia.w	r3, {r0, r1}
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	ee07 2a10 	vmov	s14, r2
 8001474:	ee07 3a90 	vmov	s15, r3
}
 8001478:	eeb0 0a47 	vmov.f32	s0, s14
 800147c:	eef0 0a67 	vmov.f32	s1, s15
 8001480:	3734      	adds	r7, #52	; 0x34
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <bezier_deriv1>:
    int i = round(t*(b->lutLength-1));
    return b->lut[i];
}


Vector2 bezier_deriv1(Bezier* b, float t) {
 800148a:	b480      	push	{r7}
 800148c:	b08d      	sub	sp, #52	; 0x34
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8001496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800149a:	edd7 7a02 	vldr	s15, [r7, #8]
 800149e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p2.x - b->p1.x) * 3*u*u + (b->p3.x - b->p2.x) * 6*u*t + (b->p4.x - b->p3.x) * 3*t*t;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	edd3 6a04 	vldr	s13, [r3, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014de:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80014e2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80014e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	edd3 6a06 	vldr	s13, [r3, #24]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edd3 7a04 	vldr	s15, [r3, #16]
 8001506:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800150a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800150e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001512:	edd7 7a02 	vldr	s15, [r7, #8]
 8001516:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800151a:	edd7 7a02 	vldr	s15, [r7, #8]
 800151e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001526:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p2.y - b->p1.y) * 3*u*u + (b->p3.y - b->p2.y) * 6*u*t + (b->p4.y - b->p3.y) * 3*t*t;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	edd3 7a01 	vldr	s15, [r3, #4]
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800153e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001542:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800154e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edd3 6a05 	vldr	s13, [r3, #20]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	edd3 7a03 	vldr	s15, [r3, #12]
 800155e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001562:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001566:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800156a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800156e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001572:	edd7 7a02 	vldr	s15, [r7, #8]
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edd3 6a07 	vldr	s13, [r3, #28]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	edd3 7a05 	vldr	s15, [r3, #20]
 800158a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800158e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001592:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001596:	edd7 7a02 	vldr	s15, [r7, #8]
 800159a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800159e:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	61bb      	str	r3, [r7, #24]
    return eval;
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	f107 0214 	add.w	r2, r7, #20
 80015be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	ee07 2a10 	vmov	s14, r2
 80015ce:	ee07 3a90 	vmov	s15, r3
}
 80015d2:	eeb0 0a47 	vmov.f32	s0, s14
 80015d6:	eef0 0a67 	vmov.f32	s1, s15
 80015da:	3734      	adds	r7, #52	; 0x34
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <bezier_deriv2>:


Vector2 bezier_deriv2(Bezier* b, float t) {
 80015e4:	b480      	push	{r7}
 80015e6:	b08d      	sub	sp, #52	; 0x34
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 80015f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p3.x - 2*b->p2.x + b->p1.x) * 6*u + (b->p4.x - 2*b->p3.x + b->p2.x) * 6*t;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	ed93 7a04 	vldr	s14, [r3, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	edd3 7a02 	vldr	s15, [r3, #8]
 800160c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001622:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001626:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800162a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	edd3 6a06 	vldr	s13, [r3, #24]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	edd3 7a04 	vldr	s15, [r3, #16]
 800163a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800163e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	edd3 7a02 	vldr	s15, [r3, #8]
 8001648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800164c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001650:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001654:	edd7 7a02 	vldr	s15, [r7, #8]
 8001658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001660:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p3.y - 2*b->p2.y + b->p1.y) * 6*u + (b->p4.y - 2*b->p3.y + b->p2.y) * 6*t;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	ed93 7a05 	vldr	s14, [r3, #20]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001670:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001674:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	edd3 7a01 	vldr	s15, [r3, #4]
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001686:	ee27 7a87 	vmul.f32	s14, s15, s14
 800168a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800168e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	edd3 6a07 	vldr	s13, [r3, #28]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	edd3 7a05 	vldr	s15, [r3, #20]
 800169e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016b0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80016b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	61bb      	str	r3, [r7, #24]
    return eval;
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	f107 0214 	add.w	r2, r7, #20
 80016d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	ee07 2a10 	vmov	s14, r2
 80016e8:	ee07 3a90 	vmov	s15, r3
}
 80016ec:	eeb0 0a47 	vmov.f32	s0, s14
 80016f0:	eef0 0a67 	vmov.f32	s1, s15
 80016f4:	3734      	adds	r7, #52	; 0x34
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <bezier_curvature>:


float bezier_curvature(Bezier* b, float t) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	ed87 0a00 	vstr	s0, [r7]
    Vector2 diff1 = bezier_deriv1(b, t); // B'(t)
 800170c:	ed97 0a00 	vldr	s0, [r7]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff feba 	bl	800148a <bezier_deriv1>
 8001716:	eeb0 7a40 	vmov.f32	s14, s0
 800171a:	eef0 7a60 	vmov.f32	s15, s1
 800171e:	ed87 7a04 	vstr	s14, [r7, #16]
 8001722:	edc7 7a05 	vstr	s15, [r7, #20]
    Vector2 diff2 = bezier_deriv2(b, t); // B''(t)
 8001726:	ed97 0a00 	vldr	s0, [r7]
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff5a 	bl	80015e4 <bezier_deriv2>
 8001730:	eeb0 7a40 	vmov.f32	s14, s0
 8001734:	eef0 7a60 	vmov.f32	s15, s1
 8001738:	ed87 7a02 	vstr	s14, [r7, #8]
 800173c:	edc7 7a03 	vstr	s15, [r7, #12]
    float num = vector2_cross(diff1, diff2);
 8001740:	ed97 6a02 	vldr	s12, [r7, #8]
 8001744:	edd7 6a03 	vldr	s13, [r7, #12]
 8001748:	ed97 7a04 	vldr	s14, [r7, #16]
 800174c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001750:	eeb0 1a46 	vmov.f32	s2, s12
 8001754:	eef0 1a66 	vmov.f32	s3, s13
 8001758:	eeb0 0a47 	vmov.f32	s0, s14
 800175c:	eef0 0a67 	vmov.f32	s1, s15
 8001760:	f001 fd50 	bl	8003204 <vector2_cross>
 8001764:	ed87 0a07 	vstr	s0, [r7, #28]
    float den = vector2_norm(diff1);
 8001768:	ed97 7a04 	vldr	s14, [r7, #16]
 800176c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001770:	eeb0 0a47 	vmov.f32	s0, s14
 8001774:	eef0 0a67 	vmov.f32	s1, s15
 8001778:	f001 fc76 	bl	8003068 <vector2_norm>
 800177c:	ed87 0a06 	vstr	s0, [r7, #24]
    if (den == 0)
 8001780:	edd7 7a06 	vldr	s15, [r7, #24]
 8001784:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	d102      	bne.n	8001794 <bezier_curvature+0x94>
        return INFINITY;
 800178e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80017bc <bezier_curvature+0xbc>
 8001792:	e00b      	b.n	80017ac <bezier_curvature+0xac>
    return num/(den*den*den);
 8001794:	edd7 7a06 	vldr	s15, [r7, #24]
 8001798:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800179c:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80017ac:	eef0 7a66 	vmov.f32	s15, s13
 80017b0:	eeb0 0a67 	vmov.f32	s0, s15
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	7f800000 	.word	0x7f800000

080017c0 <bezier_projectLut>:


float bezier_projectLut(Bezier* b, Vector2 p) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	eeb0 7a40 	vmov.f32	s14, s0
 80017cc:	eef0 7a60 	vmov.f32	s15, s1
 80017d0:	ed87 7a01 	vstr	s14, [r7, #4]
 80017d4:	edc7 7a02 	vstr	s15, [r7, #8]
    float minDist = INFINITY;
 80017d8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    float minIndex = 0;
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	e02d      	b.n	8001846 <bezier_projectLut+0x86>
        float dist = vector2_dist2(p, b->lut[i]);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	ed93 6a00 	vldr	s12, [r3]
 80017f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80017fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001800:	edd7 7a02 	vldr	s15, [r7, #8]
 8001804:	eeb0 1a46 	vmov.f32	s2, s12
 8001808:	eef0 1a66 	vmov.f32	s3, s13
 800180c:	eeb0 0a47 	vmov.f32	s0, s14
 8001810:	eef0 0a67 	vmov.f32	s1, s15
 8001814:	f001 fc84 	bl	8003120 <vector2_dist2>
 8001818:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < minDist) {
 800181c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001820:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001824:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	d508      	bpl.n	8001840 <bezier_projectLut+0x80>
            minDist = dist;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
            minIndex = i;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbcc      	blt.n	80017ea <bezier_projectLut+0x2a>
        }
    }
    float tLut = (float) minIndex/(b->lutLength-1);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	3b01      	subs	r3, #1
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800185e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001866:	edc7 7a06 	vstr	s15, [r7, #24]
    return tLut;
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	ee07 3a90 	vmov	s15, r3
}
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <bezier_project>:


float bezier_project(Bezier* b, Vector2 p, float precision) {
 800187c:	b580      	push	{r7, lr}
 800187e:	ed2d 8b02 	vpush	{d8}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	eeb0 7a40 	vmov.f32	s14, s0
 800188c:	eef0 7a60 	vmov.f32	s15, s1
 8001890:	ed87 1a00 	vstr	s2, [r7]
 8001894:	ed87 7a01 	vstr	s14, [r7, #4]
 8001898:	edc7 7a02 	vstr	s15, [r7, #8]
    float tLut = bezier_projectLut(b, p);
 800189c:	ed97 7a01 	vldr	s14, [r7, #4]
 80018a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a4:	eeb0 0a47 	vmov.f32	s0, s14
 80018a8:	eef0 0a67 	vmov.f32	s1, s15
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff ff87 	bl	80017c0 <bezier_projectLut>
 80018b2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    float halfWidth = 1.0/(b->lutLength-1);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	3b01      	subs	r3, #1
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe51 	bl	8000564 <__aeabi_i2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	495b      	ldr	r1, [pc, #364]	; (8001a38 <bezier_project+0x1bc>)
 80018cc:	f7fe ffde 	bl	800088c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f986 	bl	8000be8 <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	623b      	str	r3, [r7, #32]

    float t_a = tLut - halfWidth;
 80018e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80018e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t_a = (t_a<0)?0:t_a;
 80018f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d502      	bpl.n	8001904 <bezier_project+0x88>
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e000      	b.n	8001906 <bezier_project+0x8a>
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c

    float t_b = tLut + halfWidth;
 8001908:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800190c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t_b = (t_b>1)?1:t_b;
 8001918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800191c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	dd02      	ble.n	8001930 <bezier_project+0xb4>
 800192a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800192e:	e000      	b.n	8001932 <bezier_project+0xb6>
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28

    Vector2 p_a, p_b;

    while (t_b - t_a > precision) {
 8001934:	e05f      	b.n	80019f6 <bezier_project+0x17a>
        p_a = bezier_eval(b, t_a);
 8001936:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fce4 	bl	8001308 <bezier_eval>
 8001940:	eeb0 7a40 	vmov.f32	s14, s0
 8001944:	eef0 7a60 	vmov.f32	s15, s1
 8001948:	ed87 7a06 	vstr	s14, [r7, #24]
 800194c:	edc7 7a07 	vstr	s15, [r7, #28]
        p_b = bezier_eval(b, t_b);
 8001950:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fcd7 	bl	8001308 <bezier_eval>
 800195a:	eeb0 7a40 	vmov.f32	s14, s0
 800195e:	eef0 7a60 	vmov.f32	s15, s1
 8001962:	ed87 7a04 	vstr	s14, [r7, #16]
 8001966:	edc7 7a05 	vstr	s15, [r7, #20]
        if (vector2_dist2(p, p_a) < vector2_dist2(p, p_b))
 800196a:	ed97 6a06 	vldr	s12, [r7, #24]
 800196e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001972:	ed97 7a01 	vldr	s14, [r7, #4]
 8001976:	edd7 7a02 	vldr	s15, [r7, #8]
 800197a:	eeb0 1a46 	vmov.f32	s2, s12
 800197e:	eef0 1a66 	vmov.f32	s3, s13
 8001982:	eeb0 0a47 	vmov.f32	s0, s14
 8001986:	eef0 0a67 	vmov.f32	s1, s15
 800198a:	f001 fbc9 	bl	8003120 <vector2_dist2>
 800198e:	eeb0 8a40 	vmov.f32	s16, s0
 8001992:	ed97 6a04 	vldr	s12, [r7, #16]
 8001996:	edd7 6a05 	vldr	s13, [r7, #20]
 800199a:	ed97 7a01 	vldr	s14, [r7, #4]
 800199e:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a2:	eeb0 1a46 	vmov.f32	s2, s12
 80019a6:	eef0 1a66 	vmov.f32	s3, s13
 80019aa:	eeb0 0a47 	vmov.f32	s0, s14
 80019ae:	eef0 0a67 	vmov.f32	s1, s15
 80019b2:	f001 fbb5 	bl	8003120 <vector2_dist2>
 80019b6:	eef0 7a40 	vmov.f32	s15, s0
 80019ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	d50c      	bpl.n	80019de <bezier_project+0x162>
            t_b = (t_a + t_b)/2;
 80019c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80019c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80019dc:	e00b      	b.n	80019f6 <bezier_project+0x17a>
        else
            t_a = (t_a + t_b)/2;
 80019de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80019e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while (t_b - t_a > precision) {
 80019f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a02:	ed97 7a00 	vldr	s14, [r7]
 8001a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	d492      	bmi.n	8001936 <bezier_project+0xba>
    }
    return (t_a + t_b)/2;
 8001a10:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a24:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	3730      	adds	r7, #48	; 0x30
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	ecbd 8b02 	vpop	{d8}
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	3ff00000 	.word	0x3ff00000

08001a3c <drv8825_initialize>:


void drv8825_initialize(Stepper *stepper, uint16_t enablePin,
                  GPIO_TypeDef* enableGPIO, uint16_t dirPin, 
                  GPIO_TypeDef *dirGPIO, TIM_HandleTypeDef *timer, 
                  uint8_t channel) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	461a      	mov	r2, r3
 8001a48:	460b      	mov	r3, r1
 8001a4a:	817b      	strh	r3, [r7, #10]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	813b      	strh	r3, [r7, #8]
	stepper->enablePin = enablePin;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	897a      	ldrh	r2, [r7, #10]
 8001a54:	801a      	strh	r2, [r3, #0]
	stepper->enableGPIO = enableGPIO;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	605a      	str	r2, [r3, #4]

	stepper->dirPin = dirPin;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	893a      	ldrh	r2, [r7, #8]
 8001a60:	811a      	strh	r2, [r3, #8]
	stepper->dirGPIO = dirGPIO;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	60da      	str	r2, [r3, #12]

	stepper->timer = timer;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	611a      	str	r2, [r3, #16]
	stepper->channel = channel;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a74:	751a      	strb	r2, [r3, #20]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <drv8825_setDirection>:


void drv8825_setDirection(Stepper *stepper, StepperDirection direction) {
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(stepper->dirGPIO, stepper->dirPin, (uint8_t) direction);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68d8      	ldr	r0, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	891b      	ldrh	r3, [r3, #8]
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f003 fb43 	bl	8005124 <HAL_GPIO_WritePin>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <drv8825_enable>:


void drv8825_enable(Stepper *stepper) {
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6858      	ldr	r0, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f003 fb33 	bl	8005124 <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin, 
		(uint8_t) ACTIVE
	);
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <drv8825_disable>:


void drv8825_disable(Stepper *stepper) {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6858      	ldr	r0, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f003 fb23 	bl	8005124 <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin,
		(uint8_t) PASSIVE
	);
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <drv8825_setPWMFrequency>:


void drv8825_setPWMFrequency(Stepper* stepper, uint16_t frequency) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if (frequency != 0) {
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <drv8825_setPWMFrequency+0x2a>
		stepper->timer->Init.Prescaler = 179;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	22b3      	movs	r2, #179	; 0xb3
 8001b00:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = (uint32_t)1000000/frequency;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	4945      	ldr	r1, [pc, #276]	; (8001c20 <drv8825_setPWMFrequency+0x138>)
 8001b0a:	fbb1 f2f2 	udiv	r2, r1, r2
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	e009      	b.n	8001b26 <drv8825_setPWMFrequency+0x3e>
	} else {
		stepper->timer->Init.Prescaler = 0xFFFE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b1a:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = 0xFFFE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b24:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(stepper->timer) != HAL_OK) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 f966 	bl	8005dfc <HAL_TIM_Base_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <drv8825_setPWMFrequency+0x52>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001b36:	f001 ff0f 	bl	8003958 <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(stepper->timer) != HAL_OK) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fa84 	bl	800604c <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <drv8825_setPWMFrequency+0x66>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001b4a:	f001 ff05 	bl	8003958 <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(stepper->timer, stepper->channel);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7d1b      	ldrb	r3, [r3, #20]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f004 fad1 	bl	8006100 <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch (stepper->channel) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7d1b      	ldrb	r3, [r3, #20]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d858      	bhi.n	8001c18 <drv8825_setPWMFrequency+0x130>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <drv8825_setPWMFrequency+0x84>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001ba1 	.word	0x08001ba1
 8001b70:	08001c19 	.word	0x08001c19
 8001b74:	08001c19 	.word	0x08001c19
 8001b78:	08001c19 	.word	0x08001c19
 8001b7c:	08001bbf 	.word	0x08001bbf
 8001b80:	08001c19 	.word	0x08001c19
 8001b84:	08001c19 	.word	0x08001c19
 8001b88:	08001c19 	.word	0x08001c19
 8001b8c:	08001bdd 	.word	0x08001bdd
 8001b90:	08001c19 	.word	0x08001c19
 8001b94:	08001c19 	.word	0x08001c19
 8001b98:	08001c19 	.word	0x08001c19
 8001b9c:	08001bfb 	.word	0x08001bfb
		case (TIM_CHANNEL_1):
			stepper->timer->Instance->CCR1 = (50*stepper->timer->Init.Period)/100;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2232      	movs	r2, #50	; 0x32
 8001ba8:	fb03 f202 	mul.w	r2, r3, r2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	491c      	ldr	r1, [pc, #112]	; (8001c24 <drv8825_setPWMFrequency+0x13c>)
 8001bb4:	fba1 1202 	umull	r1, r2, r1, r2
 8001bb8:	0952      	lsrs	r2, r2, #5
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001bbc:	e02c      	b.n	8001c18 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_2):
			stepper->timer->Instance->CCR2 = (50*stepper->timer->Init.Period)/100;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2232      	movs	r2, #50	; 0x32
 8001bc6:	fb03 f202 	mul.w	r2, r3, r2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4914      	ldr	r1, [pc, #80]	; (8001c24 <drv8825_setPWMFrequency+0x13c>)
 8001bd2:	fba1 1202 	umull	r1, r2, r1, r2
 8001bd6:	0952      	lsrs	r2, r2, #5
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001bda:	e01d      	b.n	8001c18 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_3):
			stepper->timer->Instance->CCR3 = (50*stepper->timer->Init.Period)/100;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2232      	movs	r2, #50	; 0x32
 8001be4:	fb03 f202 	mul.w	r2, r3, r2
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	490d      	ldr	r1, [pc, #52]	; (8001c24 <drv8825_setPWMFrequency+0x13c>)
 8001bf0:	fba1 1202 	umull	r1, r2, r1, r2
 8001bf4:	0952      	lsrs	r2, r2, #5
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001bf8:	e00e      	b.n	8001c18 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_4):
			stepper->timer->Instance->CCR4 = (50*stepper->timer->Init.Period)/100;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2232      	movs	r2, #50	; 0x32
 8001c02:	fb03 f202 	mul.w	r2, r3, r2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4905      	ldr	r1, [pc, #20]	; (8001c24 <drv8825_setPWMFrequency+0x13c>)
 8001c0e:	fba1 1202 	umull	r1, r2, r1, r2
 8001c12:	0952      	lsrs	r2, r2, #5
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001c16:	bf00      	nop
	}
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	000f4240 	.word	0x000f4240
 8001c24:	51eb851f 	.word	0x51eb851f

08001c28 <drv8825_setRotationSpeed>:


void drv8825_setRotationSpeed(Stepper *stepper, float rpm) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	ed87 0a00 	vstr	s0, [r7]
	uint16_t f = (rpm / 60) * STEPS_PER_REV * MICROSTEPS;
 8001c34:	ed97 7a00 	vldr	s14, [r7]
 8001c38:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001c6c <drv8825_setRotationSpeed+0x44>
 8001c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c40:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c70 <drv8825_setRotationSpeed+0x48>
 8001c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c48:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001c74 <drv8825_setRotationSpeed+0x4c>
 8001c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c54:	ee17 3a90 	vmov	r3, s15
 8001c58:	81fb      	strh	r3, [r7, #14]
	drv8825_setPWMFrequency(stepper, f);
 8001c5a:	89fb      	ldrh	r3, [r7, #14]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff42 	bl	8001ae8 <drv8825_setPWMFrequency>
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	42700000 	.word	0x42700000
 8001c70:	43480000 	.word	0x43480000
 8001c74:	42000000 	.word	0x42000000

08001c78 <lidar_initialize>:
#include "lidar.h"

int lidar_timeSinceData[16];
uint8_t lidar_distances[16];

void lidar_initialize() {
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
	for (int i=0; i<16; i++) {
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e00d      	b.n	8001ca0 <lidar_initialize+0x28>
		lidar_distances[i] = 255;
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <lidar_initialize+0x3c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	22ff      	movs	r2, #255	; 0xff
 8001c8c:	701a      	strb	r2, [r3, #0]
		lidar_timeSinceData[i] = LIDAR_TIMEOUT;
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <lidar_initialize+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<16; i++) {
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	ddee      	ble.n	8001c84 <lidar_initialize+0xc>
	}
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	20000248 	.word	0x20000248
 8001cb8:	20000208 	.word	0x20000208

08001cbc <lidar_updateDistance>:

void lidar_updateDistance(int index, uint8_t dist) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
	lidar_distances[index] = dist;
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <lidar_updateDistance+0x2c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	701a      	strb	r2, [r3, #0]
	lidar_timeSinceData[index] = 0;
 8001cd2:	4a06      	ldr	r2, [pc, #24]	; (8001cec <lidar_updateDistance+0x30>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//printf("%d -> %dcm\r\n", index, dist);
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000248 	.word	0x20000248
 8001cec:	20000208 	.word	0x20000208

08001cf0 <lidar_getDistance>:

int lidar_getDistance(Direction dir) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	int minDist = 1000;
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	617b      	str	r3, [r7, #20]
	if (dir == FORWARD) {
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d11d      	bne.n	8001d44 <lidar_getDistance+0x54>
		for (int i=4; i<=8; i++) {
 8001d08:	2304      	movs	r3, #4
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	e016      	b.n	8001d3c <lidar_getDistance+0x4c>
			if (lidar_timeSinceData[i] <= LIDAR_TIMEOUT && lidar_distances[i] < minDist) {
 8001d0e:	4a2a      	ldr	r2, [pc, #168]	; (8001db8 <lidar_getDistance+0xc8>)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d1a:	dc0c      	bgt.n	8001d36 <lidar_getDistance+0x46>
 8001d1c:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <lidar_getDistance+0xcc>)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	dd04      	ble.n	8001d36 <lidar_getDistance+0x46>
				minDist = lidar_distances[i];
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <lidar_getDistance+0xcc>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	617b      	str	r3, [r7, #20]
		for (int i=4; i<=8; i++) {
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	dde5      	ble.n	8001d0e <lidar_getDistance+0x1e>
 8001d42:	e032      	b.n	8001daa <lidar_getDistance+0xba>
			}
		}
	} else {
		int i=0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
		if (lidar_timeSinceData[i] <= LIDAR_TIMEOUT && lidar_distances[i] < minDist) {
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <lidar_getDistance+0xc8>)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d54:	dc0c      	bgt.n	8001d70 <lidar_getDistance+0x80>
 8001d56:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <lidar_getDistance+0xcc>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	4293      	cmp	r3, r2
 8001d64:	dd04      	ble.n	8001d70 <lidar_getDistance+0x80>
			minDist = lidar_distances[i];
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <lidar_getDistance+0xcc>)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]
		}
		for (i=12; i<=15; i++) {
 8001d70:	230c      	movs	r3, #12
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e016      	b.n	8001da4 <lidar_getDistance+0xb4>
			if (lidar_timeSinceData[i] <= LIDAR_TIMEOUT && lidar_distances[i] < minDist) {
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <lidar_getDistance+0xc8>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d82:	dc0c      	bgt.n	8001d9e <lidar_getDistance+0xae>
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <lidar_getDistance+0xcc>)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	dd04      	ble.n	8001d9e <lidar_getDistance+0xae>
				minDist = lidar_distances[i];
 8001d94:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <lidar_getDistance+0xcc>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	617b      	str	r3, [r7, #20]
		for (i=12; i<=15; i++) {
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	dde5      	ble.n	8001d76 <lidar_getDistance+0x86>
			}
		}
	}
	return minDist;
 8001daa:	697b      	ldr	r3, [r7, #20]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	20000208 	.word	0x20000208
 8001dbc:	20000248 	.word	0x20000248

08001dc0 <lidar_incrementTime>:
		return false;
	}
	return true;
}

void lidar_incrementTime(int ms) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<16; i++) {
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e013      	b.n	8001df6 <lidar_incrementTime+0x36>
		if (lidar_timeSinceData[i] <= LIDAR_TIMEOUT) {
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <lidar_incrementTime+0x4c>)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dda:	dc09      	bgt.n	8001df0 <lidar_incrementTime+0x30>
			lidar_timeSinceData[i] += ms;
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <lidar_incrementTime+0x4c>)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	441a      	add	r2, r3
 8001de8:	4908      	ldr	r1, [pc, #32]	; (8001e0c <lidar_incrementTime+0x4c>)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<16; i++) {
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	dde8      	ble.n	8001dce <lidar_incrementTime+0xe>
		}
	}
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000208 	.word	0x20000208

08001e10 <getRightEncoderCount>:
#include "odometry.h"


int16_t getRightEncoderCount() {
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
	int16_t count = (int16_t) R_ENCODER.Instance->CNT;
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <getRightEncoderCount+0x28>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	80fb      	strh	r3, [r7, #6]
	R_ENCODER.Instance->CNT = 0;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <getRightEncoderCount+0x28>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8001e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000028c 	.word	0x2000028c

08001e3c <getLeftEncoderCount>:


int16_t getLeftEncoderCount() {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
	int16_t count = -1 * (int16_t) L_ENCODER.Instance->CNT;
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <getLeftEncoderCount+0x2c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	80fb      	strh	r3, [r7, #6]
	L_ENCODER.Instance->CNT = 0;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <getLeftEncoderCount+0x2c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8001e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	2000031c 	.word	0x2000031c
 8001e6c:	00000000 	.word	0x00000000

08001e70 <odometry_updatePosition>:

void odometry_updatePosition() {
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
	float coeff = M_TWOPI * ODOMETRY_RADIUS / TICKS_PER_REV;
 8001e76:	4baa      	ldr	r3, [pc, #680]	; (8002120 <odometry_updatePosition+0x2b0>)
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	float leftMov = getLeftEncoderCount() * coeff;
 8001e7a:	f7ff ffdf 	bl	8001e3c <getLeftEncoderCount>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e88:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float rightMov = getRightEncoderCount() * coeff;
 8001e94:	f7ff ffbc 	bl	8001e10 <getRightEncoderCount>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float r =  (leftMov + rightMov)/2;
 8001eae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001eb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec2:	edc7 7a08 	vstr	s15, [r7, #32]
	float alpha = (leftMov - rightMov)/ENTRAXE_ODOMETRY;
 8001ec6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001eca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed2:	ee17 0a90 	vmov	r0, s15
 8001ed6:	f7fe fb57 	bl	8000588 <__aeabi_f2d>
 8001eda:	a385      	add	r3, pc, #532	; (adr r3, 80020f0 <odometry_updatePosition+0x280>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fcd4 	bl	800088c <__aeabi_ddiv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fe7c 	bl	8000be8 <__aeabi_d2f>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	61fb      	str	r3, [r7, #28]

	float deltaX = r * cos(robot.angle + alpha/2);
 8001ef4:	6a38      	ldr	r0, [r7, #32]
 8001ef6:	f7fe fb47 	bl	8000588 <__aeabi_f2d>
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	4b89      	ldr	r3, [pc, #548]	; (8002124 <odometry_updatePosition+0x2b4>)
 8001f00:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f08:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f14:	ee17 0a90 	vmov	r0, s15
 8001f18:	f7fe fb36 	bl	8000588 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	ec43 2b10 	vmov	d0, r2, r3
 8001f24:	f009 f900 	bl	800b128 <cos>
 8001f28:	ec53 2b10 	vmov	r2, r3, d0
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	f7fe fb82 	bl	8000638 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fe54 	bl	8000be8 <__aeabi_d2f>
 8001f40:	4603      	mov	r3, r0
 8001f42:	61bb      	str	r3, [r7, #24]
	float deltaY = r * sin(robot.angle + alpha/2);
 8001f44:	6a38      	ldr	r0, [r7, #32]
 8001f46:	f7fe fb1f 	bl	8000588 <__aeabi_f2d>
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	460d      	mov	r5, r1
 8001f4e:	4b75      	ldr	r3, [pc, #468]	; (8002124 <odometry_updatePosition+0x2b4>)
 8001f50:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f58:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f5c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f64:	ee17 0a90 	vmov	r0, s15
 8001f68:	f7fe fb0e 	bl	8000588 <__aeabi_f2d>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	ec43 2b10 	vmov	d0, r2, r3
 8001f74:	f009 f938 	bl	800b1e8 <sin>
 8001f78:	ec53 2b10 	vmov	r2, r3, d0
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	4629      	mov	r1, r5
 8001f80:	f7fe fb5a 	bl	8000638 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fe2c 	bl	8000be8 <__aeabi_d2f>
 8001f90:	4603      	mov	r3, r0
 8001f92:	617b      	str	r3, [r7, #20]

	float dt = 0.01; // 10 ms
 8001f94:	4b64      	ldr	r3, [pc, #400]	; (8002128 <odometry_updatePosition+0x2b8>)
 8001f96:	613b      	str	r3, [r7, #16]

	robot.position.x += deltaX;
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <odometry_updatePosition+0x2b4>)
 8001f9a:	ed93 7a00 	vldr	s14, [r3]
 8001f9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <odometry_updatePosition+0x2b4>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
	robot.position.y += deltaY;
 8001fac:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <odometry_updatePosition+0x2b4>)
 8001fae:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fba:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <odometry_updatePosition+0x2b4>)
 8001fbc:	edc3 7a01 	vstr	s15, [r3, #4]
	robot.angle += alpha;
 8001fc0:	4b58      	ldr	r3, [pc, #352]	; (8002124 <odometry_updatePosition+0x2b4>)
 8001fc2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fce:	4b55      	ldr	r3, [pc, #340]	; (8002124 <odometry_updatePosition+0x2b4>)
 8001fd0:	edc3 7a02 	vstr	s15, [r3, #8]

	float currentSpeed = vector2_norm(vector2_new(deltaX, deltaY)) / dt;
 8001fd4:	edd7 0a05 	vldr	s1, [r7, #20]
 8001fd8:	ed97 0a06 	vldr	s0, [r7, #24]
 8001fdc:	f001 f822 	bl	8003024 <vector2_new>
 8001fe0:	eeb0 7a40 	vmov.f32	s14, s0
 8001fe4:	eef0 7a60 	vmov.f32	s15, s1
 8001fe8:	ed87 7a01 	vstr	s14, [r7, #4]
 8001fec:	edc7 7a02 	vstr	s15, [r7, #8]
 8001ff0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ff4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ffc:	eef0 0a67 	vmov.f32	s1, s15
 8002000:	f001 f832 	bl	8003068 <vector2_norm>
 8002004:	eef0 6a40 	vmov.f32	s13, s0
 8002008:	ed97 7a04 	vldr	s14, [r7, #16]
 800200c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002010:	edc7 7a03 	vstr	s15, [r7, #12]
	robot.measuredSpeed = robot.measuredSpeed*0.8 + currentSpeed*0.2;
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <odometry_updatePosition+0x2b4>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fab5 	bl	8000588 <__aeabi_f2d>
 800201e:	a336      	add	r3, pc, #216	; (adr r3, 80020f8 <odometry_updatePosition+0x288>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fb08 	bl	8000638 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4614      	mov	r4, r2
 800202e:	461d      	mov	r5, r3
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7fe faa9 	bl	8000588 <__aeabi_f2d>
 8002036:	a332      	add	r3, pc, #200	; (adr r3, 8002100 <odometry_updatePosition+0x290>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fafc 	bl	8000638 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4620      	mov	r0, r4
 8002046:	4629      	mov	r1, r5
 8002048:	f7fe f940 	bl	80002cc <__adddf3>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe fdc8 	bl	8000be8 <__aeabi_d2f>
 8002058:	4603      	mov	r3, r0
 800205a:	4a32      	ldr	r2, [pc, #200]	; (8002124 <odometry_updatePosition+0x2b4>)
 800205c:	61d3      	str	r3, [r2, #28]

	if (robot.angle > M_PI)
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <odometry_updatePosition+0x2b4>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa90 	bl	8000588 <__aeabi_f2d>
 8002068:	a327      	add	r3, pc, #156	; (adr r3, 8002108 <odometry_updatePosition+0x298>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe fd73 	bl	8000b58 <__aeabi_dcmpgt>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <odometry_updatePosition+0x230>
		robot.angle = robot.angle - M_TWOPI;
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <odometry_updatePosition+0x2b4>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa83 	bl	8000588 <__aeabi_f2d>
 8002082:	a323      	add	r3, pc, #140	; (adr r3, 8002110 <odometry_updatePosition+0x2a0>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe f91e 	bl	80002c8 <__aeabi_dsub>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7fe fda8 	bl	8000be8 <__aeabi_d2f>
 8002098:	4603      	mov	r3, r0
 800209a:	4a22      	ldr	r2, [pc, #136]	; (8002124 <odometry_updatePosition+0x2b4>)
 800209c:	6093      	str	r3, [r2, #8]
	else if (robot.angle < -M_PI)
		robot.angle = robot.angle + M_TWOPI;

	DEBUG_ODOMETRY("x: %.1fmm, y: %.1fmm, angle: %.1fdeg\r\n", robot.position.x, robot.position.y, robot.angle/2/M_PI*360);
}
 800209e:	e020      	b.n	80020e2 <odometry_updatePosition+0x272>
	else if (robot.angle < -M_PI)
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <odometry_updatePosition+0x2b4>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fa6f 	bl	8000588 <__aeabi_f2d>
 80020aa:	a31b      	add	r3, pc, #108	; (adr r3, 8002118 <odometry_updatePosition+0x2a8>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe fd34 	bl	8000b1c <__aeabi_dcmplt>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d100      	bne.n	80020bc <odometry_updatePosition+0x24c>
}
 80020ba:	e012      	b.n	80020e2 <odometry_updatePosition+0x272>
		robot.angle = robot.angle + M_TWOPI;
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <odometry_updatePosition+0x2b4>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa61 	bl	8000588 <__aeabi_f2d>
 80020c6:	a312      	add	r3, pc, #72	; (adr r3, 8002110 <odometry_updatePosition+0x2a0>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe f8fe 	bl	80002cc <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fd86 	bl	8000be8 <__aeabi_d2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	4a11      	ldr	r2, [pc, #68]	; (8002124 <odometry_updatePosition+0x2b4>)
 80020e0:	6093      	str	r3, [r2, #8]
}
 80020e2:	bf00      	nop
 80020e4:	3730      	adds	r7, #48	; 0x30
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	a0a52696 	.word	0xa0a52696
 80020f4:	406675db 	.word	0x406675db
 80020f8:	9999999a 	.word	0x9999999a
 80020fc:	3fe99999 	.word	0x3fe99999
 8002100:	9999999a 	.word	0x9999999a
 8002104:	3fc99999 	.word	0x3fc99999
 8002108:	54442d18 	.word	0x54442d18
 800210c:	400921fb 	.word	0x400921fb
 8002110:	54442d18 	.word	0x54442d18
 8002114:	401921fb 	.word	0x401921fb
 8002118:	54442d18 	.word	0x54442d18
 800211c:	c00921fb 	.word	0xc00921fb
 8002120:	3ca986fa 	.word	0x3ca986fa
 8002124:	20000258 	.word	0x20000258
 8002128:	3c23d70a 	.word	0x3c23d70a

0800212c <odometry_setPosition>:


void odometry_setPosition(float x, float y) {
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	ed87 0a01 	vstr	s0, [r7, #4]
 8002136:	edc7 0a00 	vstr	s1, [r7]
	robot.position.x = x;
 800213a:	4a06      	ldr	r2, [pc, #24]	; (8002154 <odometry_setPosition+0x28>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6013      	str	r3, [r2, #0]
	robot.position.y = y;
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <odometry_setPosition+0x28>)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6053      	str	r3, [r2, #4]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000258 	.word	0x20000258

08002158 <odometry_setAngle>:


void odometry_setAngle(float angle) {
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	ed87 0a01 	vstr	s0, [r7, #4]
	robot.angle = angle;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <odometry_setAngle+0x1c>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6093      	str	r3, [r2, #8]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	20000258 	.word	0x20000258

08002178 <propulsion_initialize>:


Robot robot;


void propulsion_initialize() {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af04      	add	r7, sp, #16
    robot.leftMotor = (Stepper*) malloc(sizeof(Stepper));
 800217e:	2018      	movs	r0, #24
 8002180:	f006 f888 	bl	8008294 <malloc>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <propulsion_initialize+0x60>)
 800218a:	60da      	str	r2, [r3, #12]
    robot.rightMotor = (Stepper*) malloc(sizeof(Stepper));
 800218c:	2018      	movs	r0, #24
 800218e:	f006 f881 	bl	8008294 <malloc>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <propulsion_initialize+0x60>)
 8002198:	615a      	str	r2, [r3, #20]

    drv8825_initialize(
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <propulsion_initialize+0x60>)
 800219c:	68d8      	ldr	r0, [r3, #12]
 800219e:	2300      	movs	r3, #0
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <propulsion_initialize+0x64>)
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <propulsion_initialize+0x68>)
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2304      	movs	r3, #4
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <propulsion_initialize+0x68>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	f7ff fc44 	bl	8001a3c <drv8825_initialize>
        robot.leftMotor,
        L_MOTOR_EN_Pin, L_MOTOR_EN_GPIO_Port,
        L_MOTOR_DIR_Pin, L_MOTOR_DIR_GPIO_Port,
        &L_MOTOR_TIMER, TIM_CHANNEL_1
    );
    drv8825_initialize(
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <propulsion_initialize+0x60>)
 80021b6:	6958      	ldr	r0, [r3, #20]
 80021b8:	230c      	movs	r3, #12
 80021ba:	9302      	str	r3, [sp, #8]
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <propulsion_initialize+0x6c>)
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <propulsion_initialize+0x68>)
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <propulsion_initialize+0x68>)
 80021ca:	2102      	movs	r1, #2
 80021cc:	f7ff fc36 	bl	8001a3c <drv8825_initialize>
        robot.rightMotor,
        R_MOTOR_EN_Pin, R_MOTOR_EN_GPIO_Port,
        R_MOTOR_DIR_Pin, R_MOTOR_DIR_GPIO_Port,
        &R_MOTOR_TIMER, TIM_CHANNEL_4
    );
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000258 	.word	0x20000258
 80021dc:	200004cc 	.word	0x200004cc
 80021e0:	40020800 	.word	0x40020800
 80021e4:	20000484 	.word	0x20000484

080021e8 <propulsion_enableMotors>:


void propulsion_enableMotors() {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
    drv8825_enable(robot.leftMotor);
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <propulsion_enableMotors+0x1c>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fc58 	bl	8001aa6 <drv8825_enable>
    drv8825_enable(robot.rightMotor);
 80021f6:	4b03      	ldr	r3, [pc, #12]	; (8002204 <propulsion_enableMotors+0x1c>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fc53 	bl	8001aa6 <drv8825_enable>
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000258 	.word	0x20000258

08002208 <propulsion_disableMotors>:


void propulsion_disableMotors() {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
    drv8825_disable(robot.leftMotor);
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <propulsion_disableMotors+0x1c>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fc58 	bl	8001ac6 <drv8825_disable>
    drv8825_disable(robot.rightMotor);
 8002216:	4b03      	ldr	r3, [pc, #12]	; (8002224 <propulsion_disableMotors+0x1c>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fc53 	bl	8001ac6 <drv8825_disable>
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000258 	.word	0x20000258

08002228 <propulsion_setSpeeds>:


void propulsion_setSpeeds(float left, float right) {
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002232:	edc7 0a00 	vstr	s1, [r7]
    float greatestAbsoluteSpeed = fabs(fabs(left)>fabs(right)?left:right);
 8002236:	edd7 7a01 	vldr	s15, [r7, #4]
 800223a:	eeb0 7ae7 	vabs.f32	s14, s15
 800223e:	edd7 7a00 	vldr	s15, [r7]
 8002242:	eef0 7ae7 	vabs.f32	s15, s15
 8002246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	dd04      	ble.n	800225a <propulsion_setSpeeds+0x32>
 8002250:	edd7 7a01 	vldr	s15, [r7, #4]
 8002254:	eef0 7ae7 	vabs.f32	s15, s15
 8002258:	e003      	b.n	8002262 <propulsion_setSpeeds+0x3a>
 800225a:	edd7 7a00 	vldr	s15, [r7]
 800225e:	eef0 7ae7 	vabs.f32	s15, s15
 8002262:	edc7 7a03 	vstr	s15, [r7, #12]
    if (greatestAbsoluteSpeed > MAX_MOTOR_SPEED) {
 8002266:	edd7 7a03 	vldr	s15, [r7, #12]
 800226a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002390 <propulsion_setSpeeds+0x168>
 800226e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	dd17      	ble.n	80022a8 <propulsion_setSpeeds+0x80>
        left = left/greatestAbsoluteSpeed*MAX_MOTOR_SPEED;
 8002278:	edd7 6a01 	vldr	s13, [r7, #4]
 800227c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002284:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002390 <propulsion_setSpeeds+0x168>
 8002288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228c:	edc7 7a01 	vstr	s15, [r7, #4]
        right = right/greatestAbsoluteSpeed*MAX_MOTOR_SPEED;
 8002290:	edd7 6a00 	vldr	s13, [r7]
 8002294:	ed97 7a03 	vldr	s14, [r7, #12]
 8002298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002390 <propulsion_setSpeeds+0x168>
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	edc7 7a00 	vstr	s15, [r7]
    }

    robot.leftSpeed = left;
 80022a8:	4a3a      	ldr	r2, [pc, #232]	; (8002394 <propulsion_setSpeeds+0x16c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6113      	str	r3, [r2, #16]
    drv8825_setDirection(robot.leftMotor, (left < 0)?NEGATIVE:POSITIVE);
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <propulsion_setSpeeds+0x16c>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	bf4c      	ite	mi
 80022c0:	2301      	movmi	r3, #1
 80022c2:	2300      	movpl	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f083 0301 	eor.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f7ff fbd6 	bl	8001a82 <drv8825_setDirection>
    drv8825_setRotationSpeed(robot.leftMotor, 60 * fabsf(left) / (2*M_PI*WHEEL_RADIUS));
 80022d6:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <propulsion_setSpeeds+0x16c>)
 80022d8:	68dc      	ldr	r4, [r3, #12]
 80022da:	edd7 7a01 	vldr	s15, [r7, #4]
 80022de:	eef0 7ae7 	vabs.f32	s15, s15
 80022e2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002398 <propulsion_setSpeeds+0x170>
 80022e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ea:	ee17 0a90 	vmov	r0, s15
 80022ee:	f7fe f94b 	bl	8000588 <__aeabi_f2d>
 80022f2:	a325      	add	r3, pc, #148	; (adr r3, 8002388 <propulsion_setSpeeds+0x160>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe fac8 	bl	800088c <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fc70 	bl	8000be8 <__aeabi_d2f>
 8002308:	4603      	mov	r3, r0
 800230a:	ee00 3a10 	vmov	s0, r3
 800230e:	4620      	mov	r0, r4
 8002310:	f7ff fc8a 	bl	8001c28 <drv8825_setRotationSpeed>

    robot.rightSpeed = right;
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <propulsion_setSpeeds+0x16c>)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6193      	str	r3, [r2, #24]
    drv8825_setDirection(robot.rightMotor, (right < 0)?NEGATIVE:POSITIVE);
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <propulsion_setSpeeds+0x16c>)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	edd7 7a00 	vldr	s15, [r7]
 8002322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	bf4c      	ite	mi
 800232c:	2301      	movmi	r3, #1
 800232e:	2300      	movpl	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f083 0301 	eor.w	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7ff fba0 	bl	8001a82 <drv8825_setDirection>
    drv8825_setRotationSpeed(robot.rightMotor, 60 * fabsf(right) / (2*M_PI*WHEEL_RADIUS));
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <propulsion_setSpeeds+0x16c>)
 8002344:	695c      	ldr	r4, [r3, #20]
 8002346:	edd7 7a00 	vldr	s15, [r7]
 800234a:	eef0 7ae7 	vabs.f32	s15, s15
 800234e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002398 <propulsion_setSpeeds+0x170>
 8002352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002356:	ee17 0a90 	vmov	r0, s15
 800235a:	f7fe f915 	bl	8000588 <__aeabi_f2d>
 800235e:	a30a      	add	r3, pc, #40	; (adr r3, 8002388 <propulsion_setSpeeds+0x160>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f7fe fa92 	bl	800088c <__aeabi_ddiv>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fc3a 	bl	8000be8 <__aeabi_d2f>
 8002374:	4603      	mov	r3, r0
 8002376:	ee00 3a10 	vmov	s0, r3
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff fc54 	bl	8001c28 <drv8825_setRotationSpeed>
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	d64b7175 	.word	0xd64b7175
 800238c:	406552d4 	.word	0x406552d4
 8002390:	44480000 	.word	0x44480000
 8002394:	20000258 	.word	0x20000258
 8002398:	42700000 	.word	0x42700000
 800239c:	00000000 	.word	0x00000000

080023a0 <getAngleError>:
    else if (robot.angle < -M_PI)
        robot.angle = robot.angle + M_TWOPI;
}


float getAngleError(Bezier* b, float t, Vector2 p, Direction dir) {
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	b08e      	sub	sp, #56	; 0x38
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6178      	str	r0, [r7, #20]
 80023a8:	ed87 0a04 	vstr	s0, [r7, #16]
 80023ac:	eeb0 7a60 	vmov.f32	s14, s1
 80023b0:	eef0 7a41 	vmov.f32	s15, s2
 80023b4:	460b      	mov	r3, r1
 80023b6:	ed87 7a02 	vstr	s14, [r7, #8]
 80023ba:	edc7 7a03 	vstr	s15, [r7, #12]
 80023be:	71fb      	strb	r3, [r7, #7]
    Vector2 tangent = bezier_deriv1(b, t);
 80023c0:	ed97 0a04 	vldr	s0, [r7, #16]
 80023c4:	6978      	ldr	r0, [r7, #20]
 80023c6:	f7ff f860 	bl	800148a <bezier_deriv1>
 80023ca:	eeb0 7a40 	vmov.f32	s14, s0
 80023ce:	eef0 7a60 	vmov.f32	s15, s1
 80023d2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80023d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Vector2 displacement = vector2_diff(p, robot.position);
 80023da:	4b69      	ldr	r3, [pc, #420]	; (8002580 <getAngleError+0x1e0>)
 80023dc:	ed93 6a00 	vldr	s12, [r3]
 80023e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80023e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80023e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ec:	eeb0 1a46 	vmov.f32	s2, s12
 80023f0:	eef0 1a66 	vmov.f32	s3, s13
 80023f4:	eeb0 0a47 	vmov.f32	s0, s14
 80023f8:	eef0 0a67 	vmov.f32	s1, s15
 80023fc:	f000 fec8 	bl	8003190 <vector2_diff>
 8002400:	eeb0 7a40 	vmov.f32	s14, s0
 8002404:	eef0 7a60 	vmov.f32	s15, s1
 8002408:	ed87 7a07 	vstr	s14, [r7, #28]
 800240c:	edc7 7a08 	vstr	s15, [r7, #32]

    float sign = vector2_cross(displacement, tangent); // (vaut -1, 0 ou 1)
 8002410:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8002414:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002418:	ed97 7a07 	vldr	s14, [r7, #28]
 800241c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002420:	eeb0 1a46 	vmov.f32	s2, s12
 8002424:	eef0 1a66 	vmov.f32	s3, s13
 8002428:	eeb0 0a47 	vmov.f32	s0, s14
 800242c:	eef0 0a67 	vmov.f32	s1, s15
 8002430:	f000 fee8 	bl	8003204 <vector2_cross>
 8002434:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    sign /= (sign != 0)?fabs(sign):1;
 8002438:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800243a:	f7fe f8a5 	bl	8000588 <__aeabi_f2d>
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002446:	eef5 7a40 	vcmp.f32	s15, #0.0
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	d00a      	beq.n	8002466 <getAngleError+0xc6>
 8002450:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002454:	eef0 7ae7 	vabs.f32	s15, s15
 8002458:	ee17 0a90 	vmov	r0, s15
 800245c:	f7fe f894 	bl	8000588 <__aeabi_f2d>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	e002      	b.n	800246c <getAngleError+0xcc>
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b46      	ldr	r3, [pc, #280]	; (8002584 <getAngleError+0x1e4>)
 800246c:	4620      	mov	r0, r4
 800246e:	4629      	mov	r1, r5
 8002470:	f7fe fa0c 	bl	800088c <__aeabi_ddiv>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fbb4 	bl	8000be8 <__aeabi_d2f>
 8002480:	4603      	mov	r3, r0
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
    float signedDistance = sign * vector2_norm(displacement);
 8002484:	ed97 7a07 	vldr	s14, [r7, #28]
 8002488:	edd7 7a08 	vldr	s15, [r7, #32]
 800248c:	eeb0 0a47 	vmov.f32	s0, s14
 8002490:	eef0 0a67 	vmov.f32	s1, s15
 8002494:	f000 fde8 	bl	8003068 <vector2_norm>
 8002498:	eeb0 7a40 	vmov.f32	s14, s0
 800249c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    DEBUG_PROPULSION("dist: %.1fmm, ", signedDistance);
 80024a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024aa:	f7fe f86d 	bl	8000588 <__aeabi_f2d>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4835      	ldr	r0, [pc, #212]	; (8002588 <getAngleError+0x1e8>)
 80024b4:	f006 fc5e 	bl	8008d74 <iprintf>

    float angleError = (vector2_angle(tangent) - atan(signedDistance / 200.0))
 80024b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80024bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024c0:	eeb0 0a47 	vmov.f32	s0, s14
 80024c4:	eef0 0a67 	vmov.f32	s1, s15
 80024c8:	f000 fdff 	bl	80030ca <vector2_angle>
 80024cc:	ee10 3a10 	vmov	r3, s0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f859 	bl	8000588 <__aeabi_f2d>
 80024d6:	4604      	mov	r4, r0
 80024d8:	460d      	mov	r5, r1
 80024da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024dc:	f7fe f854 	bl	8000588 <__aeabi_f2d>
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <getAngleError+0x1ec>)
 80024e6:	f7fe f9d1 	bl	800088c <__aeabi_ddiv>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	ec43 2b17 	vmov	d7, r2, r3
 80024f2:	eeb0 0a47 	vmov.f32	s0, s14
 80024f6:	eef0 0a67 	vmov.f32	s1, s15
 80024fa:	f008 fc75 	bl	800ade8 <atan>
 80024fe:	ec53 2b10 	vmov	r2, r3, d0
 8002502:	4620      	mov	r0, r4
 8002504:	4629      	mov	r1, r5
 8002506:	f7fd fedf 	bl	80002c8 <__aeabi_dsub>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4614      	mov	r4, r2
 8002510:	461d      	mov	r5, r3
            - (robot.angle + (dir==BACKWARD?M_PI:0));
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <getAngleError+0x1e0>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f836 	bl	8000588 <__aeabi_f2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002524:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002528:	d103      	bne.n	8002532 <getAngleError+0x192>
 800252a:	a113      	add	r1, pc, #76	; (adr r1, 8002578 <getAngleError+0x1d8>)
 800252c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002530:	e003      	b.n	800253a <getAngleError+0x19a>
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	f7fd fec7 	bl	80002cc <__adddf3>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4620      	mov	r0, r4
 8002544:	4629      	mov	r1, r5
 8002546:	f7fd febf 	bl	80002c8 <__aeabi_dsub>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
    float angleError = (vector2_angle(tangent) - atan(signedDistance / 200.0))
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fb49 	bl	8000be8 <__aeabi_d2f>
 8002556:	4603      	mov	r3, r0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
    angleError = standardAngle(angleError); // (entre -pi et pi)
 800255a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800255e:	f000 facf 	bl	8002b00 <standardAngle>
 8002562:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    return angleError;
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	ee07 3a90 	vmov	s15, r3
}
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	3738      	adds	r7, #56	; 0x38
 8002572:	46bd      	mov	sp, r7
 8002574:	bdb0      	pop	{r4, r5, r7, pc}
 8002576:	bf00      	nop
 8002578:	54442d18 	.word	0x54442d18
 800257c:	400921fb 	.word	0x400921fb
 8002580:	20000258 	.word	0x20000258
 8002584:	3ff00000 	.word	0x3ff00000
 8002588:	0800c8bc 	.word	0x0800c8bc
 800258c:	40690000 	.word	0x40690000

08002590 <getRobotSpeed>:


float getRobotSpeed(float t, float angleError, Direction dir, float initialSpeed, float finalSpeed) {
 8002590:	b5b0      	push	{r4, r5, r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	ed87 0a05 	vstr	s0, [r7, #20]
 800259a:	edc7 0a04 	vstr	s1, [r7, #16]
 800259e:	4603      	mov	r3, r0
 80025a0:	ed87 1a02 	vstr	s2, [r7, #8]
 80025a4:	edc7 1a01 	vstr	s3, [r7, #4]
 80025a8:	73fb      	strb	r3, [r7, #15]
    float slowDownFactor = 1 - fabs(angleError/M_PI) * 10;
 80025aa:	6938      	ldr	r0, [r7, #16]
 80025ac:	f7fd ffec 	bl	8000588 <__aeabi_f2d>
 80025b0:	a368      	add	r3, pc, #416	; (adr r3, 8002754 <getRobotSpeed+0x1c4>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fe f969 	bl	800088c <__aeabi_ddiv>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <getRobotSpeed+0x1b0>)
 80025ca:	4620      	mov	r0, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	f7fe f833 	bl	8000638 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	f04f 0000 	mov.w	r0, #0
 80025da:	495a      	ldr	r1, [pc, #360]	; (8002744 <getRobotSpeed+0x1b4>)
 80025dc:	f7fd fe74 	bl	80002c8 <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe fafe 	bl	8000be8 <__aeabi_d2f>
 80025ec:	4603      	mov	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]
    slowDownFactor = slowDownFactor>0?slowDownFactor:0;
 80025f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80025f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	dd01      	ble.n	8002602 <getRobotSpeed+0x72>
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	e001      	b.n	8002606 <getRobotSpeed+0x76>
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]

    float speed = (dir==BACKWARD?-1:1) * slowDownFactor;
 8002608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d102      	bne.n	8002618 <getRobotSpeed+0x88>
 8002612:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002616:	e001      	b.n	800261c <getRobotSpeed+0x8c>
 8002618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800261c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002624:	edc7 7a07 	vstr	s15, [r7, #28]
    if (initialSpeed < 1 && finalSpeed < 1)
 8002628:	edd7 7a02 	vldr	s15, [r7, #8]
 800262c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002638:	d51d      	bpl.n	8002676 <getRobotSpeed+0xe6>
 800263a:	edd7 7a01 	vldr	s15, [r7, #4]
 800263e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d514      	bpl.n	8002676 <getRobotSpeed+0xe6>
        speed *= 600*(1-t) + 20;
 800264c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002650:	edd7 7a05 	vldr	s15, [r7, #20]
 8002654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002658:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002748 <getRobotSpeed+0x1b8>
 800265c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002660:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002664:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002668:	ed97 7a07 	vldr	s14, [r7, #28]
 800266c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002670:	edc7 7a07 	vstr	s15, [r7, #28]
 8002674:	e01b      	b.n	80026ae <getRobotSpeed+0x11e>
    else
        speed *= initialSpeed*(1-t) + finalSpeed*t + 50;
 8002676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800267a:	edd7 7a05 	vldr	s15, [r7, #20]
 800267e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002682:	edd7 7a02 	vldr	s15, [r7, #8]
 8002686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268a:	edd7 6a01 	vldr	s13, [r7, #4]
 800268e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800274c <getRobotSpeed+0x1bc>
 800269e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a07 	vstr	s15, [r7, #28]

    // Limite les accelerations brutales
    if (fabs(speed) > robot.measuredSpeed + 15)
 80026ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80026b2:	eeb0 7ae7 	vabs.f32	s14, s15
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <getRobotSpeed+0x1c0>)
 80026b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80026bc:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80026c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	dd2f      	ble.n	800272e <getRobotSpeed+0x19e>
        speed = (robot.measuredSpeed + 15) * fabs(speed) / speed;
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <getRobotSpeed+0x1c0>)
 80026d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80026d4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80026d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026dc:	ee17 0a90 	vmov	r0, s15
 80026e0:	f7fd ff52 	bl	8000588 <__aeabi_f2d>
 80026e4:	4604      	mov	r4, r0
 80026e6:	460d      	mov	r5, r1
 80026e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ec:	eef0 7ae7 	vabs.f32	s15, s15
 80026f0:	ee17 0a90 	vmov	r0, s15
 80026f4:	f7fd ff48 	bl	8000588 <__aeabi_f2d>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4620      	mov	r0, r4
 80026fe:	4629      	mov	r1, r5
 8002700:	f7fd ff9a 	bl	8000638 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	69f8      	ldr	r0, [r7, #28]
 800270e:	f7fd ff3b 	bl	8000588 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4620      	mov	r0, r4
 8002718:	4629      	mov	r1, r5
 800271a:	f7fe f8b7 	bl	800088c <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f7fe fa5f 	bl	8000be8 <__aeabi_d2f>
 800272a:	4603      	mov	r3, r0
 800272c:	61fb      	str	r3, [r7, #28]

    return speed;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	ee07 3a90 	vmov	s15, r3
}
 8002734:	eeb0 0a67 	vmov.f32	s0, s15
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bdb0      	pop	{r4, r5, r7, pc}
 800273e:	bf00      	nop
 8002740:	40240000 	.word	0x40240000
 8002744:	3ff00000 	.word	0x3ff00000
 8002748:	44160000 	.word	0x44160000
 800274c:	42480000 	.word	0x42480000
 8002750:	20000258 	.word	0x20000258
 8002754:	54442d18 	.word	0x54442d18
 8002758:	400921fb 	.word	0x400921fb
 800275c:	00000000 	.word	0x00000000

08002760 <calculateMotorSpeeds>:


void calculateMotorSpeeds(float* leftSpeed, float* rightSpeed, Bezier* b, float t, Direction dir, float speed) {
 8002760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002764:	b088      	sub	sp, #32
 8002766:	af00      	add	r7, sp, #0
 8002768:	6178      	str	r0, [r7, #20]
 800276a:	6139      	str	r1, [r7, #16]
 800276c:	60fa      	str	r2, [r7, #12]
 800276e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002772:	edc7 0a00 	vstr	s1, [r7]
 8002776:	71fb      	strb	r3, [r7, #7]
    float k = bezier_curvature(b, t);
 8002778:	ed97 0a02 	vldr	s0, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7fe ffbf 	bl	8001700 <bezier_curvature>
 8002782:	ed87 0a07 	vstr	s0, [r7, #28]

    *leftSpeed = speed * (1 + dir*ENTRAXE_MOTOR*k/2);
 8002786:	6838      	ldr	r0, [r7, #0]
 8002788:	f7fd fefe 	bl	8000588 <__aeabi_f2d>
 800278c:	4604      	mov	r4, r0
 800278e:	460d      	mov	r5, r1
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fee5 	bl	8000564 <__aeabi_i2d>
 800279a:	a33b      	add	r3, pc, #236	; (adr r3, 8002888 <calculateMotorSpeeds+0x128>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd ff4a 	bl	8000638 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4690      	mov	r8, r2
 80027aa:	4699      	mov	r9, r3
 80027ac:	69f8      	ldr	r0, [r7, #28]
 80027ae:	f7fd feeb 	bl	8000588 <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4640      	mov	r0, r8
 80027b8:	4649      	mov	r1, r9
 80027ba:	f7fd ff3d 	bl	8000638 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ce:	f7fe f85d 	bl	800088c <__aeabi_ddiv>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <calculateMotorSpeeds+0x130>)
 80027e0:	f7fd fd74 	bl	80002cc <__adddf3>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd ff24 	bl	8000638 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe f9f6 	bl	8000be8 <__aeabi_d2f>
 80027fc:	4602      	mov	r2, r0
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]
    *rightSpeed = speed * (1 - dir*ENTRAXE_MOTOR*k/2);
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f7fd fec0 	bl	8000588 <__aeabi_f2d>
 8002808:	4604      	mov	r4, r0
 800280a:	460d      	mov	r5, r1
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fea7 	bl	8000564 <__aeabi_i2d>
 8002816:	a31c      	add	r3, pc, #112	; (adr r3, 8002888 <calculateMotorSpeeds+0x128>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd ff0c 	bl	8000638 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4690      	mov	r8, r2
 8002826:	4699      	mov	r9, r3
 8002828:	69f8      	ldr	r0, [r7, #28]
 800282a:	f7fd fead 	bl	8000588 <__aeabi_f2d>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4640      	mov	r0, r8
 8002834:	4649      	mov	r1, r9
 8002836:	f7fd feff 	bl	8000638 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800284a:	f7fe f81f 	bl	800088c <__aeabi_ddiv>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	490e      	ldr	r1, [pc, #56]	; (8002890 <calculateMotorSpeeds+0x130>)
 8002858:	f7fd fd36 	bl	80002c8 <__aeabi_dsub>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4620      	mov	r0, r4
 8002862:	4629      	mov	r1, r5
 8002864:	f7fd fee8 	bl	8000638 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f9ba 	bl	8000be8 <__aeabi_d2f>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002884:	f3af 8000 	nop.w
 8002888:	e147ae14 	.word	0xe147ae14
 800288c:	405c147a 	.word	0x405c147a
 8002890:	3ff00000 	.word	0x3ff00000

08002894 <addCorrection>:


void addCorrection(float* leftSpeed, float* rightSpeed, float angleError) {
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	ed87 0a01 	vstr	s0, [r7, #4]
    float correction = -angleError*200; // contre réaction
 80028a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028a6:	eef1 7a67 	vneg.f32	s15, s15
 80028aa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002958 <addCorrection+0xc4>
 80028ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b2:	edc7 7a05 	vstr	s15, [r7, #20]

    if (fabs(correction) > MAX_CORRECTION) {
 80028b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ba:	eef0 7ae7 	vabs.f32	s15, s15
 80028be:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800295c <addCorrection+0xc8>
 80028c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	dd25      	ble.n	8002918 <addCorrection+0x84>
        correction *= MAX_CORRECTION / abs(correction);
 80028cc:	6978      	ldr	r0, [r7, #20]
 80028ce:	f7fd fe5b 	bl	8000588 <__aeabi_f2d>
 80028d2:	4604      	mov	r4, r0
 80028d4:	460d      	mov	r5, r1
 80028d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028de:	ee17 3a90 	vmov	r3, s15
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bfb8      	it	lt
 80028e6:	425b      	neglt	r3, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe3b 	bl	8000564 <__aeabi_i2d>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	f04f 0000 	mov.w	r0, #0
 80028f6:	491a      	ldr	r1, [pc, #104]	; (8002960 <addCorrection+0xcc>)
 80028f8:	f7fd ffc8 	bl	800088c <__aeabi_ddiv>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4620      	mov	r0, r4
 8002902:	4629      	mov	r1, r5
 8002904:	f7fd fe98 	bl	8000638 <__aeabi_dmul>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	f7fe f96a 	bl	8000be8 <__aeabi_d2f>
 8002914:	4603      	mov	r3, r0
 8002916:	617b      	str	r3, [r7, #20]
    }

    DEBUG_PROPULSION("corr: %.1fmm\r\n", correction);
 8002918:	6978      	ldr	r0, [r7, #20]
 800291a:	f7fd fe35 	bl	8000588 <__aeabi_f2d>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4810      	ldr	r0, [pc, #64]	; (8002964 <addCorrection+0xd0>)
 8002924:	f006 fa26 	bl	8008d74 <iprintf>

    *leftSpeed -= correction;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	ed93 7a00 	vldr	s14, [r3]
 800292e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	edc3 7a00 	vstr	s15, [r3]
    *rightSpeed += correction;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	ed93 7a00 	vldr	s14, [r3]
 8002942:	edd7 7a05 	vldr	s15, [r7, #20]
 8002946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	edc3 7a00 	vstr	s15, [r3]
}
 8002950:	bf00      	nop
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bdb0      	pop	{r4, r5, r7, pc}
 8002958:	43480000 	.word	0x43480000
 800295c:	42a00000 	.word	0x42a00000
 8002960:	40540000 	.word	0x40540000
 8002964:	0800c8cc 	.word	0x0800c8cc

08002968 <propulsion_followBezier>:


// C'est ici que la magie a lieu !
float propulsion_followBezier(Bezier* b, Direction dir, float initialSpeed, float finalSpeed, bool reverse) {
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b094      	sub	sp, #80	; 0x50
 800296e:	af06      	add	r7, sp, #24
 8002970:	6178      	str	r0, [r7, #20]
 8002972:	460b      	mov	r3, r1
 8002974:	ed87 0a03 	vstr	s0, [r7, #12]
 8002978:	edc7 0a02 	vstr	s1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	74fb      	strb	r3, [r7, #19]
    float t = bezier_project(b, robot.position, 0.0001); // (entre 0 et 1)
 8002980:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <propulsion_followBezier+0x188>)
 8002982:	ed93 7a00 	vldr	s14, [r3]
 8002986:	edd3 7a01 	vldr	s15, [r3, #4]
 800298a:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8002af4 <propulsion_followBezier+0x18c>
 800298e:	eeb0 0a47 	vmov.f32	s0, s14
 8002992:	eef0 0a67 	vmov.f32	s1, s15
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7fe ff70 	bl	800187c <bezier_project>
 800299c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    Vector2 p = bezier_eval(b, t); // Point de la courbe le plus proche du robot
 80029a0:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80029a4:	6978      	ldr	r0, [r7, #20]
 80029a6:	f7fe fcaf 	bl	8001308 <bezier_eval>
 80029aa:	eeb0 7a40 	vmov.f32	s14, s0
 80029ae:	eef0 7a60 	vmov.f32	s15, s1
 80029b2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80029b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    DEBUG_PROPULSION("t: %.5f, x: %.1fmm, y: %.1fmm, a: %.1fdeg, ", t, robot.position.x, robot.position.y, robot.angle / M_PI / 2 * 360);
 80029ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029bc:	f7fd fde4 	bl	8000588 <__aeabi_f2d>
 80029c0:	4682      	mov	sl, r0
 80029c2:	468b      	mov	fp, r1
 80029c4:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <propulsion_followBezier+0x188>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fddd 	bl	8000588 <__aeabi_f2d>
 80029ce:	4604      	mov	r4, r0
 80029d0:	460d      	mov	r5, r1
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <propulsion_followBezier+0x188>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fdd6 	bl	8000588 <__aeabi_f2d>
 80029dc:	4680      	mov	r8, r0
 80029de:	4689      	mov	r9, r1
 80029e0:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <propulsion_followBezier+0x188>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fdcf 	bl	8000588 <__aeabi_f2d>
 80029ea:	a33f      	add	r3, pc, #252	; (adr r3, 8002ae8 <propulsion_followBezier+0x180>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd ff4c 	bl	800088c <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a04:	f7fd ff42 	bl	800088c <__aeabi_ddiv>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <propulsion_followBezier+0x190>)
 8002a16:	f7fd fe0f 	bl	8000638 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a22:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a26:	e9cd 4500 	strd	r4, r5, [sp]
 8002a2a:	4652      	mov	r2, sl
 8002a2c:	465b      	mov	r3, fp
 8002a2e:	4833      	ldr	r0, [pc, #204]	; (8002afc <propulsion_followBezier+0x194>)
 8002a30:	f006 f9a0 	bl	8008d74 <iprintf>

    // Erreur d'orientation
    float angleError = getAngleError(b, t, p, dir);
 8002a34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a38:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a40:	4619      	mov	r1, r3
 8002a42:	eef0 0a47 	vmov.f32	s1, s14
 8002a46:	eeb0 1a67 	vmov.f32	s2, s15
 8002a4a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002a4e:	6978      	ldr	r0, [r7, #20]
 8002a50:	f7ff fca6 	bl	80023a0 <getAngleError>
 8002a54:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

    if (reverse) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <propulsion_followBezier+0xfc>
    	angleError = 0;
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Vitesse globale du robot
    float speed = getRobotSpeed(t, angleError, dir, initialSpeed, finalSpeed);
 8002a64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a68:	edd7 1a02 	vldr	s3, [r7, #8]
 8002a6c:	ed97 1a03 	vldr	s2, [r7, #12]
 8002a70:	4618      	mov	r0, r3
 8002a72:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8002a76:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002a7a:	f7ff fd89 	bl	8002590 <getRobotSpeed>
 8002a7e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

    if (reverse) {
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <propulsion_followBezier+0x12c>
    	speed *= -1;
 8002a88:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a8c:	eef1 7a67 	vneg.f32	s15, s15
 8002a90:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }

    float leftSpeed, rightSpeed;

    // Boucle ouverte
    calculateMotorSpeeds(&leftSpeed, &rightSpeed, b, t, dir, speed);
 8002a94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a98:	f107 011c 	add.w	r1, r7, #28
 8002a9c:	f107 0020 	add.w	r0, r7, #32
 8002aa0:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002aa4:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	f7ff fe59 	bl	8002760 <calculateMotorSpeeds>

    // Boucle fermée
    addCorrection(&leftSpeed, &rightSpeed, angleError);
 8002aae:	f107 021c 	add.w	r2, r7, #28
 8002ab2:	f107 0320 	add.w	r3, r7, #32
 8002ab6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fee9 	bl	8002894 <addCorrection>

    // Commande des moteurs
    propulsion_setSpeeds(leftSpeed, rightSpeed);
 8002ac2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ac6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002aca:	eef0 0a47 	vmov.f32	s1, s14
 8002ace:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad2:	f7ff fba9 	bl	8002228 <propulsion_setSpeeds>

    return t;
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	ee07 3a90 	vmov	s15, r3
}
 8002adc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae0:	3738      	adds	r7, #56	; 0x38
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae8:	54442d18 	.word	0x54442d18
 8002aec:	400921fb 	.word	0x400921fb
 8002af0:	20000258 	.word	0x20000258
 8002af4:	38d1b717 	.word	0x38d1b717
 8002af8:	40768000 	.word	0x40768000
 8002afc:	0800c8dc 	.word	0x0800c8dc

08002b00 <standardAngle>:


float standardAngle(float angle) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	ed87 0a01 	vstr	s0, [r7, #4]
    return fmod(fmod(angle + M_PI, M_TWOPI) + M_TWOPI, M_TWOPI) - M_PI;
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd fd3c 	bl	8000588 <__aeabi_f2d>
 8002b10:	a31f      	add	r3, pc, #124	; (adr r3, 8002b90 <standardAngle+0x90>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd fbd9 	bl	80002cc <__adddf3>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	ec43 2b17 	vmov	d7, r2, r3
 8002b22:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8002b88 <standardAngle+0x88>
 8002b26:	eeb0 0a47 	vmov.f32	s0, s14
 8002b2a:	eef0 0a67 	vmov.f32	s1, s15
 8002b2e:	f008 fbb5 	bl	800b29c <fmod>
 8002b32:	ec51 0b10 	vmov	r0, r1, d0
 8002b36:	a314      	add	r3, pc, #80	; (adr r3, 8002b88 <standardAngle+0x88>)
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f7fd fbc6 	bl	80002cc <__adddf3>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	ec43 2b17 	vmov	d7, r2, r3
 8002b48:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002b88 <standardAngle+0x88>
 8002b4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b50:	eef0 0a67 	vmov.f32	s1, s15
 8002b54:	f008 fba2 	bl	800b29c <fmod>
 8002b58:	ec51 0b10 	vmov	r0, r1, d0
 8002b5c:	a30c      	add	r3, pc, #48	; (adr r3, 8002b90 <standardAngle+0x90>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f7fd fbb1 	bl	80002c8 <__aeabi_dsub>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fe f83b 	bl	8000be8 <__aeabi_d2f>
 8002b72:	4603      	mov	r3, r0
 8002b74:	ee07 3a90 	vmov	s15, r3
}
 8002b78:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	f3af 8000 	nop.w
 8002b88:	54442d18 	.word	0x54442d18
 8002b8c:	401921fb 	.word	0x401921fb
 8002b90:	54442d18 	.word	0x54442d18
 8002b94:	400921fb 	.word	0x400921fb

08002b98 <serial_send>:
#include "serial.h"
uint8_t lidarData;
uint8_t armData;

int serial_send(uint8_t *ptr, int len, int uartPort) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	if (uartPort == 4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d108      	bne.n	8002bbc <serial_send+0x24>
		HAL_UART_Transmit(&huart4, ptr, len, HAL_MAX_DELAY);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	68f9      	ldr	r1, [r7, #12]
 8002bb4:	481d      	ldr	r0, [pc, #116]	; (8002c2c <serial_send+0x94>)
 8002bb6:	f004 fb14 	bl	80071e2 <HAL_UART_Transmit>
 8002bba:	e032      	b.n	8002c22 <serial_send+0x8a>
	else if (uartPort == 5)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d108      	bne.n	8002bd4 <serial_send+0x3c>
		HAL_UART_Transmit(&huart5, ptr, len, HAL_MAX_DELAY);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	4818      	ldr	r0, [pc, #96]	; (8002c30 <serial_send+0x98>)
 8002bce:	f004 fb08 	bl	80071e2 <HAL_UART_Transmit>
 8002bd2:	e026      	b.n	8002c22 <serial_send+0x8a>
	else if (uartPort == 6) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d123      	bne.n	8002c22 <serial_send+0x8a>
		uint8_t action = *ptr;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	75fb      	strb	r3, [r7, #23]
		if (robot.team == PURPLE) {
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <serial_send+0x9c>)
 8002be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d112      	bne.n	8002c10 <serial_send+0x78>
			if (action == 0xA1) {
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2ba1      	cmp	r3, #161	; 0xa1
 8002bee:	d102      	bne.n	8002bf6 <serial_send+0x5e>
				action = 0xA2;
 8002bf0:	23a2      	movs	r3, #162	; 0xa2
 8002bf2:	75fb      	strb	r3, [r7, #23]
 8002bf4:	e00c      	b.n	8002c10 <serial_send+0x78>
			} else if (*ptr == 0xCA) {
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2bca      	cmp	r3, #202	; 0xca
 8002bfc:	d102      	bne.n	8002c04 <serial_send+0x6c>
				action = 0xCB;
 8002bfe:	23cb      	movs	r3, #203	; 0xcb
 8002c00:	75fb      	strb	r3, [r7, #23]
 8002c02:	e005      	b.n	8002c10 <serial_send+0x78>
			} else if (*ptr == 0xCB) {
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2bcb      	cmp	r3, #203	; 0xcb
 8002c0a:	d101      	bne.n	8002c10 <serial_send+0x78>
				action = 0xCA;
 8002c0c:	23ca      	movs	r3, #202	; 0xca
 8002c0e:	75fb      	strb	r3, [r7, #23]
			}
		}
		HAL_UART_Transmit(&huart6, &action, len, HAL_MAX_DELAY);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	f107 0117 	add.w	r1, r7, #23
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	4806      	ldr	r0, [pc, #24]	; (8002c38 <serial_send+0xa0>)
 8002c1e:	f004 fae0 	bl	80071e2 <HAL_UART_Transmit>
		//printf("Sending %x\r\n", *ptr);
	}
	return len;
 8002c22:	68bb      	ldr	r3, [r7, #8]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000514 	.word	0x20000514
 8002c30:	20000558 	.word	0x20000558
 8002c34:	20000258 	.word	0x20000258
 8002c38:	200005e0 	.word	0x200005e0

08002c3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_UART_RxCpltCallback+0x78>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d115      	bne.n	8002c7a <HAL_UART_RxCpltCallback+0x3e>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		int id = lidarData >> 4;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_UART_RxCpltCallback+0x7c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	60fb      	str	r3, [r7, #12]
		uint8_t dist = (lidarData & 0xF) << 2;
 8002c58:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <HAL_UART_RxCpltCallback+0x7c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002c64:	72fb      	strb	r3, [r7, #11]
		lidar_updateDistance(id, dist);
 8002c66:	7afb      	ldrb	r3, [r7, #11]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff f826 	bl	8001cbc <lidar_updateDistance>
		HAL_UART_Receive_IT(&huart4, &lidarData, 1);
 8002c70:	2201      	movs	r2, #1
 8002c72:	4911      	ldr	r1, [pc, #68]	; (8002cb8 <HAL_UART_RxCpltCallback+0x7c>)
 8002c74:	4811      	ldr	r0, [pc, #68]	; (8002cbc <HAL_UART_RxCpltCallback+0x80>)
 8002c76:	f004 fb46 	bl	8007306 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART6){
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_UART_RxCpltCallback+0x84>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d112      	bne.n	8002caa <HAL_UART_RxCpltCallback+0x6e>
		if (armData == 0xFF) {
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_UART_RxCpltCallback+0x88>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2bff      	cmp	r3, #255	; 0xff
 8002c8a:	d109      	bne.n	8002ca0 <HAL_UART_RxCpltCallback+0x64>
			HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8002c8c:	2120      	movs	r1, #32
 8002c8e:	480e      	ldr	r0, [pc, #56]	; (8002cc8 <HAL_UART_RxCpltCallback+0x8c>)
 8002c90:	f002 fa61 	bl	8005156 <HAL_GPIO_TogglePin>
			robot.waitingForOnSiteAction = false;
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_UART_RxCpltCallback+0x90>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	621a      	str	r2, [r3, #32]
			robot.waitingForOnMoveAction = false;
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_UART_RxCpltCallback+0x90>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
			//printf("Arm: Continue.\r\n");
		}

		HAL_UART_Receive_IT(&huart6, &armData, 1);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <HAL_UART_RxCpltCallback+0x88>)
 8002ca4:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <HAL_UART_RxCpltCallback+0x94>)
 8002ca6:	f004 fb2e 	bl	8007306 <HAL_UART_Receive_IT>
	}
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40004c00 	.word	0x40004c00
 8002cb8:	20000284 	.word	0x20000284
 8002cbc:	20000514 	.word	0x20000514
 8002cc0:	40011400 	.word	0x40011400
 8002cc4:	20000285 	.word	0x20000285
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	20000258 	.word	0x20000258
 8002cd0:	200005e0 	.word	0x200005e0

08002cd4 <strategy_initialize>:
#include "strategy.h"

Strategy* strategy_initialize() {
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
    Strategy* strategy = (Strategy*) malloc(sizeof(Strategy));
 8002cda:	2020      	movs	r0, #32
 8002cdc:	f005 fada 	bl	8008294 <malloc>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	607b      	str	r3, [r7, #4]
    strategy->length = 5;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2205      	movs	r2, #5
 8002ce8:	601a      	str	r2, [r3, #0]
    strategy->path = (Bezier**) malloc(sizeof(Bezier*) * strategy->length);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f005 facf 	bl	8008294 <malloc>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	605a      	str	r2, [r3, #4]

    strategy->directions = (Direction*) malloc(sizeof(Direction) * strategy->length);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 fac6 	bl	8008294 <malloc>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
    strategy->speeds = (float*) calloc(strategy->length+1, sizeof(float));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	2104      	movs	r1, #4
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f005 fa89 	bl	8008230 <calloc>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60da      	str	r2, [r3, #12]

    strategy->onSiteActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 fab0 	bl	8008294 <malloc>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	611a      	str	r2, [r3, #16]
    strategy->onSiteActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	2104      	movs	r1, #4
 8002d44:	4618      	mov	r0, r3
 8002d46:	f005 fa73 	bl	8008230 <calloc>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
    strategy->onMoveActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f005 fa9a 	bl	8008294 <malloc>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	615a      	str	r2, [r3, #20]
    strategy->onMoveActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	2104      	movs	r1, #4
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 fa5d 	bl	8008230 <calloc>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	61da      	str	r2, [r3, #28]

    strategy->path[0] = bezier_new(206.931, 688.119, 306.931, 688.119, 649.240, 784.548, 751.081, 1039.701, 30);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685c      	ldr	r4, [r3, #4]
 8002d82:	201e      	movs	r0, #30
 8002d84:	eddf 3a53 	vldr	s7, [pc, #332]	; 8002ed4 <strategy_initialize+0x200>
 8002d88:	ed9f 3a53 	vldr	s6, [pc, #332]	; 8002ed8 <strategy_initialize+0x204>
 8002d8c:	eddf 2a53 	vldr	s5, [pc, #332]	; 8002edc <strategy_initialize+0x208>
 8002d90:	ed9f 2a53 	vldr	s4, [pc, #332]	; 8002ee0 <strategy_initialize+0x20c>
 8002d94:	eddf 1a53 	vldr	s3, [pc, #332]	; 8002ee4 <strategy_initialize+0x210>
 8002d98:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8002ee8 <strategy_initialize+0x214>
 8002d9c:	eddf 0a51 	vldr	s1, [pc, #324]	; 8002ee4 <strategy_initialize+0x210>
 8002da0:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8002eec <strategy_initialize+0x218>
 8002da4:	f7fe f9da 	bl	800115c <bezier_new>
 8002da8:	4603      	mov	r3, r0
 8002daa:	6023      	str	r3, [r4, #0]
    strategy->path[1] = bezier_new(751.081, 1039.701, 852.922, 1294.854, 993.040, 1436.579, 1179.333, 1505.294, 30);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	1d1c      	adds	r4, r3, #4
 8002db2:	201e      	movs	r0, #30
 8002db4:	eddf 3a4e 	vldr	s7, [pc, #312]	; 8002ef0 <strategy_initialize+0x21c>
 8002db8:	ed9f 3a4e 	vldr	s6, [pc, #312]	; 8002ef4 <strategy_initialize+0x220>
 8002dbc:	eddf 2a4e 	vldr	s5, [pc, #312]	; 8002ef8 <strategy_initialize+0x224>
 8002dc0:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 8002efc <strategy_initialize+0x228>
 8002dc4:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8002f00 <strategy_initialize+0x22c>
 8002dc8:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8002f04 <strategy_initialize+0x230>
 8002dcc:	eddf 0a41 	vldr	s1, [pc, #260]	; 8002ed4 <strategy_initialize+0x200>
 8002dd0:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8002ed8 <strategy_initialize+0x204>
 8002dd4:	f7fe f9c2 	bl	800115c <bezier_new>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	6023      	str	r3, [r4, #0]
    strategy->path[2] = bezier_new(1179.333, 1505.294, 1365.625, 1574.008, 1689.346, 1635.088, 1939.772, 1425.891, 30);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f103 0408 	add.w	r4, r3, #8
 8002de4:	201e      	movs	r0, #30
 8002de6:	eddf 3a48 	vldr	s7, [pc, #288]	; 8002f08 <strategy_initialize+0x234>
 8002dea:	ed9f 3a48 	vldr	s6, [pc, #288]	; 8002f0c <strategy_initialize+0x238>
 8002dee:	eddf 2a48 	vldr	s5, [pc, #288]	; 8002f10 <strategy_initialize+0x23c>
 8002df2:	ed9f 2a48 	vldr	s4, [pc, #288]	; 8002f14 <strategy_initialize+0x240>
 8002df6:	eddf 1a48 	vldr	s3, [pc, #288]	; 8002f18 <strategy_initialize+0x244>
 8002dfa:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8002f1c <strategy_initialize+0x248>
 8002dfe:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8002ef0 <strategy_initialize+0x21c>
 8002e02:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8002ef4 <strategy_initialize+0x220>
 8002e06:	f7fe f9a9 	bl	800115c <bezier_new>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6023      	str	r3, [r4, #0]
    strategy->path[3] = bezier_new(1939.772, 1425.891, 2190.198, 1216.693, 2168.820, 925.039, 2037.499, 741.800, 30);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f103 040c 	add.w	r4, r3, #12
 8002e16:	201e      	movs	r0, #30
 8002e18:	eddf 3a41 	vldr	s7, [pc, #260]	; 8002f20 <strategy_initialize+0x24c>
 8002e1c:	ed9f 3a41 	vldr	s6, [pc, #260]	; 8002f24 <strategy_initialize+0x250>
 8002e20:	eddf 2a41 	vldr	s5, [pc, #260]	; 8002f28 <strategy_initialize+0x254>
 8002e24:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8002f2c <strategy_initialize+0x258>
 8002e28:	eddf 1a41 	vldr	s3, [pc, #260]	; 8002f30 <strategy_initialize+0x25c>
 8002e2c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002f34 <strategy_initialize+0x260>
 8002e30:	eddf 0a35 	vldr	s1, [pc, #212]	; 8002f08 <strategy_initialize+0x234>
 8002e34:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8002f0c <strategy_initialize+0x238>
 8002e38:	f7fe f990 	bl	800115c <bezier_new>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	6023      	str	r3, [r4, #0]
    strategy->path[4] = bezier_new(2037.499, 741.800, 1906.179, 558.562, 1710.724, 439.457, 1002.202, 628.803, 30);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f103 0410 	add.w	r4, r3, #16
 8002e48:	201e      	movs	r0, #30
 8002e4a:	eddf 3a3b 	vldr	s7, [pc, #236]	; 8002f38 <strategy_initialize+0x264>
 8002e4e:	ed9f 3a3b 	vldr	s6, [pc, #236]	; 8002f3c <strategy_initialize+0x268>
 8002e52:	eddf 2a3b 	vldr	s5, [pc, #236]	; 8002f40 <strategy_initialize+0x26c>
 8002e56:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8002f44 <strategy_initialize+0x270>
 8002e5a:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8002f48 <strategy_initialize+0x274>
 8002e5e:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8002f4c <strategy_initialize+0x278>
 8002e62:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8002f20 <strategy_initialize+0x24c>
 8002e66:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002f24 <strategy_initialize+0x250>
 8002e6a:	f7fe f977 	bl	800115c <bezier_new>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6023      	str	r3, [r4, #0]

    strategy->directions[0] = FORWARD;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
    strategy->directions[1] = FORWARD;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
    strategy->directions[2] = FORWARD;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	3302      	adds	r3, #2
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
    strategy->directions[3] = FORWARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	3303      	adds	r3, #3
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
    strategy->directions[4] = FORWARD;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]

    strategy->speeds[1] = 1000;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4a29      	ldr	r2, [pc, #164]	; (8002f50 <strategy_initialize+0x27c>)
 8002eaa:	601a      	str	r2, [r3, #0]
    strategy->speeds[2] = 1000;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <strategy_initialize+0x27c>)
 8002eb4:	601a      	str	r2, [r3, #0]
    strategy->speeds[3] = 1000;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	4a24      	ldr	r2, [pc, #144]	; (8002f50 <strategy_initialize+0x27c>)
 8002ebe:	601a      	str	r2, [r3, #0]
    strategy->speeds[4] = 1000;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	3310      	adds	r3, #16
 8002ec6:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <strategy_initialize+0x27c>)
 8002ec8:	601a      	str	r2, [r3, #0]



    return strategy;
 8002eca:	687b      	ldr	r3, [r7, #4]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd90      	pop	{r4, r7, pc}
 8002ed4:	4481f66f 	.word	0x4481f66f
 8002ed8:	443bc52f 	.word	0x443bc52f
 8002edc:	44442312 	.word	0x44442312
 8002ee0:	44224f5c 	.word	0x44224f5c
 8002ee4:	442c079e 	.word	0x442c079e
 8002ee8:	4399772b 	.word	0x4399772b
 8002eec:	434eee56 	.word	0x434eee56
 8002ef0:	44bc2968 	.word	0x44bc2968
 8002ef4:	44936aa8 	.word	0x44936aa8
 8002ef8:	44b39287 	.word	0x44b39287
 8002efc:	4478428f 	.word	0x4478428f
 8002f00:	44a1db54 	.word	0x44a1db54
 8002f04:	44553b02 	.word	0x44553b02
 8002f08:	44b23c83 	.word	0x44b23c83
 8002f0c:	44f278b4 	.word	0x44f278b4
 8002f10:	44cc62d1 	.word	0x44cc62d1
 8002f14:	44d32b12 	.word	0x44d32b12
 8002f18:	44c4c042 	.word	0x44c4c042
 8002f1c:	44aab400 	.word	0x44aab400
 8002f20:	44397333 	.word	0x44397333
 8002f24:	44feaff8 	.word	0x44feaff8
 8002f28:	4467427f 	.word	0x4467427f
 8002f2c:	45078d1f 	.word	0x45078d1f
 8002f30:	4498162d 	.word	0x4498162d
 8002f34:	4508e32b 	.word	0x4508e32b
 8002f38:	441d3364 	.word	0x441d3364
 8002f3c:	447a8cee 	.word	0x447a8cee
 8002f40:	43dbba7f 	.word	0x43dbba7f
 8002f44:	44d5d72b 	.word	0x44d5d72b
 8002f48:	440ba3f8 	.word	0x440ba3f8
 8002f4c:	44ee45ba 	.word	0x44ee45ba
 8002f50:	447a0000 	.word	0x447a0000

08002f54 <switchTeam>:
#include "symetry.h"

void switchTeam(Strategy* strategy) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	robot.team = (robot.team == YELLOW)?PURPLE:YELLOW;
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <switchTeam+0xc8>)
 8002f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <switchTeam+0xc8>)
 8002f70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	for (int i=0; i<strategy->length; i++) {
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e045      	b.n	8003006 <switchTeam+0xb2>
		Bezier* b = strategy->path[i];
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60bb      	str	r3, [r7, #8]
		bezier_set(
			b,
		    3000 - b->p1.x, b->p1.y,
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
		bezier_set(
 8002f8e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003020 <switchTeam+0xcc>
 8002f92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	edd3 6a01 	vldr	s13, [r3, #4]
			3000 - b->p2.x, b->p2.y,
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	edd3 7a02 	vldr	s15, [r3, #8]
		bezier_set(
 8002fa2:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8003020 <switchTeam+0xcc>
 8002fa6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	edd3 5a03 	vldr	s11, [r3, #12]
			3000 - b->p3.x, b->p3.y,
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	edd3 7a04 	vldr	s15, [r3, #16]
		bezier_set(
 8002fb6:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 8003020 <switchTeam+0xcc>
 8002fba:	ee35 5a67 	vsub.f32	s10, s10, s15
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	edd3 4a05 	vldr	s9, [r3, #20]
			3000 - b->p4.x, b->p4.y,
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	edd3 7a06 	vldr	s15, [r3, #24]
		bezier_set(
 8002fca:	ed9f 4a15 	vldr	s8, [pc, #84]	; 8003020 <switchTeam+0xcc>
 8002fce:	ee74 7a67 	vsub.f32	s15, s8, s15
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	ed93 4a07 	vldr	s8, [r3, #28]
 8002fd8:	211e      	movs	r1, #30
 8002fda:	eef0 3a44 	vmov.f32	s7, s8
 8002fde:	eeb0 3a67 	vmov.f32	s6, s15
 8002fe2:	eef0 2a64 	vmov.f32	s5, s9
 8002fe6:	eeb0 2a45 	vmov.f32	s4, s10
 8002fea:	eef0 1a65 	vmov.f32	s3, s11
 8002fee:	eeb0 1a46 	vmov.f32	s2, s12
 8002ff2:	eef0 0a66 	vmov.f32	s1, s13
 8002ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8002ffa:	68b8      	ldr	r0, [r7, #8]
 8002ffc:	f7fe f8ed 	bl	80011da <bezier_set>
	for (int i=0; i<strategy->length; i++) {
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3301      	adds	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	dbb4      	blt.n	8002f7a <switchTeam+0x26>

			if (strategy->onMoveActions[i][j] == 0xCB)
				strategy->onMoveActions[i][j] = 0xCA;
		}*/
	}
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000258 	.word	0x20000258
 8003020:	453b8000 	.word	0x453b8000

08003024 <vector2_new>:
#include "vector2.h"


Vector2 vector2_new(float x, float y) {
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	ed87 0a03 	vstr	s0, [r7, #12]
 800302e:	edc7 0a02 	vstr	s1, [r7, #8]
    Vector2 u = { x, y };
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	617b      	str	r3, [r7, #20]
    return u;
 800303a:	f107 0318 	add.w	r3, r7, #24
 800303e:	f107 0210 	add.w	r2, r7, #16
 8003042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003046:	e883 0003 	stmia.w	r3, {r0, r1}
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	ee07 2a10 	vmov	s14, r2
 8003052:	ee07 3a90 	vmov	s15, r3
}
 8003056:	eeb0 0a47 	vmov.f32	s0, s14
 800305a:	eef0 0a67 	vmov.f32	s1, s15
 800305e:	3724      	adds	r7, #36	; 0x24
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <vector2_norm>:
void vector2_display(Vector2 u) {
    printf("{ x: %f, y: %f }\r\n", u.x, u.y);
}


float vector2_norm(Vector2 u) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	eeb0 7a40 	vmov.f32	s14, s0
 8003072:	eef0 7a60 	vmov.f32	s15, s1
 8003076:	ed87 7a00 	vstr	s14, [r7]
 800307a:	edc7 7a01 	vstr	s15, [r7, #4]
    return sqrt(u.x*u.x + u.y*u.y);
 800307e:	ed97 7a00 	vldr	s14, [r7]
 8003082:	edd7 7a00 	vldr	s15, [r7]
 8003086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308a:	edd7 6a01 	vldr	s13, [r7, #4]
 800308e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309a:	ee17 0a90 	vmov	r0, s15
 800309e:	f7fd fa73 	bl	8000588 <__aeabi_f2d>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	ec43 2b10 	vmov	d0, r2, r3
 80030aa:	f008 f925 	bl	800b2f8 <sqrt>
 80030ae:	ec53 2b10 	vmov	r2, r3, d0
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fd fd97 	bl	8000be8 <__aeabi_d2f>
 80030ba:	4603      	mov	r3, r0
 80030bc:	ee07 3a90 	vmov	s15, r3
}
 80030c0:	eeb0 0a67 	vmov.f32	s0, s15
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <vector2_angle>:


float vector2_angle(Vector2 u) {
 80030ca:	b5b0      	push	{r4, r5, r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	eeb0 7a40 	vmov.f32	s14, s0
 80030d4:	eef0 7a60 	vmov.f32	s15, s1
 80030d8:	ed87 7a00 	vstr	s14, [r7]
 80030dc:	edc7 7a01 	vstr	s15, [r7, #4]
    return atan2(u.y, u.x);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd fa50 	bl	8000588 <__aeabi_f2d>
 80030e8:	4604      	mov	r4, r0
 80030ea:	460d      	mov	r5, r1
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fa4a 	bl	8000588 <__aeabi_f2d>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	ec43 2b11 	vmov	d1, r2, r3
 80030fc:	ec45 4b10 	vmov	d0, r4, r5
 8003100:	f008 f8ca 	bl	800b298 <atan2>
 8003104:	ec53 2b10 	vmov	r2, r3, d0
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f7fd fd6c 	bl	8000be8 <__aeabi_d2f>
 8003110:	4603      	mov	r3, r0
 8003112:	ee07 3a90 	vmov	s15, r3
}
 8003116:	eeb0 0a67 	vmov.f32	s0, s15
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bdb0      	pop	{r4, r5, r7, pc}

08003120 <vector2_dist2>:
    Vector2 diff = { v.x - u.x, v.y - u.y };
    return vector2_norm(diff);
}


float vector2_dist2(Vector2 u, Vector2 v) {
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	eeb0 6a40 	vmov.f32	s12, s0
 800312a:	eef0 6a60 	vmov.f32	s13, s1
 800312e:	eeb0 7a41 	vmov.f32	s14, s2
 8003132:	eef0 7a61 	vmov.f32	s15, s3
 8003136:	ed87 6a02 	vstr	s12, [r7, #8]
 800313a:	edc7 6a03 	vstr	s13, [r7, #12]
 800313e:	ed87 7a00 	vstr	s14, [r7]
 8003142:	edc7 7a01 	vstr	s15, [r7, #4]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 8003146:	ed97 7a00 	vldr	s14, [r7]
 800314a:	edd7 7a02 	vldr	s15, [r7, #8]
 800314e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003152:	edc7 7a04 	vstr	s15, [r7, #16]
 8003156:	ed97 7a01 	vldr	s14, [r7, #4]
 800315a:	edd7 7a03 	vldr	s15, [r7, #12]
 800315e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003162:	edc7 7a05 	vstr	s15, [r7, #20]
    return diff.x*diff.x + diff.y*diff.y;
 8003166:	ed97 7a04 	vldr	s14, [r7, #16]
 800316a:	edd7 7a04 	vldr	s15, [r7, #16]
 800316e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003172:	edd7 6a05 	vldr	s13, [r7, #20]
 8003176:	edd7 7a05 	vldr	s15, [r7, #20]
 800317a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800317e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003182:	eeb0 0a67 	vmov.f32	s0, s15
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <vector2_diff>:
    Vector2 sum = { v.x + u.x, v.y + u.y };
    return sum;
}


Vector2 vector2_diff(Vector2 u, Vector2 v) {
 8003190:	b480      	push	{r7}
 8003192:	b08b      	sub	sp, #44	; 0x2c
 8003194:	af00      	add	r7, sp, #0
 8003196:	eeb0 6a40 	vmov.f32	s12, s0
 800319a:	eef0 6a60 	vmov.f32	s13, s1
 800319e:	eeb0 7a41 	vmov.f32	s14, s2
 80031a2:	eef0 7a61 	vmov.f32	s15, s3
 80031a6:	ed87 6a04 	vstr	s12, [r7, #16]
 80031aa:	edc7 6a05 	vstr	s13, [r7, #20]
 80031ae:	ed87 7a02 	vstr	s14, [r7, #8]
 80031b2:	edc7 7a03 	vstr	s15, [r7, #12]
    Vector2 diff = { u.x - v.x, u.y - v.y };
 80031b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80031ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80031be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c2:	edc7 7a06 	vstr	s15, [r7, #24]
 80031c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d2:	edc7 7a07 	vstr	s15, [r7, #28]
    return diff;
 80031d6:	f107 0320 	add.w	r3, r7, #32
 80031da:	f107 0218 	add.w	r2, r7, #24
 80031de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80031e6:	6a3a      	ldr	r2, [r7, #32]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	ee07 2a10 	vmov	s14, r2
 80031ee:	ee07 3a90 	vmov	s15, r3
}
 80031f2:	eeb0 0a47 	vmov.f32	s0, s14
 80031f6:	eef0 0a67 	vmov.f32	s1, s15
 80031fa:	372c      	adds	r7, #44	; 0x2c
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <vector2_cross>:
float vector2_dot(Vector2 u, Vector2 v) {
    return u.x * v.x + u.y * v.y;
}


float vector2_cross(Vector2 u, Vector2 v) {
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	eeb0 6a40 	vmov.f32	s12, s0
 800320e:	eef0 6a60 	vmov.f32	s13, s1
 8003212:	eeb0 7a41 	vmov.f32	s14, s2
 8003216:	eef0 7a61 	vmov.f32	s15, s3
 800321a:	ed87 6a02 	vstr	s12, [r7, #8]
 800321e:	edc7 6a03 	vstr	s13, [r7, #12]
 8003222:	ed87 7a00 	vstr	s14, [r7]
 8003226:	edc7 7a01 	vstr	s15, [r7, #4]
    return u.x * v.y - u.y * v.x;
 800322a:	ed97 7a02 	vldr	s14, [r7, #8]
 800322e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003236:	edd7 6a03 	vldr	s13, [r7, #12]
 800323a:	edd7 7a00 	vldr	s15, [r7]
 800323e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003242:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8003246:	eeb0 0a67 	vmov.f32	s0, s15
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	4b48      	ldr	r3, [pc, #288]	; (8003390 <MX_GPIO_Init+0x13c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a47      	ldr	r2, [pc, #284]	; (8003390 <MX_GPIO_Init+0x13c>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b45      	ldr	r3, [pc, #276]	; (8003390 <MX_GPIO_Init+0x13c>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b41      	ldr	r3, [pc, #260]	; (8003390 <MX_GPIO_Init+0x13c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a40      	ldr	r2, [pc, #256]	; (8003390 <MX_GPIO_Init+0x13c>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <MX_GPIO_Init+0x13c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b3a      	ldr	r3, [pc, #232]	; (8003390 <MX_GPIO_Init+0x13c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a39      	ldr	r2, [pc, #228]	; (8003390 <MX_GPIO_Init+0x13c>)
 80032ac:	f043 0308 	orr.w	r3, r3, #8
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b37      	ldr	r3, [pc, #220]	; (8003390 <MX_GPIO_Init+0x13c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	4b33      	ldr	r3, [pc, #204]	; (8003390 <MX_GPIO_Init+0x13c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a32      	ldr	r2, [pc, #200]	; (8003390 <MX_GPIO_Init+0x13c>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <MX_GPIO_Init+0x13c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	607b      	str	r3, [r7, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	f640 0107 	movw	r1, #2055	; 0x807
 80032e0:	482c      	ldr	r0, [pc, #176]	; (8003394 <MX_GPIO_Init+0x140>)
 80032e2:	f001 ff1f 	bl	8005124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2120      	movs	r1, #32
 80032ea:	482b      	ldr	r0, [pc, #172]	; (8003398 <MX_GPIO_Init+0x144>)
 80032ec:	f001 ff1a 	bl	8005124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEAM_LED_GPIO_Port, TEAM_LED_Pin, GPIO_PIN_RESET);
 80032f0:	2200      	movs	r2, #0
 80032f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032f6:	4829      	ldr	r0, [pc, #164]	; (800339c <MX_GPIO_Init+0x148>)
 80032f8:	f001 ff14 	bl	8005124 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin;
 80032fc:	f640 0307 	movw	r3, #2055	; 0x807
 8003300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003302:	2301      	movs	r3, #1
 8003304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	481f      	ldr	r0, [pc, #124]	; (8003394 <MX_GPIO_Init+0x140>)
 8003316:	f001 fd59 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800331a:	2320      	movs	r3, #32
 800331c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331e:	2301      	movs	r3, #1
 8003320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800332a:	f107 0314 	add.w	r3, r7, #20
 800332e:	4619      	mov	r1, r3
 8003330:	4819      	ldr	r0, [pc, #100]	; (8003398 <MX_GPIO_Init+0x144>)
 8003332:	f001 fd4b 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEAM_BUTTON_Pin;
 8003336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003340:	2302      	movs	r3, #2
 8003342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEAM_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	4619      	mov	r1, r3
 800334a:	4812      	ldr	r0, [pc, #72]	; (8003394 <MX_GPIO_Init+0x140>)
 800334c:	f001 fd3e 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_Pin;
 8003350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800335a:	2302      	movs	r3, #2
 800335c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	4619      	mov	r1, r3
 8003364:	480c      	ldr	r0, [pc, #48]	; (8003398 <MX_GPIO_Init+0x144>)
 8003366:	f001 fd31 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEAM_LED_Pin;
 800336a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800336e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003370:	2301      	movs	r3, #1
 8003372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEAM_LED_GPIO_Port, &GPIO_InitStruct);
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	4619      	mov	r1, r3
 8003382:	4806      	ldr	r0, [pc, #24]	; (800339c <MX_GPIO_Init+0x148>)
 8003384:	f001 fd22 	bl	8004dcc <HAL_GPIO_Init>

}
 8003388:	bf00      	nop
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	40020800 	.word	0x40020800
 8003398:	40020000 	.word	0x40020000
 800339c:	40020400 	.word	0x40020400

080033a0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e00b      	b.n	80033ca <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	1c4b      	adds	r3, r1, #1
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295
 80033bc:	2201      	movs	r2, #1
 80033be:	4807      	ldr	r0, [pc, #28]	; (80033dc <_write+0x3c>)
 80033c0:	f003 ff0f 	bl	80071e2 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	dbef      	blt.n	80033b2 <_write+0x12>
	}
	return len;
 80033d2:	687b      	ldr	r3, [r7, #4]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	2000059c 	.word	0x2000059c

080033e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b090      	sub	sp, #64	; 0x40
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033e6:	f001 fab7 	bl	8004958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033ea:	f000 fa41 	bl	8003870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ee:	f7ff ff31 	bl	8003254 <MX_GPIO_Init>
  MX_TIM1_Init();
 80033f2:	f000 fc29 	bl	8003c48 <MX_TIM1_Init>
  MX_TIM8_Init();
 80033f6:	f000 fe27 	bl	8004048 <MX_TIM8_Init>
  MX_TIM11_Init();
 80033fa:	f000 fec5 	bl	8004188 <MX_TIM11_Init>
  MX_TIM3_Init();
 80033fe:	f000 fcc9 	bl	8003d94 <MX_TIM3_Init>
  MX_TIM7_Init();
 8003402:	f000 fdeb 	bl	8003fdc <MX_TIM7_Init>
  MX_TIM2_Init();
 8003406:	f000 fc77 	bl	8003cf8 <MX_TIM2_Init>
  MX_TIM6_Init();
 800340a:	f000 fdb1 	bl	8003f70 <MX_TIM6_Init>
  MX_TIM4_Init();
 800340e:	f000 fd15 	bl	8003e3c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8003412:	f001 f905 	bl	8004620 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8003416:	f000 fd5d 	bl	8003ed4 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 800341a:	f001 f92b 	bl	8004674 <MX_USART6_UART_Init>
  MX_UART4_Init();
 800341e:	f001 f8ab 	bl	8004578 <MX_UART4_Init>
  MX_UART5_Init();
 8003422:	f001 f8d3 	bl	80045cc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8003426:	48b4      	ldr	r0, [pc, #720]	; (80036f8 <main+0x318>)
 8003428:	f002 fd38 	bl	8005e9c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800342c:	48b3      	ldr	r0, [pc, #716]	; (80036fc <main+0x31c>)
 800342e:	f002 fd35 	bl	8005e9c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8003432:	48b3      	ldr	r0, [pc, #716]	; (8003700 <main+0x320>)
 8003434:	f002 fd9a 	bl	8005f6c <HAL_TIM_Base_Start_IT>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing propulsion system...");
 8003438:	48b2      	ldr	r0, [pc, #712]	; (8003704 <main+0x324>)
 800343a:	f005 fc9b 	bl	8008d74 <iprintf>
  propulsion_initialize();
 800343e:	f7fe fe9b 	bl	8002178 <propulsion_initialize>
  propulsion_enableMotors();
 8003442:	f7fe fed1 	bl	80021e8 <propulsion_enableMotors>
  avoidance_initialize();
 8003446:	f7fd fda1 	bl	8000f8c <avoidance_initialize>
  HAL_Delay(200);
 800344a:	20c8      	movs	r0, #200	; 0xc8
 800344c:	f001 faf6 	bl	8004a3c <HAL_Delay>
  printf(" Done.\r\n");
 8003450:	48ad      	ldr	r0, [pc, #692]	; (8003708 <main+0x328>)
 8003452:	f005 fd15 	bl	8008e80 <puts>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing strategy...");
 8003456:	48ad      	ldr	r0, [pc, #692]	; (800370c <main+0x32c>)
 8003458:	f005 fc8c 	bl	8008d74 <iprintf>
  Strategy* strategy = strategy_initialize();
 800345c:	f7ff fc3a 	bl	8002cd4 <strategy_initialize>
 8003460:	6278      	str	r0, [r7, #36]	; 0x24
  int curveIndex = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	63fb      	str	r3, [r7, #60]	; 0x3c
  int onSiteActionIndex = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
  int onMoveActionIndex = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	637b      	str	r3, [r7, #52]	; 0x34

  robot.waitingForOnSiteAction = false;
 800346e:	4ba8      	ldr	r3, [pc, #672]	; (8003710 <main+0x330>)
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
  robot.waitingForOnMoveAction = false;
 8003474:	4ba6      	ldr	r3, [pc, #664]	; (8003710 <main+0x330>)
 8003476:	2200      	movs	r2, #0
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
  robot.team = YELLOW;
 800347a:	4ba5      	ldr	r3, [pc, #660]	; (8003710 <main+0x330>)
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  float t = 0;
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	633b      	str	r3, [r7, #48]	; 0x30

  HAL_Delay(200);
 8003488:	20c8      	movs	r0, #200	; 0xc8
 800348a:	f001 fad7 	bl	8004a3c <HAL_Delay>
  printf(" Done.\r\n");
 800348e:	489e      	ldr	r0, [pc, #632]	; (8003708 <main+0x328>)
 8003490:	f005 fcf6 	bl	8008e80 <puts>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);


  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing lidar...");
 8003494:	489f      	ldr	r0, [pc, #636]	; (8003714 <main+0x334>)
 8003496:	f005 fc6d 	bl	8008d74 <iprintf>
  lidar_initialize();
 800349a:	f7fe fbed 	bl	8001c78 <lidar_initialize>
  HAL_Delay(200);
 800349e:	20c8      	movs	r0, #200	; 0xc8
 80034a0:	f001 facc 	bl	8004a3c <HAL_Delay>
  printf(" Done.\r\n");
 80034a4:	4898      	ldr	r0, [pc, #608]	; (8003708 <main+0x328>)
 80034a6:	f005 fceb 	bl	8008e80 <puts>

  bool waitingForMatchStart = true;
 80034aa:	2301      	movs	r3, #1
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  printf("Waiting for start...\r\n");
 80034ae:	489a      	ldr	r0, [pc, #616]	; (8003718 <main+0x338>)
 80034b0:	f005 fce6 	bl	8008e80 <puts>

  bool teamButtonVal = false;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28

  while (waitingForMatchStart) {
 80034b8:	e02c      	b.n	8003514 <main+0x134>
	  waitingForMatchStart = HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 80034ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034be:	4897      	ldr	r0, [pc, #604]	; (800371c <main+0x33c>)
 80034c0:	f001 fe18 	bl	80050f4 <HAL_GPIO_ReadPin>
 80034c4:	4603      	mov	r3, r0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (HAL_GPIO_ReadPin(TEAM_BUTTON_GPIO_Port, TEAM_BUTTON_Pin) && !teamButtonVal) {
 80034c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034cc:	4894      	ldr	r0, [pc, #592]	; (8003720 <main+0x340>)
 80034ce:	f001 fe11 	bl	80050f4 <HAL_GPIO_ReadPin>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <main+0x104>
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <main+0x104>
		  switchTeam(strategy);
 80034de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034e0:	f7ff fd38 	bl	8002f54 <switchTeam>
	  }

	  HAL_GPIO_WritePin(TEAM_LED_GPIO_Port, TEAM_LED_Pin, robot.team == PURPLE);
 80034e4:	4b8a      	ldr	r3, [pc, #552]	; (8003710 <main+0x330>)
 80034e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034fa:	488a      	ldr	r0, [pc, #552]	; (8003724 <main+0x344>)
 80034fc:	f001 fe12 	bl	8005124 <HAL_GPIO_WritePin>
	  teamButtonVal = HAL_GPIO_ReadPin(TEAM_BUTTON_GPIO_Port, TEAM_BUTTON_Pin);
 8003500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003504:	4886      	ldr	r0, [pc, #536]	; (8003720 <main+0x340>)
 8003506:	f001 fdf5 	bl	80050f4 <HAL_GPIO_ReadPin>
 800350a:	4603      	mov	r3, r0
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28

	  HAL_Delay(50);
 800350e:	2032      	movs	r0, #50	; 0x32
 8003510:	f001 fa94 	bl	8004a3c <HAL_Delay>
  while (waitingForMatchStart) {
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1cf      	bne.n	80034ba <main+0xda>
	  //printf("%d\r\n", teamButtonVal);
	  //HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, teamButtonVal);
  }

  printf("Initializing odometry...");
 800351a:	4883      	ldr	r0, [pc, #524]	; (8003728 <main+0x348>)
 800351c:	f005 fc2a 	bl	8008d74 <iprintf>
  Vector2 start = strategy->path[0]->p1;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800352e:	e883 0003 	stmia.w	r3, {r0, r1}
  Vector2 startTangent = strategy->path[0]->p2;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	f107 0308 	add.w	r3, r7, #8
 800353c:	3208      	adds	r2, #8
 800353e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003542:	e883 0003 	stmia.w	r3, {r0, r1}
  float startAngle = vector2_angle(vector2_diff(startTangent, start));
 8003546:	ed97 6a04 	vldr	s12, [r7, #16]
 800354a:	edd7 6a05 	vldr	s13, [r7, #20]
 800354e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003552:	edd7 7a03 	vldr	s15, [r7, #12]
 8003556:	eeb0 1a46 	vmov.f32	s2, s12
 800355a:	eef0 1a66 	vmov.f32	s3, s13
 800355e:	eeb0 0a47 	vmov.f32	s0, s14
 8003562:	eef0 0a67 	vmov.f32	s1, s15
 8003566:	f7ff fe13 	bl	8003190 <vector2_diff>
 800356a:	eeb0 7a40 	vmov.f32	s14, s0
 800356e:	eef0 7a60 	vmov.f32	s15, s1
 8003572:	ed87 7a06 	vstr	s14, [r7, #24]
 8003576:	edc7 7a07 	vstr	s15, [r7, #28]
 800357a:	ed97 7a06 	vldr	s14, [r7, #24]
 800357e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003582:	eeb0 0a47 	vmov.f32	s0, s14
 8003586:	eef0 0a67 	vmov.f32	s1, s15
 800358a:	f7ff fd9e 	bl	80030ca <vector2_angle>
 800358e:	ed87 0a08 	vstr	s0, [r7, #32]
  odometry_setPosition(start.x, start.y);
 8003592:	edd7 7a04 	vldr	s15, [r7, #16]
 8003596:	ed97 7a05 	vldr	s14, [r7, #20]
 800359a:	eef0 0a47 	vmov.f32	s1, s14
 800359e:	eeb0 0a67 	vmov.f32	s0, s15
 80035a2:	f7fe fdc3 	bl	800212c <odometry_setPosition>
  odometry_setAngle(startAngle);
 80035a6:	ed97 0a08 	vldr	s0, [r7, #32]
 80035aa:	f7fe fdd5 	bl	8002158 <odometry_setAngle>
  robot.measuredSpeed = 0;
 80035ae:	4b58      	ldr	r3, [pc, #352]	; (8003710 <main+0x330>)
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	61da      	str	r2, [r3, #28]
  HAL_Delay(200);
 80035b6:	20c8      	movs	r0, #200	; 0xc8
 80035b8:	f001 fa40 	bl	8004a3c <HAL_Delay>
  printf(" Done.\r\n");
 80035bc:	4852      	ldr	r0, [pc, #328]	; (8003708 <main+0x328>)
 80035be:	f005 fc5f 	bl	8008e80 <puts>

  printf("Go!\r\n");
 80035c2:	485a      	ldr	r0, [pc, #360]	; (800372c <main+0x34c>)
 80035c4:	f005 fc5c 	bl	8008e80 <puts>

  //odometry_setPosition(0, 0);
  //odometry_setAngle(0);

  HAL_UART_Receive_IT(&huart4, &lidarData, 1);
 80035c8:	2201      	movs	r2, #1
 80035ca:	4959      	ldr	r1, [pc, #356]	; (8003730 <main+0x350>)
 80035cc:	4859      	ldr	r0, [pc, #356]	; (8003734 <main+0x354>)
 80035ce:	f003 fe9a 	bl	8007306 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &armData, 1);
 80035d2:	2201      	movs	r2, #1
 80035d4:	4958      	ldr	r1, [pc, #352]	; (8003738 <main+0x358>)
 80035d6:	4859      	ldr	r0, [pc, #356]	; (800373c <main+0x35c>)
 80035d8:	f003 fe95 	bl	8007306 <HAL_UART_Receive_IT>
	  }

	  HAL_Delay(100);
  }*/

  while (onSiteActionIndex < strategy->onSiteActionsLengths[0]) {
 80035dc:	e026      	b.n	800362c <main+0x24c>
	  uint8_t action = strategy->onSiteActions[0][onSiteActionIndex];
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
	  serial_send(&action, 1, 6);
 80035ec:	1dfb      	adds	r3, r7, #7
 80035ee:	2206      	movs	r2, #6
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fad0 	bl	8002b98 <serial_send>
	  robot.waitingForOnSiteAction = true;
 80035f8:	4b45      	ldr	r3, [pc, #276]	; (8003710 <main+0x330>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	621a      	str	r2, [r3, #32]

	  printf("Waiting for 0xFF...\r\n");
 80035fe:	4850      	ldr	r0, [pc, #320]	; (8003740 <main+0x360>)
 8003600:	f005 fc3e 	bl	8008e80 <puts>
	  printf("%d\r\n", robot.waitingForOnSiteAction);
 8003604:	4b42      	ldr	r3, [pc, #264]	; (8003710 <main+0x330>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4619      	mov	r1, r3
 800360a:	484e      	ldr	r0, [pc, #312]	; (8003744 <main+0x364>)
 800360c:	f005 fbb2 	bl	8008d74 <iprintf>
	  while (robot.waitingForOnSiteAction) {}
 8003610:	bf00      	nop
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <main+0x330>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1fb      	bne.n	8003612 <main+0x232>
	  printf("%d\r\n", robot.waitingForOnSiteAction);
 800361a:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <main+0x330>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4619      	mov	r1, r3
 8003620:	4848      	ldr	r0, [pc, #288]	; (8003744 <main+0x364>)
 8003622:	f005 fba7 	bl	8008d74 <iprintf>
	  onSiteActionIndex++;
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	3301      	adds	r3, #1
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
  while (onSiteActionIndex < strategy->onSiteActionsLengths[0]) {
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003634:	429a      	cmp	r2, r3
 8003636:	dbd2      	blt.n	80035de <main+0x1fe>
  }

  printf("About to move...\r\n");
 8003638:	4843      	ldr	r0, [pc, #268]	; (8003748 <main+0x368>)
 800363a:	f005 fc21 	bl	8008e80 <puts>

  while (1) {
	  if (onMoveActionIndex < strategy->onMoveActionsLengths[curveIndex]
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800364c:	429a      	cmp	r2, r3
 800364e:	da1a      	bge.n	8003686 <main+0x2a6>
              && !robot.waitingForOnMoveAction
 8003650:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <main+0x330>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d116      	bne.n	8003686 <main+0x2a6>
			  && !robot.waitingForOnSiteAction) {
 8003658:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <main+0x330>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d112      	bne.n	8003686 <main+0x2a6>
		  uint8_t action = strategy->onMoveActions[curveIndex][onMoveActionIndex];
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366e:	4413      	add	r3, r2
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	71bb      	strb	r3, [r7, #6]
		  serial_send(&action, 1, 6);
 8003674:	1dbb      	adds	r3, r7, #6
 8003676:	2206      	movs	r2, #6
 8003678:	2101      	movs	r1, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fa8c 	bl	8002b98 <serial_send>
		  robot.waitingForOnMoveAction = true;
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <main+0x330>)
 8003682:	2201      	movs	r2, #1
 8003684:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  avoidance_update(t, strategy->directions[curveIndex]);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368c:	4413      	add	r3, r2
 800368e:	f993 3000 	ldrsb.w	r3, [r3]
 8003692:	4618      	mov	r0, r3
 8003694:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003698:	f7fd fc96 	bl	8000fc8 <avoidance_update>

	  if (avoidanceState == PATH_CLEAR && curveIndex < strategy->length) {
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <main+0x36c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d155      	bne.n	8003750 <main+0x370>
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036aa:	429a      	cmp	r2, r3
 80036ac:	da50      	bge.n	8003750 <main+0x370>
		  t = propulsion_followBezier(
				  strategy->path[curveIndex],
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80036b8:	6818      	ldr	r0, [r3, #0]
				  strategy->directions[curveIndex],
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c0:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80036c2:	f993 1000 	ldrsb.w	r1, [r3]
				  strategy->speeds[curveIndex],
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80036d0:	edd3 7a00 	vldr	s15, [r3]
				  strategy->speeds[curveIndex+1],
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036da:	3301      	adds	r3, #1
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80036e0:	ed93 7a00 	vldr	s14, [r3]
 80036e4:	2200      	movs	r2, #0
 80036e6:	eef0 0a47 	vmov.f32	s1, s14
 80036ea:	eeb0 0a67 	vmov.f32	s0, s15
 80036ee:	f7ff f93b 	bl	8002968 <propulsion_followBezier>
 80036f2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 80036f6:	e05e      	b.n	80037b6 <main+0x3d6>
 80036f8:	2000028c 	.word	0x2000028c
 80036fc:	2000031c 	.word	0x2000031c
 8003700:	200003ac 	.word	0x200003ac
 8003704:	0800c908 	.word	0x0800c908
 8003708:	0800c92c 	.word	0x0800c92c
 800370c:	0800c934 	.word	0x0800c934
 8003710:	20000258 	.word	0x20000258
 8003714:	0800c950 	.word	0x0800c950
 8003718:	0800c968 	.word	0x0800c968
 800371c:	40020000 	.word	0x40020000
 8003720:	40020800 	.word	0x40020800
 8003724:	40020400 	.word	0x40020400
 8003728:	0800c980 	.word	0x0800c980
 800372c:	0800c99c 	.word	0x0800c99c
 8003730:	20000284 	.word	0x20000284
 8003734:	20000514 	.word	0x20000514
 8003738:	20000285 	.word	0x20000285
 800373c:	200005e0 	.word	0x200005e0
 8003740:	0800c9a4 	.word	0x0800c9a4
 8003744:	0800c9bc 	.word	0x0800c9bc
 8003748:	0800c9c4 	.word	0x0800c9c4
 800374c:	200001f8 	.word	0x200001f8
				  false
		  );
	  } else if (avoidanceState == PATH_OBSTRUCTED) {
 8003750:	4b43      	ldr	r3, [pc, #268]	; (8003860 <main+0x480>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d106      	bne.n	8003766 <main+0x386>
		  propulsion_setSpeeds(0, 0);
 8003758:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003864 <main+0x484>
 800375c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003864 <main+0x484>
 8003760:	f7fe fd62 	bl	8002228 <propulsion_setSpeeds>
 8003764:	e027      	b.n	80037b6 <main+0x3d6>
	  } else if (avoidanceState == BACKTRACKING) {
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <main+0x480>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d123      	bne.n	80037b6 <main+0x3d6>
		  t = propulsion_followBezier(
				  strategy->path[curveIndex],
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003778:	6818      	ldr	r0, [r3, #0]
				  strategy->directions[curveIndex],
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003780:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003782:	f993 1000 	ldrsb.w	r1, [r3]
				  strategy->speeds[curveIndex],
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003790:	edd3 7a00 	vldr	s15, [r3]
				  strategy->speeds[curveIndex+1],
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379a:	3301      	adds	r3, #1
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80037a0:	ed93 7a00 	vldr	s14, [r3]
 80037a4:	2201      	movs	r2, #1
 80037a6:	eef0 0a47 	vmov.f32	s1, s14
 80037aa:	eeb0 0a67 	vmov.f32	s0, s15
 80037ae:	f7ff f8db 	bl	8002968 <propulsion_followBezier>
 80037b2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
				  true
		  );
	  }

	  if (t > 0.99 && !robot.waitingForOnMoveAction) {
 80037b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b8:	f7fc fee6 	bl	8000588 <__aeabi_f2d>
 80037bc:	a326      	add	r3, pc, #152	; (adr r3, 8003858 <main+0x478>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f7fd f9c9 	bl	8000b58 <__aeabi_dcmpgt>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d035      	beq.n	8003838 <main+0x458>
 80037cc:	4b26      	ldr	r3, [pc, #152]	; (8003868 <main+0x488>)
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d131      	bne.n	8003838 <main+0x458>
	      curveIndex = (curveIndex + 1);// % strategy->length;
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	3301      	adds	r3, #1
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	      onSiteActionIndex = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	63bb      	str	r3, [r7, #56]	; 0x38
	      while (onSiteActionIndex < strategy->onSiteActionsLengths[curveIndex]) {
 80037de:	e020      	b.n	8003822 <main+0x442>
	    	  uint8_t action = strategy->onSiteActions[curveIndex][onSiteActionIndex];
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	717b      	strb	r3, [r7, #5]
	    	  serial_send(&action, 1, 6);
 80037f4:	1d7b      	adds	r3, r7, #5
 80037f6:	2206      	movs	r2, #6
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f9cc 	bl	8002b98 <serial_send>
	    	  robot.waitingForOnSiteAction = true;
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <main+0x488>)
 8003802:	2201      	movs	r2, #1
 8003804:	621a      	str	r2, [r3, #32]

	    	  while (robot.waitingForOnSiteAction) {
 8003806:	e005      	b.n	8003814 <main+0x434>
	    		  propulsion_setSpeeds(0, 0);
 8003808:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003864 <main+0x484>
 800380c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003864 <main+0x484>
 8003810:	f7fe fd0a 	bl	8002228 <propulsion_setSpeeds>
	    	  while (robot.waitingForOnSiteAction) {
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <main+0x488>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f5      	bne.n	8003808 <main+0x428>
	    	  }
	    	  onSiteActionIndex++;
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	3301      	adds	r3, #1
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
	      while (onSiteActionIndex < strategy->onSiteActionsLengths[curveIndex]) {
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003830:	429a      	cmp	r2, r3
 8003832:	dbd5      	blt.n	80037e0 <main+0x400>
	      }
	      onMoveActionIndex = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
	  }

	  if (curveIndex == strategy->length) {
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800383e:	429a      	cmp	r2, r3
 8003840:	d000      	beq.n	8003844 <main+0x464>
	  if (onMoveActionIndex < strategy->onMoveActionsLengths[curveIndex]
 8003842:	e6fc      	b.n	800363e <main+0x25e>
		  break;
 8003844:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  propulsion_disableMotors();
 8003846:	f7fe fcdf 	bl	8002208 <propulsion_disableMotors>
  printf("Finished.\r\n");
 800384a:	4808      	ldr	r0, [pc, #32]	; (800386c <main+0x48c>)
 800384c:	f005 fb18 	bl	8008e80 <puts>

  while (1) {
 8003850:	e7fe      	b.n	8003850 <main+0x470>
 8003852:	bf00      	nop
 8003854:	f3af 8000 	nop.w
 8003858:	7ae147ae 	.word	0x7ae147ae
 800385c:	3fefae14 	.word	0x3fefae14
 8003860:	200001f8 	.word	0x200001f8
 8003864:	00000000 	.word	0x00000000
 8003868:	20000258 	.word	0x20000258
 800386c:	0800c9d8 	.word	0x0800c9d8

08003870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b094      	sub	sp, #80	; 0x50
 8003874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003876:	f107 031c 	add.w	r3, r7, #28
 800387a:	2234      	movs	r2, #52	; 0x34
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fd10 	bl	80082a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003884:	f107 0308 	add.w	r3, r7, #8
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <SystemClock_Config+0xe0>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	4a2c      	ldr	r2, [pc, #176]	; (8003950 <SystemClock_Config+0xe0>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6413      	str	r3, [r2, #64]	; 0x40
 80038a4:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <SystemClock_Config+0xe0>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b0:	2300      	movs	r3, #0
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4b27      	ldr	r3, [pc, #156]	; (8003954 <SystemClock_Config+0xe4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a26      	ldr	r2, [pc, #152]	; (8003954 <SystemClock_Config+0xe4>)
 80038ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <SystemClock_Config+0xe4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038cc:	2302      	movs	r3, #2
 80038ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038d0:	2301      	movs	r3, #1
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038d4:	2310      	movs	r3, #16
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038d8:	2302      	movs	r3, #2
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038dc:	2300      	movs	r3, #0
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80038e0:	2310      	movs	r3, #16
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80038e4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80038e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038ea:	2302      	movs	r3, #2
 80038ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038ee:	2302      	movs	r3, #2
 80038f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038f2:	2302      	movs	r3, #2
 80038f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038f6:	f107 031c 	add.w	r3, r7, #28
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 ffe0 	bl	80058c0 <HAL_RCC_OscConfig>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003906:	f000 f827 	bl	8003958 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800390a:	f001 fc3f 	bl	800518c <HAL_PWREx_EnableOverDrive>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003914:	f000 f820 	bl	8003958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003918:	230f      	movs	r3, #15
 800391a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800391c:	2302      	movs	r3, #2
 800391e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003924:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800392a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003930:	f107 0308 	add.w	r3, r7, #8
 8003934:	2105      	movs	r1, #5
 8003936:	4618      	mov	r0, r3
 8003938:	f001 fc78 	bl	800522c <HAL_RCC_ClockConfig>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003942:	f000 f809 	bl	8003958 <Error_Handler>
  }
}
 8003946:	bf00      	nop
 8003948:	3750      	adds	r7, #80	; 0x50
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000

08003958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800395c:	b672      	cpsid	i
}
 800395e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("A runtime error occurred.\r\n");
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <Error_Handler+0x10>)
 8003962:	f005 fa8d 	bl	8008e80 <puts>
  while (1) {
 8003966:	e7fe      	b.n	8003966 <Error_Handler+0xe>
 8003968:	0800c9e4 	.word	0x0800c9e4

0800396c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <HAL_MspInit+0x4c>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	4a0f      	ldr	r2, [pc, #60]	; (80039b8 <HAL_MspInit+0x4c>)
 800397c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003980:	6453      	str	r3, [r2, #68]	; 0x44
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_MspInit+0x4c>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_MspInit+0x4c>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <HAL_MspInit+0x4c>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_MspInit+0x4c>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800

080039bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <NMI_Handler+0x4>
	...

080039c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("A hard fault occurred.\r\n");
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <HardFault_Handler+0xc>)
 80039ca:	f005 fa59 	bl	8008e80 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ce:	e7fe      	b.n	80039ce <HardFault_Handler+0xa>
 80039d0:	0800ca00 	.word	0x0800ca00

080039d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  printf("A memory management fault occurred.\r\n");
 80039d8:	4801      	ldr	r0, [pc, #4]	; (80039e0 <MemManage_Handler+0xc>)
 80039da:	f005 fa51 	bl	8008e80 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039de:	e7fe      	b.n	80039de <MemManage_Handler+0xa>
 80039e0:	0800ca18 	.word	0x0800ca18

080039e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039e8:	e7fe      	b.n	80039e8 <BusFault_Handler+0x4>

080039ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ee:	e7fe      	b.n	80039ee <UsageFault_Handler+0x4>

080039f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a1e:	f000 ffed 	bl	80049fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <TIM2_IRQHandler+0x10>)
 8003a2e:	f002 fcd5 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200002d4 	.word	0x200002d4

08003a3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <TIM4_IRQHandler+0x10>)
 8003a42:	f002 fccb 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000364 	.word	0x20000364

08003a50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  //propulsion_updatePosition(0.01);
  lidar_incrementTime(10);
 8003a54:	200a      	movs	r0, #10
 8003a56:	f7fe f9b3 	bl	8001dc0 <lidar_incrementTime>
  odometry_updatePosition();
 8003a5a:	f7fe fa09 	bl	8001e70 <odometry_updatePosition>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003a5e:	4802      	ldr	r0, [pc, #8]	; (8003a68 <TIM5_IRQHandler+0x18>)
 8003a60:	f002 fcbc 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a64:	bf00      	nop
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200003ac 	.word	0x200003ac

08003a6c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <UART4_IRQHandler+0x10>)
 8003a72:	f003 fc79 	bl	8007368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000514 	.word	0x20000514

08003a80 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <UART5_IRQHandler+0x10>)
 8003a86:	f003 fc6f 	bl	8007368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000558 	.word	0x20000558

08003a94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <TIM6_DAC_IRQHandler+0x10>)
 8003a9a:	f002 fc9f 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200003f4 	.word	0x200003f4

08003aa8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <TIM7_IRQHandler+0x10>)
 8003aae:	f002 fc95 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000043c 	.word	0x2000043c

08003abc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <USART6_IRQHandler+0x10>)
 8003ac2:	f003 fc51 	bl	8007368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200005e0 	.word	0x200005e0

08003ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
	return 1;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_kill>:

int _kill(int pid, int sig)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003aea:	f004 fba9 	bl	8008240 <__errno>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2216      	movs	r2, #22
 8003af2:	601a      	str	r2, [r3, #0]
	return -1;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_exit>:

void _exit (int status)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ffe7 	bl	8003ae0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b12:	e7fe      	b.n	8003b12 <_exit+0x12>

08003b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e00a      	b.n	8003b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b26:	f3af 8000 	nop.w
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	60ba      	str	r2, [r7, #8]
 8003b32:	b2ca      	uxtb	r2, r1
 8003b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	dbf0      	blt.n	8003b26 <_read+0x12>
	}

return len;
 8003b44:	687b      	ldr	r3, [r7, #4]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
	return -1;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b76:	605a      	str	r2, [r3, #4]
	return 0;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <_isatty>:

int _isatty(int file)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b8e:	2301      	movs	r3, #1
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
	return 0;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <_sbrk+0x5c>)
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <_sbrk+0x60>)
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bcc:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <_sbrk+0x64>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <_sbrk+0x64>)
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <_sbrk+0x68>)
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <_sbrk+0x64>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d207      	bcs.n	8003bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003be8:	f004 fb2a 	bl	8008240 <__errno>
 8003bec:	4603      	mov	r3, r0
 8003bee:	220c      	movs	r2, #12
 8003bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	e009      	b.n	8003c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <_sbrk+0x64>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <_sbrk+0x64>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <_sbrk+0x64>)
 8003c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20020000 	.word	0x20020000
 8003c18:	00000400 	.word	0x00000400
 8003c1c:	20000288 	.word	0x20000288
 8003c20:	20000638 	.word	0x20000638

08003c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <SystemInit+0x20>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <SystemInit+0x20>)
 8003c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c4e:	f107 030c 	add.w	r3, r7, #12
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f004 fb24 	bl	80082a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003c66:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <MX_TIM1_Init+0xac>)
 8003c68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c70:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c8a:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c90:	2303      	movs	r3, #3
 8003c92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003ca0:	230a      	movs	r3, #10
 8003ca2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cac:	2300      	movs	r3, #0
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	4619      	mov	r1, r3
 8003cba:	480d      	ldr	r0, [pc, #52]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003cbc:	f002 fae8 	bl	8006290 <HAL_TIM_Encoder_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003cc6:	f7ff fe47 	bl	8003958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <MX_TIM1_Init+0xa8>)
 8003cd8:	f003 f954 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003ce2:	f7ff fe39 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003ce6:	bf00      	nop
 8003ce8:	3730      	adds	r7, #48	; 0x30
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000028c 	.word	0x2000028c
 8003cf4:	40010000 	.word	0x40010000

08003cf8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d0c:	463b      	mov	r3, r7
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d1e:	f640 227e 	movw	r2, #2686	; 0xa7e
 8003d22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d3e:	4814      	ldr	r0, [pc, #80]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d40:	f002 f85c 	bl	8005dfc <HAL_TIM_Base_Init>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003d4a:	f7ff fe05 	bl	8003958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	4619      	mov	r1, r3
 8003d5a:	480d      	ldr	r0, [pc, #52]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d5c:	f002 fd08 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003d66:	f7ff fdf7 	bl	8003958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d72:	463b      	mov	r3, r7
 8003d74:	4619      	mov	r1, r3
 8003d76:	4806      	ldr	r0, [pc, #24]	; (8003d90 <MX_TIM2_Init+0x98>)
 8003d78:	f003 f904 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003d82:	f7ff fde9 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200002d4 	.word	0x200002d4

08003d94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08c      	sub	sp, #48	; 0x30
 8003d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f004 fa7e 	bl	80082a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <MX_TIM3_Init+0xa0>)
 8003db2:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <MX_TIM3_Init+0xa4>)
 8003db4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <MX_TIM3_Init+0xa0>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <MX_TIM3_Init+0xa0>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <MX_TIM3_Init+0xa0>)
 8003dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <MX_TIM3_Init+0xa0>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dd0:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <MX_TIM3_Init+0xa0>)
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003dde:	2301      	movs	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dee:	2301      	movs	r3, #1
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003df2:	2300      	movs	r3, #0
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003dfa:	f107 030c 	add.w	r3, r7, #12
 8003dfe:	4619      	mov	r1, r3
 8003e00:	480c      	ldr	r0, [pc, #48]	; (8003e34 <MX_TIM3_Init+0xa0>)
 8003e02:	f002 fa45 	bl	8006290 <HAL_TIM_Encoder_Init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003e0c:	f7ff fda4 	bl	8003958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e10:	2300      	movs	r3, #0
 8003e12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4805      	ldr	r0, [pc, #20]	; (8003e34 <MX_TIM3_Init+0xa0>)
 8003e1e:	f003 f8b1 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003e28:	f7ff fd96 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e2c:	bf00      	nop
 8003e2e:	3730      	adds	r7, #48	; 0x30
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	2000031c 	.word	0x2000031c
 8003e38:	40000400 	.word	0x40000400

08003e3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e42:	f107 0308 	add.w	r3, r7, #8
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
 8003e4c:	609a      	str	r2, [r3, #8]
 8003e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e50:	463b      	mov	r3, r7
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <MX_TIM4_Init+0x94>)
 8003e5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003e6c:	225a      	movs	r2, #90	; 0x5a
 8003e6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e7c:	4813      	ldr	r0, [pc, #76]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003e7e:	f001 ffbd 	bl	8005dfc <HAL_TIM_Base_Init>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003e88:	f7ff fd66 	bl	8003958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	4619      	mov	r1, r3
 8003e98:	480c      	ldr	r0, [pc, #48]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003e9a:	f002 fc69 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003ea4:	f7ff fd58 	bl	8003958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4805      	ldr	r0, [pc, #20]	; (8003ecc <MX_TIM4_Init+0x90>)
 8003eb6:	f003 f865 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003ec0:	f7ff fd4a 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ec4:	bf00      	nop
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000364 	.word	0x20000364
 8003ed0:	40000800 	.word	0x40000800

08003ed4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ee8:	463b      	mov	r3, r7
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <MX_TIM5_Init+0x94>)
 8003ef4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003ef8:	2209      	movs	r2, #9
 8003efa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90000;
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <MX_TIM5_Init+0x98>)
 8003f06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f08:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f14:	4813      	ldr	r0, [pc, #76]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003f16:	f001 ff71 	bl	8005dfc <HAL_TIM_Base_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8003f20:	f7ff fd1a 	bl	8003958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003f2a:	f107 0308 	add.w	r3, r7, #8
 8003f2e:	4619      	mov	r1, r3
 8003f30:	480c      	ldr	r0, [pc, #48]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003f32:	f002 fc1d 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003f3c:	f7ff fd0c 	bl	8003958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f40:	2300      	movs	r3, #0
 8003f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f48:	463b      	mov	r3, r7
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4805      	ldr	r0, [pc, #20]	; (8003f64 <MX_TIM5_Init+0x90>)
 8003f4e:	f003 f819 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8003f58:	f7ff fcfe 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	200003ac 	.word	0x200003ac
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	00015f90 	.word	0x00015f90

08003f70 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f76:	463b      	mov	r3, r7
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <MX_TIM6_Init+0x64>)
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <MX_TIM6_Init+0x68>)
 8003f82:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <MX_TIM6_Init+0x64>)
 8003f86:	f242 3227 	movw	r2, #8999	; 0x2327
 8003f8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <MX_TIM6_Init+0x64>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <MX_TIM6_Init+0x64>)
 8003f94:	2263      	movs	r2, #99	; 0x63
 8003f96:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <MX_TIM6_Init+0x64>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f9e:	480d      	ldr	r0, [pc, #52]	; (8003fd4 <MX_TIM6_Init+0x64>)
 8003fa0:	f001 ff2c 	bl	8005dfc <HAL_TIM_Base_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003faa:	f7ff fcd5 	bl	8003958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4806      	ldr	r0, [pc, #24]	; (8003fd4 <MX_TIM6_Init+0x64>)
 8003fbc:	f002 ffe2 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003fc6:	f7ff fcc7 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200003f4 	.word	0x200003f4
 8003fd8:	40001000 	.word	0x40001000

08003fdc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <MX_TIM7_Init+0x64>)
 8003fec:	4a15      	ldr	r2, [pc, #84]	; (8004044 <MX_TIM7_Init+0x68>)
 8003fee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8003ff0:	4b13      	ldr	r3, [pc, #76]	; (8004040 <MX_TIM7_Init+0x64>)
 8003ff2:	f242 3227 	movw	r2, #8999	; 0x2327
 8003ff6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <MX_TIM7_Init+0x64>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <MX_TIM7_Init+0x64>)
 8004000:	f242 720f 	movw	r2, #9999	; 0x270f
 8004004:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <MX_TIM7_Init+0x64>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800400c:	480c      	ldr	r0, [pc, #48]	; (8004040 <MX_TIM7_Init+0x64>)
 800400e:	f001 fef5 	bl	8005dfc <HAL_TIM_Base_Init>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004018:	f7ff fc9e 	bl	8003958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800401c:	2300      	movs	r3, #0
 800401e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004024:	463b      	mov	r3, r7
 8004026:	4619      	mov	r1, r3
 8004028:	4805      	ldr	r0, [pc, #20]	; (8004040 <MX_TIM7_Init+0x64>)
 800402a:	f002 ffab 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004034:	f7ff fc90 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	2000043c 	.word	0x2000043c
 8004044:	40001400 	.word	0x40001400

08004048 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b096      	sub	sp, #88	; 0x58
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800404e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800405c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	60da      	str	r2, [r3, #12]
 8004074:	611a      	str	r2, [r3, #16]
 8004076:	615a      	str	r2, [r3, #20]
 8004078:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	2220      	movs	r2, #32
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f004 f90f 	bl	80082a4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004086:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <MX_TIM8_Init+0x138>)
 8004088:	4a3e      	ldr	r2, [pc, #248]	; (8004184 <MX_TIM8_Init+0x13c>)
 800408a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 800408c:	4b3c      	ldr	r3, [pc, #240]	; (8004180 <MX_TIM8_Init+0x138>)
 800408e:	22b3      	movs	r2, #179	; 0xb3
 8004090:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <MX_TIM8_Init+0x138>)
 8004094:	2200      	movs	r2, #0
 8004096:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8004098:	4b39      	ldr	r3, [pc, #228]	; (8004180 <MX_TIM8_Init+0x138>)
 800409a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800409e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a0:	4b37      	ldr	r3, [pc, #220]	; (8004180 <MX_TIM8_Init+0x138>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040a6:	4b36      	ldr	r3, [pc, #216]	; (8004180 <MX_TIM8_Init+0x138>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ac:	4b34      	ldr	r3, [pc, #208]	; (8004180 <MX_TIM8_Init+0x138>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80040b2:	4833      	ldr	r0, [pc, #204]	; (8004180 <MX_TIM8_Init+0x138>)
 80040b4:	f001 fea2 	bl	8005dfc <HAL_TIM_Base_Init>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80040be:	f7ff fc4b 	bl	8003958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80040c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040cc:	4619      	mov	r1, r3
 80040ce:	482c      	ldr	r0, [pc, #176]	; (8004180 <MX_TIM8_Init+0x138>)
 80040d0:	f002 fb4e 	bl	8006770 <HAL_TIM_ConfigClockSource>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80040da:	f7ff fc3d 	bl	8003958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040de:	4828      	ldr	r0, [pc, #160]	; (8004180 <MX_TIM8_Init+0x138>)
 80040e0:	f001 ffb4 	bl	800604c <HAL_TIM_PWM_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80040ea:	f7ff fc35 	bl	8003958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ee:	2300      	movs	r3, #0
 80040f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040fa:	4619      	mov	r1, r3
 80040fc:	4820      	ldr	r0, [pc, #128]	; (8004180 <MX_TIM8_Init+0x138>)
 80040fe:	f002 ff41 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004108:	f7ff fc26 	bl	8003958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800410c:	2360      	movs	r3, #96	; 0x60
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8004110:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004116:	2300      	movs	r3, #0
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800411a:	2300      	movs	r3, #0
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004122:	2300      	movs	r3, #0
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800412a:	220c      	movs	r2, #12
 800412c:	4619      	mov	r1, r3
 800412e:	4814      	ldr	r0, [pc, #80]	; (8004180 <MX_TIM8_Init+0x138>)
 8004130:	f002 fa5c 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800413a:	f7ff fc0d 	bl	8003958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004142:	2300      	movs	r3, #0
 8004144:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004156:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004158:	2300      	movs	r3, #0
 800415a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4807      	ldr	r0, [pc, #28]	; (8004180 <MX_TIM8_Init+0x138>)
 8004162:	f002 ff8b 	bl	800707c <HAL_TIMEx_ConfigBreakDeadTime>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800416c:	f7ff fbf4 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <MX_TIM8_Init+0x138>)
 8004172:	f000 f99d 	bl	80044b0 <HAL_TIM_MspPostInit>

}
 8004176:	bf00      	nop
 8004178:	3758      	adds	r7, #88	; 0x58
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000484 	.word	0x20000484
 8004184:	40010400 	.word	0x40010400

08004188 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	611a      	str	r2, [r3, #16]
 800419c:	615a      	str	r2, [r3, #20]
 800419e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	; (800421c <MX_TIM11_Init+0x94>)
 80041a2:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <MX_TIM11_Init+0x98>)
 80041a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <MX_TIM11_Init+0x94>)
 80041a8:	22b3      	movs	r2, #179	; 0xb3
 80041aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <MX_TIM11_Init+0x94>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <MX_TIM11_Init+0x94>)
 80041b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <MX_TIM11_Init+0x94>)
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c0:	4b16      	ldr	r3, [pc, #88]	; (800421c <MX_TIM11_Init+0x94>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80041c6:	4815      	ldr	r0, [pc, #84]	; (800421c <MX_TIM11_Init+0x94>)
 80041c8:	f001 fe18 	bl	8005dfc <HAL_TIM_Base_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80041d2:	f7ff fbc1 	bl	8003958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80041d6:	4811      	ldr	r0, [pc, #68]	; (800421c <MX_TIM11_Init+0x94>)
 80041d8:	f001 ff38 	bl	800604c <HAL_TIM_PWM_Init>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80041e2:	f7ff fbb9 	bl	8003958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041e6:	2360      	movs	r3, #96	; 0x60
 80041e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	2200      	movs	r2, #0
 80041fa:	4619      	mov	r1, r3
 80041fc:	4807      	ldr	r0, [pc, #28]	; (800421c <MX_TIM11_Init+0x94>)
 80041fe:	f002 f9f5 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004208:	f7ff fba6 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <MX_TIM11_Init+0x94>)
 800420e:	f000 f94f 	bl	80044b0 <HAL_TIM_MspPostInit>

}
 8004212:	bf00      	nop
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200004cc 	.word	0x200004cc
 8004220:	40014800 	.word	0x40014800

08004224 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	; 0x30
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 031c 	add.w	r3, r7, #28
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a32      	ldr	r2, [pc, #200]	; (800430c <HAL_TIM_Encoder_MspInit+0xe8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d12d      	bne.n	80042a2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	4a30      	ldr	r2, [pc, #192]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6453      	str	r3, [r2, #68]	; 0x44
 8004256:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a29      	ldr	r2, [pc, #164]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = R_ENCODER_A_Pin|R_ENCODER_B_Pin;
 800427e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004284:	2302      	movs	r3, #2
 8004286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428c:	2300      	movs	r3, #0
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004290:	2301      	movs	r3, #1
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004294:	f107 031c 	add.w	r3, r7, #28
 8004298:	4619      	mov	r1, r3
 800429a:	481e      	ldr	r0, [pc, #120]	; (8004314 <HAL_TIM_Encoder_MspInit+0xf0>)
 800429c:	f000 fd96 	bl	8004dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80042a0:	e030      	b.n	8004304 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <HAL_TIM_Encoder_MspInit+0xf4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d12b      	bne.n	8004304 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	4a16      	ldr	r2, [pc, #88]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 80042b6:	f043 0302 	orr.w	r3, r3, #2
 80042ba:	6413      	str	r3, [r2, #64]	; 0x40
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6313      	str	r3, [r2, #48]	; 0x30
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_TIM_Encoder_MspInit+0xec>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_ENCODER_A_Pin|L_ENCODER_B_Pin;
 80042e4:	23c0      	movs	r3, #192	; 0xc0
 80042e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	2302      	movs	r3, #2
 80042ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042f4:	2302      	movs	r3, #2
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f8:	f107 031c 	add.w	r3, r7, #28
 80042fc:	4619      	mov	r1, r3
 80042fe:	4805      	ldr	r0, [pc, #20]	; (8004314 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004300:	f000 fd64 	bl	8004dcc <HAL_GPIO_Init>
}
 8004304:	bf00      	nop
 8004306:	3730      	adds	r7, #48	; 0x30
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40010000 	.word	0x40010000
 8004310:	40023800 	.word	0x40023800
 8004314:	40020000 	.word	0x40020000
 8004318:	40000400 	.word	0x40000400

0800431c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d116      	bne.n	800435c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
 8004332:	4b58      	ldr	r3, [pc, #352]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a57      	ldr	r2, [pc, #348]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
 800433e:	4b55      	ldr	r3, [pc, #340]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800434a:	2200      	movs	r2, #0
 800434c:	2100      	movs	r1, #0
 800434e:	201c      	movs	r0, #28
 8004350:	f000 fc73 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004354:	201c      	movs	r0, #28
 8004356:	f000 fc8c 	bl	8004c72 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800435a:	e096      	b.n	800448a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a4d      	ldr	r2, [pc, #308]	; (8004498 <HAL_TIM_Base_MspInit+0x17c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d116      	bne.n	8004394 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4a49      	ldr	r2, [pc, #292]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	6413      	str	r3, [r2, #64]	; 0x40
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	623b      	str	r3, [r7, #32]
 8004380:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004382:	2200      	movs	r2, #0
 8004384:	2100      	movs	r1, #0
 8004386:	201e      	movs	r0, #30
 8004388:	f000 fc57 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800438c:	201e      	movs	r0, #30
 800438e:	f000 fc70 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 8004392:	e07a      	b.n	800448a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a40      	ldr	r2, [pc, #256]	; (800449c <HAL_TIM_Base_MspInit+0x180>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d116      	bne.n	80043cc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	4b3c      	ldr	r3, [pc, #240]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 80043a8:	f043 0308 	orr.w	r3, r3, #8
 80043ac:	6413      	str	r3, [r2, #64]	; 0x40
 80043ae:	4b39      	ldr	r3, [pc, #228]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	2032      	movs	r0, #50	; 0x32
 80043c0:	f000 fc3b 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80043c4:	2032      	movs	r0, #50	; 0x32
 80043c6:	f000 fc54 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 80043ca:	e05e      	b.n	800448a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a33      	ldr	r2, [pc, #204]	; (80044a0 <HAL_TIM_Base_MspInit+0x184>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d116      	bne.n	8004404 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	4a2d      	ldr	r2, [pc, #180]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 80043e0:	f043 0310 	orr.w	r3, r3, #16
 80043e4:	6413      	str	r3, [r2, #64]	; 0x40
 80043e6:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2100      	movs	r1, #0
 80043f6:	2036      	movs	r0, #54	; 0x36
 80043f8:	f000 fc1f 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043fc:	2036      	movs	r0, #54	; 0x36
 80043fe:	f000 fc38 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 8004402:	e042      	b.n	800448a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM7)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <HAL_TIM_Base_MspInit+0x188>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d116      	bne.n	800443c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	4b20      	ldr	r3, [pc, #128]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004418:	f043 0320 	orr.w	r3, r3, #32
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800442a:	2200      	movs	r2, #0
 800442c:	2102      	movs	r1, #2
 800442e:	2037      	movs	r0, #55	; 0x37
 8004430:	f000 fc03 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004434:	2037      	movs	r0, #55	; 0x37
 8004436:	f000 fc1c 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 800443a:	e026      	b.n	800448a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM8)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <HAL_TIM_Base_MspInit+0x18c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10e      	bne.n	8004464 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	4a11      	ldr	r2, [pc, #68]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	6453      	str	r3, [r2, #68]	; 0x44
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
}
 8004462:	e012      	b.n	800448a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM11)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a10      	ldr	r2, [pc, #64]	; (80044ac <HAL_TIM_Base_MspInit+0x190>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10d      	bne.n	800448a <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	4a07      	ldr	r2, [pc, #28]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800447c:	6453      	str	r3, [r2, #68]	; 0x44
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_TIM_Base_MspInit+0x178>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
}
 800448a:	bf00      	nop
 800448c:	3728      	adds	r7, #40	; 0x28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40001000 	.word	0x40001000
 80044a4:	40001400 	.word	0x40001400
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40014800 	.word	0x40014800

080044b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b8:	f107 0314 	add.w	r3, r7, #20
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a25      	ldr	r2, [pc, #148]	; (8004564 <HAL_TIM_MspPostInit+0xb4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d11f      	bne.n	8004512 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_TIM_MspPostInit+0xb8>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a23      	ldr	r2, [pc, #140]	; (8004568 <HAL_TIM_MspPostInit+0xb8>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b21      	ldr	r3, [pc, #132]	; (8004568 <HAL_TIM_MspPostInit+0xb8>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f4:	2302      	movs	r3, #2
 80044f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fc:	2300      	movs	r3, #0
 80044fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004500:	2303      	movs	r3, #3
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	4619      	mov	r1, r3
 800450a:	4818      	ldr	r0, [pc, #96]	; (800456c <HAL_TIM_MspPostInit+0xbc>)
 800450c:	f000 fc5e 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004510:	e023      	b.n	800455a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_TIM_MspPostInit+0xc0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d11e      	bne.n	800455a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_TIM_MspPostInit+0xb8>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	4a10      	ldr	r2, [pc, #64]	; (8004568 <HAL_TIM_MspPostInit+0xb8>)
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	6313      	str	r3, [r2, #48]	; 0x30
 800452c:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <HAL_TIM_MspPostInit+0xb8>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800453c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	2302      	movs	r3, #2
 8004540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800454a:	2303      	movs	r3, #3
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4619      	mov	r1, r3
 8004554:	4807      	ldr	r0, [pc, #28]	; (8004574 <HAL_TIM_MspPostInit+0xc4>)
 8004556:	f000 fc39 	bl	8004dcc <HAL_GPIO_Init>
}
 800455a:	bf00      	nop
 800455c:	3728      	adds	r7, #40	; 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40010400 	.word	0x40010400
 8004568:	40023800 	.word	0x40023800
 800456c:	40020800 	.word	0x40020800
 8004570:	40014800 	.word	0x40014800
 8004574:	40020400 	.word	0x40020400

08004578 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <MX_UART4_Init+0x4c>)
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <MX_UART4_Init+0x50>)
 8004580:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <MX_UART4_Init+0x4c>)
 8004584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004588:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <MX_UART4_Init+0x4c>)
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <MX_UART4_Init+0x4c>)
 8004592:	2200      	movs	r2, #0
 8004594:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <MX_UART4_Init+0x4c>)
 8004598:	2200      	movs	r2, #0
 800459a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <MX_UART4_Init+0x4c>)
 800459e:	220c      	movs	r2, #12
 80045a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <MX_UART4_Init+0x4c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <MX_UART4_Init+0x4c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80045ae:	4805      	ldr	r0, [pc, #20]	; (80045c4 <MX_UART4_Init+0x4c>)
 80045b0:	f002 fdca 	bl	8007148 <HAL_UART_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80045ba:	f7ff f9cd 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000514 	.word	0x20000514
 80045c8:	40004c00 	.word	0x40004c00

080045cc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <MX_UART5_Init+0x4c>)
 80045d2:	4a12      	ldr	r2, [pc, #72]	; (800461c <MX_UART5_Init+0x50>)
 80045d4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <MX_UART5_Init+0x4c>)
 80045d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045dc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <MX_UART5_Init+0x4c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <MX_UART5_Init+0x4c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <MX_UART5_Init+0x4c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <MX_UART5_Init+0x4c>)
 80045f2:	220c      	movs	r2, #12
 80045f4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <MX_UART5_Init+0x4c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <MX_UART5_Init+0x4c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004602:	4805      	ldr	r0, [pc, #20]	; (8004618 <MX_UART5_Init+0x4c>)
 8004604:	f002 fda0 	bl	8007148 <HAL_UART_Init>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800460e:	f7ff f9a3 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000558 	.word	0x20000558
 800461c:	40005000 	.word	0x40005000

08004620 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <MX_USART2_UART_Init+0x4c>)
 8004626:	4a12      	ldr	r2, [pc, #72]	; (8004670 <MX_USART2_UART_Init+0x50>)
 8004628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <MX_USART2_UART_Init+0x4c>)
 800462c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004632:	4b0e      	ldr	r3, [pc, #56]	; (800466c <MX_USART2_UART_Init+0x4c>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <MX_USART2_UART_Init+0x4c>)
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <MX_USART2_UART_Init+0x4c>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004644:	4b09      	ldr	r3, [pc, #36]	; (800466c <MX_USART2_UART_Init+0x4c>)
 8004646:	220c      	movs	r2, #12
 8004648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <MX_USART2_UART_Init+0x4c>)
 800464c:	2200      	movs	r2, #0
 800464e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <MX_USART2_UART_Init+0x4c>)
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004656:	4805      	ldr	r0, [pc, #20]	; (800466c <MX_USART2_UART_Init+0x4c>)
 8004658:	f002 fd76 	bl	8007148 <HAL_UART_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004662:	f7ff f979 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	2000059c 	.word	0x2000059c
 8004670:	40004400 	.word	0x40004400

08004674 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <MX_USART6_UART_Init+0x50>)
 800467c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 8004680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004684:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 800468e:	2200      	movs	r2, #0
 8004690:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 800469a:	220c      	movs	r2, #12
 800469c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <MX_USART6_UART_Init+0x4c>)
 80046ac:	f002 fd4c 	bl	8007148 <HAL_UART_Init>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80046b6:	f7ff f94f 	bl	8003958 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200005e0 	.word	0x200005e0
 80046c4:	40011400 	.word	0x40011400

080046c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b090      	sub	sp, #64	; 0x40
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7f      	ldr	r2, [pc, #508]	; (80048e4 <HAL_UART_MspInit+0x21c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d134      	bne.n	8004754 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ee:	4b7e      	ldr	r3, [pc, #504]	; (80048e8 <HAL_UART_MspInit+0x220>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4a7d      	ldr	r2, [pc, #500]	; (80048e8 <HAL_UART_MspInit+0x220>)
 80046f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046f8:	6413      	str	r3, [r2, #64]	; 0x40
 80046fa:	4b7b      	ldr	r3, [pc, #492]	; (80048e8 <HAL_UART_MspInit+0x220>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
 800470a:	4b77      	ldr	r3, [pc, #476]	; (80048e8 <HAL_UART_MspInit+0x220>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	4a76      	ldr	r2, [pc, #472]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6313      	str	r3, [r2, #48]	; 0x30
 8004716:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004722:	2303      	movs	r3, #3
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004726:	2302      	movs	r3, #2
 8004728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472a:	2300      	movs	r3, #0
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472e:	2303      	movs	r3, #3
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004732:	2308      	movs	r3, #8
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800473a:	4619      	mov	r1, r3
 800473c:	486b      	ldr	r0, [pc, #428]	; (80048ec <HAL_UART_MspInit+0x224>)
 800473e:	f000 fb45 	bl	8004dcc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2100      	movs	r1, #0
 8004746:	2034      	movs	r0, #52	; 0x34
 8004748:	f000 fa77 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800474c:	2034      	movs	r0, #52	; 0x34
 800474e:	f000 fa90 	bl	8004c72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004752:	e0c3      	b.n	80048dc <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==UART5)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a65      	ldr	r2, [pc, #404]	; (80048f0 <HAL_UART_MspInit+0x228>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d153      	bne.n	8004806 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a60      	ldr	r2, [pc, #384]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004776:	623b      	str	r3, [r7, #32]
 8004778:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	4b5a      	ldr	r3, [pc, #360]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	4a59      	ldr	r2, [pc, #356]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	6313      	str	r3, [r2, #48]	; 0x30
 800478a:	4b57      	ldr	r3, [pc, #348]	; (80048e8 <HAL_UART_MspInit+0x220>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	4b53      	ldr	r3, [pc, #332]	; (80048e8 <HAL_UART_MspInit+0x220>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	4a52      	ldr	r2, [pc, #328]	; (80048e8 <HAL_UART_MspInit+0x220>)
 80047a0:	f043 0308 	orr.w	r3, r3, #8
 80047a4:	6313      	str	r3, [r2, #48]	; 0x30
 80047a6:	4b50      	ldr	r3, [pc, #320]	; (80048e8 <HAL_UART_MspInit+0x220>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80047b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b8:	2302      	movs	r3, #2
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c0:	2303      	movs	r3, #3
 80047c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80047c4:	2308      	movs	r3, #8
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047cc:	4619      	mov	r1, r3
 80047ce:	4849      	ldr	r0, [pc, #292]	; (80048f4 <HAL_UART_MspInit+0x22c>)
 80047d0:	f000 fafc 	bl	8004dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047d4:	2304      	movs	r3, #4
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d8:	2302      	movs	r3, #2
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e0:	2303      	movs	r3, #3
 80047e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80047e4:	2308      	movs	r3, #8
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047ec:	4619      	mov	r1, r3
 80047ee:	4842      	ldr	r0, [pc, #264]	; (80048f8 <HAL_UART_MspInit+0x230>)
 80047f0:	f000 faec 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80047f4:	2200      	movs	r2, #0
 80047f6:	2100      	movs	r1, #0
 80047f8:	2035      	movs	r0, #53	; 0x35
 80047fa:	f000 fa1e 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80047fe:	2035      	movs	r0, #53	; 0x35
 8004800:	f000 fa37 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 8004804:	e06a      	b.n	80048dc <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==USART2)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a3c      	ldr	r2, [pc, #240]	; (80048fc <HAL_UART_MspInit+0x234>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d12c      	bne.n	800486a <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	4a33      	ldr	r2, [pc, #204]	; (80048e8 <HAL_UART_MspInit+0x220>)
 800481a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481e:	6413      	str	r3, [r2, #64]	; 0x40
 8004820:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6313      	str	r3, [r2, #48]	; 0x30
 800483c:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <HAL_UART_MspInit+0x220>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004848:	230c      	movs	r3, #12
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484c:	2302      	movs	r3, #2
 800484e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004854:	2303      	movs	r3, #3
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004858:	2307      	movs	r3, #7
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004860:	4619      	mov	r1, r3
 8004862:	4822      	ldr	r0, [pc, #136]	; (80048ec <HAL_UART_MspInit+0x224>)
 8004864:	f000 fab2 	bl	8004dcc <HAL_GPIO_Init>
}
 8004868:	e038      	b.n	80048dc <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==USART6)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a24      	ldr	r2, [pc, #144]	; (8004900 <HAL_UART_MspInit+0x238>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d133      	bne.n	80048dc <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <HAL_UART_MspInit+0x220>)
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <HAL_UART_MspInit+0x220>)
 800487e:	f043 0320 	orr.w	r3, r3, #32
 8004882:	6453      	str	r3, [r2, #68]	; 0x44
 8004884:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004890:	2300      	movs	r3, #0
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <HAL_UART_MspInit+0x220>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <HAL_UART_MspInit+0x220>)
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	6313      	str	r3, [r2, #48]	; 0x30
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <HAL_UART_MspInit+0x220>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048ac:	23c0      	movs	r3, #192	; 0xc0
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b0:	2302      	movs	r3, #2
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b8:	2303      	movs	r3, #3
 80048ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048bc:	2308      	movs	r3, #8
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c4:	4619      	mov	r1, r3
 80048c6:	480b      	ldr	r0, [pc, #44]	; (80048f4 <HAL_UART_MspInit+0x22c>)
 80048c8:	f000 fa80 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80048cc:	2200      	movs	r2, #0
 80048ce:	2100      	movs	r1, #0
 80048d0:	2047      	movs	r0, #71	; 0x47
 80048d2:	f000 f9b2 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80048d6:	2047      	movs	r0, #71	; 0x47
 80048d8:	f000 f9cb 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 80048dc:	bf00      	nop
 80048de:	3740      	adds	r7, #64	; 0x40
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40004c00 	.word	0x40004c00
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40020000 	.word	0x40020000
 80048f0:	40005000 	.word	0x40005000
 80048f4:	40020800 	.word	0x40020800
 80048f8:	40020c00 	.word	0x40020c00
 80048fc:	40004400 	.word	0x40004400
 8004900:	40011400 	.word	0x40011400

08004904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800493c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004908:	480d      	ldr	r0, [pc, #52]	; (8004940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800490a:	490e      	ldr	r1, [pc, #56]	; (8004944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800490c:	4a0e      	ldr	r2, [pc, #56]	; (8004948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800490e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004910:	e002      	b.n	8004918 <LoopCopyDataInit>

08004912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004916:	3304      	adds	r3, #4

08004918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800491a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800491c:	d3f9      	bcc.n	8004912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800491e:	4a0b      	ldr	r2, [pc, #44]	; (800494c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004920:	4c0b      	ldr	r4, [pc, #44]	; (8004950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004924:	e001      	b.n	800492a <LoopFillZerobss>

08004926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004928:	3204      	adds	r2, #4

0800492a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800492a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800492c:	d3fb      	bcc.n	8004926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800492e:	f7ff f979 	bl	8003c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004932:	f003 fc8b 	bl	800824c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004936:	f7fe fd53 	bl	80033e0 <main>
  bx  lr    
 800493a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800493c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004944:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004948:	0800d0a0 	.word	0x0800d0a0
  ldr r2, =_sbss
 800494c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004950:	20000638 	.word	0x20000638

08004954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004954:	e7fe      	b.n	8004954 <ADC_IRQHandler>
	...

08004958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800495c:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <HAL_Init+0x40>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <HAL_Init+0x40>)
 8004962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_Init+0x40>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <HAL_Init+0x40>)
 800496e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_Init+0x40>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_Init+0x40>)
 800497a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004980:	2003      	movs	r0, #3
 8004982:	f000 f94f 	bl	8004c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004986:	2000      	movs	r0, #0
 8004988:	f000 f808 	bl	800499c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800498c:	f7fe ffee 	bl	800396c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40023c00 	.word	0x40023c00

0800499c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_InitTick+0x54>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <HAL_InitTick+0x58>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	4619      	mov	r1, r3
 80049ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f967 	bl	8004c8e <HAL_SYSTICK_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e00e      	b.n	80049e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d80a      	bhi.n	80049e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049d0:	2200      	movs	r2, #0
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	f000 f92f 	bl	8004c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049dc:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <HAL_InitTick+0x5c>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000000 	.word	0x20000000
 80049f4:	20000008 	.word	0x20000008
 80049f8:	20000004 	.word	0x20000004

080049fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_IncTick+0x20>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_IncTick+0x24>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <HAL_IncTick+0x24>)
 8004a0e:	6013      	str	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000008 	.word	0x20000008
 8004a20:	20000624 	.word	0x20000624

08004a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return uwTick;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_GetTick+0x14>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000624 	.word	0x20000624

08004a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a44:	f7ff ffee 	bl	8004a24 <HAL_GetTick>
 8004a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d005      	beq.n	8004a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <HAL_Delay+0x44>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a62:	bf00      	nop
 8004a64:	f7ff ffde 	bl	8004a24 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d8f7      	bhi.n	8004a64 <HAL_Delay+0x28>
  {
  }
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000008 	.word	0x20000008

08004a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ab6:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	60d3      	str	r3, [r2, #12]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 0307 	and.w	r3, r3, #7
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db0b      	blt.n	8004b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	4907      	ldr	r1, [pc, #28]	; (8004b20 <__NVIC_EnableIRQ+0x38>)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2001      	movs	r0, #1
 8004b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e100 	.word	0xe000e100

08004b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	6039      	str	r1, [r7, #0]
 8004b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	db0a      	blt.n	8004b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	490c      	ldr	r1, [pc, #48]	; (8004b70 <__NVIC_SetPriority+0x4c>)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	0112      	lsls	r2, r2, #4
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	440b      	add	r3, r1
 8004b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b4c:	e00a      	b.n	8004b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	4908      	ldr	r1, [pc, #32]	; (8004b74 <__NVIC_SetPriority+0x50>)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	3b04      	subs	r3, #4
 8004b5c:	0112      	lsls	r2, r2, #4
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	440b      	add	r3, r1
 8004b62:	761a      	strb	r2, [r3, #24]
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000e100 	.word	0xe000e100
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	; 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f1c3 0307 	rsb	r3, r3, #7
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	bf28      	it	cs
 8004b96:	2304      	movcs	r3, #4
 8004b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d902      	bls.n	8004ba8 <NVIC_EncodePriority+0x30>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3b03      	subs	r3, #3
 8004ba6:	e000      	b.n	8004baa <NVIC_EncodePriority+0x32>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	401a      	ands	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bca:	43d9      	mvns	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd0:	4313      	orrs	r3, r2
         );
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3724      	adds	r7, #36	; 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bf0:	d301      	bcc.n	8004bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e00f      	b.n	8004c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <SysTick_Config+0x40>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bfe:	210f      	movs	r1, #15
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	f7ff ff8e 	bl	8004b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <SysTick_Config+0x40>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c0e:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <SysTick_Config+0x40>)
 8004c10:	2207      	movs	r2, #7
 8004c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	e000e010 	.word	0xe000e010

08004c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ff29 	bl	8004a84 <__NVIC_SetPriorityGrouping>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	4603      	mov	r3, r0
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c4c:	f7ff ff3e 	bl	8004acc <__NVIC_GetPriorityGrouping>
 8004c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	6978      	ldr	r0, [r7, #20]
 8004c58:	f7ff ff8e 	bl	8004b78 <NVIC_EncodePriority>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ff5d 	bl	8004b24 <__NVIC_SetPriority>
}
 8004c6a:	bf00      	nop
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	4603      	mov	r3, r0
 8004c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ff31 	bl	8004ae8 <__NVIC_EnableIRQ>
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff ffa2 	bl	8004be0 <SysTick_Config>
 8004c9c:	4603      	mov	r3, r0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cb4:	f7ff feb6 	bl	8004a24 <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d008      	beq.n	8004cd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2280      	movs	r2, #128	; 0x80
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e052      	b.n	8004d7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0216 	bic.w	r2, r2, #22
 8004ce6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <HAL_DMA_Abort+0x62>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0208 	bic.w	r2, r2, #8
 8004d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d28:	e013      	b.n	8004d52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d2a:	f7ff fe7b 	bl	8004a24 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d90c      	bls.n	8004d52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2203      	movs	r2, #3
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e015      	b.n	8004d7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e4      	bne.n	8004d2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	223f      	movs	r2, #63	; 0x3f
 8004d66:	409a      	lsls	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e00c      	b.n	8004dbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2205      	movs	r2, #5
 8004da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0201 	bic.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	e165      	b.n	80050b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004de8:	2201      	movs	r2, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	f040 8154 	bne.w	80050ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d005      	beq.n	8004e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d130      	bne.n	8004e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2203      	movs	r2, #3
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e54:	2201      	movs	r2, #1
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 0201 	and.w	r2, r3, #1
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d017      	beq.n	8004ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d123      	bne.n	8004f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	08da      	lsrs	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3208      	adds	r2, #8
 8004ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	220f      	movs	r2, #15
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	08da      	lsrs	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3208      	adds	r2, #8
 8004f0a:	69b9      	ldr	r1, [r7, #24]
 8004f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0203 	and.w	r2, r3, #3
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80ae 	beq.w	80050ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	4b5d      	ldr	r3, [pc, #372]	; (80050cc <HAL_GPIO_Init+0x300>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	4a5c      	ldr	r2, [pc, #368]	; (80050cc <HAL_GPIO_Init+0x300>)
 8004f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f60:	6453      	str	r3, [r2, #68]	; 0x44
 8004f62:	4b5a      	ldr	r3, [pc, #360]	; (80050cc <HAL_GPIO_Init+0x300>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f6e:	4a58      	ldr	r2, [pc, #352]	; (80050d0 <HAL_GPIO_Init+0x304>)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	3302      	adds	r3, #2
 8004f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	220f      	movs	r2, #15
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a4f      	ldr	r2, [pc, #316]	; (80050d4 <HAL_GPIO_Init+0x308>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d025      	beq.n	8004fe6 <HAL_GPIO_Init+0x21a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a4e      	ldr	r2, [pc, #312]	; (80050d8 <HAL_GPIO_Init+0x30c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01f      	beq.n	8004fe2 <HAL_GPIO_Init+0x216>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4d      	ldr	r2, [pc, #308]	; (80050dc <HAL_GPIO_Init+0x310>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d019      	beq.n	8004fde <HAL_GPIO_Init+0x212>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4c      	ldr	r2, [pc, #304]	; (80050e0 <HAL_GPIO_Init+0x314>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <HAL_GPIO_Init+0x20e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a4b      	ldr	r2, [pc, #300]	; (80050e4 <HAL_GPIO_Init+0x318>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00d      	beq.n	8004fd6 <HAL_GPIO_Init+0x20a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a4a      	ldr	r2, [pc, #296]	; (80050e8 <HAL_GPIO_Init+0x31c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <HAL_GPIO_Init+0x206>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a49      	ldr	r2, [pc, #292]	; (80050ec <HAL_GPIO_Init+0x320>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d101      	bne.n	8004fce <HAL_GPIO_Init+0x202>
 8004fca:	2306      	movs	r3, #6
 8004fcc:	e00c      	b.n	8004fe8 <HAL_GPIO_Init+0x21c>
 8004fce:	2307      	movs	r3, #7
 8004fd0:	e00a      	b.n	8004fe8 <HAL_GPIO_Init+0x21c>
 8004fd2:	2305      	movs	r3, #5
 8004fd4:	e008      	b.n	8004fe8 <HAL_GPIO_Init+0x21c>
 8004fd6:	2304      	movs	r3, #4
 8004fd8:	e006      	b.n	8004fe8 <HAL_GPIO_Init+0x21c>
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e004      	b.n	8004fe8 <HAL_GPIO_Init+0x21c>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e002      	b.n	8004fe8 <HAL_GPIO_Init+0x21c>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_GPIO_Init+0x21c>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	f002 0203 	and.w	r2, r2, #3
 8004fee:	0092      	lsls	r2, r2, #2
 8004ff0:	4093      	lsls	r3, r2
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ff8:	4935      	ldr	r1, [pc, #212]	; (80050d0 <HAL_GPIO_Init+0x304>)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	3302      	adds	r3, #2
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005006:	4b3a      	ldr	r3, [pc, #232]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	43db      	mvns	r3, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4013      	ands	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800502a:	4a31      	ldr	r2, [pc, #196]	; (80050f0 <HAL_GPIO_Init+0x324>)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005030:	4b2f      	ldr	r3, [pc, #188]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	43db      	mvns	r3, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4013      	ands	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800505a:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <HAL_GPIO_Init+0x324>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800507e:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005084:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050a8:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <HAL_GPIO_Init+0x324>)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3301      	adds	r3, #1
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	f67f ae96 	bls.w	8004de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	3724      	adds	r7, #36	; 0x24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40013800 	.word	0x40013800
 80050d4:	40020000 	.word	0x40020000
 80050d8:	40020400 	.word	0x40020400
 80050dc:	40020800 	.word	0x40020800
 80050e0:	40020c00 	.word	0x40020c00
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40021400 	.word	0x40021400
 80050ec:	40021800 	.word	0x40021800
 80050f0:	40013c00 	.word	0x40013c00

080050f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	887b      	ldrh	r3, [r7, #2]
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
 8005110:	e001      	b.n	8005116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	807b      	strh	r3, [r7, #2]
 8005130:	4613      	mov	r3, r2
 8005132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005134:	787b      	ldrb	r3, [r7, #1]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800513a:	887a      	ldrh	r2, [r7, #2]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005140:	e003      	b.n	800514a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	041a      	lsls	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	619a      	str	r2, [r3, #24]
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005168:	887a      	ldrh	r2, [r7, #2]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4013      	ands	r3, r2
 800516e:	041a      	lsls	r2, r3, #16
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	43d9      	mvns	r1, r3
 8005174:	887b      	ldrh	r3, [r7, #2]
 8005176:	400b      	ands	r3, r1
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	619a      	str	r2, [r3, #24]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <HAL_PWREx_EnableOverDrive+0x90>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	4a1f      	ldr	r2, [pc, #124]	; (800521c <HAL_PWREx_EnableOverDrive+0x90>)
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6413      	str	r3, [r2, #64]	; 0x40
 80051a6:	4b1d      	ldr	r3, [pc, #116]	; (800521c <HAL_PWREx_EnableOverDrive+0x90>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <HAL_PWREx_EnableOverDrive+0x94>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051b8:	f7ff fc34 	bl	8004a24 <HAL_GetTick>
 80051bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051be:	e009      	b.n	80051d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051c0:	f7ff fc30 	bl	8004a24 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ce:	d901      	bls.n	80051d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e01f      	b.n	8005214 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051d4:	4b13      	ldr	r3, [pc, #76]	; (8005224 <HAL_PWREx_EnableOverDrive+0x98>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e0:	d1ee      	bne.n	80051c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051e8:	f7ff fc1c 	bl	8004a24 <HAL_GetTick>
 80051ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051ee:	e009      	b.n	8005204 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051f0:	f7ff fc18 	bl	8004a24 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051fe:	d901      	bls.n	8005204 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e007      	b.n	8005214 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <HAL_PWREx_EnableOverDrive+0x98>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005210:	d1ee      	bne.n	80051f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40023800 	.word	0x40023800
 8005220:	420e0040 	.word	0x420e0040
 8005224:	40007000 	.word	0x40007000
 8005228:	420e0044 	.word	0x420e0044

0800522c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0cc      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005240:	4b68      	ldr	r3, [pc, #416]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d90c      	bls.n	8005268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b65      	ldr	r3, [pc, #404]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b63      	ldr	r3, [pc, #396]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0b8      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005280:	4b59      	ldr	r3, [pc, #356]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4a58      	ldr	r2, [pc, #352]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800528a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005298:	4b53      	ldr	r3, [pc, #332]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	4a52      	ldr	r2, [pc, #328]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a4:	4b50      	ldr	r3, [pc, #320]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	494d      	ldr	r1, [pc, #308]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d044      	beq.n	800534c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b47      	ldr	r3, [pc, #284]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d119      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e07f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d003      	beq.n	80052ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ea:	4b3f      	ldr	r3, [pc, #252]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e06f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	4b3b      	ldr	r3, [pc, #236]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e067      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530a:	4b37      	ldr	r3, [pc, #220]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4934      	ldr	r1, [pc, #208]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800531c:	f7ff fb82 	bl	8004a24 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	e00a      	b.n	800533a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005324:	f7ff fb7e 	bl	8004a24 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e04f      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 020c 	and.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d1eb      	bne.n	8005324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800534c:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d20c      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e032      	b.n	80053da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005380:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4916      	ldr	r1, [pc, #88]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539e:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	490e      	ldr	r1, [pc, #56]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053b2:	f000 f855 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 80053b6:	4602      	mov	r2, r0
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	490a      	ldr	r1, [pc, #40]	; (80053ec <HAL_RCC_ClockConfig+0x1c0>)
 80053c4:	5ccb      	ldrb	r3, [r1, r3]
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <HAL_RCC_ClockConfig+0x1c4>)
 80053cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff fae2 	bl	800499c <HAL_InitTick>

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023c00 	.word	0x40023c00
 80053e8:	40023800 	.word	0x40023800
 80053ec:	0800ca40 	.word	0x0800ca40
 80053f0:	20000000 	.word	0x20000000
 80053f4:	20000004 	.word	0x20000004

080053f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <HAL_RCC_GetHCLKFreq+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000000 	.word	0x20000000

08005410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005414:	f7ff fff0 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0a9b      	lsrs	r3, r3, #10
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4903      	ldr	r1, [pc, #12]	; (8005434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005426:	5ccb      	ldrb	r3, [r1, r3]
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40023800 	.word	0x40023800
 8005434:	0800ca50 	.word	0x0800ca50

08005438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800543c:	f7ff ffdc 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0b5b      	lsrs	r3, r3, #13
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4903      	ldr	r1, [pc, #12]	; (800545c <HAL_RCC_GetPCLK2Freq+0x24>)
 800544e:	5ccb      	ldrb	r3, [r1, r3]
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40023800 	.word	0x40023800
 800545c:	0800ca50 	.word	0x0800ca50

08005460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005464:	b0ae      	sub	sp, #184	; 0xb8
 8005466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005486:	4bcb      	ldr	r3, [pc, #812]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b0c      	cmp	r3, #12
 8005490:	f200 8206 	bhi.w	80058a0 <HAL_RCC_GetSysClockFreq+0x440>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054d1 	.word	0x080054d1
 80054a0:	080058a1 	.word	0x080058a1
 80054a4:	080058a1 	.word	0x080058a1
 80054a8:	080058a1 	.word	0x080058a1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080058a1 	.word	0x080058a1
 80054b4:	080058a1 	.word	0x080058a1
 80054b8:	080058a1 	.word	0x080058a1
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080058a1 	.word	0x080058a1
 80054c4:	080058a1 	.word	0x080058a1
 80054c8:	080058a1 	.word	0x080058a1
 80054cc:	080056d1 	.word	0x080056d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4bb9      	ldr	r3, [pc, #740]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80054d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80054d6:	e1e7      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054d8:	4bb8      	ldr	r3, [pc, #736]	; (80057bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80054da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80054de:	e1e3      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e0:	4bb4      	ldr	r3, [pc, #720]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ec:	4bb1      	ldr	r3, [pc, #708]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d071      	beq.n	80055dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f8:	4bae      	ldr	r3, [pc, #696]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005504:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800550c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800551a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f04f 0100 	mov.w	r1, #0
 800552a:	0159      	lsls	r1, r3, #5
 800552c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005530:	0150      	lsls	r0, r2, #5
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4621      	mov	r1, r4
 8005538:	1a51      	subs	r1, r2, r1
 800553a:	6439      	str	r1, [r7, #64]	; 0x40
 800553c:	4629      	mov	r1, r5
 800553e:	eb63 0301 	sbc.w	r3, r3, r1
 8005542:	647b      	str	r3, [r7, #68]	; 0x44
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005550:	4649      	mov	r1, r9
 8005552:	018b      	lsls	r3, r1, #6
 8005554:	4641      	mov	r1, r8
 8005556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800555a:	4641      	mov	r1, r8
 800555c:	018a      	lsls	r2, r1, #6
 800555e:	4641      	mov	r1, r8
 8005560:	1a51      	subs	r1, r2, r1
 8005562:	63b9      	str	r1, [r7, #56]	; 0x38
 8005564:	4649      	mov	r1, r9
 8005566:	eb63 0301 	sbc.w	r3, r3, r1
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005578:	4649      	mov	r1, r9
 800557a:	00cb      	lsls	r3, r1, #3
 800557c:	4641      	mov	r1, r8
 800557e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005582:	4641      	mov	r1, r8
 8005584:	00ca      	lsls	r2, r1, #3
 8005586:	4610      	mov	r0, r2
 8005588:	4619      	mov	r1, r3
 800558a:	4603      	mov	r3, r0
 800558c:	4622      	mov	r2, r4
 800558e:	189b      	adds	r3, r3, r2
 8005590:	633b      	str	r3, [r7, #48]	; 0x30
 8005592:	462b      	mov	r3, r5
 8005594:	460a      	mov	r2, r1
 8005596:	eb42 0303 	adc.w	r3, r2, r3
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055a8:	4629      	mov	r1, r5
 80055aa:	024b      	lsls	r3, r1, #9
 80055ac:	4621      	mov	r1, r4
 80055ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055b2:	4621      	mov	r1, r4
 80055b4:	024a      	lsls	r2, r1, #9
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80055cc:	f7fb fb5c 	bl	8000c88 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4613      	mov	r3, r2
 80055d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055da:	e067      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055dc:	4b75      	ldr	r3, [pc, #468]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	099b      	lsrs	r3, r3, #6
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80055ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055f6:	2300      	movs	r3, #0
 80055f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80055fe:	4622      	mov	r2, r4
 8005600:	462b      	mov	r3, r5
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f04f 0100 	mov.w	r1, #0
 800560a:	0159      	lsls	r1, r3, #5
 800560c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005610:	0150      	lsls	r0, r2, #5
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4621      	mov	r1, r4
 8005618:	1a51      	subs	r1, r2, r1
 800561a:	62b9      	str	r1, [r7, #40]	; 0x28
 800561c:	4629      	mov	r1, r5
 800561e:	eb63 0301 	sbc.w	r3, r3, r1
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005630:	4649      	mov	r1, r9
 8005632:	018b      	lsls	r3, r1, #6
 8005634:	4641      	mov	r1, r8
 8005636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800563a:	4641      	mov	r1, r8
 800563c:	018a      	lsls	r2, r1, #6
 800563e:	4641      	mov	r1, r8
 8005640:	ebb2 0a01 	subs.w	sl, r2, r1
 8005644:	4649      	mov	r1, r9
 8005646:	eb63 0b01 	sbc.w	fp, r3, r1
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005656:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800565a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800565e:	4692      	mov	sl, r2
 8005660:	469b      	mov	fp, r3
 8005662:	4623      	mov	r3, r4
 8005664:	eb1a 0303 	adds.w	r3, sl, r3
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	462b      	mov	r3, r5
 800566c:	eb4b 0303 	adc.w	r3, fp, r3
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800567e:	4629      	mov	r1, r5
 8005680:	028b      	lsls	r3, r1, #10
 8005682:	4621      	mov	r1, r4
 8005684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005688:	4621      	mov	r1, r4
 800568a:	028a      	lsls	r2, r1, #10
 800568c:	4610      	mov	r0, r2
 800568e:	4619      	mov	r1, r3
 8005690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005694:	2200      	movs	r2, #0
 8005696:	673b      	str	r3, [r7, #112]	; 0x70
 8005698:	677a      	str	r2, [r7, #116]	; 0x74
 800569a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800569e:	f7fb faf3 	bl	8000c88 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4613      	mov	r3, r2
 80056a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056ac:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	3301      	adds	r3, #1
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80056be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056ce:	e0eb      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056d0:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056dc:	4b35      	ldr	r3, [pc, #212]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d06b      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e8:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	099b      	lsrs	r3, r3, #6
 80056ee:	2200      	movs	r2, #0
 80056f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	663b      	str	r3, [r7, #96]	; 0x60
 80056fc:	2300      	movs	r3, #0
 80056fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005700:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005704:	4622      	mov	r2, r4
 8005706:	462b      	mov	r3, r5
 8005708:	f04f 0000 	mov.w	r0, #0
 800570c:	f04f 0100 	mov.w	r1, #0
 8005710:	0159      	lsls	r1, r3, #5
 8005712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005716:	0150      	lsls	r0, r2, #5
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4621      	mov	r1, r4
 800571e:	1a51      	subs	r1, r2, r1
 8005720:	61b9      	str	r1, [r7, #24]
 8005722:	4629      	mov	r1, r5
 8005724:	eb63 0301 	sbc.w	r3, r3, r1
 8005728:	61fb      	str	r3, [r7, #28]
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005736:	4659      	mov	r1, fp
 8005738:	018b      	lsls	r3, r1, #6
 800573a:	4651      	mov	r1, sl
 800573c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005740:	4651      	mov	r1, sl
 8005742:	018a      	lsls	r2, r1, #6
 8005744:	4651      	mov	r1, sl
 8005746:	ebb2 0801 	subs.w	r8, r2, r1
 800574a:	4659      	mov	r1, fp
 800574c:	eb63 0901 	sbc.w	r9, r3, r1
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800575c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005760:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005764:	4690      	mov	r8, r2
 8005766:	4699      	mov	r9, r3
 8005768:	4623      	mov	r3, r4
 800576a:	eb18 0303 	adds.w	r3, r8, r3
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	462b      	mov	r3, r5
 8005772:	eb49 0303 	adc.w	r3, r9, r3
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005784:	4629      	mov	r1, r5
 8005786:	024b      	lsls	r3, r1, #9
 8005788:	4621      	mov	r1, r4
 800578a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800578e:	4621      	mov	r1, r4
 8005790:	024a      	lsls	r2, r1, #9
 8005792:	4610      	mov	r0, r2
 8005794:	4619      	mov	r1, r3
 8005796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800579a:	2200      	movs	r2, #0
 800579c:	65bb      	str	r3, [r7, #88]	; 0x58
 800579e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80057a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057a4:	f7fb fa70 	bl	8000c88 <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4613      	mov	r3, r2
 80057ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057b2:	e065      	b.n	8005880 <HAL_RCC_GetSysClockFreq+0x420>
 80057b4:	40023800 	.word	0x40023800
 80057b8:	00f42400 	.word	0x00f42400
 80057bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c0:	4b3d      	ldr	r3, [pc, #244]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	099b      	lsrs	r3, r3, #6
 80057c6:	2200      	movs	r2, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	4611      	mov	r1, r2
 80057cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057d0:	653b      	str	r3, [r7, #80]	; 0x50
 80057d2:	2300      	movs	r3, #0
 80057d4:	657b      	str	r3, [r7, #84]	; 0x54
 80057d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80057da:	4642      	mov	r2, r8
 80057dc:	464b      	mov	r3, r9
 80057de:	f04f 0000 	mov.w	r0, #0
 80057e2:	f04f 0100 	mov.w	r1, #0
 80057e6:	0159      	lsls	r1, r3, #5
 80057e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ec:	0150      	lsls	r0, r2, #5
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4641      	mov	r1, r8
 80057f4:	1a51      	subs	r1, r2, r1
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	4649      	mov	r1, r9
 80057fa:	eb63 0301 	sbc.w	r3, r3, r1
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800580c:	4659      	mov	r1, fp
 800580e:	018b      	lsls	r3, r1, #6
 8005810:	4651      	mov	r1, sl
 8005812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005816:	4651      	mov	r1, sl
 8005818:	018a      	lsls	r2, r1, #6
 800581a:	4651      	mov	r1, sl
 800581c:	1a54      	subs	r4, r2, r1
 800581e:	4659      	mov	r1, fp
 8005820:	eb63 0501 	sbc.w	r5, r3, r1
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	00eb      	lsls	r3, r5, #3
 800582e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005832:	00e2      	lsls	r2, r4, #3
 8005834:	4614      	mov	r4, r2
 8005836:	461d      	mov	r5, r3
 8005838:	4643      	mov	r3, r8
 800583a:	18e3      	adds	r3, r4, r3
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	464b      	mov	r3, r9
 8005840:	eb45 0303 	adc.w	r3, r5, r3
 8005844:	607b      	str	r3, [r7, #4]
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005852:	4629      	mov	r1, r5
 8005854:	028b      	lsls	r3, r1, #10
 8005856:	4621      	mov	r1, r4
 8005858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800585c:	4621      	mov	r1, r4
 800585e:	028a      	lsls	r2, r1, #10
 8005860:	4610      	mov	r0, r2
 8005862:	4619      	mov	r1, r3
 8005864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005868:	2200      	movs	r2, #0
 800586a:	64bb      	str	r3, [r7, #72]	; 0x48
 800586c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800586e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005872:	f7fb fa09 	bl	8000c88 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4613      	mov	r3, r2
 800587c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	0f1b      	lsrs	r3, r3, #28
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800588e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800589e:	e003      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80058a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80058a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	37b8      	adds	r7, #184	; 0xb8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b6:	bf00      	nop
 80058b8:	40023800 	.word	0x40023800
 80058bc:	00f42400 	.word	0x00f42400

080058c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e28d      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8083 	beq.w	80059e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058e0:	4b94      	ldr	r3, [pc, #592]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d019      	beq.n	8005920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058ec:	4b91      	ldr	r3, [pc, #580]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d106      	bne.n	8005906 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058f8:	4b8e      	ldr	r3, [pc, #568]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005904:	d00c      	beq.n	8005920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005906:	4b8b      	ldr	r3, [pc, #556]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800590e:	2b0c      	cmp	r3, #12
 8005910:	d112      	bne.n	8005938 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005912:	4b88      	ldr	r3, [pc, #544]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800591e:	d10b      	bne.n	8005938 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005920:	4b84      	ldr	r3, [pc, #528]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d05b      	beq.n	80059e4 <HAL_RCC_OscConfig+0x124>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d157      	bne.n	80059e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e25a      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005940:	d106      	bne.n	8005950 <HAL_RCC_OscConfig+0x90>
 8005942:	4b7c      	ldr	r3, [pc, #496]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a7b      	ldr	r2, [pc, #492]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e01d      	b.n	800598c <HAL_RCC_OscConfig+0xcc>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005958:	d10c      	bne.n	8005974 <HAL_RCC_OscConfig+0xb4>
 800595a:	4b76      	ldr	r3, [pc, #472]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a75      	ldr	r2, [pc, #468]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	4b73      	ldr	r3, [pc, #460]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a72      	ldr	r2, [pc, #456]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 800596c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e00b      	b.n	800598c <HAL_RCC_OscConfig+0xcc>
 8005974:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a6e      	ldr	r2, [pc, #440]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 800597a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	4b6c      	ldr	r3, [pc, #432]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a6b      	ldr	r2, [pc, #428]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800598a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d013      	beq.n	80059bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7ff f846 	bl	8004a24 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800599c:	f7ff f842 	bl	8004a24 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	; 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e21f      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ae:	4b61      	ldr	r3, [pc, #388]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0xdc>
 80059ba:	e014      	b.n	80059e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059bc:	f7ff f832 	bl	8004a24 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059c4:	f7ff f82e 	bl	8004a24 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b64      	cmp	r3, #100	; 0x64
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e20b      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059d6:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f0      	bne.n	80059c4 <HAL_RCC_OscConfig+0x104>
 80059e2:	e000      	b.n	80059e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d06f      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059f2:	4b50      	ldr	r3, [pc, #320]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d017      	beq.n	8005a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059fe:	4b4d      	ldr	r3, [pc, #308]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d105      	bne.n	8005a16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a0a:	4b4a      	ldr	r3, [pc, #296]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a16:	4b47      	ldr	r3, [pc, #284]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a1e:	2b0c      	cmp	r3, #12
 8005a20:	d11c      	bne.n	8005a5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a22:	4b44      	ldr	r3, [pc, #272]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d116      	bne.n	8005a5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a2e:	4b41      	ldr	r3, [pc, #260]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_RCC_OscConfig+0x186>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e1d3      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a46:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4937      	ldr	r1, [pc, #220]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5a:	e03a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a64:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <HAL_RCC_OscConfig+0x278>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fe ffdb 	bl	8004a24 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a72:	f7fe ffd7 	bl	8004a24 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e1b4      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a84:	4b2b      	ldr	r3, [pc, #172]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a90:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4925      	ldr	r1, [pc, #148]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	600b      	str	r3, [r1, #0]
 8005aa4:	e015      	b.n	8005ad2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <HAL_RCC_OscConfig+0x278>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fe ffba 	bl	8004a24 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ab4:	f7fe ffb6 	bl	8004a24 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e193      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d036      	beq.n	8005b4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d016      	beq.n	8005b14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aec:	f7fe ff9a 	bl	8004a24 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005af4:	f7fe ff96 	bl	8004a24 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e173      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCC_OscConfig+0x274>)
 8005b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x234>
 8005b12:	e01b      	b.n	8005b4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <HAL_RCC_OscConfig+0x27c>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1a:	f7fe ff83 	bl	8004a24 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b20:	e00e      	b.n	8005b40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b22:	f7fe ff7f 	bl	8004a24 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d907      	bls.n	8005b40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e15c      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
 8005b34:	40023800 	.word	0x40023800
 8005b38:	42470000 	.word	0x42470000
 8005b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b40:	4b8a      	ldr	r3, [pc, #552]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1ea      	bne.n	8005b22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8097 	beq.w	8005c88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5e:	4b83      	ldr	r3, [pc, #524]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10f      	bne.n	8005b8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	4b7f      	ldr	r3, [pc, #508]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	4a7e      	ldr	r2, [pc, #504]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b78:	6413      	str	r3, [r2, #64]	; 0x40
 8005b7a:	4b7c      	ldr	r3, [pc, #496]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b86:	2301      	movs	r3, #1
 8005b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8a:	4b79      	ldr	r3, [pc, #484]	; (8005d70 <HAL_RCC_OscConfig+0x4b0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d118      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b96:	4b76      	ldr	r3, [pc, #472]	; (8005d70 <HAL_RCC_OscConfig+0x4b0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a75      	ldr	r2, [pc, #468]	; (8005d70 <HAL_RCC_OscConfig+0x4b0>)
 8005b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ba2:	f7fe ff3f 	bl	8004a24 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005baa:	f7fe ff3b 	bl	8004a24 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e118      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbc:	4b6c      	ldr	r3, [pc, #432]	; (8005d70 <HAL_RCC_OscConfig+0x4b0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d106      	bne.n	8005bde <HAL_RCC_OscConfig+0x31e>
 8005bd0:	4b66      	ldr	r3, [pc, #408]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd4:	4a65      	ldr	r2, [pc, #404]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	6713      	str	r3, [r2, #112]	; 0x70
 8005bdc:	e01c      	b.n	8005c18 <HAL_RCC_OscConfig+0x358>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCC_OscConfig+0x340>
 8005be6:	4b61      	ldr	r3, [pc, #388]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	4a60      	ldr	r2, [pc, #384]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005bec:	f043 0304 	orr.w	r3, r3, #4
 8005bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf2:	4b5e      	ldr	r3, [pc, #376]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	4a5d      	ldr	r2, [pc, #372]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfe:	e00b      	b.n	8005c18 <HAL_RCC_OscConfig+0x358>
 8005c00:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a59      	ldr	r2, [pc, #356]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0c:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	4a56      	ldr	r2, [pc, #344]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c12:	f023 0304 	bic.w	r3, r3, #4
 8005c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d015      	beq.n	8005c4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c20:	f7fe ff00 	bl	8004a24 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c28:	f7fe fefc 	bl	8004a24 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0d7      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3e:	4b4b      	ldr	r3, [pc, #300]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0ee      	beq.n	8005c28 <HAL_RCC_OscConfig+0x368>
 8005c4a:	e014      	b.n	8005c76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4c:	f7fe feea 	bl	8004a24 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c54:	f7fe fee6 	bl	8004a24 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e0c1      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c6a:	4b40      	ldr	r3, [pc, #256]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1ee      	bne.n	8005c54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d105      	bne.n	8005c88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c7c:	4b3b      	ldr	r3, [pc, #236]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	4a3a      	ldr	r2, [pc, #232]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80ad 	beq.w	8005dec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c92:	4b36      	ldr	r3, [pc, #216]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d060      	beq.n	8005d60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d145      	bne.n	8005d32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	4b33      	ldr	r3, [pc, #204]	; (8005d74 <HAL_RCC_OscConfig+0x4b4>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7fe feba 	bl	8004a24 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fe feb6 	bl	8004a24 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e093      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc6:	4b29      	ldr	r3, [pc, #164]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f0      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69da      	ldr	r2, [r3, #28]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	019b      	lsls	r3, r3, #6
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	3b01      	subs	r3, #1
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	071b      	lsls	r3, r3, #28
 8005cfe:	491b      	ldr	r1, [pc, #108]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d04:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <HAL_RCC_OscConfig+0x4b4>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0a:	f7fe fe8b 	bl	8004a24 <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d12:	f7fe fe87 	bl	8004a24 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e064      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d24:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCC_OscConfig+0x452>
 8005d30:	e05c      	b.n	8005dec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <HAL_RCC_OscConfig+0x4b4>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d38:	f7fe fe74 	bl	8004a24 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d40:	f7fe fe70 	bl	8004a24 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e04d      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_RCC_OscConfig+0x4ac>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0x480>
 8005d5e:	e045      	b.n	8005dec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d107      	bne.n	8005d78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e040      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40007000 	.word	0x40007000
 8005d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d78:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <HAL_RCC_OscConfig+0x538>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d030      	beq.n	8005de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d129      	bne.n	8005de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d122      	bne.n	8005de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005da8:	4013      	ands	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d119      	bne.n	8005de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d10f      	bne.n	8005de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d107      	bne.n	8005de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40023800 	.word	0x40023800

08005dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e041      	b.n	8005e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fe fa7a 	bl	800431c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f000 fd92 	bl	8006964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d001      	beq.n	8005eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e046      	b.n	8005f42 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a23      	ldr	r2, [pc, #140]	; (8005f50 <HAL_TIM_Base_Start+0xb4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d022      	beq.n	8005f0c <HAL_TIM_Base_Start+0x70>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d01d      	beq.n	8005f0c <HAL_TIM_Base_Start+0x70>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <HAL_TIM_Base_Start+0xb8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d018      	beq.n	8005f0c <HAL_TIM_Base_Start+0x70>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1e      	ldr	r2, [pc, #120]	; (8005f58 <HAL_TIM_Base_Start+0xbc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <HAL_TIM_Base_Start+0x70>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <HAL_TIM_Base_Start+0xc0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00e      	beq.n	8005f0c <HAL_TIM_Base_Start+0x70>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <HAL_TIM_Base_Start+0xc4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <HAL_TIM_Base_Start+0x70>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <HAL_TIM_Base_Start+0xc8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_TIM_Base_Start+0x70>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <HAL_TIM_Base_Start+0xcc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d111      	bne.n	8005f30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b06      	cmp	r3, #6
 8005f1c:	d010      	beq.n	8005f40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	e007      	b.n	8005f40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	40010400 	.word	0x40010400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40001800 	.word	0x40001800

08005f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d001      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e04e      	b.n	8006022 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a23      	ldr	r2, [pc, #140]	; (8006030 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d01d      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a19      	ldr	r2, [pc, #100]	; (8006044 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d111      	bne.n	8006010 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	d010      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0201 	orr.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	e007      	b.n	8006020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40010000 	.word	0x40010000
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40010400 	.word	0x40010400
 8006044:	40014000 	.word	0x40014000
 8006048:	40001800 	.word	0x40001800

0800604c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e041      	b.n	80060e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f839 	bl	80060ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f000 fc6a 	bl	8006964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_TIM_PWM_Start+0x24>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b01      	cmp	r3, #1
 800611a:	bf14      	ite	ne
 800611c:	2301      	movne	r3, #1
 800611e:	2300      	moveq	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	e022      	b.n	800616a <HAL_TIM_PWM_Start+0x6a>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b04      	cmp	r3, #4
 8006128:	d109      	bne.n	800613e <HAL_TIM_PWM_Start+0x3e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b01      	cmp	r3, #1
 8006134:	bf14      	ite	ne
 8006136:	2301      	movne	r3, #1
 8006138:	2300      	moveq	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	e015      	b.n	800616a <HAL_TIM_PWM_Start+0x6a>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b08      	cmp	r3, #8
 8006142:	d109      	bne.n	8006158 <HAL_TIM_PWM_Start+0x58>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e008      	b.n	800616a <HAL_TIM_PWM_Start+0x6a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e07c      	b.n	800626c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <HAL_TIM_PWM_Start+0x82>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006180:	e013      	b.n	80061aa <HAL_TIM_PWM_Start+0xaa>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b04      	cmp	r3, #4
 8006186:	d104      	bne.n	8006192 <HAL_TIM_PWM_Start+0x92>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006190:	e00b      	b.n	80061aa <HAL_TIM_PWM_Start+0xaa>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b08      	cmp	r3, #8
 8006196:	d104      	bne.n	80061a2 <HAL_TIM_PWM_Start+0xa2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a0:	e003      	b.n	80061aa <HAL_TIM_PWM_Start+0xaa>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2202      	movs	r2, #2
 80061a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2201      	movs	r2, #1
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fec0 	bl	8006f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a2d      	ldr	r2, [pc, #180]	; (8006274 <HAL_TIM_PWM_Start+0x174>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <HAL_TIM_PWM_Start+0xcc>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a2c      	ldr	r2, [pc, #176]	; (8006278 <HAL_TIM_PWM_Start+0x178>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d101      	bne.n	80061d0 <HAL_TIM_PWM_Start+0xd0>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <HAL_TIM_PWM_Start+0xd2>
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a22      	ldr	r2, [pc, #136]	; (8006274 <HAL_TIM_PWM_Start+0x174>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d022      	beq.n	8006236 <HAL_TIM_PWM_Start+0x136>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f8:	d01d      	beq.n	8006236 <HAL_TIM_PWM_Start+0x136>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1f      	ldr	r2, [pc, #124]	; (800627c <HAL_TIM_PWM_Start+0x17c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d018      	beq.n	8006236 <HAL_TIM_PWM_Start+0x136>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <HAL_TIM_PWM_Start+0x180>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <HAL_TIM_PWM_Start+0x136>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <HAL_TIM_PWM_Start+0x184>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_TIM_PWM_Start+0x136>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a16      	ldr	r2, [pc, #88]	; (8006278 <HAL_TIM_PWM_Start+0x178>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_TIM_PWM_Start+0x136>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a18      	ldr	r2, [pc, #96]	; (8006288 <HAL_TIM_PWM_Start+0x188>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIM_PWM_Start+0x136>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a16      	ldr	r2, [pc, #88]	; (800628c <HAL_TIM_PWM_Start+0x18c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b06      	cmp	r3, #6
 8006246:	d010      	beq.n	800626a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	e007      	b.n	800626a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0201 	orr.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40010000 	.word	0x40010000
 8006278:	40010400 	.word	0x40010400
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	40014000 	.word	0x40014000
 800628c:	40001800 	.word	0x40001800

08006290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e097      	b.n	80063d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fd ffb3 	bl	8004224 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d4:	f023 0307 	bic.w	r3, r3, #7
 80062d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f000 fb3d 	bl	8006964 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	4313      	orrs	r3, r2
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006330:	f023 030c 	bic.w	r3, r3, #12
 8006334:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800633c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	4313      	orrs	r3, r2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	011a      	lsls	r2, r3, #4
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	031b      	lsls	r3, r3, #12
 8006360:	4313      	orrs	r3, r2
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006376:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	4313      	orrs	r3, r2
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0202 	mvn.w	r2, #2
 8006408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa81 	bl	8006926 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa73 	bl	8006912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa84 	bl	800693a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b04      	cmp	r3, #4
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0204 	mvn.w	r2, #4
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa57 	bl	8006926 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa49 	bl	8006912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa5a 	bl	800693a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0208 	mvn.w	r2, #8
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2204      	movs	r2, #4
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa2d 	bl	8006926 <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa1f 	bl	8006912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fa30 	bl	800693a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0210 	mvn.w	r2, #16
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2208      	movs	r2, #8
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa03 	bl	8006926 <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9f5 	bl	8006912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fa06 	bl	800693a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0201 	mvn.w	r2, #1
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f9cf 	bl	80068fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d10e      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d107      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fdd4 	bl	8007134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d10e      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d107      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9cb 	bl	800694e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d10e      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d107      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0220 	mvn.w	r2, #32
 80065dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fd9e 	bl	8007120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d101      	bne.n	800660a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006606:	2302      	movs	r3, #2
 8006608:	e0ae      	b.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b0c      	cmp	r3, #12
 8006616:	f200 809f 	bhi.w	8006758 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006655 	.word	0x08006655
 8006624:	08006759 	.word	0x08006759
 8006628:	08006759 	.word	0x08006759
 800662c:	08006759 	.word	0x08006759
 8006630:	08006695 	.word	0x08006695
 8006634:	08006759 	.word	0x08006759
 8006638:	08006759 	.word	0x08006759
 800663c:	08006759 	.word	0x08006759
 8006640:	080066d7 	.word	0x080066d7
 8006644:	08006759 	.word	0x08006759
 8006648:	08006759 	.word	0x08006759
 800664c:	08006759 	.word	0x08006759
 8006650:	08006717 	.word	0x08006717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fa22 	bl	8006aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0208 	orr.w	r2, r2, #8
 800666e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0204 	bic.w	r2, r2, #4
 800667e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6999      	ldr	r1, [r3, #24]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	619a      	str	r2, [r3, #24]
      break;
 8006692:	e064      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68b9      	ldr	r1, [r7, #8]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fa72 	bl	8006b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6999      	ldr	r1, [r3, #24]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	021a      	lsls	r2, r3, #8
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	619a      	str	r2, [r3, #24]
      break;
 80066d4:	e043      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fac7 	bl	8006c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0208 	orr.w	r2, r2, #8
 80066f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0204 	bic.w	r2, r2, #4
 8006700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69d9      	ldr	r1, [r3, #28]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	61da      	str	r2, [r3, #28]
      break;
 8006714:	e023      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fb1b 	bl	8006d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69d9      	ldr	r1, [r3, #28]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	021a      	lsls	r2, r3, #8
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	61da      	str	r2, [r3, #28]
      break;
 8006756:	e002      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	75fb      	strb	r3, [r7, #23]
      break;
 800675c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIM_ConfigClockSource+0x1c>
 8006788:	2302      	movs	r3, #2
 800678a:	e0b4      	b.n	80068f6 <HAL_TIM_ConfigClockSource+0x186>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c4:	d03e      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0xd4>
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	f200 8087 	bhi.w	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	f000 8086 	beq.w	80068e2 <HAL_TIM_ConfigClockSource+0x172>
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067da:	d87f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067dc:	2b70      	cmp	r3, #112	; 0x70
 80067de:	d01a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xa6>
 80067e0:	2b70      	cmp	r3, #112	; 0x70
 80067e2:	d87b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067e4:	2b60      	cmp	r3, #96	; 0x60
 80067e6:	d050      	beq.n	800688a <HAL_TIM_ConfigClockSource+0x11a>
 80067e8:	2b60      	cmp	r3, #96	; 0x60
 80067ea:	d877      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067ec:	2b50      	cmp	r3, #80	; 0x50
 80067ee:	d03c      	beq.n	800686a <HAL_TIM_ConfigClockSource+0xfa>
 80067f0:	2b50      	cmp	r3, #80	; 0x50
 80067f2:	d873      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d058      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x13a>
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d86f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d064      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006800:	2b30      	cmp	r3, #48	; 0x30
 8006802:	d86b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d060      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d867      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d05c      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006810:	2b10      	cmp	r3, #16
 8006812:	d05a      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006814:	e062      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f000 fb67 	bl	8006ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	609a      	str	r2, [r3, #8]
      break;
 8006842:	e04f      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6899      	ldr	r1, [r3, #8]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f000 fb50 	bl	8006ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006866:	609a      	str	r2, [r3, #8]
      break;
 8006868:	e03c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6859      	ldr	r1, [r3, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	461a      	mov	r2, r3
 8006878:	f000 fac4 	bl	8006e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2150      	movs	r1, #80	; 0x50
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fb1d 	bl	8006ec2 <TIM_ITRx_SetConfig>
      break;
 8006888:	e02c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	461a      	mov	r2, r3
 8006898:	f000 fae3 	bl	8006e62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2160      	movs	r1, #96	; 0x60
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fb0d 	bl	8006ec2 <TIM_ITRx_SetConfig>
      break;
 80068a8:	e01c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6859      	ldr	r1, [r3, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f000 faa4 	bl	8006e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2140      	movs	r1, #64	; 0x40
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fafd 	bl	8006ec2 <TIM_ITRx_SetConfig>
      break;
 80068c8:	e00c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 faf4 	bl	8006ec2 <TIM_ITRx_SetConfig>
      break;
 80068da:	e003      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
      break;
 80068e0:	e000      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a40      	ldr	r2, [pc, #256]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d00f      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a3d      	ldr	r2, [pc, #244]	; (8006a7c <TIM_Base_SetConfig+0x118>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00b      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a3c      	ldr	r2, [pc, #240]	; (8006a80 <TIM_Base_SetConfig+0x11c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d007      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3b      	ldr	r2, [pc, #236]	; (8006a84 <TIM_Base_SetConfig+0x120>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a3a      	ldr	r2, [pc, #232]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d108      	bne.n	80069b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2f      	ldr	r2, [pc, #188]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d02b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c4:	d027      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a2c      	ldr	r2, [pc, #176]	; (8006a7c <TIM_Base_SetConfig+0x118>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d023      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2b      	ldr	r2, [pc, #172]	; (8006a80 <TIM_Base_SetConfig+0x11c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01f      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <TIM_Base_SetConfig+0x120>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d017      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a28      	ldr	r2, [pc, #160]	; (8006a8c <TIM_Base_SetConfig+0x128>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <TIM_Base_SetConfig+0x12c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00f      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a26      	ldr	r2, [pc, #152]	; (8006a94 <TIM_Base_SetConfig+0x130>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a25      	ldr	r2, [pc, #148]	; (8006a98 <TIM_Base_SetConfig+0x134>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d007      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <TIM_Base_SetConfig+0x138>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a23      	ldr	r2, [pc, #140]	; (8006aa0 <TIM_Base_SetConfig+0x13c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d108      	bne.n	8006a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_Base_SetConfig+0xf8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a0c      	ldr	r2, [pc, #48]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d103      	bne.n	8006a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	615a      	str	r2, [r3, #20]
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40000400 	.word	0x40000400
 8006a80:	40000800 	.word	0x40000800
 8006a84:	40000c00 	.word	0x40000c00
 8006a88:	40010400 	.word	0x40010400
 8006a8c:	40014000 	.word	0x40014000
 8006a90:	40014400 	.word	0x40014400
 8006a94:	40014800 	.word	0x40014800
 8006a98:	40001800 	.word	0x40001800
 8006a9c:	40001c00 	.word	0x40001c00
 8006aa0:	40002000 	.word	0x40002000

08006aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f023 0201 	bic.w	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 0302 	bic.w	r3, r3, #2
 8006aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <TIM_OC1_SetConfig+0xd8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC1_SetConfig+0x64>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a1f      	ldr	r2, [pc, #124]	; (8006b80 <TIM_OC1_SetConfig+0xdc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10c      	bne.n	8006b22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0308 	bic.w	r3, r3, #8
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 0304 	bic.w	r3, r3, #4
 8006b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <TIM_OC1_SetConfig+0xd8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_OC1_SetConfig+0x8e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <TIM_OC1_SetConfig+0xdc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d111      	bne.n	8006b56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	40010400 	.word	0x40010400

08006b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f023 0210 	bic.w	r2, r3, #16
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0320 	bic.w	r3, r3, #32
 8006bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a22      	ldr	r2, [pc, #136]	; (8006c68 <TIM_OC2_SetConfig+0xe4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d003      	beq.n	8006bec <TIM_OC2_SetConfig+0x68>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a21      	ldr	r2, [pc, #132]	; (8006c6c <TIM_OC2_SetConfig+0xe8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d10d      	bne.n	8006c08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <TIM_OC2_SetConfig+0xe4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_OC2_SetConfig+0x94>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <TIM_OC2_SetConfig+0xe8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d113      	bne.n	8006c40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	621a      	str	r2, [r3, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40010400 	.word	0x40010400

08006c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a21      	ldr	r2, [pc, #132]	; (8006d50 <TIM_OC3_SetConfig+0xe0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d003      	beq.n	8006cd6 <TIM_OC3_SetConfig+0x66>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a20      	ldr	r2, [pc, #128]	; (8006d54 <TIM_OC3_SetConfig+0xe4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d10d      	bne.n	8006cf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <TIM_OC3_SetConfig+0xe0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d003      	beq.n	8006d02 <TIM_OC3_SetConfig+0x92>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <TIM_OC3_SetConfig+0xe4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d113      	bne.n	8006d2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	621a      	str	r2, [r3, #32]
}
 8006d44:	bf00      	nop
 8006d46:	371c      	adds	r7, #28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	40010000 	.word	0x40010000
 8006d54:	40010400 	.word	0x40010400

08006d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <TIM_OC4_SetConfig+0xa4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_OC4_SetConfig+0x68>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a11      	ldr	r2, [pc, #68]	; (8006e00 <TIM_OC4_SetConfig+0xa8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d109      	bne.n	8006dd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	019b      	lsls	r3, r3, #6
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40010400 	.word	0x40010400

08006e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f023 030a 	bic.w	r3, r3, #10
 8006e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b087      	sub	sp, #28
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0210 	bic.w	r2, r3, #16
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	031b      	lsls	r3, r3, #12
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f043 0307 	orr.w	r3, r3, #7
 8006ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	609a      	str	r2, [r3, #8]
}
 8006eec:	bf00      	nop
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	021a      	lsls	r2, r3, #8
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	609a      	str	r2, [r3, #8]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a1a      	ldr	r2, [r3, #32]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	401a      	ands	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a1a      	ldr	r2, [r3, #32]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	431a      	orrs	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e05a      	b.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a21      	ldr	r2, [pc, #132]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d022      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe8:	d01d      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d018      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1b      	ldr	r2, [pc, #108]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1a      	ldr	r2, [pc, #104]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00e      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a18      	ldr	r2, [pc, #96]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a15      	ldr	r2, [pc, #84]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d10c      	bne.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800702c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	4313      	orrs	r3, r2
 8007036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40010000 	.word	0x40010000
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40010400 	.word	0x40010400
 8007074:	40014000 	.word	0x40014000
 8007078:	40001800 	.word	0x40001800

0800707c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007094:	2302      	movs	r3, #2
 8007096:	e03d      	b.n	8007114 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e03f      	b.n	80071da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fd faaa 	bl	80046c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2224      	movs	r2, #36	; 0x24
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800718a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fddb 	bl	8007d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b08a      	sub	sp, #40	; 0x28
 80071e6:	af02      	add	r7, sp, #8
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d17c      	bne.n	80072fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_UART_Transmit+0x2c>
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e075      	b.n	80072fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_UART_Transmit+0x3e>
 800721c:	2302      	movs	r3, #2
 800721e:	e06e      	b.n	80072fe <HAL_UART_Transmit+0x11c>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2221      	movs	r2, #33	; 0x21
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007236:	f7fd fbf5 	bl	8004a24 <HAL_GetTick>
 800723a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	88fa      	ldrh	r2, [r7, #6]
 8007246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007250:	d108      	bne.n	8007264 <HAL_UART_Transmit+0x82>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	e003      	b.n	800726c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007268:	2300      	movs	r3, #0
 800726a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007274:	e02a      	b.n	80072cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2200      	movs	r2, #0
 800727e:	2180      	movs	r1, #128	; 0x80
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fb1f 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e036      	b.n	80072fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	3302      	adds	r3, #2
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e007      	b.n	80072be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	3301      	adds	r3, #1
 80072bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1cf      	bne.n	8007276 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	2140      	movs	r1, #64	; 0x40
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 faef 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e006      	b.n	80072fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e000      	b.n	80072fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072fc:	2302      	movs	r3, #2
  }
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	4613      	mov	r3, r2
 8007312:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b20      	cmp	r3, #32
 800731e:	d11d      	bne.n	800735c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_UART_Receive_IT+0x26>
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e016      	b.n	800735e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_UART_Receive_IT+0x38>
 800733a:	2302      	movs	r3, #2
 800733c:	e00f      	b.n	800735e <HAL_UART_Receive_IT+0x58>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	461a      	mov	r2, r3
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 fb24 	bl	80079a0 <UART_Start_Receive_IT>
 8007358:	4603      	mov	r3, r0
 800735a:	e000      	b.n	800735e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800735c:	2302      	movs	r3, #2
  }
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b0ba      	sub	sp, #232	; 0xe8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800738e:	2300      	movs	r3, #0
 8007390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007394:	2300      	movs	r3, #0
 8007396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10f      	bne.n	80073ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b2:	f003 0320 	and.w	r3, r3, #32
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_UART_IRQHandler+0x66>
 80073ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fc03 	bl	8007bd2 <UART_Receive_IT>
      return;
 80073cc:	e256      	b.n	800787c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80de 	beq.w	8007594 <HAL_UART_IRQHandler+0x22c>
 80073d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d106      	bne.n	80073f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80d1 	beq.w	8007594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <HAL_UART_IRQHandler+0xae>
 80073fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f043 0201 	orr.w	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <HAL_UART_IRQHandler+0xd2>
 8007422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f043 0202 	orr.w	r2, r3, #2
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800743a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_UART_IRQHandler+0xf6>
 8007446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f043 0204 	orr.w	r2, r3, #4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d011      	beq.n	800748e <HAL_UART_IRQHandler+0x126>
 800746a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f043 0208 	orr.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 81ed 	beq.w	8007872 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d008      	beq.n	80074b6 <HAL_UART_IRQHandler+0x14e>
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fb8e 	bl	8007bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	bf0c      	ite	eq
 80074c4:	2301      	moveq	r3, #1
 80074c6:	2300      	movne	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d103      	bne.n	80074e2 <HAL_UART_IRQHandler+0x17a>
 80074da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04f      	beq.n	8007582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa96 	bl	8007a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d141      	bne.n	800757a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3314      	adds	r3, #20
 80074fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800750c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3314      	adds	r3, #20
 800751e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800752e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800753a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1d9      	bne.n	80074f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	2b00      	cmp	r3, #0
 8007548:	d013      	beq.n	8007572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	4a7d      	ldr	r2, [pc, #500]	; (8007744 <HAL_UART_IRQHandler+0x3dc>)
 8007550:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	4618      	mov	r0, r3
 8007558:	f7fd fc15 	bl	8004d86 <HAL_DMA_Abort_IT>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d016      	beq.n	8007590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007570:	e00e      	b.n	8007590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f990 	bl	8007898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007578:	e00a      	b.n	8007590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f98c 	bl	8007898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	e006      	b.n	8007590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f988 	bl	8007898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800758e:	e170      	b.n	8007872 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007590:	bf00      	nop
    return;
 8007592:	e16e      	b.n	8007872 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	2b01      	cmp	r3, #1
 800759a:	f040 814a 	bne.w	8007832 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	f003 0310 	and.w	r3, r3, #16
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8143 	beq.w	8007832 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 813c 	beq.w	8007832 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ba:	2300      	movs	r3, #0
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60bb      	str	r3, [r7, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	f040 80b4 	bne.w	8007748 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8140 	beq.w	8007876 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075fe:	429a      	cmp	r2, r3
 8007600:	f080 8139 	bcs.w	8007876 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800760a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007616:	f000 8088 	beq.w	800772a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	330c      	adds	r3, #12
 8007642:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800764a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800765e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1d9      	bne.n	800761a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3314      	adds	r3, #20
 800766c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3314      	adds	r3, #20
 8007686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800768a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800768e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800769c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e1      	bne.n	8007666 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3314      	adds	r3, #20
 80076a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3314      	adds	r3, #20
 80076c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e3      	bne.n	80076a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fa:	f023 0310 	bic.w	r3, r3, #16
 80076fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	330c      	adds	r3, #12
 8007708:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800770c:	65ba      	str	r2, [r7, #88]	; 0x58
 800770e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800771a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e3      	bne.n	80076e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	4618      	mov	r0, r3
 8007726:	f7fd fabe 	bl	8004ca6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007732:	b29b      	uxth	r3, r3
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	b29b      	uxth	r3, r3
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f8b6 	bl	80078ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007740:	e099      	b.n	8007876 <HAL_UART_IRQHandler+0x50e>
 8007742:	bf00      	nop
 8007744:	08007adb 	.word	0x08007adb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007750:	b29b      	uxth	r3, r3
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 808b 	beq.w	800787a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8086 	beq.w	800787a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	330c      	adds	r3, #12
 8007774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007792:	647a      	str	r2, [r7, #68]	; 0x44
 8007794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e3      	bne.n	800776e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3314      	adds	r3, #20
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	623b      	str	r3, [r7, #32]
   return(result);
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3314      	adds	r3, #20
 80077c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077ca:	633a      	str	r2, [r7, #48]	; 0x30
 80077cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e3      	bne.n	80077a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330c      	adds	r3, #12
 80077f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0310 	bic.w	r3, r3, #16
 8007802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007810:	61fa      	str	r2, [r7, #28]
 8007812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	69b9      	ldr	r1, [r7, #24]
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	617b      	str	r3, [r7, #20]
   return(result);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e3      	bne.n	80077ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f83e 	bl	80078ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007830:	e023      	b.n	800787a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <HAL_UART_IRQHandler+0x4ea>
 800783e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f959 	bl	8007b02 <UART_Transmit_IT>
    return;
 8007850:	e014      	b.n	800787c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <HAL_UART_IRQHandler+0x514>
 800785e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f999 	bl	8007ba2 <UART_EndTransmit_IT>
    return;
 8007870:	e004      	b.n	800787c <HAL_UART_IRQHandler+0x514>
    return;
 8007872:	bf00      	nop
 8007874:	e002      	b.n	800787c <HAL_UART_IRQHandler+0x514>
      return;
 8007876:	bf00      	nop
 8007878:	e000      	b.n	800787c <HAL_UART_IRQHandler+0x514>
      return;
 800787a:	bf00      	nop
  }
}
 800787c:	37e8      	adds	r7, #232	; 0xe8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop

08007884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b090      	sub	sp, #64	; 0x40
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d4:	e050      	b.n	8007978 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d04c      	beq.n	8007978 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d007      	beq.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80078e4:	f7fd f89e 	bl	8004a24 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d241      	bcs.n	8007978 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	330c      	adds	r3, #12
 80078fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	330c      	adds	r3, #12
 8007912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007914:	637a      	str	r2, [r7, #52]	; 0x34
 8007916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800791a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e5      	bne.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3314      	adds	r3, #20
 800792e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	e853 3f00 	ldrex	r3, [r3]
 8007936:	613b      	str	r3, [r7, #16]
   return(result);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f023 0301 	bic.w	r3, r3, #1
 800793e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3314      	adds	r3, #20
 8007946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007948:	623a      	str	r2, [r7, #32]
 800794a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	69f9      	ldr	r1, [r7, #28]
 800794e:	6a3a      	ldr	r2, [r7, #32]
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	61bb      	str	r3, [r7, #24]
   return(result);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e5      	bne.n	8007928 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e00f      	b.n	8007998 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4013      	ands	r3, r2
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	429a      	cmp	r2, r3
 8007986:	bf0c      	ite	eq
 8007988:	2301      	moveq	r3, #1
 800798a:	2300      	movne	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	429a      	cmp	r2, r3
 8007994:	d09f      	beq.n	80078d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3740      	adds	r7, #64	; 0x40
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2222      	movs	r2, #34	; 0x22
 80079ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0201 	orr.w	r2, r2, #1
 80079f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0220 	orr.w	r2, r2, #32
 8007a04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b095      	sub	sp, #84	; 0x54
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a3c:	643a      	str	r2, [r7, #64]	; 0x40
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e5      	bne.n	8007a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3314      	adds	r3, #20
 8007a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	f023 0301 	bic.w	r3, r3, #1
 8007a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3314      	adds	r3, #20
 8007a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e5      	bne.n	8007a50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d119      	bne.n	8007ac0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f023 0310 	bic.w	r3, r3, #16
 8007aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	330c      	adds	r3, #12
 8007aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aac:	61ba      	str	r2, [r7, #24]
 8007aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6979      	ldr	r1, [r7, #20]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e5      	bne.n	8007a8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ace:	bf00      	nop
 8007ad0:	3754      	adds	r7, #84	; 0x54
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7ff fecf 	bl	8007898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007afa:	bf00      	nop
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b21      	cmp	r3, #33	; 0x21
 8007b14:	d13e      	bne.n	8007b94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b1e:	d114      	bne.n	8007b4a <UART_Transmit_IT+0x48>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d110      	bne.n	8007b4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	1c9a      	adds	r2, r3, #2
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	621a      	str	r2, [r3, #32]
 8007b48:	e008      	b.n	8007b5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	1c59      	adds	r1, r3, #1
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6211      	str	r1, [r2, #32]
 8007b54:	781a      	ldrb	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10f      	bne.n	8007b90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	e000      	b.n	8007b96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b94:	2302      	movs	r3, #2
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff fe5e 	bl	8007884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b08c      	sub	sp, #48	; 0x30
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b22      	cmp	r3, #34	; 0x22
 8007be4:	f040 80ab 	bne.w	8007d3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf0:	d117      	bne.n	8007c22 <UART_Receive_IT+0x50>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d113      	bne.n	8007c22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	1c9a      	adds	r2, r3, #2
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c20:	e026      	b.n	8007c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c34:	d007      	beq.n	8007c46 <UART_Receive_IT+0x74>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <UART_Receive_IT+0x82>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d106      	bne.n	8007c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	e008      	b.n	8007c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d15a      	bne.n	8007d3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0220 	bic.w	r2, r2, #32
 8007c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695a      	ldr	r2, [r3, #20]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d135      	bne.n	8007d30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f023 0310 	bic.w	r3, r3, #16
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cea:	623a      	str	r2, [r7, #32]
 8007cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	69f9      	ldr	r1, [r7, #28]
 8007cf0:	6a3a      	ldr	r2, [r7, #32]
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e5      	bne.n	8007cca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b10      	cmp	r3, #16
 8007d0a:	d10a      	bne.n	8007d22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fdbf 	bl	80078ac <HAL_UARTEx_RxEventCallback>
 8007d2e:	e002      	b.n	8007d36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fa ff83 	bl	8002c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e002      	b.n	8007d40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e000      	b.n	8007d40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d3e:	2302      	movs	r3, #2
  }
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3730      	adds	r7, #48	; 0x30
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d4c:	b0c0      	sub	sp, #256	; 0x100
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d64:	68d9      	ldr	r1, [r3, #12]
 8007d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	ea40 0301 	orr.w	r3, r0, r1
 8007d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007da0:	f021 010c 	bic.w	r1, r1, #12
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dae:	430b      	orrs	r3, r1
 8007db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc2:	6999      	ldr	r1, [r3, #24]
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	ea40 0301 	orr.w	r3, r0, r1
 8007dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b8f      	ldr	r3, [pc, #572]	; (8008014 <UART_SetConfig+0x2cc>)
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d005      	beq.n	8007de8 <UART_SetConfig+0xa0>
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	4b8d      	ldr	r3, [pc, #564]	; (8008018 <UART_SetConfig+0x2d0>)
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d104      	bne.n	8007df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007de8:	f7fd fb26 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 8007dec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007df0:	e003      	b.n	8007dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007df2:	f7fd fb0d 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8007df6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e04:	f040 810c 	bne.w	8008020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	1891      	adds	r1, r2, r2
 8007e20:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e22:	415b      	adcs	r3, r3
 8007e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	eb12 0801 	adds.w	r8, r2, r1
 8007e30:	4629      	mov	r1, r5
 8007e32:	eb43 0901 	adc.w	r9, r3, r1
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f04f 0300 	mov.w	r3, #0
 8007e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e4a:	4690      	mov	r8, r2
 8007e4c:	4699      	mov	r9, r3
 8007e4e:	4623      	mov	r3, r4
 8007e50:	eb18 0303 	adds.w	r3, r8, r3
 8007e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e58:	462b      	mov	r3, r5
 8007e5a:	eb49 0303 	adc.w	r3, r9, r3
 8007e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e76:	460b      	mov	r3, r1
 8007e78:	18db      	adds	r3, r3, r3
 8007e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	eb42 0303 	adc.w	r3, r2, r3
 8007e82:	657b      	str	r3, [r7, #84]	; 0x54
 8007e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e8c:	f7f8 fefc 	bl	8000c88 <__aeabi_uldivmod>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4b61      	ldr	r3, [pc, #388]	; (800801c <UART_SetConfig+0x2d4>)
 8007e96:	fba3 2302 	umull	r2, r3, r3, r2
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	011c      	lsls	r4, r3, #4
 8007e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	1891      	adds	r1, r2, r2
 8007eb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007eb8:	415b      	adcs	r3, r3
 8007eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ee0:	4692      	mov	sl, r2
 8007ee2:	469b      	mov	fp, r3
 8007ee4:	4643      	mov	r3, r8
 8007ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8007eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	18db      	adds	r3, r3, r3
 8007f10:	643b      	str	r3, [r7, #64]	; 0x40
 8007f12:	4613      	mov	r3, r2
 8007f14:	eb42 0303 	adc.w	r3, r2, r3
 8007f18:	647b      	str	r3, [r7, #68]	; 0x44
 8007f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f22:	f7f8 feb1 	bl	8000c88 <__aeabi_uldivmod>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4b3b      	ldr	r3, [pc, #236]	; (800801c <UART_SetConfig+0x2d4>)
 8007f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	2264      	movs	r2, #100	; 0x64
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	1acb      	subs	r3, r1, r3
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f42:	4b36      	ldr	r3, [pc, #216]	; (800801c <UART_SetConfig+0x2d4>)
 8007f44:	fba3 2302 	umull	r2, r3, r3, r2
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f50:	441c      	add	r4, r3
 8007f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f64:	4642      	mov	r2, r8
 8007f66:	464b      	mov	r3, r9
 8007f68:	1891      	adds	r1, r2, r2
 8007f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f6c:	415b      	adcs	r3, r3
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f74:	4641      	mov	r1, r8
 8007f76:	1851      	adds	r1, r2, r1
 8007f78:	6339      	str	r1, [r7, #48]	; 0x30
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	414b      	adcs	r3, r1
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f80:	f04f 0200 	mov.w	r2, #0
 8007f84:	f04f 0300 	mov.w	r3, #0
 8007f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	00cb      	lsls	r3, r1, #3
 8007f90:	4651      	mov	r1, sl
 8007f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f96:	4651      	mov	r1, sl
 8007f98:	00ca      	lsls	r2, r1, #3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	189b      	adds	r3, r3, r2
 8007fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fa8:	464b      	mov	r3, r9
 8007faa:	460a      	mov	r2, r1
 8007fac:	eb42 0303 	adc.w	r3, r2, r3
 8007fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fc8:	460b      	mov	r3, r1
 8007fca:	18db      	adds	r3, r3, r3
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fce:	4613      	mov	r3, r2
 8007fd0:	eb42 0303 	adc.w	r3, r2, r3
 8007fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007fde:	f7f8 fe53 	bl	8000c88 <__aeabi_uldivmod>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <UART_SetConfig+0x2d4>)
 8007fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	2164      	movs	r1, #100	; 0x64
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	3332      	adds	r3, #50	; 0x32
 8007ffa:	4a08      	ldr	r2, [pc, #32]	; (800801c <UART_SetConfig+0x2d4>)
 8007ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	f003 0207 	and.w	r2, r3, #7
 8008006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4422      	add	r2, r4
 800800e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008010:	e105      	b.n	800821e <UART_SetConfig+0x4d6>
 8008012:	bf00      	nop
 8008014:	40011000 	.word	0x40011000
 8008018:	40011400 	.word	0x40011400
 800801c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008024:	2200      	movs	r2, #0
 8008026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800802a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800802e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008032:	4642      	mov	r2, r8
 8008034:	464b      	mov	r3, r9
 8008036:	1891      	adds	r1, r2, r2
 8008038:	6239      	str	r1, [r7, #32]
 800803a:	415b      	adcs	r3, r3
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
 800803e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008042:	4641      	mov	r1, r8
 8008044:	1854      	adds	r4, r2, r1
 8008046:	4649      	mov	r1, r9
 8008048:	eb43 0501 	adc.w	r5, r3, r1
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	f04f 0300 	mov.w	r3, #0
 8008054:	00eb      	lsls	r3, r5, #3
 8008056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800805a:	00e2      	lsls	r2, r4, #3
 800805c:	4614      	mov	r4, r2
 800805e:	461d      	mov	r5, r3
 8008060:	4643      	mov	r3, r8
 8008062:	18e3      	adds	r3, r4, r3
 8008064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008068:	464b      	mov	r3, r9
 800806a:	eb45 0303 	adc.w	r3, r5, r3
 800806e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800807e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	f04f 0300 	mov.w	r3, #0
 800808a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800808e:	4629      	mov	r1, r5
 8008090:	008b      	lsls	r3, r1, #2
 8008092:	4621      	mov	r1, r4
 8008094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008098:	4621      	mov	r1, r4
 800809a:	008a      	lsls	r2, r1, #2
 800809c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080a0:	f7f8 fdf2 	bl	8000c88 <__aeabi_uldivmod>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4b60      	ldr	r3, [pc, #384]	; (800822c <UART_SetConfig+0x4e4>)
 80080aa:	fba3 2302 	umull	r2, r3, r3, r2
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	011c      	lsls	r4, r3, #4
 80080b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080c4:	4642      	mov	r2, r8
 80080c6:	464b      	mov	r3, r9
 80080c8:	1891      	adds	r1, r2, r2
 80080ca:	61b9      	str	r1, [r7, #24]
 80080cc:	415b      	adcs	r3, r3
 80080ce:	61fb      	str	r3, [r7, #28]
 80080d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080d4:	4641      	mov	r1, r8
 80080d6:	1851      	adds	r1, r2, r1
 80080d8:	6139      	str	r1, [r7, #16]
 80080da:	4649      	mov	r1, r9
 80080dc:	414b      	adcs	r3, r1
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	f04f 0200 	mov.w	r2, #0
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080ec:	4659      	mov	r1, fp
 80080ee:	00cb      	lsls	r3, r1, #3
 80080f0:	4651      	mov	r1, sl
 80080f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080f6:	4651      	mov	r1, sl
 80080f8:	00ca      	lsls	r2, r1, #3
 80080fa:	4610      	mov	r0, r2
 80080fc:	4619      	mov	r1, r3
 80080fe:	4603      	mov	r3, r0
 8008100:	4642      	mov	r2, r8
 8008102:	189b      	adds	r3, r3, r2
 8008104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008108:	464b      	mov	r3, r9
 800810a:	460a      	mov	r2, r1
 800810c:	eb42 0303 	adc.w	r3, r2, r3
 8008110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	67bb      	str	r3, [r7, #120]	; 0x78
 800811e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008120:	f04f 0200 	mov.w	r2, #0
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800812c:	4649      	mov	r1, r9
 800812e:	008b      	lsls	r3, r1, #2
 8008130:	4641      	mov	r1, r8
 8008132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008136:	4641      	mov	r1, r8
 8008138:	008a      	lsls	r2, r1, #2
 800813a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800813e:	f7f8 fda3 	bl	8000c88 <__aeabi_uldivmod>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4b39      	ldr	r3, [pc, #228]	; (800822c <UART_SetConfig+0x4e4>)
 8008148:	fba3 1302 	umull	r1, r3, r3, r2
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	2164      	movs	r1, #100	; 0x64
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	3332      	adds	r3, #50	; 0x32
 800815a:	4a34      	ldr	r2, [pc, #208]	; (800822c <UART_SetConfig+0x4e4>)
 800815c:	fba2 2303 	umull	r2, r3, r2, r3
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008166:	441c      	add	r4, r3
 8008168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800816c:	2200      	movs	r2, #0
 800816e:	673b      	str	r3, [r7, #112]	; 0x70
 8008170:	677a      	str	r2, [r7, #116]	; 0x74
 8008172:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008176:	4642      	mov	r2, r8
 8008178:	464b      	mov	r3, r9
 800817a:	1891      	adds	r1, r2, r2
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	415b      	adcs	r3, r3
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008186:	4641      	mov	r1, r8
 8008188:	1851      	adds	r1, r2, r1
 800818a:	6039      	str	r1, [r7, #0]
 800818c:	4649      	mov	r1, r9
 800818e:	414b      	adcs	r3, r1
 8008190:	607b      	str	r3, [r7, #4]
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800819e:	4659      	mov	r1, fp
 80081a0:	00cb      	lsls	r3, r1, #3
 80081a2:	4651      	mov	r1, sl
 80081a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081a8:	4651      	mov	r1, sl
 80081aa:	00ca      	lsls	r2, r1, #3
 80081ac:	4610      	mov	r0, r2
 80081ae:	4619      	mov	r1, r3
 80081b0:	4603      	mov	r3, r0
 80081b2:	4642      	mov	r2, r8
 80081b4:	189b      	adds	r3, r3, r2
 80081b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80081b8:	464b      	mov	r3, r9
 80081ba:	460a      	mov	r2, r1
 80081bc:	eb42 0303 	adc.w	r3, r2, r3
 80081c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	663b      	str	r3, [r7, #96]	; 0x60
 80081cc:	667a      	str	r2, [r7, #100]	; 0x64
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	f04f 0300 	mov.w	r3, #0
 80081d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081da:	4649      	mov	r1, r9
 80081dc:	008b      	lsls	r3, r1, #2
 80081de:	4641      	mov	r1, r8
 80081e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081e4:	4641      	mov	r1, r8
 80081e6:	008a      	lsls	r2, r1, #2
 80081e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081ec:	f7f8 fd4c 	bl	8000c88 <__aeabi_uldivmod>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <UART_SetConfig+0x4e4>)
 80081f6:	fba3 1302 	umull	r1, r3, r3, r2
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	2164      	movs	r1, #100	; 0x64
 80081fe:	fb01 f303 	mul.w	r3, r1, r3
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	3332      	adds	r3, #50	; 0x32
 8008208:	4a08      	ldr	r2, [pc, #32]	; (800822c <UART_SetConfig+0x4e4>)
 800820a:	fba2 2303 	umull	r2, r3, r2, r3
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	f003 020f 	and.w	r2, r3, #15
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4422      	add	r2, r4
 800821c:	609a      	str	r2, [r3, #8]
}
 800821e:	bf00      	nop
 8008220:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008224:	46bd      	mov	sp, r7
 8008226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800822a:	bf00      	nop
 800822c:	51eb851f 	.word	0x51eb851f

08008230 <calloc>:
 8008230:	4b02      	ldr	r3, [pc, #8]	; (800823c <calloc+0xc>)
 8008232:	460a      	mov	r2, r1
 8008234:	4601      	mov	r1, r0
 8008236:	6818      	ldr	r0, [r3, #0]
 8008238:	f000 b83c 	b.w	80082b4 <_calloc_r>
 800823c:	2000000c 	.word	0x2000000c

08008240 <__errno>:
 8008240:	4b01      	ldr	r3, [pc, #4]	; (8008248 <__errno+0x8>)
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	2000000c 	.word	0x2000000c

0800824c <__libc_init_array>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	4d0d      	ldr	r5, [pc, #52]	; (8008284 <__libc_init_array+0x38>)
 8008250:	4c0d      	ldr	r4, [pc, #52]	; (8008288 <__libc_init_array+0x3c>)
 8008252:	1b64      	subs	r4, r4, r5
 8008254:	10a4      	asrs	r4, r4, #2
 8008256:	2600      	movs	r6, #0
 8008258:	42a6      	cmp	r6, r4
 800825a:	d109      	bne.n	8008270 <__libc_init_array+0x24>
 800825c:	4d0b      	ldr	r5, [pc, #44]	; (800828c <__libc_init_array+0x40>)
 800825e:	4c0c      	ldr	r4, [pc, #48]	; (8008290 <__libc_init_array+0x44>)
 8008260:	f004 faf0 	bl	800c844 <_init>
 8008264:	1b64      	subs	r4, r4, r5
 8008266:	10a4      	asrs	r4, r4, #2
 8008268:	2600      	movs	r6, #0
 800826a:	42a6      	cmp	r6, r4
 800826c:	d105      	bne.n	800827a <__libc_init_array+0x2e>
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	f855 3b04 	ldr.w	r3, [r5], #4
 8008274:	4798      	blx	r3
 8008276:	3601      	adds	r6, #1
 8008278:	e7ee      	b.n	8008258 <__libc_init_array+0xc>
 800827a:	f855 3b04 	ldr.w	r3, [r5], #4
 800827e:	4798      	blx	r3
 8008280:	3601      	adds	r6, #1
 8008282:	e7f2      	b.n	800826a <__libc_init_array+0x1e>
 8008284:	0800d098 	.word	0x0800d098
 8008288:	0800d098 	.word	0x0800d098
 800828c:	0800d098 	.word	0x0800d098
 8008290:	0800d09c 	.word	0x0800d09c

08008294 <malloc>:
 8008294:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <malloc+0xc>)
 8008296:	4601      	mov	r1, r0
 8008298:	6818      	ldr	r0, [r3, #0]
 800829a:	f000 b88d 	b.w	80083b8 <_malloc_r>
 800829e:	bf00      	nop
 80082a0:	2000000c 	.word	0x2000000c

080082a4 <memset>:
 80082a4:	4402      	add	r2, r0
 80082a6:	4603      	mov	r3, r0
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d100      	bne.n	80082ae <memset+0xa>
 80082ac:	4770      	bx	lr
 80082ae:	f803 1b01 	strb.w	r1, [r3], #1
 80082b2:	e7f9      	b.n	80082a8 <memset+0x4>

080082b4 <_calloc_r>:
 80082b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082b6:	fba1 2402 	umull	r2, r4, r1, r2
 80082ba:	b94c      	cbnz	r4, 80082d0 <_calloc_r+0x1c>
 80082bc:	4611      	mov	r1, r2
 80082be:	9201      	str	r2, [sp, #4]
 80082c0:	f000 f87a 	bl	80083b8 <_malloc_r>
 80082c4:	9a01      	ldr	r2, [sp, #4]
 80082c6:	4605      	mov	r5, r0
 80082c8:	b930      	cbnz	r0, 80082d8 <_calloc_r+0x24>
 80082ca:	4628      	mov	r0, r5
 80082cc:	b003      	add	sp, #12
 80082ce:	bd30      	pop	{r4, r5, pc}
 80082d0:	220c      	movs	r2, #12
 80082d2:	6002      	str	r2, [r0, #0]
 80082d4:	2500      	movs	r5, #0
 80082d6:	e7f8      	b.n	80082ca <_calloc_r+0x16>
 80082d8:	4621      	mov	r1, r4
 80082da:	f7ff ffe3 	bl	80082a4 <memset>
 80082de:	e7f4      	b.n	80082ca <_calloc_r+0x16>

080082e0 <_free_r>:
 80082e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082e2:	2900      	cmp	r1, #0
 80082e4:	d044      	beq.n	8008370 <_free_r+0x90>
 80082e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ea:	9001      	str	r0, [sp, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f1a1 0404 	sub.w	r4, r1, #4
 80082f2:	bfb8      	it	lt
 80082f4:	18e4      	addlt	r4, r4, r3
 80082f6:	f001 ff47 	bl	800a188 <__malloc_lock>
 80082fa:	4a1e      	ldr	r2, [pc, #120]	; (8008374 <_free_r+0x94>)
 80082fc:	9801      	ldr	r0, [sp, #4]
 80082fe:	6813      	ldr	r3, [r2, #0]
 8008300:	b933      	cbnz	r3, 8008310 <_free_r+0x30>
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	6014      	str	r4, [r2, #0]
 8008306:	b003      	add	sp, #12
 8008308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800830c:	f001 bf42 	b.w	800a194 <__malloc_unlock>
 8008310:	42a3      	cmp	r3, r4
 8008312:	d908      	bls.n	8008326 <_free_r+0x46>
 8008314:	6825      	ldr	r5, [r4, #0]
 8008316:	1961      	adds	r1, r4, r5
 8008318:	428b      	cmp	r3, r1
 800831a:	bf01      	itttt	eq
 800831c:	6819      	ldreq	r1, [r3, #0]
 800831e:	685b      	ldreq	r3, [r3, #4]
 8008320:	1949      	addeq	r1, r1, r5
 8008322:	6021      	streq	r1, [r4, #0]
 8008324:	e7ed      	b.n	8008302 <_free_r+0x22>
 8008326:	461a      	mov	r2, r3
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b10b      	cbz	r3, 8008330 <_free_r+0x50>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d9fa      	bls.n	8008326 <_free_r+0x46>
 8008330:	6811      	ldr	r1, [r2, #0]
 8008332:	1855      	adds	r5, r2, r1
 8008334:	42a5      	cmp	r5, r4
 8008336:	d10b      	bne.n	8008350 <_free_r+0x70>
 8008338:	6824      	ldr	r4, [r4, #0]
 800833a:	4421      	add	r1, r4
 800833c:	1854      	adds	r4, r2, r1
 800833e:	42a3      	cmp	r3, r4
 8008340:	6011      	str	r1, [r2, #0]
 8008342:	d1e0      	bne.n	8008306 <_free_r+0x26>
 8008344:	681c      	ldr	r4, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	6053      	str	r3, [r2, #4]
 800834a:	4421      	add	r1, r4
 800834c:	6011      	str	r1, [r2, #0]
 800834e:	e7da      	b.n	8008306 <_free_r+0x26>
 8008350:	d902      	bls.n	8008358 <_free_r+0x78>
 8008352:	230c      	movs	r3, #12
 8008354:	6003      	str	r3, [r0, #0]
 8008356:	e7d6      	b.n	8008306 <_free_r+0x26>
 8008358:	6825      	ldr	r5, [r4, #0]
 800835a:	1961      	adds	r1, r4, r5
 800835c:	428b      	cmp	r3, r1
 800835e:	bf04      	itt	eq
 8008360:	6819      	ldreq	r1, [r3, #0]
 8008362:	685b      	ldreq	r3, [r3, #4]
 8008364:	6063      	str	r3, [r4, #4]
 8008366:	bf04      	itt	eq
 8008368:	1949      	addeq	r1, r1, r5
 800836a:	6021      	streq	r1, [r4, #0]
 800836c:	6054      	str	r4, [r2, #4]
 800836e:	e7ca      	b.n	8008306 <_free_r+0x26>
 8008370:	b003      	add	sp, #12
 8008372:	bd30      	pop	{r4, r5, pc}
 8008374:	20000628 	.word	0x20000628

08008378 <sbrk_aligned>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4e0e      	ldr	r6, [pc, #56]	; (80083b4 <sbrk_aligned+0x3c>)
 800837c:	460c      	mov	r4, r1
 800837e:	6831      	ldr	r1, [r6, #0]
 8008380:	4605      	mov	r5, r0
 8008382:	b911      	cbnz	r1, 800838a <sbrk_aligned+0x12>
 8008384:	f000 fd84 	bl	8008e90 <_sbrk_r>
 8008388:	6030      	str	r0, [r6, #0]
 800838a:	4621      	mov	r1, r4
 800838c:	4628      	mov	r0, r5
 800838e:	f000 fd7f 	bl	8008e90 <_sbrk_r>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d00a      	beq.n	80083ac <sbrk_aligned+0x34>
 8008396:	1cc4      	adds	r4, r0, #3
 8008398:	f024 0403 	bic.w	r4, r4, #3
 800839c:	42a0      	cmp	r0, r4
 800839e:	d007      	beq.n	80083b0 <sbrk_aligned+0x38>
 80083a0:	1a21      	subs	r1, r4, r0
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 fd74 	bl	8008e90 <_sbrk_r>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d101      	bne.n	80083b0 <sbrk_aligned+0x38>
 80083ac:	f04f 34ff 	mov.w	r4, #4294967295
 80083b0:	4620      	mov	r0, r4
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	2000062c 	.word	0x2000062c

080083b8 <_malloc_r>:
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	1ccd      	adds	r5, r1, #3
 80083be:	f025 0503 	bic.w	r5, r5, #3
 80083c2:	3508      	adds	r5, #8
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	bf38      	it	cc
 80083c8:	250c      	movcc	r5, #12
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	4607      	mov	r7, r0
 80083ce:	db01      	blt.n	80083d4 <_malloc_r+0x1c>
 80083d0:	42a9      	cmp	r1, r5
 80083d2:	d905      	bls.n	80083e0 <_malloc_r+0x28>
 80083d4:	230c      	movs	r3, #12
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	2600      	movs	r6, #0
 80083da:	4630      	mov	r0, r6
 80083dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e0:	4e2e      	ldr	r6, [pc, #184]	; (800849c <_malloc_r+0xe4>)
 80083e2:	f001 fed1 	bl	800a188 <__malloc_lock>
 80083e6:	6833      	ldr	r3, [r6, #0]
 80083e8:	461c      	mov	r4, r3
 80083ea:	bb34      	cbnz	r4, 800843a <_malloc_r+0x82>
 80083ec:	4629      	mov	r1, r5
 80083ee:	4638      	mov	r0, r7
 80083f0:	f7ff ffc2 	bl	8008378 <sbrk_aligned>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	4604      	mov	r4, r0
 80083f8:	d14d      	bne.n	8008496 <_malloc_r+0xde>
 80083fa:	6834      	ldr	r4, [r6, #0]
 80083fc:	4626      	mov	r6, r4
 80083fe:	2e00      	cmp	r6, #0
 8008400:	d140      	bne.n	8008484 <_malloc_r+0xcc>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	4631      	mov	r1, r6
 8008406:	4638      	mov	r0, r7
 8008408:	eb04 0803 	add.w	r8, r4, r3
 800840c:	f000 fd40 	bl	8008e90 <_sbrk_r>
 8008410:	4580      	cmp	r8, r0
 8008412:	d13a      	bne.n	800848a <_malloc_r+0xd2>
 8008414:	6821      	ldr	r1, [r4, #0]
 8008416:	3503      	adds	r5, #3
 8008418:	1a6d      	subs	r5, r5, r1
 800841a:	f025 0503 	bic.w	r5, r5, #3
 800841e:	3508      	adds	r5, #8
 8008420:	2d0c      	cmp	r5, #12
 8008422:	bf38      	it	cc
 8008424:	250c      	movcc	r5, #12
 8008426:	4629      	mov	r1, r5
 8008428:	4638      	mov	r0, r7
 800842a:	f7ff ffa5 	bl	8008378 <sbrk_aligned>
 800842e:	3001      	adds	r0, #1
 8008430:	d02b      	beq.n	800848a <_malloc_r+0xd2>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	442b      	add	r3, r5
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	e00e      	b.n	8008458 <_malloc_r+0xa0>
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	1b52      	subs	r2, r2, r5
 800843e:	d41e      	bmi.n	800847e <_malloc_r+0xc6>
 8008440:	2a0b      	cmp	r2, #11
 8008442:	d916      	bls.n	8008472 <_malloc_r+0xba>
 8008444:	1961      	adds	r1, r4, r5
 8008446:	42a3      	cmp	r3, r4
 8008448:	6025      	str	r5, [r4, #0]
 800844a:	bf18      	it	ne
 800844c:	6059      	strne	r1, [r3, #4]
 800844e:	6863      	ldr	r3, [r4, #4]
 8008450:	bf08      	it	eq
 8008452:	6031      	streq	r1, [r6, #0]
 8008454:	5162      	str	r2, [r4, r5]
 8008456:	604b      	str	r3, [r1, #4]
 8008458:	4638      	mov	r0, r7
 800845a:	f104 060b 	add.w	r6, r4, #11
 800845e:	f001 fe99 	bl	800a194 <__malloc_unlock>
 8008462:	f026 0607 	bic.w	r6, r6, #7
 8008466:	1d23      	adds	r3, r4, #4
 8008468:	1af2      	subs	r2, r6, r3
 800846a:	d0b6      	beq.n	80083da <_malloc_r+0x22>
 800846c:	1b9b      	subs	r3, r3, r6
 800846e:	50a3      	str	r3, [r4, r2]
 8008470:	e7b3      	b.n	80083da <_malloc_r+0x22>
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	42a3      	cmp	r3, r4
 8008476:	bf0c      	ite	eq
 8008478:	6032      	streq	r2, [r6, #0]
 800847a:	605a      	strne	r2, [r3, #4]
 800847c:	e7ec      	b.n	8008458 <_malloc_r+0xa0>
 800847e:	4623      	mov	r3, r4
 8008480:	6864      	ldr	r4, [r4, #4]
 8008482:	e7b2      	b.n	80083ea <_malloc_r+0x32>
 8008484:	4634      	mov	r4, r6
 8008486:	6876      	ldr	r6, [r6, #4]
 8008488:	e7b9      	b.n	80083fe <_malloc_r+0x46>
 800848a:	230c      	movs	r3, #12
 800848c:	603b      	str	r3, [r7, #0]
 800848e:	4638      	mov	r0, r7
 8008490:	f001 fe80 	bl	800a194 <__malloc_unlock>
 8008494:	e7a1      	b.n	80083da <_malloc_r+0x22>
 8008496:	6025      	str	r5, [r4, #0]
 8008498:	e7de      	b.n	8008458 <_malloc_r+0xa0>
 800849a:	bf00      	nop
 800849c:	20000628 	.word	0x20000628

080084a0 <__cvt>:
 80084a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084a4:	ec55 4b10 	vmov	r4, r5, d0
 80084a8:	2d00      	cmp	r5, #0
 80084aa:	460e      	mov	r6, r1
 80084ac:	4619      	mov	r1, r3
 80084ae:	462b      	mov	r3, r5
 80084b0:	bfbb      	ittet	lt
 80084b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084b6:	461d      	movlt	r5, r3
 80084b8:	2300      	movge	r3, #0
 80084ba:	232d      	movlt	r3, #45	; 0x2d
 80084bc:	700b      	strb	r3, [r1, #0]
 80084be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084c4:	4691      	mov	r9, r2
 80084c6:	f023 0820 	bic.w	r8, r3, #32
 80084ca:	bfbc      	itt	lt
 80084cc:	4622      	movlt	r2, r4
 80084ce:	4614      	movlt	r4, r2
 80084d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084d4:	d005      	beq.n	80084e2 <__cvt+0x42>
 80084d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084da:	d100      	bne.n	80084de <__cvt+0x3e>
 80084dc:	3601      	adds	r6, #1
 80084de:	2102      	movs	r1, #2
 80084e0:	e000      	b.n	80084e4 <__cvt+0x44>
 80084e2:	2103      	movs	r1, #3
 80084e4:	ab03      	add	r3, sp, #12
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	ab02      	add	r3, sp, #8
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	ec45 4b10 	vmov	d0, r4, r5
 80084f0:	4653      	mov	r3, sl
 80084f2:	4632      	mov	r2, r6
 80084f4:	f000 fe28 	bl	8009148 <_dtoa_r>
 80084f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084fc:	4607      	mov	r7, r0
 80084fe:	d102      	bne.n	8008506 <__cvt+0x66>
 8008500:	f019 0f01 	tst.w	r9, #1
 8008504:	d022      	beq.n	800854c <__cvt+0xac>
 8008506:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800850a:	eb07 0906 	add.w	r9, r7, r6
 800850e:	d110      	bne.n	8008532 <__cvt+0x92>
 8008510:	783b      	ldrb	r3, [r7, #0]
 8008512:	2b30      	cmp	r3, #48	; 0x30
 8008514:	d10a      	bne.n	800852c <__cvt+0x8c>
 8008516:	2200      	movs	r2, #0
 8008518:	2300      	movs	r3, #0
 800851a:	4620      	mov	r0, r4
 800851c:	4629      	mov	r1, r5
 800851e:	f7f8 faf3 	bl	8000b08 <__aeabi_dcmpeq>
 8008522:	b918      	cbnz	r0, 800852c <__cvt+0x8c>
 8008524:	f1c6 0601 	rsb	r6, r6, #1
 8008528:	f8ca 6000 	str.w	r6, [sl]
 800852c:	f8da 3000 	ldr.w	r3, [sl]
 8008530:	4499      	add	r9, r3
 8008532:	2200      	movs	r2, #0
 8008534:	2300      	movs	r3, #0
 8008536:	4620      	mov	r0, r4
 8008538:	4629      	mov	r1, r5
 800853a:	f7f8 fae5 	bl	8000b08 <__aeabi_dcmpeq>
 800853e:	b108      	cbz	r0, 8008544 <__cvt+0xa4>
 8008540:	f8cd 900c 	str.w	r9, [sp, #12]
 8008544:	2230      	movs	r2, #48	; 0x30
 8008546:	9b03      	ldr	r3, [sp, #12]
 8008548:	454b      	cmp	r3, r9
 800854a:	d307      	bcc.n	800855c <__cvt+0xbc>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008550:	1bdb      	subs	r3, r3, r7
 8008552:	4638      	mov	r0, r7
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	b004      	add	sp, #16
 8008558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855c:	1c59      	adds	r1, r3, #1
 800855e:	9103      	str	r1, [sp, #12]
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	e7f0      	b.n	8008546 <__cvt+0xa6>

08008564 <__exponent>:
 8008564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008566:	4603      	mov	r3, r0
 8008568:	2900      	cmp	r1, #0
 800856a:	bfb8      	it	lt
 800856c:	4249      	neglt	r1, r1
 800856e:	f803 2b02 	strb.w	r2, [r3], #2
 8008572:	bfb4      	ite	lt
 8008574:	222d      	movlt	r2, #45	; 0x2d
 8008576:	222b      	movge	r2, #43	; 0x2b
 8008578:	2909      	cmp	r1, #9
 800857a:	7042      	strb	r2, [r0, #1]
 800857c:	dd2a      	ble.n	80085d4 <__exponent+0x70>
 800857e:	f10d 0407 	add.w	r4, sp, #7
 8008582:	46a4      	mov	ip, r4
 8008584:	270a      	movs	r7, #10
 8008586:	46a6      	mov	lr, r4
 8008588:	460a      	mov	r2, r1
 800858a:	fb91 f6f7 	sdiv	r6, r1, r7
 800858e:	fb07 1516 	mls	r5, r7, r6, r1
 8008592:	3530      	adds	r5, #48	; 0x30
 8008594:	2a63      	cmp	r2, #99	; 0x63
 8008596:	f104 34ff 	add.w	r4, r4, #4294967295
 800859a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800859e:	4631      	mov	r1, r6
 80085a0:	dcf1      	bgt.n	8008586 <__exponent+0x22>
 80085a2:	3130      	adds	r1, #48	; 0x30
 80085a4:	f1ae 0502 	sub.w	r5, lr, #2
 80085a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085ac:	1c44      	adds	r4, r0, #1
 80085ae:	4629      	mov	r1, r5
 80085b0:	4561      	cmp	r1, ip
 80085b2:	d30a      	bcc.n	80085ca <__exponent+0x66>
 80085b4:	f10d 0209 	add.w	r2, sp, #9
 80085b8:	eba2 020e 	sub.w	r2, r2, lr
 80085bc:	4565      	cmp	r5, ip
 80085be:	bf88      	it	hi
 80085c0:	2200      	movhi	r2, #0
 80085c2:	4413      	add	r3, r2
 80085c4:	1a18      	subs	r0, r3, r0
 80085c6:	b003      	add	sp, #12
 80085c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80085d2:	e7ed      	b.n	80085b0 <__exponent+0x4c>
 80085d4:	2330      	movs	r3, #48	; 0x30
 80085d6:	3130      	adds	r1, #48	; 0x30
 80085d8:	7083      	strb	r3, [r0, #2]
 80085da:	70c1      	strb	r1, [r0, #3]
 80085dc:	1d03      	adds	r3, r0, #4
 80085de:	e7f1      	b.n	80085c4 <__exponent+0x60>

080085e0 <_printf_float>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	ed2d 8b02 	vpush	{d8}
 80085e8:	b08d      	sub	sp, #52	; 0x34
 80085ea:	460c      	mov	r4, r1
 80085ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085f0:	4616      	mov	r6, r2
 80085f2:	461f      	mov	r7, r3
 80085f4:	4605      	mov	r5, r0
 80085f6:	f001 fd4d 	bl	800a094 <_localeconv_r>
 80085fa:	f8d0 a000 	ldr.w	sl, [r0]
 80085fe:	4650      	mov	r0, sl
 8008600:	f7f7 fe06 	bl	8000210 <strlen>
 8008604:	2300      	movs	r3, #0
 8008606:	930a      	str	r3, [sp, #40]	; 0x28
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	9305      	str	r3, [sp, #20]
 800860c:	f8d8 3000 	ldr.w	r3, [r8]
 8008610:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008614:	3307      	adds	r3, #7
 8008616:	f023 0307 	bic.w	r3, r3, #7
 800861a:	f103 0208 	add.w	r2, r3, #8
 800861e:	f8c8 2000 	str.w	r2, [r8]
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800862a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800862e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008632:	9307      	str	r3, [sp, #28]
 8008634:	f8cd 8018 	str.w	r8, [sp, #24]
 8008638:	ee08 0a10 	vmov	s16, r0
 800863c:	4b9f      	ldr	r3, [pc, #636]	; (80088bc <_printf_float+0x2dc>)
 800863e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008642:	f04f 32ff 	mov.w	r2, #4294967295
 8008646:	f7f8 fa91 	bl	8000b6c <__aeabi_dcmpun>
 800864a:	bb88      	cbnz	r0, 80086b0 <_printf_float+0xd0>
 800864c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008650:	4b9a      	ldr	r3, [pc, #616]	; (80088bc <_printf_float+0x2dc>)
 8008652:	f04f 32ff 	mov.w	r2, #4294967295
 8008656:	f7f8 fa6b 	bl	8000b30 <__aeabi_dcmple>
 800865a:	bb48      	cbnz	r0, 80086b0 <_printf_float+0xd0>
 800865c:	2200      	movs	r2, #0
 800865e:	2300      	movs	r3, #0
 8008660:	4640      	mov	r0, r8
 8008662:	4649      	mov	r1, r9
 8008664:	f7f8 fa5a 	bl	8000b1c <__aeabi_dcmplt>
 8008668:	b110      	cbz	r0, 8008670 <_printf_float+0x90>
 800866a:	232d      	movs	r3, #45	; 0x2d
 800866c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008670:	4b93      	ldr	r3, [pc, #588]	; (80088c0 <_printf_float+0x2e0>)
 8008672:	4894      	ldr	r0, [pc, #592]	; (80088c4 <_printf_float+0x2e4>)
 8008674:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008678:	bf94      	ite	ls
 800867a:	4698      	movls	r8, r3
 800867c:	4680      	movhi	r8, r0
 800867e:	2303      	movs	r3, #3
 8008680:	6123      	str	r3, [r4, #16]
 8008682:	9b05      	ldr	r3, [sp, #20]
 8008684:	f023 0204 	bic.w	r2, r3, #4
 8008688:	6022      	str	r2, [r4, #0]
 800868a:	f04f 0900 	mov.w	r9, #0
 800868e:	9700      	str	r7, [sp, #0]
 8008690:	4633      	mov	r3, r6
 8008692:	aa0b      	add	r2, sp, #44	; 0x2c
 8008694:	4621      	mov	r1, r4
 8008696:	4628      	mov	r0, r5
 8008698:	f000 f9d8 	bl	8008a4c <_printf_common>
 800869c:	3001      	adds	r0, #1
 800869e:	f040 8090 	bne.w	80087c2 <_printf_float+0x1e2>
 80086a2:	f04f 30ff 	mov.w	r0, #4294967295
 80086a6:	b00d      	add	sp, #52	; 0x34
 80086a8:	ecbd 8b02 	vpop	{d8}
 80086ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b0:	4642      	mov	r2, r8
 80086b2:	464b      	mov	r3, r9
 80086b4:	4640      	mov	r0, r8
 80086b6:	4649      	mov	r1, r9
 80086b8:	f7f8 fa58 	bl	8000b6c <__aeabi_dcmpun>
 80086bc:	b140      	cbz	r0, 80086d0 <_printf_float+0xf0>
 80086be:	464b      	mov	r3, r9
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bfbc      	itt	lt
 80086c4:	232d      	movlt	r3, #45	; 0x2d
 80086c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086ca:	487f      	ldr	r0, [pc, #508]	; (80088c8 <_printf_float+0x2e8>)
 80086cc:	4b7f      	ldr	r3, [pc, #508]	; (80088cc <_printf_float+0x2ec>)
 80086ce:	e7d1      	b.n	8008674 <_printf_float+0x94>
 80086d0:	6863      	ldr	r3, [r4, #4]
 80086d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80086d6:	9206      	str	r2, [sp, #24]
 80086d8:	1c5a      	adds	r2, r3, #1
 80086da:	d13f      	bne.n	800875c <_printf_float+0x17c>
 80086dc:	2306      	movs	r3, #6
 80086de:	6063      	str	r3, [r4, #4]
 80086e0:	9b05      	ldr	r3, [sp, #20]
 80086e2:	6861      	ldr	r1, [r4, #4]
 80086e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80086e8:	2300      	movs	r3, #0
 80086ea:	9303      	str	r3, [sp, #12]
 80086ec:	ab0a      	add	r3, sp, #40	; 0x28
 80086ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80086f2:	ab09      	add	r3, sp, #36	; 0x24
 80086f4:	ec49 8b10 	vmov	d0, r8, r9
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008700:	4628      	mov	r0, r5
 8008702:	f7ff fecd 	bl	80084a0 <__cvt>
 8008706:	9b06      	ldr	r3, [sp, #24]
 8008708:	9909      	ldr	r1, [sp, #36]	; 0x24
 800870a:	2b47      	cmp	r3, #71	; 0x47
 800870c:	4680      	mov	r8, r0
 800870e:	d108      	bne.n	8008722 <_printf_float+0x142>
 8008710:	1cc8      	adds	r0, r1, #3
 8008712:	db02      	blt.n	800871a <_printf_float+0x13a>
 8008714:	6863      	ldr	r3, [r4, #4]
 8008716:	4299      	cmp	r1, r3
 8008718:	dd41      	ble.n	800879e <_printf_float+0x1be>
 800871a:	f1ab 0b02 	sub.w	fp, fp, #2
 800871e:	fa5f fb8b 	uxtb.w	fp, fp
 8008722:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008726:	d820      	bhi.n	800876a <_printf_float+0x18a>
 8008728:	3901      	subs	r1, #1
 800872a:	465a      	mov	r2, fp
 800872c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008730:	9109      	str	r1, [sp, #36]	; 0x24
 8008732:	f7ff ff17 	bl	8008564 <__exponent>
 8008736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008738:	1813      	adds	r3, r2, r0
 800873a:	2a01      	cmp	r2, #1
 800873c:	4681      	mov	r9, r0
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	dc02      	bgt.n	8008748 <_printf_float+0x168>
 8008742:	6822      	ldr	r2, [r4, #0]
 8008744:	07d2      	lsls	r2, r2, #31
 8008746:	d501      	bpl.n	800874c <_printf_float+0x16c>
 8008748:	3301      	adds	r3, #1
 800874a:	6123      	str	r3, [r4, #16]
 800874c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008750:	2b00      	cmp	r3, #0
 8008752:	d09c      	beq.n	800868e <_printf_float+0xae>
 8008754:	232d      	movs	r3, #45	; 0x2d
 8008756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800875a:	e798      	b.n	800868e <_printf_float+0xae>
 800875c:	9a06      	ldr	r2, [sp, #24]
 800875e:	2a47      	cmp	r2, #71	; 0x47
 8008760:	d1be      	bne.n	80086e0 <_printf_float+0x100>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1bc      	bne.n	80086e0 <_printf_float+0x100>
 8008766:	2301      	movs	r3, #1
 8008768:	e7b9      	b.n	80086de <_printf_float+0xfe>
 800876a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800876e:	d118      	bne.n	80087a2 <_printf_float+0x1c2>
 8008770:	2900      	cmp	r1, #0
 8008772:	6863      	ldr	r3, [r4, #4]
 8008774:	dd0b      	ble.n	800878e <_printf_float+0x1ae>
 8008776:	6121      	str	r1, [r4, #16]
 8008778:	b913      	cbnz	r3, 8008780 <_printf_float+0x1a0>
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	07d0      	lsls	r0, r2, #31
 800877e:	d502      	bpl.n	8008786 <_printf_float+0x1a6>
 8008780:	3301      	adds	r3, #1
 8008782:	440b      	add	r3, r1
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	65a1      	str	r1, [r4, #88]	; 0x58
 8008788:	f04f 0900 	mov.w	r9, #0
 800878c:	e7de      	b.n	800874c <_printf_float+0x16c>
 800878e:	b913      	cbnz	r3, 8008796 <_printf_float+0x1b6>
 8008790:	6822      	ldr	r2, [r4, #0]
 8008792:	07d2      	lsls	r2, r2, #31
 8008794:	d501      	bpl.n	800879a <_printf_float+0x1ba>
 8008796:	3302      	adds	r3, #2
 8008798:	e7f4      	b.n	8008784 <_printf_float+0x1a4>
 800879a:	2301      	movs	r3, #1
 800879c:	e7f2      	b.n	8008784 <_printf_float+0x1a4>
 800879e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a4:	4299      	cmp	r1, r3
 80087a6:	db05      	blt.n	80087b4 <_printf_float+0x1d4>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	6121      	str	r1, [r4, #16]
 80087ac:	07d8      	lsls	r0, r3, #31
 80087ae:	d5ea      	bpl.n	8008786 <_printf_float+0x1a6>
 80087b0:	1c4b      	adds	r3, r1, #1
 80087b2:	e7e7      	b.n	8008784 <_printf_float+0x1a4>
 80087b4:	2900      	cmp	r1, #0
 80087b6:	bfd4      	ite	le
 80087b8:	f1c1 0202 	rsble	r2, r1, #2
 80087bc:	2201      	movgt	r2, #1
 80087be:	4413      	add	r3, r2
 80087c0:	e7e0      	b.n	8008784 <_printf_float+0x1a4>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	055a      	lsls	r2, r3, #21
 80087c6:	d407      	bmi.n	80087d8 <_printf_float+0x1f8>
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	4642      	mov	r2, r8
 80087cc:	4631      	mov	r1, r6
 80087ce:	4628      	mov	r0, r5
 80087d0:	47b8      	blx	r7
 80087d2:	3001      	adds	r0, #1
 80087d4:	d12c      	bne.n	8008830 <_printf_float+0x250>
 80087d6:	e764      	b.n	80086a2 <_printf_float+0xc2>
 80087d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087dc:	f240 80e0 	bls.w	80089a0 <_printf_float+0x3c0>
 80087e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087e4:	2200      	movs	r2, #0
 80087e6:	2300      	movs	r3, #0
 80087e8:	f7f8 f98e 	bl	8000b08 <__aeabi_dcmpeq>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d034      	beq.n	800885a <_printf_float+0x27a>
 80087f0:	4a37      	ldr	r2, [pc, #220]	; (80088d0 <_printf_float+0x2f0>)
 80087f2:	2301      	movs	r3, #1
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f af51 	beq.w	80086a2 <_printf_float+0xc2>
 8008800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008804:	429a      	cmp	r2, r3
 8008806:	db02      	blt.n	800880e <_printf_float+0x22e>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	07d8      	lsls	r0, r3, #31
 800880c:	d510      	bpl.n	8008830 <_printf_float+0x250>
 800880e:	ee18 3a10 	vmov	r3, s16
 8008812:	4652      	mov	r2, sl
 8008814:	4631      	mov	r1, r6
 8008816:	4628      	mov	r0, r5
 8008818:	47b8      	blx	r7
 800881a:	3001      	adds	r0, #1
 800881c:	f43f af41 	beq.w	80086a2 <_printf_float+0xc2>
 8008820:	f04f 0800 	mov.w	r8, #0
 8008824:	f104 091a 	add.w	r9, r4, #26
 8008828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882a:	3b01      	subs	r3, #1
 800882c:	4543      	cmp	r3, r8
 800882e:	dc09      	bgt.n	8008844 <_printf_float+0x264>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	079b      	lsls	r3, r3, #30
 8008834:	f100 8105 	bmi.w	8008a42 <_printf_float+0x462>
 8008838:	68e0      	ldr	r0, [r4, #12]
 800883a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800883c:	4298      	cmp	r0, r3
 800883e:	bfb8      	it	lt
 8008840:	4618      	movlt	r0, r3
 8008842:	e730      	b.n	80086a6 <_printf_float+0xc6>
 8008844:	2301      	movs	r3, #1
 8008846:	464a      	mov	r2, r9
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f af27 	beq.w	80086a2 <_printf_float+0xc2>
 8008854:	f108 0801 	add.w	r8, r8, #1
 8008858:	e7e6      	b.n	8008828 <_printf_float+0x248>
 800885a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	dc39      	bgt.n	80088d4 <_printf_float+0x2f4>
 8008860:	4a1b      	ldr	r2, [pc, #108]	; (80088d0 <_printf_float+0x2f0>)
 8008862:	2301      	movs	r3, #1
 8008864:	4631      	mov	r1, r6
 8008866:	4628      	mov	r0, r5
 8008868:	47b8      	blx	r7
 800886a:	3001      	adds	r0, #1
 800886c:	f43f af19 	beq.w	80086a2 <_printf_float+0xc2>
 8008870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008874:	4313      	orrs	r3, r2
 8008876:	d102      	bne.n	800887e <_printf_float+0x29e>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	07d9      	lsls	r1, r3, #31
 800887c:	d5d8      	bpl.n	8008830 <_printf_float+0x250>
 800887e:	ee18 3a10 	vmov	r3, s16
 8008882:	4652      	mov	r2, sl
 8008884:	4631      	mov	r1, r6
 8008886:	4628      	mov	r0, r5
 8008888:	47b8      	blx	r7
 800888a:	3001      	adds	r0, #1
 800888c:	f43f af09 	beq.w	80086a2 <_printf_float+0xc2>
 8008890:	f04f 0900 	mov.w	r9, #0
 8008894:	f104 0a1a 	add.w	sl, r4, #26
 8008898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889a:	425b      	negs	r3, r3
 800889c:	454b      	cmp	r3, r9
 800889e:	dc01      	bgt.n	80088a4 <_printf_float+0x2c4>
 80088a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a2:	e792      	b.n	80087ca <_printf_float+0x1ea>
 80088a4:	2301      	movs	r3, #1
 80088a6:	4652      	mov	r2, sl
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f aef7 	beq.w	80086a2 <_printf_float+0xc2>
 80088b4:	f109 0901 	add.w	r9, r9, #1
 80088b8:	e7ee      	b.n	8008898 <_printf_float+0x2b8>
 80088ba:	bf00      	nop
 80088bc:	7fefffff 	.word	0x7fefffff
 80088c0:	0800ca5c 	.word	0x0800ca5c
 80088c4:	0800ca60 	.word	0x0800ca60
 80088c8:	0800ca68 	.word	0x0800ca68
 80088cc:	0800ca64 	.word	0x0800ca64
 80088d0:	0800ca6c 	.word	0x0800ca6c
 80088d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088d8:	429a      	cmp	r2, r3
 80088da:	bfa8      	it	ge
 80088dc:	461a      	movge	r2, r3
 80088de:	2a00      	cmp	r2, #0
 80088e0:	4691      	mov	r9, r2
 80088e2:	dc37      	bgt.n	8008954 <_printf_float+0x374>
 80088e4:	f04f 0b00 	mov.w	fp, #0
 80088e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ec:	f104 021a 	add.w	r2, r4, #26
 80088f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088f2:	9305      	str	r3, [sp, #20]
 80088f4:	eba3 0309 	sub.w	r3, r3, r9
 80088f8:	455b      	cmp	r3, fp
 80088fa:	dc33      	bgt.n	8008964 <_printf_float+0x384>
 80088fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008900:	429a      	cmp	r2, r3
 8008902:	db3b      	blt.n	800897c <_printf_float+0x39c>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	07da      	lsls	r2, r3, #31
 8008908:	d438      	bmi.n	800897c <_printf_float+0x39c>
 800890a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890c:	9a05      	ldr	r2, [sp, #20]
 800890e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008910:	1a9a      	subs	r2, r3, r2
 8008912:	eba3 0901 	sub.w	r9, r3, r1
 8008916:	4591      	cmp	r9, r2
 8008918:	bfa8      	it	ge
 800891a:	4691      	movge	r9, r2
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	dc35      	bgt.n	800898e <_printf_float+0x3ae>
 8008922:	f04f 0800 	mov.w	r8, #0
 8008926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800892a:	f104 0a1a 	add.w	sl, r4, #26
 800892e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	eba3 0309 	sub.w	r3, r3, r9
 8008938:	4543      	cmp	r3, r8
 800893a:	f77f af79 	ble.w	8008830 <_printf_float+0x250>
 800893e:	2301      	movs	r3, #1
 8008940:	4652      	mov	r2, sl
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	f43f aeaa 	beq.w	80086a2 <_printf_float+0xc2>
 800894e:	f108 0801 	add.w	r8, r8, #1
 8008952:	e7ec      	b.n	800892e <_printf_float+0x34e>
 8008954:	4613      	mov	r3, r2
 8008956:	4631      	mov	r1, r6
 8008958:	4642      	mov	r2, r8
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	d1c0      	bne.n	80088e4 <_printf_float+0x304>
 8008962:	e69e      	b.n	80086a2 <_printf_float+0xc2>
 8008964:	2301      	movs	r3, #1
 8008966:	4631      	mov	r1, r6
 8008968:	4628      	mov	r0, r5
 800896a:	9205      	str	r2, [sp, #20]
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f ae97 	beq.w	80086a2 <_printf_float+0xc2>
 8008974:	9a05      	ldr	r2, [sp, #20]
 8008976:	f10b 0b01 	add.w	fp, fp, #1
 800897a:	e7b9      	b.n	80088f0 <_printf_float+0x310>
 800897c:	ee18 3a10 	vmov	r3, s16
 8008980:	4652      	mov	r2, sl
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	d1be      	bne.n	800890a <_printf_float+0x32a>
 800898c:	e689      	b.n	80086a2 <_printf_float+0xc2>
 800898e:	9a05      	ldr	r2, [sp, #20]
 8008990:	464b      	mov	r3, r9
 8008992:	4442      	add	r2, r8
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	d1c1      	bne.n	8008922 <_printf_float+0x342>
 800899e:	e680      	b.n	80086a2 <_printf_float+0xc2>
 80089a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089a2:	2a01      	cmp	r2, #1
 80089a4:	dc01      	bgt.n	80089aa <_printf_float+0x3ca>
 80089a6:	07db      	lsls	r3, r3, #31
 80089a8:	d538      	bpl.n	8008a1c <_printf_float+0x43c>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4642      	mov	r2, r8
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f ae74 	beq.w	80086a2 <_printf_float+0xc2>
 80089ba:	ee18 3a10 	vmov	r3, s16
 80089be:	4652      	mov	r2, sl
 80089c0:	4631      	mov	r1, r6
 80089c2:	4628      	mov	r0, r5
 80089c4:	47b8      	blx	r7
 80089c6:	3001      	adds	r0, #1
 80089c8:	f43f ae6b 	beq.w	80086a2 <_printf_float+0xc2>
 80089cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089d0:	2200      	movs	r2, #0
 80089d2:	2300      	movs	r3, #0
 80089d4:	f7f8 f898 	bl	8000b08 <__aeabi_dcmpeq>
 80089d8:	b9d8      	cbnz	r0, 8008a12 <_printf_float+0x432>
 80089da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089dc:	f108 0201 	add.w	r2, r8, #1
 80089e0:	3b01      	subs	r3, #1
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	d10e      	bne.n	8008a0a <_printf_float+0x42a>
 80089ec:	e659      	b.n	80086a2 <_printf_float+0xc2>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4652      	mov	r2, sl
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f ae52 	beq.w	80086a2 <_printf_float+0xc2>
 80089fe:	f108 0801 	add.w	r8, r8, #1
 8008a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a04:	3b01      	subs	r3, #1
 8008a06:	4543      	cmp	r3, r8
 8008a08:	dcf1      	bgt.n	80089ee <_printf_float+0x40e>
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a10:	e6dc      	b.n	80087cc <_printf_float+0x1ec>
 8008a12:	f04f 0800 	mov.w	r8, #0
 8008a16:	f104 0a1a 	add.w	sl, r4, #26
 8008a1a:	e7f2      	b.n	8008a02 <_printf_float+0x422>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	4642      	mov	r2, r8
 8008a20:	e7df      	b.n	80089e2 <_printf_float+0x402>
 8008a22:	2301      	movs	r3, #1
 8008a24:	464a      	mov	r2, r9
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae38 	beq.w	80086a2 <_printf_float+0xc2>
 8008a32:	f108 0801 	add.w	r8, r8, #1
 8008a36:	68e3      	ldr	r3, [r4, #12]
 8008a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a3a:	1a5b      	subs	r3, r3, r1
 8008a3c:	4543      	cmp	r3, r8
 8008a3e:	dcf0      	bgt.n	8008a22 <_printf_float+0x442>
 8008a40:	e6fa      	b.n	8008838 <_printf_float+0x258>
 8008a42:	f04f 0800 	mov.w	r8, #0
 8008a46:	f104 0919 	add.w	r9, r4, #25
 8008a4a:	e7f4      	b.n	8008a36 <_printf_float+0x456>

08008a4c <_printf_common>:
 8008a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a50:	4616      	mov	r6, r2
 8008a52:	4699      	mov	r9, r3
 8008a54:	688a      	ldr	r2, [r1, #8]
 8008a56:	690b      	ldr	r3, [r1, #16]
 8008a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	bfb8      	it	lt
 8008a60:	4613      	movlt	r3, r2
 8008a62:	6033      	str	r3, [r6, #0]
 8008a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a68:	4607      	mov	r7, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	b10a      	cbz	r2, 8008a72 <_printf_common+0x26>
 8008a6e:	3301      	adds	r3, #1
 8008a70:	6033      	str	r3, [r6, #0]
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	0699      	lsls	r1, r3, #26
 8008a76:	bf42      	ittt	mi
 8008a78:	6833      	ldrmi	r3, [r6, #0]
 8008a7a:	3302      	addmi	r3, #2
 8008a7c:	6033      	strmi	r3, [r6, #0]
 8008a7e:	6825      	ldr	r5, [r4, #0]
 8008a80:	f015 0506 	ands.w	r5, r5, #6
 8008a84:	d106      	bne.n	8008a94 <_printf_common+0x48>
 8008a86:	f104 0a19 	add.w	sl, r4, #25
 8008a8a:	68e3      	ldr	r3, [r4, #12]
 8008a8c:	6832      	ldr	r2, [r6, #0]
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	42ab      	cmp	r3, r5
 8008a92:	dc26      	bgt.n	8008ae2 <_printf_common+0x96>
 8008a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a98:	1e13      	subs	r3, r2, #0
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	bf18      	it	ne
 8008a9e:	2301      	movne	r3, #1
 8008aa0:	0692      	lsls	r2, r2, #26
 8008aa2:	d42b      	bmi.n	8008afc <_printf_common+0xb0>
 8008aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4638      	mov	r0, r7
 8008aac:	47c0      	blx	r8
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d01e      	beq.n	8008af0 <_printf_common+0xa4>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	68e5      	ldr	r5, [r4, #12]
 8008ab6:	6832      	ldr	r2, [r6, #0]
 8008ab8:	f003 0306 	and.w	r3, r3, #6
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	bf08      	it	eq
 8008ac0:	1aad      	subeq	r5, r5, r2
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	6922      	ldr	r2, [r4, #16]
 8008ac6:	bf0c      	ite	eq
 8008ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008acc:	2500      	movne	r5, #0
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	bfc4      	itt	gt
 8008ad2:	1a9b      	subgt	r3, r3, r2
 8008ad4:	18ed      	addgt	r5, r5, r3
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	341a      	adds	r4, #26
 8008ada:	42b5      	cmp	r5, r6
 8008adc:	d11a      	bne.n	8008b14 <_printf_common+0xc8>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e008      	b.n	8008af4 <_printf_common+0xa8>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4652      	mov	r2, sl
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	4638      	mov	r0, r7
 8008aea:	47c0      	blx	r8
 8008aec:	3001      	adds	r0, #1
 8008aee:	d103      	bne.n	8008af8 <_printf_common+0xac>
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af8:	3501      	adds	r5, #1
 8008afa:	e7c6      	b.n	8008a8a <_printf_common+0x3e>
 8008afc:	18e1      	adds	r1, r4, r3
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	2030      	movs	r0, #48	; 0x30
 8008b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b06:	4422      	add	r2, r4
 8008b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b10:	3302      	adds	r3, #2
 8008b12:	e7c7      	b.n	8008aa4 <_printf_common+0x58>
 8008b14:	2301      	movs	r3, #1
 8008b16:	4622      	mov	r2, r4
 8008b18:	4649      	mov	r1, r9
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	47c0      	blx	r8
 8008b1e:	3001      	adds	r0, #1
 8008b20:	d0e6      	beq.n	8008af0 <_printf_common+0xa4>
 8008b22:	3601      	adds	r6, #1
 8008b24:	e7d9      	b.n	8008ada <_printf_common+0x8e>
	...

08008b28 <_printf_i>:
 8008b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	7e0f      	ldrb	r7, [r1, #24]
 8008b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b30:	2f78      	cmp	r7, #120	; 0x78
 8008b32:	4691      	mov	r9, r2
 8008b34:	4680      	mov	r8, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	469a      	mov	sl, r3
 8008b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b3e:	d807      	bhi.n	8008b50 <_printf_i+0x28>
 8008b40:	2f62      	cmp	r7, #98	; 0x62
 8008b42:	d80a      	bhi.n	8008b5a <_printf_i+0x32>
 8008b44:	2f00      	cmp	r7, #0
 8008b46:	f000 80d8 	beq.w	8008cfa <_printf_i+0x1d2>
 8008b4a:	2f58      	cmp	r7, #88	; 0x58
 8008b4c:	f000 80a3 	beq.w	8008c96 <_printf_i+0x16e>
 8008b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b58:	e03a      	b.n	8008bd0 <_printf_i+0xa8>
 8008b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b5e:	2b15      	cmp	r3, #21
 8008b60:	d8f6      	bhi.n	8008b50 <_printf_i+0x28>
 8008b62:	a101      	add	r1, pc, #4	; (adr r1, 8008b68 <_printf_i+0x40>)
 8008b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b68:	08008bc1 	.word	0x08008bc1
 8008b6c:	08008bd5 	.word	0x08008bd5
 8008b70:	08008b51 	.word	0x08008b51
 8008b74:	08008b51 	.word	0x08008b51
 8008b78:	08008b51 	.word	0x08008b51
 8008b7c:	08008b51 	.word	0x08008b51
 8008b80:	08008bd5 	.word	0x08008bd5
 8008b84:	08008b51 	.word	0x08008b51
 8008b88:	08008b51 	.word	0x08008b51
 8008b8c:	08008b51 	.word	0x08008b51
 8008b90:	08008b51 	.word	0x08008b51
 8008b94:	08008ce1 	.word	0x08008ce1
 8008b98:	08008c05 	.word	0x08008c05
 8008b9c:	08008cc3 	.word	0x08008cc3
 8008ba0:	08008b51 	.word	0x08008b51
 8008ba4:	08008b51 	.word	0x08008b51
 8008ba8:	08008d03 	.word	0x08008d03
 8008bac:	08008b51 	.word	0x08008b51
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008b51 	.word	0x08008b51
 8008bb8:	08008b51 	.word	0x08008b51
 8008bbc:	08008ccb 	.word	0x08008ccb
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	1d1a      	adds	r2, r3, #4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	602a      	str	r2, [r5, #0]
 8008bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0a3      	b.n	8008d1c <_printf_i+0x1f4>
 8008bd4:	6820      	ldr	r0, [r4, #0]
 8008bd6:	6829      	ldr	r1, [r5, #0]
 8008bd8:	0606      	lsls	r6, r0, #24
 8008bda:	f101 0304 	add.w	r3, r1, #4
 8008bde:	d50a      	bpl.n	8008bf6 <_printf_i+0xce>
 8008be0:	680e      	ldr	r6, [r1, #0]
 8008be2:	602b      	str	r3, [r5, #0]
 8008be4:	2e00      	cmp	r6, #0
 8008be6:	da03      	bge.n	8008bf0 <_printf_i+0xc8>
 8008be8:	232d      	movs	r3, #45	; 0x2d
 8008bea:	4276      	negs	r6, r6
 8008bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf0:	485e      	ldr	r0, [pc, #376]	; (8008d6c <_printf_i+0x244>)
 8008bf2:	230a      	movs	r3, #10
 8008bf4:	e019      	b.n	8008c2a <_printf_i+0x102>
 8008bf6:	680e      	ldr	r6, [r1, #0]
 8008bf8:	602b      	str	r3, [r5, #0]
 8008bfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bfe:	bf18      	it	ne
 8008c00:	b236      	sxthne	r6, r6
 8008c02:	e7ef      	b.n	8008be4 <_printf_i+0xbc>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	6820      	ldr	r0, [r4, #0]
 8008c08:	1d19      	adds	r1, r3, #4
 8008c0a:	6029      	str	r1, [r5, #0]
 8008c0c:	0601      	lsls	r1, r0, #24
 8008c0e:	d501      	bpl.n	8008c14 <_printf_i+0xec>
 8008c10:	681e      	ldr	r6, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <_printf_i+0xf2>
 8008c14:	0646      	lsls	r6, r0, #25
 8008c16:	d5fb      	bpl.n	8008c10 <_printf_i+0xe8>
 8008c18:	881e      	ldrh	r6, [r3, #0]
 8008c1a:	4854      	ldr	r0, [pc, #336]	; (8008d6c <_printf_i+0x244>)
 8008c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c1e:	bf0c      	ite	eq
 8008c20:	2308      	moveq	r3, #8
 8008c22:	230a      	movne	r3, #10
 8008c24:	2100      	movs	r1, #0
 8008c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c2a:	6865      	ldr	r5, [r4, #4]
 8008c2c:	60a5      	str	r5, [r4, #8]
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	bfa2      	ittt	ge
 8008c32:	6821      	ldrge	r1, [r4, #0]
 8008c34:	f021 0104 	bicge.w	r1, r1, #4
 8008c38:	6021      	strge	r1, [r4, #0]
 8008c3a:	b90e      	cbnz	r6, 8008c40 <_printf_i+0x118>
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	d04d      	beq.n	8008cdc <_printf_i+0x1b4>
 8008c40:	4615      	mov	r5, r2
 8008c42:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c46:	fb03 6711 	mls	r7, r3, r1, r6
 8008c4a:	5dc7      	ldrb	r7, [r0, r7]
 8008c4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c50:	4637      	mov	r7, r6
 8008c52:	42bb      	cmp	r3, r7
 8008c54:	460e      	mov	r6, r1
 8008c56:	d9f4      	bls.n	8008c42 <_printf_i+0x11a>
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d10b      	bne.n	8008c74 <_printf_i+0x14c>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07de      	lsls	r6, r3, #31
 8008c60:	d508      	bpl.n	8008c74 <_printf_i+0x14c>
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	6861      	ldr	r1, [r4, #4]
 8008c66:	4299      	cmp	r1, r3
 8008c68:	bfde      	ittt	le
 8008c6a:	2330      	movle	r3, #48	; 0x30
 8008c6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c74:	1b52      	subs	r2, r2, r5
 8008c76:	6122      	str	r2, [r4, #16]
 8008c78:	f8cd a000 	str.w	sl, [sp]
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	aa03      	add	r2, sp, #12
 8008c80:	4621      	mov	r1, r4
 8008c82:	4640      	mov	r0, r8
 8008c84:	f7ff fee2 	bl	8008a4c <_printf_common>
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d14c      	bne.n	8008d26 <_printf_i+0x1fe>
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	b004      	add	sp, #16
 8008c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c96:	4835      	ldr	r0, [pc, #212]	; (8008d6c <_printf_i+0x244>)
 8008c98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c9c:	6829      	ldr	r1, [r5, #0]
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ca4:	6029      	str	r1, [r5, #0]
 8008ca6:	061d      	lsls	r5, r3, #24
 8008ca8:	d514      	bpl.n	8008cd4 <_printf_i+0x1ac>
 8008caa:	07df      	lsls	r7, r3, #31
 8008cac:	bf44      	itt	mi
 8008cae:	f043 0320 	orrmi.w	r3, r3, #32
 8008cb2:	6023      	strmi	r3, [r4, #0]
 8008cb4:	b91e      	cbnz	r6, 8008cbe <_printf_i+0x196>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	f023 0320 	bic.w	r3, r3, #32
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	2310      	movs	r3, #16
 8008cc0:	e7b0      	b.n	8008c24 <_printf_i+0xfc>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	f043 0320 	orr.w	r3, r3, #32
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	2378      	movs	r3, #120	; 0x78
 8008ccc:	4828      	ldr	r0, [pc, #160]	; (8008d70 <_printf_i+0x248>)
 8008cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cd2:	e7e3      	b.n	8008c9c <_printf_i+0x174>
 8008cd4:	0659      	lsls	r1, r3, #25
 8008cd6:	bf48      	it	mi
 8008cd8:	b2b6      	uxthmi	r6, r6
 8008cda:	e7e6      	b.n	8008caa <_printf_i+0x182>
 8008cdc:	4615      	mov	r5, r2
 8008cde:	e7bb      	b.n	8008c58 <_printf_i+0x130>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	6826      	ldr	r6, [r4, #0]
 8008ce4:	6961      	ldr	r1, [r4, #20]
 8008ce6:	1d18      	adds	r0, r3, #4
 8008ce8:	6028      	str	r0, [r5, #0]
 8008cea:	0635      	lsls	r5, r6, #24
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	d501      	bpl.n	8008cf4 <_printf_i+0x1cc>
 8008cf0:	6019      	str	r1, [r3, #0]
 8008cf2:	e002      	b.n	8008cfa <_printf_i+0x1d2>
 8008cf4:	0670      	lsls	r0, r6, #25
 8008cf6:	d5fb      	bpl.n	8008cf0 <_printf_i+0x1c8>
 8008cf8:	8019      	strh	r1, [r3, #0]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6123      	str	r3, [r4, #16]
 8008cfe:	4615      	mov	r5, r2
 8008d00:	e7ba      	b.n	8008c78 <_printf_i+0x150>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	1d1a      	adds	r2, r3, #4
 8008d06:	602a      	str	r2, [r5, #0]
 8008d08:	681d      	ldr	r5, [r3, #0]
 8008d0a:	6862      	ldr	r2, [r4, #4]
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f7f7 fa86 	bl	8000220 <memchr>
 8008d14:	b108      	cbz	r0, 8008d1a <_printf_i+0x1f2>
 8008d16:	1b40      	subs	r0, r0, r5
 8008d18:	6060      	str	r0, [r4, #4]
 8008d1a:	6863      	ldr	r3, [r4, #4]
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d24:	e7a8      	b.n	8008c78 <_printf_i+0x150>
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	462a      	mov	r2, r5
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	47d0      	blx	sl
 8008d30:	3001      	adds	r0, #1
 8008d32:	d0ab      	beq.n	8008c8c <_printf_i+0x164>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	079b      	lsls	r3, r3, #30
 8008d38:	d413      	bmi.n	8008d62 <_printf_i+0x23a>
 8008d3a:	68e0      	ldr	r0, [r4, #12]
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	4298      	cmp	r0, r3
 8008d40:	bfb8      	it	lt
 8008d42:	4618      	movlt	r0, r3
 8008d44:	e7a4      	b.n	8008c90 <_printf_i+0x168>
 8008d46:	2301      	movs	r3, #1
 8008d48:	4632      	mov	r2, r6
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	47d0      	blx	sl
 8008d50:	3001      	adds	r0, #1
 8008d52:	d09b      	beq.n	8008c8c <_printf_i+0x164>
 8008d54:	3501      	adds	r5, #1
 8008d56:	68e3      	ldr	r3, [r4, #12]
 8008d58:	9903      	ldr	r1, [sp, #12]
 8008d5a:	1a5b      	subs	r3, r3, r1
 8008d5c:	42ab      	cmp	r3, r5
 8008d5e:	dcf2      	bgt.n	8008d46 <_printf_i+0x21e>
 8008d60:	e7eb      	b.n	8008d3a <_printf_i+0x212>
 8008d62:	2500      	movs	r5, #0
 8008d64:	f104 0619 	add.w	r6, r4, #25
 8008d68:	e7f5      	b.n	8008d56 <_printf_i+0x22e>
 8008d6a:	bf00      	nop
 8008d6c:	0800ca6e 	.word	0x0800ca6e
 8008d70:	0800ca7f 	.word	0x0800ca7f

08008d74 <iprintf>:
 8008d74:	b40f      	push	{r0, r1, r2, r3}
 8008d76:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <iprintf+0x2c>)
 8008d78:	b513      	push	{r0, r1, r4, lr}
 8008d7a:	681c      	ldr	r4, [r3, #0]
 8008d7c:	b124      	cbz	r4, 8008d88 <iprintf+0x14>
 8008d7e:	69a3      	ldr	r3, [r4, #24]
 8008d80:	b913      	cbnz	r3, 8008d88 <iprintf+0x14>
 8008d82:	4620      	mov	r0, r4
 8008d84:	f001 f8e8 	bl	8009f58 <__sinit>
 8008d88:	ab05      	add	r3, sp, #20
 8008d8a:	9a04      	ldr	r2, [sp, #16]
 8008d8c:	68a1      	ldr	r1, [r4, #8]
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	4620      	mov	r0, r4
 8008d92:	f001 fdb3 	bl	800a8fc <_vfiprintf_r>
 8008d96:	b002      	add	sp, #8
 8008d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9c:	b004      	add	sp, #16
 8008d9e:	4770      	bx	lr
 8008da0:	2000000c 	.word	0x2000000c

08008da4 <_puts_r>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	460e      	mov	r6, r1
 8008da8:	4605      	mov	r5, r0
 8008daa:	b118      	cbz	r0, 8008db4 <_puts_r+0x10>
 8008dac:	6983      	ldr	r3, [r0, #24]
 8008dae:	b90b      	cbnz	r3, 8008db4 <_puts_r+0x10>
 8008db0:	f001 f8d2 	bl	8009f58 <__sinit>
 8008db4:	69ab      	ldr	r3, [r5, #24]
 8008db6:	68ac      	ldr	r4, [r5, #8]
 8008db8:	b913      	cbnz	r3, 8008dc0 <_puts_r+0x1c>
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f001 f8cc 	bl	8009f58 <__sinit>
 8008dc0:	4b2c      	ldr	r3, [pc, #176]	; (8008e74 <_puts_r+0xd0>)
 8008dc2:	429c      	cmp	r4, r3
 8008dc4:	d120      	bne.n	8008e08 <_puts_r+0x64>
 8008dc6:	686c      	ldr	r4, [r5, #4]
 8008dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dca:	07db      	lsls	r3, r3, #31
 8008dcc:	d405      	bmi.n	8008dda <_puts_r+0x36>
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	0598      	lsls	r0, r3, #22
 8008dd2:	d402      	bmi.n	8008dda <_puts_r+0x36>
 8008dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dd6:	f001 f962 	bl	800a09e <__retarget_lock_acquire_recursive>
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	0719      	lsls	r1, r3, #28
 8008dde:	d51d      	bpl.n	8008e1c <_puts_r+0x78>
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	b1db      	cbz	r3, 8008e1c <_puts_r+0x78>
 8008de4:	3e01      	subs	r6, #1
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008dec:	3b01      	subs	r3, #1
 8008dee:	60a3      	str	r3, [r4, #8]
 8008df0:	bb39      	cbnz	r1, 8008e42 <_puts_r+0x9e>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	da38      	bge.n	8008e68 <_puts_r+0xc4>
 8008df6:	4622      	mov	r2, r4
 8008df8:	210a      	movs	r1, #10
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 f858 	bl	8008eb0 <__swbuf_r>
 8008e00:	3001      	adds	r0, #1
 8008e02:	d011      	beq.n	8008e28 <_puts_r+0x84>
 8008e04:	250a      	movs	r5, #10
 8008e06:	e011      	b.n	8008e2c <_puts_r+0x88>
 8008e08:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <_puts_r+0xd4>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	d101      	bne.n	8008e12 <_puts_r+0x6e>
 8008e0e:	68ac      	ldr	r4, [r5, #8]
 8008e10:	e7da      	b.n	8008dc8 <_puts_r+0x24>
 8008e12:	4b1a      	ldr	r3, [pc, #104]	; (8008e7c <_puts_r+0xd8>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	bf08      	it	eq
 8008e18:	68ec      	ldreq	r4, [r5, #12]
 8008e1a:	e7d5      	b.n	8008dc8 <_puts_r+0x24>
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f000 f898 	bl	8008f54 <__swsetup_r>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d0dd      	beq.n	8008de4 <_puts_r+0x40>
 8008e28:	f04f 35ff 	mov.w	r5, #4294967295
 8008e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e2e:	07da      	lsls	r2, r3, #31
 8008e30:	d405      	bmi.n	8008e3e <_puts_r+0x9a>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	059b      	lsls	r3, r3, #22
 8008e36:	d402      	bmi.n	8008e3e <_puts_r+0x9a>
 8008e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e3a:	f001 f931 	bl	800a0a0 <__retarget_lock_release_recursive>
 8008e3e:	4628      	mov	r0, r5
 8008e40:	bd70      	pop	{r4, r5, r6, pc}
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	da04      	bge.n	8008e50 <_puts_r+0xac>
 8008e46:	69a2      	ldr	r2, [r4, #24]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	dc06      	bgt.n	8008e5a <_puts_r+0xb6>
 8008e4c:	290a      	cmp	r1, #10
 8008e4e:	d004      	beq.n	8008e5a <_puts_r+0xb6>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	6022      	str	r2, [r4, #0]
 8008e56:	7019      	strb	r1, [r3, #0]
 8008e58:	e7c5      	b.n	8008de6 <_puts_r+0x42>
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f000 f827 	bl	8008eb0 <__swbuf_r>
 8008e62:	3001      	adds	r0, #1
 8008e64:	d1bf      	bne.n	8008de6 <_puts_r+0x42>
 8008e66:	e7df      	b.n	8008e28 <_puts_r+0x84>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	250a      	movs	r5, #10
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	6022      	str	r2, [r4, #0]
 8008e70:	701d      	strb	r5, [r3, #0]
 8008e72:	e7db      	b.n	8008e2c <_puts_r+0x88>
 8008e74:	0800cb40 	.word	0x0800cb40
 8008e78:	0800cb60 	.word	0x0800cb60
 8008e7c:	0800cb20 	.word	0x0800cb20

08008e80 <puts>:
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <puts+0xc>)
 8008e82:	4601      	mov	r1, r0
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f7ff bf8d 	b.w	8008da4 <_puts_r>
 8008e8a:	bf00      	nop
 8008e8c:	2000000c 	.word	0x2000000c

08008e90 <_sbrk_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d06      	ldr	r5, [pc, #24]	; (8008eac <_sbrk_r+0x1c>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	602b      	str	r3, [r5, #0]
 8008e9c:	f7fa fe8c 	bl	8003bb8 <_sbrk>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_sbrk_r+0x1a>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_sbrk_r+0x1a>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	20000634 	.word	0x20000634

08008eb0 <__swbuf_r>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	460e      	mov	r6, r1
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	b118      	cbz	r0, 8008ec2 <__swbuf_r+0x12>
 8008eba:	6983      	ldr	r3, [r0, #24]
 8008ebc:	b90b      	cbnz	r3, 8008ec2 <__swbuf_r+0x12>
 8008ebe:	f001 f84b 	bl	8009f58 <__sinit>
 8008ec2:	4b21      	ldr	r3, [pc, #132]	; (8008f48 <__swbuf_r+0x98>)
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	d12b      	bne.n	8008f20 <__swbuf_r+0x70>
 8008ec8:	686c      	ldr	r4, [r5, #4]
 8008eca:	69a3      	ldr	r3, [r4, #24]
 8008ecc:	60a3      	str	r3, [r4, #8]
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	071a      	lsls	r2, r3, #28
 8008ed2:	d52f      	bpl.n	8008f34 <__swbuf_r+0x84>
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	b36b      	cbz	r3, 8008f34 <__swbuf_r+0x84>
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	6820      	ldr	r0, [r4, #0]
 8008edc:	1ac0      	subs	r0, r0, r3
 8008ede:	6963      	ldr	r3, [r4, #20]
 8008ee0:	b2f6      	uxtb	r6, r6
 8008ee2:	4283      	cmp	r3, r0
 8008ee4:	4637      	mov	r7, r6
 8008ee6:	dc04      	bgt.n	8008ef2 <__swbuf_r+0x42>
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4628      	mov	r0, r5
 8008eec:	f000 ffa0 	bl	8009e30 <_fflush_r>
 8008ef0:	bb30      	cbnz	r0, 8008f40 <__swbuf_r+0x90>
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	60a3      	str	r3, [r4, #8]
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	6022      	str	r2, [r4, #0]
 8008efe:	701e      	strb	r6, [r3, #0]
 8008f00:	6963      	ldr	r3, [r4, #20]
 8008f02:	3001      	adds	r0, #1
 8008f04:	4283      	cmp	r3, r0
 8008f06:	d004      	beq.n	8008f12 <__swbuf_r+0x62>
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	07db      	lsls	r3, r3, #31
 8008f0c:	d506      	bpl.n	8008f1c <__swbuf_r+0x6c>
 8008f0e:	2e0a      	cmp	r6, #10
 8008f10:	d104      	bne.n	8008f1c <__swbuf_r+0x6c>
 8008f12:	4621      	mov	r1, r4
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 ff8b 	bl	8009e30 <_fflush_r>
 8008f1a:	b988      	cbnz	r0, 8008f40 <__swbuf_r+0x90>
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <__swbuf_r+0x9c>)
 8008f22:	429c      	cmp	r4, r3
 8008f24:	d101      	bne.n	8008f2a <__swbuf_r+0x7a>
 8008f26:	68ac      	ldr	r4, [r5, #8]
 8008f28:	e7cf      	b.n	8008eca <__swbuf_r+0x1a>
 8008f2a:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <__swbuf_r+0xa0>)
 8008f2c:	429c      	cmp	r4, r3
 8008f2e:	bf08      	it	eq
 8008f30:	68ec      	ldreq	r4, [r5, #12]
 8008f32:	e7ca      	b.n	8008eca <__swbuf_r+0x1a>
 8008f34:	4621      	mov	r1, r4
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 f80c 	bl	8008f54 <__swsetup_r>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d0cb      	beq.n	8008ed8 <__swbuf_r+0x28>
 8008f40:	f04f 37ff 	mov.w	r7, #4294967295
 8008f44:	e7ea      	b.n	8008f1c <__swbuf_r+0x6c>
 8008f46:	bf00      	nop
 8008f48:	0800cb40 	.word	0x0800cb40
 8008f4c:	0800cb60 	.word	0x0800cb60
 8008f50:	0800cb20 	.word	0x0800cb20

08008f54 <__swsetup_r>:
 8008f54:	4b32      	ldr	r3, [pc, #200]	; (8009020 <__swsetup_r+0xcc>)
 8008f56:	b570      	push	{r4, r5, r6, lr}
 8008f58:	681d      	ldr	r5, [r3, #0]
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	b125      	cbz	r5, 8008f6a <__swsetup_r+0x16>
 8008f60:	69ab      	ldr	r3, [r5, #24]
 8008f62:	b913      	cbnz	r3, 8008f6a <__swsetup_r+0x16>
 8008f64:	4628      	mov	r0, r5
 8008f66:	f000 fff7 	bl	8009f58 <__sinit>
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <__swsetup_r+0xd0>)
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	d10f      	bne.n	8008f90 <__swsetup_r+0x3c>
 8008f70:	686c      	ldr	r4, [r5, #4]
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f78:	0719      	lsls	r1, r3, #28
 8008f7a:	d42c      	bmi.n	8008fd6 <__swsetup_r+0x82>
 8008f7c:	06dd      	lsls	r5, r3, #27
 8008f7e:	d411      	bmi.n	8008fa4 <__swsetup_r+0x50>
 8008f80:	2309      	movs	r3, #9
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f88:	81a3      	strh	r3, [r4, #12]
 8008f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8e:	e03e      	b.n	800900e <__swsetup_r+0xba>
 8008f90:	4b25      	ldr	r3, [pc, #148]	; (8009028 <__swsetup_r+0xd4>)
 8008f92:	429c      	cmp	r4, r3
 8008f94:	d101      	bne.n	8008f9a <__swsetup_r+0x46>
 8008f96:	68ac      	ldr	r4, [r5, #8]
 8008f98:	e7eb      	b.n	8008f72 <__swsetup_r+0x1e>
 8008f9a:	4b24      	ldr	r3, [pc, #144]	; (800902c <__swsetup_r+0xd8>)
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	bf08      	it	eq
 8008fa0:	68ec      	ldreq	r4, [r5, #12]
 8008fa2:	e7e6      	b.n	8008f72 <__swsetup_r+0x1e>
 8008fa4:	0758      	lsls	r0, r3, #29
 8008fa6:	d512      	bpl.n	8008fce <__swsetup_r+0x7a>
 8008fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008faa:	b141      	cbz	r1, 8008fbe <__swsetup_r+0x6a>
 8008fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	d002      	beq.n	8008fba <__swsetup_r+0x66>
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f7ff f993 	bl	80082e0 <_free_r>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	f043 0308 	orr.w	r3, r3, #8
 8008fd4:	81a3      	strh	r3, [r4, #12]
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	b94b      	cbnz	r3, 8008fee <__swsetup_r+0x9a>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fe4:	d003      	beq.n	8008fee <__swsetup_r+0x9a>
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f001 f87f 	bl	800a0ec <__smakebuf_r>
 8008fee:	89a0      	ldrh	r0, [r4, #12]
 8008ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ff4:	f010 0301 	ands.w	r3, r0, #1
 8008ff8:	d00a      	beq.n	8009010 <__swsetup_r+0xbc>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60a3      	str	r3, [r4, #8]
 8008ffe:	6963      	ldr	r3, [r4, #20]
 8009000:	425b      	negs	r3, r3
 8009002:	61a3      	str	r3, [r4, #24]
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	b943      	cbnz	r3, 800901a <__swsetup_r+0xc6>
 8009008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800900c:	d1ba      	bne.n	8008f84 <__swsetup_r+0x30>
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	0781      	lsls	r1, r0, #30
 8009012:	bf58      	it	pl
 8009014:	6963      	ldrpl	r3, [r4, #20]
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	e7f4      	b.n	8009004 <__swsetup_r+0xb0>
 800901a:	2000      	movs	r0, #0
 800901c:	e7f7      	b.n	800900e <__swsetup_r+0xba>
 800901e:	bf00      	nop
 8009020:	2000000c 	.word	0x2000000c
 8009024:	0800cb40 	.word	0x0800cb40
 8009028:	0800cb60 	.word	0x0800cb60
 800902c:	0800cb20 	.word	0x0800cb20

08009030 <quorem>:
 8009030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	6903      	ldr	r3, [r0, #16]
 8009036:	690c      	ldr	r4, [r1, #16]
 8009038:	42a3      	cmp	r3, r4
 800903a:	4607      	mov	r7, r0
 800903c:	f2c0 8081 	blt.w	8009142 <quorem+0x112>
 8009040:	3c01      	subs	r4, #1
 8009042:	f101 0814 	add.w	r8, r1, #20
 8009046:	f100 0514 	add.w	r5, r0, #20
 800904a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009058:	3301      	adds	r3, #1
 800905a:	429a      	cmp	r2, r3
 800905c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009064:	fbb2 f6f3 	udiv	r6, r2, r3
 8009068:	d331      	bcc.n	80090ce <quorem+0x9e>
 800906a:	f04f 0e00 	mov.w	lr, #0
 800906e:	4640      	mov	r0, r8
 8009070:	46ac      	mov	ip, r5
 8009072:	46f2      	mov	sl, lr
 8009074:	f850 2b04 	ldr.w	r2, [r0], #4
 8009078:	b293      	uxth	r3, r2
 800907a:	fb06 e303 	mla	r3, r6, r3, lr
 800907e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009082:	b29b      	uxth	r3, r3
 8009084:	ebaa 0303 	sub.w	r3, sl, r3
 8009088:	f8dc a000 	ldr.w	sl, [ip]
 800908c:	0c12      	lsrs	r2, r2, #16
 800908e:	fa13 f38a 	uxtah	r3, r3, sl
 8009092:	fb06 e202 	mla	r2, r6, r2, lr
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	9b00      	ldr	r3, [sp, #0]
 800909a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800909e:	b292      	uxth	r2, r2
 80090a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80090ac:	4581      	cmp	r9, r0
 80090ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090b2:	f84c 3b04 	str.w	r3, [ip], #4
 80090b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090ba:	d2db      	bcs.n	8009074 <quorem+0x44>
 80090bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80090c0:	b92b      	cbnz	r3, 80090ce <quorem+0x9e>
 80090c2:	9b01      	ldr	r3, [sp, #4]
 80090c4:	3b04      	subs	r3, #4
 80090c6:	429d      	cmp	r5, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	d32e      	bcc.n	800912a <quorem+0xfa>
 80090cc:	613c      	str	r4, [r7, #16]
 80090ce:	4638      	mov	r0, r7
 80090d0:	f001 fae8 	bl	800a6a4 <__mcmp>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	db24      	blt.n	8009122 <quorem+0xf2>
 80090d8:	3601      	adds	r6, #1
 80090da:	4628      	mov	r0, r5
 80090dc:	f04f 0c00 	mov.w	ip, #0
 80090e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80090e4:	f8d0 e000 	ldr.w	lr, [r0]
 80090e8:	b293      	uxth	r3, r2
 80090ea:	ebac 0303 	sub.w	r3, ip, r3
 80090ee:	0c12      	lsrs	r2, r2, #16
 80090f0:	fa13 f38e 	uxtah	r3, r3, lr
 80090f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009102:	45c1      	cmp	r9, r8
 8009104:	f840 3b04 	str.w	r3, [r0], #4
 8009108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800910c:	d2e8      	bcs.n	80090e0 <quorem+0xb0>
 800910e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009116:	b922      	cbnz	r2, 8009122 <quorem+0xf2>
 8009118:	3b04      	subs	r3, #4
 800911a:	429d      	cmp	r5, r3
 800911c:	461a      	mov	r2, r3
 800911e:	d30a      	bcc.n	8009136 <quorem+0x106>
 8009120:	613c      	str	r4, [r7, #16]
 8009122:	4630      	mov	r0, r6
 8009124:	b003      	add	sp, #12
 8009126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912a:	6812      	ldr	r2, [r2, #0]
 800912c:	3b04      	subs	r3, #4
 800912e:	2a00      	cmp	r2, #0
 8009130:	d1cc      	bne.n	80090cc <quorem+0x9c>
 8009132:	3c01      	subs	r4, #1
 8009134:	e7c7      	b.n	80090c6 <quorem+0x96>
 8009136:	6812      	ldr	r2, [r2, #0]
 8009138:	3b04      	subs	r3, #4
 800913a:	2a00      	cmp	r2, #0
 800913c:	d1f0      	bne.n	8009120 <quorem+0xf0>
 800913e:	3c01      	subs	r4, #1
 8009140:	e7eb      	b.n	800911a <quorem+0xea>
 8009142:	2000      	movs	r0, #0
 8009144:	e7ee      	b.n	8009124 <quorem+0xf4>
	...

08009148 <_dtoa_r>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	ed2d 8b04 	vpush	{d8-d9}
 8009150:	ec57 6b10 	vmov	r6, r7, d0
 8009154:	b093      	sub	sp, #76	; 0x4c
 8009156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800915c:	9106      	str	r1, [sp, #24]
 800915e:	ee10 aa10 	vmov	sl, s0
 8009162:	4604      	mov	r4, r0
 8009164:	9209      	str	r2, [sp, #36]	; 0x24
 8009166:	930c      	str	r3, [sp, #48]	; 0x30
 8009168:	46bb      	mov	fp, r7
 800916a:	b975      	cbnz	r5, 800918a <_dtoa_r+0x42>
 800916c:	2010      	movs	r0, #16
 800916e:	f7ff f891 	bl	8008294 <malloc>
 8009172:	4602      	mov	r2, r0
 8009174:	6260      	str	r0, [r4, #36]	; 0x24
 8009176:	b920      	cbnz	r0, 8009182 <_dtoa_r+0x3a>
 8009178:	4ba7      	ldr	r3, [pc, #668]	; (8009418 <_dtoa_r+0x2d0>)
 800917a:	21ea      	movs	r1, #234	; 0xea
 800917c:	48a7      	ldr	r0, [pc, #668]	; (800941c <_dtoa_r+0x2d4>)
 800917e:	f001 fd43 	bl	800ac08 <__assert_func>
 8009182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009186:	6005      	str	r5, [r0, #0]
 8009188:	60c5      	str	r5, [r0, #12]
 800918a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800918c:	6819      	ldr	r1, [r3, #0]
 800918e:	b151      	cbz	r1, 80091a6 <_dtoa_r+0x5e>
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	604a      	str	r2, [r1, #4]
 8009194:	2301      	movs	r3, #1
 8009196:	4093      	lsls	r3, r2
 8009198:	608b      	str	r3, [r1, #8]
 800919a:	4620      	mov	r0, r4
 800919c:	f001 f840 	bl	800a220 <_Bfree>
 80091a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	1e3b      	subs	r3, r7, #0
 80091a8:	bfaa      	itet	ge
 80091aa:	2300      	movge	r3, #0
 80091ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80091b0:	f8c8 3000 	strge.w	r3, [r8]
 80091b4:	4b9a      	ldr	r3, [pc, #616]	; (8009420 <_dtoa_r+0x2d8>)
 80091b6:	bfbc      	itt	lt
 80091b8:	2201      	movlt	r2, #1
 80091ba:	f8c8 2000 	strlt.w	r2, [r8]
 80091be:	ea33 030b 	bics.w	r3, r3, fp
 80091c2:	d11b      	bne.n	80091fc <_dtoa_r+0xb4>
 80091c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091d0:	4333      	orrs	r3, r6
 80091d2:	f000 8592 	beq.w	8009cfa <_dtoa_r+0xbb2>
 80091d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091d8:	b963      	cbnz	r3, 80091f4 <_dtoa_r+0xac>
 80091da:	4b92      	ldr	r3, [pc, #584]	; (8009424 <_dtoa_r+0x2dc>)
 80091dc:	e022      	b.n	8009224 <_dtoa_r+0xdc>
 80091de:	4b92      	ldr	r3, [pc, #584]	; (8009428 <_dtoa_r+0x2e0>)
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	3308      	adds	r3, #8
 80091e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	b013      	add	sp, #76	; 0x4c
 80091ec:	ecbd 8b04 	vpop	{d8-d9}
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	4b8b      	ldr	r3, [pc, #556]	; (8009424 <_dtoa_r+0x2dc>)
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	3303      	adds	r3, #3
 80091fa:	e7f3      	b.n	80091e4 <_dtoa_r+0x9c>
 80091fc:	2200      	movs	r2, #0
 80091fe:	2300      	movs	r3, #0
 8009200:	4650      	mov	r0, sl
 8009202:	4659      	mov	r1, fp
 8009204:	f7f7 fc80 	bl	8000b08 <__aeabi_dcmpeq>
 8009208:	ec4b ab19 	vmov	d9, sl, fp
 800920c:	4680      	mov	r8, r0
 800920e:	b158      	cbz	r0, 8009228 <_dtoa_r+0xe0>
 8009210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009212:	2301      	movs	r3, #1
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 856b 	beq.w	8009cf4 <_dtoa_r+0xbac>
 800921e:	4883      	ldr	r0, [pc, #524]	; (800942c <_dtoa_r+0x2e4>)
 8009220:	6018      	str	r0, [r3, #0]
 8009222:	1e43      	subs	r3, r0, #1
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	e7df      	b.n	80091e8 <_dtoa_r+0xa0>
 8009228:	ec4b ab10 	vmov	d0, sl, fp
 800922c:	aa10      	add	r2, sp, #64	; 0x40
 800922e:	a911      	add	r1, sp, #68	; 0x44
 8009230:	4620      	mov	r0, r4
 8009232:	f001 fadd 	bl	800a7f0 <__d2b>
 8009236:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800923a:	ee08 0a10 	vmov	s16, r0
 800923e:	2d00      	cmp	r5, #0
 8009240:	f000 8084 	beq.w	800934c <_dtoa_r+0x204>
 8009244:	ee19 3a90 	vmov	r3, s19
 8009248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800924c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009250:	4656      	mov	r6, sl
 8009252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800925a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800925e:	4b74      	ldr	r3, [pc, #464]	; (8009430 <_dtoa_r+0x2e8>)
 8009260:	2200      	movs	r2, #0
 8009262:	4630      	mov	r0, r6
 8009264:	4639      	mov	r1, r7
 8009266:	f7f7 f82f 	bl	80002c8 <__aeabi_dsub>
 800926a:	a365      	add	r3, pc, #404	; (adr r3, 8009400 <_dtoa_r+0x2b8>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f9e2 	bl	8000638 <__aeabi_dmul>
 8009274:	a364      	add	r3, pc, #400	; (adr r3, 8009408 <_dtoa_r+0x2c0>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f7 f827 	bl	80002cc <__adddf3>
 800927e:	4606      	mov	r6, r0
 8009280:	4628      	mov	r0, r5
 8009282:	460f      	mov	r7, r1
 8009284:	f7f7 f96e 	bl	8000564 <__aeabi_i2d>
 8009288:	a361      	add	r3, pc, #388	; (adr r3, 8009410 <_dtoa_r+0x2c8>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	f7f7 f9d3 	bl	8000638 <__aeabi_dmul>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4630      	mov	r0, r6
 8009298:	4639      	mov	r1, r7
 800929a:	f7f7 f817 	bl	80002cc <__adddf3>
 800929e:	4606      	mov	r6, r0
 80092a0:	460f      	mov	r7, r1
 80092a2:	f7f7 fc79 	bl	8000b98 <__aeabi_d2iz>
 80092a6:	2200      	movs	r2, #0
 80092a8:	9000      	str	r0, [sp, #0]
 80092aa:	2300      	movs	r3, #0
 80092ac:	4630      	mov	r0, r6
 80092ae:	4639      	mov	r1, r7
 80092b0:	f7f7 fc34 	bl	8000b1c <__aeabi_dcmplt>
 80092b4:	b150      	cbz	r0, 80092cc <_dtoa_r+0x184>
 80092b6:	9800      	ldr	r0, [sp, #0]
 80092b8:	f7f7 f954 	bl	8000564 <__aeabi_i2d>
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	f7f7 fc22 	bl	8000b08 <__aeabi_dcmpeq>
 80092c4:	b910      	cbnz	r0, 80092cc <_dtoa_r+0x184>
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	9b00      	ldr	r3, [sp, #0]
 80092ce:	2b16      	cmp	r3, #22
 80092d0:	d85a      	bhi.n	8009388 <_dtoa_r+0x240>
 80092d2:	9a00      	ldr	r2, [sp, #0]
 80092d4:	4b57      	ldr	r3, [pc, #348]	; (8009434 <_dtoa_r+0x2ec>)
 80092d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	ec51 0b19 	vmov	r0, r1, d9
 80092e2:	f7f7 fc1b 	bl	8000b1c <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d050      	beq.n	800938c <_dtoa_r+0x244>
 80092ea:	9b00      	ldr	r3, [sp, #0]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	2300      	movs	r3, #0
 80092f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80092f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092f6:	1b5d      	subs	r5, r3, r5
 80092f8:	1e6b      	subs	r3, r5, #1
 80092fa:	9305      	str	r3, [sp, #20]
 80092fc:	bf45      	ittet	mi
 80092fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8009302:	9304      	strmi	r3, [sp, #16]
 8009304:	2300      	movpl	r3, #0
 8009306:	2300      	movmi	r3, #0
 8009308:	bf4c      	ite	mi
 800930a:	9305      	strmi	r3, [sp, #20]
 800930c:	9304      	strpl	r3, [sp, #16]
 800930e:	9b00      	ldr	r3, [sp, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	db3d      	blt.n	8009390 <_dtoa_r+0x248>
 8009314:	9b05      	ldr	r3, [sp, #20]
 8009316:	9a00      	ldr	r2, [sp, #0]
 8009318:	920a      	str	r2, [sp, #40]	; 0x28
 800931a:	4413      	add	r3, r2
 800931c:	9305      	str	r3, [sp, #20]
 800931e:	2300      	movs	r3, #0
 8009320:	9307      	str	r3, [sp, #28]
 8009322:	9b06      	ldr	r3, [sp, #24]
 8009324:	2b09      	cmp	r3, #9
 8009326:	f200 8089 	bhi.w	800943c <_dtoa_r+0x2f4>
 800932a:	2b05      	cmp	r3, #5
 800932c:	bfc4      	itt	gt
 800932e:	3b04      	subgt	r3, #4
 8009330:	9306      	strgt	r3, [sp, #24]
 8009332:	9b06      	ldr	r3, [sp, #24]
 8009334:	f1a3 0302 	sub.w	r3, r3, #2
 8009338:	bfcc      	ite	gt
 800933a:	2500      	movgt	r5, #0
 800933c:	2501      	movle	r5, #1
 800933e:	2b03      	cmp	r3, #3
 8009340:	f200 8087 	bhi.w	8009452 <_dtoa_r+0x30a>
 8009344:	e8df f003 	tbb	[pc, r3]
 8009348:	59383a2d 	.word	0x59383a2d
 800934c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009350:	441d      	add	r5, r3
 8009352:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009356:	2b20      	cmp	r3, #32
 8009358:	bfc1      	itttt	gt
 800935a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800935e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009362:	fa0b f303 	lslgt.w	r3, fp, r3
 8009366:	fa26 f000 	lsrgt.w	r0, r6, r0
 800936a:	bfda      	itte	le
 800936c:	f1c3 0320 	rsble	r3, r3, #32
 8009370:	fa06 f003 	lslle.w	r0, r6, r3
 8009374:	4318      	orrgt	r0, r3
 8009376:	f7f7 f8e5 	bl	8000544 <__aeabi_ui2d>
 800937a:	2301      	movs	r3, #1
 800937c:	4606      	mov	r6, r0
 800937e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009382:	3d01      	subs	r5, #1
 8009384:	930e      	str	r3, [sp, #56]	; 0x38
 8009386:	e76a      	b.n	800925e <_dtoa_r+0x116>
 8009388:	2301      	movs	r3, #1
 800938a:	e7b2      	b.n	80092f2 <_dtoa_r+0x1aa>
 800938c:	900b      	str	r0, [sp, #44]	; 0x2c
 800938e:	e7b1      	b.n	80092f4 <_dtoa_r+0x1ac>
 8009390:	9b04      	ldr	r3, [sp, #16]
 8009392:	9a00      	ldr	r2, [sp, #0]
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	9304      	str	r3, [sp, #16]
 8009398:	4253      	negs	r3, r2
 800939a:	9307      	str	r3, [sp, #28]
 800939c:	2300      	movs	r3, #0
 800939e:	930a      	str	r3, [sp, #40]	; 0x28
 80093a0:	e7bf      	b.n	8009322 <_dtoa_r+0x1da>
 80093a2:	2300      	movs	r3, #0
 80093a4:	9308      	str	r3, [sp, #32]
 80093a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dc55      	bgt.n	8009458 <_dtoa_r+0x310>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093b2:	461a      	mov	r2, r3
 80093b4:	9209      	str	r2, [sp, #36]	; 0x24
 80093b6:	e00c      	b.n	80093d2 <_dtoa_r+0x28a>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e7f3      	b.n	80093a4 <_dtoa_r+0x25c>
 80093bc:	2300      	movs	r3, #0
 80093be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c0:	9308      	str	r3, [sp, #32]
 80093c2:	9b00      	ldr	r3, [sp, #0]
 80093c4:	4413      	add	r3, r2
 80093c6:	9302      	str	r3, [sp, #8]
 80093c8:	3301      	adds	r3, #1
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	bfb8      	it	lt
 80093d0:	2301      	movlt	r3, #1
 80093d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093d4:	2200      	movs	r2, #0
 80093d6:	6042      	str	r2, [r0, #4]
 80093d8:	2204      	movs	r2, #4
 80093da:	f102 0614 	add.w	r6, r2, #20
 80093de:	429e      	cmp	r6, r3
 80093e0:	6841      	ldr	r1, [r0, #4]
 80093e2:	d93d      	bls.n	8009460 <_dtoa_r+0x318>
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fedb 	bl	800a1a0 <_Balloc>
 80093ea:	9001      	str	r0, [sp, #4]
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d13b      	bne.n	8009468 <_dtoa_r+0x320>
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <_dtoa_r+0x2f0>)
 80093f2:	4602      	mov	r2, r0
 80093f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80093f8:	e6c0      	b.n	800917c <_dtoa_r+0x34>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e7df      	b.n	80093be <_dtoa_r+0x276>
 80093fe:	bf00      	nop
 8009400:	636f4361 	.word	0x636f4361
 8009404:	3fd287a7 	.word	0x3fd287a7
 8009408:	8b60c8b3 	.word	0x8b60c8b3
 800940c:	3fc68a28 	.word	0x3fc68a28
 8009410:	509f79fb 	.word	0x509f79fb
 8009414:	3fd34413 	.word	0x3fd34413
 8009418:	0800ca9d 	.word	0x0800ca9d
 800941c:	0800cab4 	.word	0x0800cab4
 8009420:	7ff00000 	.word	0x7ff00000
 8009424:	0800ca99 	.word	0x0800ca99
 8009428:	0800ca90 	.word	0x0800ca90
 800942c:	0800ca6d 	.word	0x0800ca6d
 8009430:	3ff80000 	.word	0x3ff80000
 8009434:	0800cc08 	.word	0x0800cc08
 8009438:	0800cb0f 	.word	0x0800cb0f
 800943c:	2501      	movs	r5, #1
 800943e:	2300      	movs	r3, #0
 8009440:	9306      	str	r3, [sp, #24]
 8009442:	9508      	str	r5, [sp, #32]
 8009444:	f04f 33ff 	mov.w	r3, #4294967295
 8009448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800944c:	2200      	movs	r2, #0
 800944e:	2312      	movs	r3, #18
 8009450:	e7b0      	b.n	80093b4 <_dtoa_r+0x26c>
 8009452:	2301      	movs	r3, #1
 8009454:	9308      	str	r3, [sp, #32]
 8009456:	e7f5      	b.n	8009444 <_dtoa_r+0x2fc>
 8009458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800945e:	e7b8      	b.n	80093d2 <_dtoa_r+0x28a>
 8009460:	3101      	adds	r1, #1
 8009462:	6041      	str	r1, [r0, #4]
 8009464:	0052      	lsls	r2, r2, #1
 8009466:	e7b8      	b.n	80093da <_dtoa_r+0x292>
 8009468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800946a:	9a01      	ldr	r2, [sp, #4]
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	2b0e      	cmp	r3, #14
 8009472:	f200 809d 	bhi.w	80095b0 <_dtoa_r+0x468>
 8009476:	2d00      	cmp	r5, #0
 8009478:	f000 809a 	beq.w	80095b0 <_dtoa_r+0x468>
 800947c:	9b00      	ldr	r3, [sp, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	dd32      	ble.n	80094e8 <_dtoa_r+0x3a0>
 8009482:	4ab7      	ldr	r2, [pc, #732]	; (8009760 <_dtoa_r+0x618>)
 8009484:	f003 030f 	and.w	r3, r3, #15
 8009488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800948c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009490:	9b00      	ldr	r3, [sp, #0]
 8009492:	05d8      	lsls	r0, r3, #23
 8009494:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009498:	d516      	bpl.n	80094c8 <_dtoa_r+0x380>
 800949a:	4bb2      	ldr	r3, [pc, #712]	; (8009764 <_dtoa_r+0x61c>)
 800949c:	ec51 0b19 	vmov	r0, r1, d9
 80094a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094a4:	f7f7 f9f2 	bl	800088c <__aeabi_ddiv>
 80094a8:	f007 070f 	and.w	r7, r7, #15
 80094ac:	4682      	mov	sl, r0
 80094ae:	468b      	mov	fp, r1
 80094b0:	2503      	movs	r5, #3
 80094b2:	4eac      	ldr	r6, [pc, #688]	; (8009764 <_dtoa_r+0x61c>)
 80094b4:	b957      	cbnz	r7, 80094cc <_dtoa_r+0x384>
 80094b6:	4642      	mov	r2, r8
 80094b8:	464b      	mov	r3, r9
 80094ba:	4650      	mov	r0, sl
 80094bc:	4659      	mov	r1, fp
 80094be:	f7f7 f9e5 	bl	800088c <__aeabi_ddiv>
 80094c2:	4682      	mov	sl, r0
 80094c4:	468b      	mov	fp, r1
 80094c6:	e028      	b.n	800951a <_dtoa_r+0x3d2>
 80094c8:	2502      	movs	r5, #2
 80094ca:	e7f2      	b.n	80094b2 <_dtoa_r+0x36a>
 80094cc:	07f9      	lsls	r1, r7, #31
 80094ce:	d508      	bpl.n	80094e2 <_dtoa_r+0x39a>
 80094d0:	4640      	mov	r0, r8
 80094d2:	4649      	mov	r1, r9
 80094d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094d8:	f7f7 f8ae 	bl	8000638 <__aeabi_dmul>
 80094dc:	3501      	adds	r5, #1
 80094de:	4680      	mov	r8, r0
 80094e0:	4689      	mov	r9, r1
 80094e2:	107f      	asrs	r7, r7, #1
 80094e4:	3608      	adds	r6, #8
 80094e6:	e7e5      	b.n	80094b4 <_dtoa_r+0x36c>
 80094e8:	f000 809b 	beq.w	8009622 <_dtoa_r+0x4da>
 80094ec:	9b00      	ldr	r3, [sp, #0]
 80094ee:	4f9d      	ldr	r7, [pc, #628]	; (8009764 <_dtoa_r+0x61c>)
 80094f0:	425e      	negs	r6, r3
 80094f2:	4b9b      	ldr	r3, [pc, #620]	; (8009760 <_dtoa_r+0x618>)
 80094f4:	f006 020f 	and.w	r2, r6, #15
 80094f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	ec51 0b19 	vmov	r0, r1, d9
 8009504:	f7f7 f898 	bl	8000638 <__aeabi_dmul>
 8009508:	1136      	asrs	r6, r6, #4
 800950a:	4682      	mov	sl, r0
 800950c:	468b      	mov	fp, r1
 800950e:	2300      	movs	r3, #0
 8009510:	2502      	movs	r5, #2
 8009512:	2e00      	cmp	r6, #0
 8009514:	d17a      	bne.n	800960c <_dtoa_r+0x4c4>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1d3      	bne.n	80094c2 <_dtoa_r+0x37a>
 800951a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 8082 	beq.w	8009626 <_dtoa_r+0x4de>
 8009522:	4b91      	ldr	r3, [pc, #580]	; (8009768 <_dtoa_r+0x620>)
 8009524:	2200      	movs	r2, #0
 8009526:	4650      	mov	r0, sl
 8009528:	4659      	mov	r1, fp
 800952a:	f7f7 faf7 	bl	8000b1c <__aeabi_dcmplt>
 800952e:	2800      	cmp	r0, #0
 8009530:	d079      	beq.n	8009626 <_dtoa_r+0x4de>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d076      	beq.n	8009626 <_dtoa_r+0x4de>
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	dd36      	ble.n	80095ac <_dtoa_r+0x464>
 800953e:	9b00      	ldr	r3, [sp, #0]
 8009540:	4650      	mov	r0, sl
 8009542:	4659      	mov	r1, fp
 8009544:	1e5f      	subs	r7, r3, #1
 8009546:	2200      	movs	r2, #0
 8009548:	4b88      	ldr	r3, [pc, #544]	; (800976c <_dtoa_r+0x624>)
 800954a:	f7f7 f875 	bl	8000638 <__aeabi_dmul>
 800954e:	9e02      	ldr	r6, [sp, #8]
 8009550:	4682      	mov	sl, r0
 8009552:	468b      	mov	fp, r1
 8009554:	3501      	adds	r5, #1
 8009556:	4628      	mov	r0, r5
 8009558:	f7f7 f804 	bl	8000564 <__aeabi_i2d>
 800955c:	4652      	mov	r2, sl
 800955e:	465b      	mov	r3, fp
 8009560:	f7f7 f86a 	bl	8000638 <__aeabi_dmul>
 8009564:	4b82      	ldr	r3, [pc, #520]	; (8009770 <_dtoa_r+0x628>)
 8009566:	2200      	movs	r2, #0
 8009568:	f7f6 feb0 	bl	80002cc <__adddf3>
 800956c:	46d0      	mov	r8, sl
 800956e:	46d9      	mov	r9, fp
 8009570:	4682      	mov	sl, r0
 8009572:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009576:	2e00      	cmp	r6, #0
 8009578:	d158      	bne.n	800962c <_dtoa_r+0x4e4>
 800957a:	4b7e      	ldr	r3, [pc, #504]	; (8009774 <_dtoa_r+0x62c>)
 800957c:	2200      	movs	r2, #0
 800957e:	4640      	mov	r0, r8
 8009580:	4649      	mov	r1, r9
 8009582:	f7f6 fea1 	bl	80002c8 <__aeabi_dsub>
 8009586:	4652      	mov	r2, sl
 8009588:	465b      	mov	r3, fp
 800958a:	4680      	mov	r8, r0
 800958c:	4689      	mov	r9, r1
 800958e:	f7f7 fae3 	bl	8000b58 <__aeabi_dcmpgt>
 8009592:	2800      	cmp	r0, #0
 8009594:	f040 8295 	bne.w	8009ac2 <_dtoa_r+0x97a>
 8009598:	4652      	mov	r2, sl
 800959a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	f7f7 fabb 	bl	8000b1c <__aeabi_dcmplt>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f040 8289 	bne.w	8009abe <_dtoa_r+0x976>
 80095ac:	ec5b ab19 	vmov	sl, fp, d9
 80095b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f2c0 8148 	blt.w	8009848 <_dtoa_r+0x700>
 80095b8:	9a00      	ldr	r2, [sp, #0]
 80095ba:	2a0e      	cmp	r2, #14
 80095bc:	f300 8144 	bgt.w	8009848 <_dtoa_r+0x700>
 80095c0:	4b67      	ldr	r3, [pc, #412]	; (8009760 <_dtoa_r+0x618>)
 80095c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f280 80d5 	bge.w	800977c <_dtoa_r+0x634>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f300 80d1 	bgt.w	800977c <_dtoa_r+0x634>
 80095da:	f040 826f 	bne.w	8009abc <_dtoa_r+0x974>
 80095de:	4b65      	ldr	r3, [pc, #404]	; (8009774 <_dtoa_r+0x62c>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	4640      	mov	r0, r8
 80095e4:	4649      	mov	r1, r9
 80095e6:	f7f7 f827 	bl	8000638 <__aeabi_dmul>
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	f7f7 faa9 	bl	8000b44 <__aeabi_dcmpge>
 80095f2:	9e03      	ldr	r6, [sp, #12]
 80095f4:	4637      	mov	r7, r6
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f040 8245 	bne.w	8009a86 <_dtoa_r+0x93e>
 80095fc:	9d01      	ldr	r5, [sp, #4]
 80095fe:	2331      	movs	r3, #49	; 0x31
 8009600:	f805 3b01 	strb.w	r3, [r5], #1
 8009604:	9b00      	ldr	r3, [sp, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	e240      	b.n	8009a8e <_dtoa_r+0x946>
 800960c:	07f2      	lsls	r2, r6, #31
 800960e:	d505      	bpl.n	800961c <_dtoa_r+0x4d4>
 8009610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009614:	f7f7 f810 	bl	8000638 <__aeabi_dmul>
 8009618:	3501      	adds	r5, #1
 800961a:	2301      	movs	r3, #1
 800961c:	1076      	asrs	r6, r6, #1
 800961e:	3708      	adds	r7, #8
 8009620:	e777      	b.n	8009512 <_dtoa_r+0x3ca>
 8009622:	2502      	movs	r5, #2
 8009624:	e779      	b.n	800951a <_dtoa_r+0x3d2>
 8009626:	9f00      	ldr	r7, [sp, #0]
 8009628:	9e03      	ldr	r6, [sp, #12]
 800962a:	e794      	b.n	8009556 <_dtoa_r+0x40e>
 800962c:	9901      	ldr	r1, [sp, #4]
 800962e:	4b4c      	ldr	r3, [pc, #304]	; (8009760 <_dtoa_r+0x618>)
 8009630:	4431      	add	r1, r6
 8009632:	910d      	str	r1, [sp, #52]	; 0x34
 8009634:	9908      	ldr	r1, [sp, #32]
 8009636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800963a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800963e:	2900      	cmp	r1, #0
 8009640:	d043      	beq.n	80096ca <_dtoa_r+0x582>
 8009642:	494d      	ldr	r1, [pc, #308]	; (8009778 <_dtoa_r+0x630>)
 8009644:	2000      	movs	r0, #0
 8009646:	f7f7 f921 	bl	800088c <__aeabi_ddiv>
 800964a:	4652      	mov	r2, sl
 800964c:	465b      	mov	r3, fp
 800964e:	f7f6 fe3b 	bl	80002c8 <__aeabi_dsub>
 8009652:	9d01      	ldr	r5, [sp, #4]
 8009654:	4682      	mov	sl, r0
 8009656:	468b      	mov	fp, r1
 8009658:	4649      	mov	r1, r9
 800965a:	4640      	mov	r0, r8
 800965c:	f7f7 fa9c 	bl	8000b98 <__aeabi_d2iz>
 8009660:	4606      	mov	r6, r0
 8009662:	f7f6 ff7f 	bl	8000564 <__aeabi_i2d>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4640      	mov	r0, r8
 800966c:	4649      	mov	r1, r9
 800966e:	f7f6 fe2b 	bl	80002c8 <__aeabi_dsub>
 8009672:	3630      	adds	r6, #48	; 0x30
 8009674:	f805 6b01 	strb.w	r6, [r5], #1
 8009678:	4652      	mov	r2, sl
 800967a:	465b      	mov	r3, fp
 800967c:	4680      	mov	r8, r0
 800967e:	4689      	mov	r9, r1
 8009680:	f7f7 fa4c 	bl	8000b1c <__aeabi_dcmplt>
 8009684:	2800      	cmp	r0, #0
 8009686:	d163      	bne.n	8009750 <_dtoa_r+0x608>
 8009688:	4642      	mov	r2, r8
 800968a:	464b      	mov	r3, r9
 800968c:	4936      	ldr	r1, [pc, #216]	; (8009768 <_dtoa_r+0x620>)
 800968e:	2000      	movs	r0, #0
 8009690:	f7f6 fe1a 	bl	80002c8 <__aeabi_dsub>
 8009694:	4652      	mov	r2, sl
 8009696:	465b      	mov	r3, fp
 8009698:	f7f7 fa40 	bl	8000b1c <__aeabi_dcmplt>
 800969c:	2800      	cmp	r0, #0
 800969e:	f040 80b5 	bne.w	800980c <_dtoa_r+0x6c4>
 80096a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a4:	429d      	cmp	r5, r3
 80096a6:	d081      	beq.n	80095ac <_dtoa_r+0x464>
 80096a8:	4b30      	ldr	r3, [pc, #192]	; (800976c <_dtoa_r+0x624>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	4650      	mov	r0, sl
 80096ae:	4659      	mov	r1, fp
 80096b0:	f7f6 ffc2 	bl	8000638 <__aeabi_dmul>
 80096b4:	4b2d      	ldr	r3, [pc, #180]	; (800976c <_dtoa_r+0x624>)
 80096b6:	4682      	mov	sl, r0
 80096b8:	468b      	mov	fp, r1
 80096ba:	4640      	mov	r0, r8
 80096bc:	4649      	mov	r1, r9
 80096be:	2200      	movs	r2, #0
 80096c0:	f7f6 ffba 	bl	8000638 <__aeabi_dmul>
 80096c4:	4680      	mov	r8, r0
 80096c6:	4689      	mov	r9, r1
 80096c8:	e7c6      	b.n	8009658 <_dtoa_r+0x510>
 80096ca:	4650      	mov	r0, sl
 80096cc:	4659      	mov	r1, fp
 80096ce:	f7f6 ffb3 	bl	8000638 <__aeabi_dmul>
 80096d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096d4:	9d01      	ldr	r5, [sp, #4]
 80096d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096d8:	4682      	mov	sl, r0
 80096da:	468b      	mov	fp, r1
 80096dc:	4649      	mov	r1, r9
 80096de:	4640      	mov	r0, r8
 80096e0:	f7f7 fa5a 	bl	8000b98 <__aeabi_d2iz>
 80096e4:	4606      	mov	r6, r0
 80096e6:	f7f6 ff3d 	bl	8000564 <__aeabi_i2d>
 80096ea:	3630      	adds	r6, #48	; 0x30
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4640      	mov	r0, r8
 80096f2:	4649      	mov	r1, r9
 80096f4:	f7f6 fde8 	bl	80002c8 <__aeabi_dsub>
 80096f8:	f805 6b01 	strb.w	r6, [r5], #1
 80096fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096fe:	429d      	cmp	r5, r3
 8009700:	4680      	mov	r8, r0
 8009702:	4689      	mov	r9, r1
 8009704:	f04f 0200 	mov.w	r2, #0
 8009708:	d124      	bne.n	8009754 <_dtoa_r+0x60c>
 800970a:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <_dtoa_r+0x630>)
 800970c:	4650      	mov	r0, sl
 800970e:	4659      	mov	r1, fp
 8009710:	f7f6 fddc 	bl	80002cc <__adddf3>
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4640      	mov	r0, r8
 800971a:	4649      	mov	r1, r9
 800971c:	f7f7 fa1c 	bl	8000b58 <__aeabi_dcmpgt>
 8009720:	2800      	cmp	r0, #0
 8009722:	d173      	bne.n	800980c <_dtoa_r+0x6c4>
 8009724:	4652      	mov	r2, sl
 8009726:	465b      	mov	r3, fp
 8009728:	4913      	ldr	r1, [pc, #76]	; (8009778 <_dtoa_r+0x630>)
 800972a:	2000      	movs	r0, #0
 800972c:	f7f6 fdcc 	bl	80002c8 <__aeabi_dsub>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f7 f9f0 	bl	8000b1c <__aeabi_dcmplt>
 800973c:	2800      	cmp	r0, #0
 800973e:	f43f af35 	beq.w	80095ac <_dtoa_r+0x464>
 8009742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009744:	1e6b      	subs	r3, r5, #1
 8009746:	930f      	str	r3, [sp, #60]	; 0x3c
 8009748:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800974c:	2b30      	cmp	r3, #48	; 0x30
 800974e:	d0f8      	beq.n	8009742 <_dtoa_r+0x5fa>
 8009750:	9700      	str	r7, [sp, #0]
 8009752:	e049      	b.n	80097e8 <_dtoa_r+0x6a0>
 8009754:	4b05      	ldr	r3, [pc, #20]	; (800976c <_dtoa_r+0x624>)
 8009756:	f7f6 ff6f 	bl	8000638 <__aeabi_dmul>
 800975a:	4680      	mov	r8, r0
 800975c:	4689      	mov	r9, r1
 800975e:	e7bd      	b.n	80096dc <_dtoa_r+0x594>
 8009760:	0800cc08 	.word	0x0800cc08
 8009764:	0800cbe0 	.word	0x0800cbe0
 8009768:	3ff00000 	.word	0x3ff00000
 800976c:	40240000 	.word	0x40240000
 8009770:	401c0000 	.word	0x401c0000
 8009774:	40140000 	.word	0x40140000
 8009778:	3fe00000 	.word	0x3fe00000
 800977c:	9d01      	ldr	r5, [sp, #4]
 800977e:	4656      	mov	r6, sl
 8009780:	465f      	mov	r7, fp
 8009782:	4642      	mov	r2, r8
 8009784:	464b      	mov	r3, r9
 8009786:	4630      	mov	r0, r6
 8009788:	4639      	mov	r1, r7
 800978a:	f7f7 f87f 	bl	800088c <__aeabi_ddiv>
 800978e:	f7f7 fa03 	bl	8000b98 <__aeabi_d2iz>
 8009792:	4682      	mov	sl, r0
 8009794:	f7f6 fee6 	bl	8000564 <__aeabi_i2d>
 8009798:	4642      	mov	r2, r8
 800979a:	464b      	mov	r3, r9
 800979c:	f7f6 ff4c 	bl	8000638 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4630      	mov	r0, r6
 80097a6:	4639      	mov	r1, r7
 80097a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80097ac:	f7f6 fd8c 	bl	80002c8 <__aeabi_dsub>
 80097b0:	f805 6b01 	strb.w	r6, [r5], #1
 80097b4:	9e01      	ldr	r6, [sp, #4]
 80097b6:	9f03      	ldr	r7, [sp, #12]
 80097b8:	1bae      	subs	r6, r5, r6
 80097ba:	42b7      	cmp	r7, r6
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	d135      	bne.n	800982e <_dtoa_r+0x6e6>
 80097c2:	f7f6 fd83 	bl	80002cc <__adddf3>
 80097c6:	4642      	mov	r2, r8
 80097c8:	464b      	mov	r3, r9
 80097ca:	4606      	mov	r6, r0
 80097cc:	460f      	mov	r7, r1
 80097ce:	f7f7 f9c3 	bl	8000b58 <__aeabi_dcmpgt>
 80097d2:	b9d0      	cbnz	r0, 800980a <_dtoa_r+0x6c2>
 80097d4:	4642      	mov	r2, r8
 80097d6:	464b      	mov	r3, r9
 80097d8:	4630      	mov	r0, r6
 80097da:	4639      	mov	r1, r7
 80097dc:	f7f7 f994 	bl	8000b08 <__aeabi_dcmpeq>
 80097e0:	b110      	cbz	r0, 80097e8 <_dtoa_r+0x6a0>
 80097e2:	f01a 0f01 	tst.w	sl, #1
 80097e6:	d110      	bne.n	800980a <_dtoa_r+0x6c2>
 80097e8:	4620      	mov	r0, r4
 80097ea:	ee18 1a10 	vmov	r1, s16
 80097ee:	f000 fd17 	bl	800a220 <_Bfree>
 80097f2:	2300      	movs	r3, #0
 80097f4:	9800      	ldr	r0, [sp, #0]
 80097f6:	702b      	strb	r3, [r5, #0]
 80097f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097fa:	3001      	adds	r0, #1
 80097fc:	6018      	str	r0, [r3, #0]
 80097fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009800:	2b00      	cmp	r3, #0
 8009802:	f43f acf1 	beq.w	80091e8 <_dtoa_r+0xa0>
 8009806:	601d      	str	r5, [r3, #0]
 8009808:	e4ee      	b.n	80091e8 <_dtoa_r+0xa0>
 800980a:	9f00      	ldr	r7, [sp, #0]
 800980c:	462b      	mov	r3, r5
 800980e:	461d      	mov	r5, r3
 8009810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009814:	2a39      	cmp	r2, #57	; 0x39
 8009816:	d106      	bne.n	8009826 <_dtoa_r+0x6de>
 8009818:	9a01      	ldr	r2, [sp, #4]
 800981a:	429a      	cmp	r2, r3
 800981c:	d1f7      	bne.n	800980e <_dtoa_r+0x6c6>
 800981e:	9901      	ldr	r1, [sp, #4]
 8009820:	2230      	movs	r2, #48	; 0x30
 8009822:	3701      	adds	r7, #1
 8009824:	700a      	strb	r2, [r1, #0]
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	3201      	adds	r2, #1
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	e790      	b.n	8009750 <_dtoa_r+0x608>
 800982e:	4ba6      	ldr	r3, [pc, #664]	; (8009ac8 <_dtoa_r+0x980>)
 8009830:	2200      	movs	r2, #0
 8009832:	f7f6 ff01 	bl	8000638 <__aeabi_dmul>
 8009836:	2200      	movs	r2, #0
 8009838:	2300      	movs	r3, #0
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	f7f7 f963 	bl	8000b08 <__aeabi_dcmpeq>
 8009842:	2800      	cmp	r0, #0
 8009844:	d09d      	beq.n	8009782 <_dtoa_r+0x63a>
 8009846:	e7cf      	b.n	80097e8 <_dtoa_r+0x6a0>
 8009848:	9a08      	ldr	r2, [sp, #32]
 800984a:	2a00      	cmp	r2, #0
 800984c:	f000 80d7 	beq.w	80099fe <_dtoa_r+0x8b6>
 8009850:	9a06      	ldr	r2, [sp, #24]
 8009852:	2a01      	cmp	r2, #1
 8009854:	f300 80ba 	bgt.w	80099cc <_dtoa_r+0x884>
 8009858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800985a:	2a00      	cmp	r2, #0
 800985c:	f000 80b2 	beq.w	80099c4 <_dtoa_r+0x87c>
 8009860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009864:	9e07      	ldr	r6, [sp, #28]
 8009866:	9d04      	ldr	r5, [sp, #16]
 8009868:	9a04      	ldr	r2, [sp, #16]
 800986a:	441a      	add	r2, r3
 800986c:	9204      	str	r2, [sp, #16]
 800986e:	9a05      	ldr	r2, [sp, #20]
 8009870:	2101      	movs	r1, #1
 8009872:	441a      	add	r2, r3
 8009874:	4620      	mov	r0, r4
 8009876:	9205      	str	r2, [sp, #20]
 8009878:	f000 fd8a 	bl	800a390 <__i2b>
 800987c:	4607      	mov	r7, r0
 800987e:	2d00      	cmp	r5, #0
 8009880:	dd0c      	ble.n	800989c <_dtoa_r+0x754>
 8009882:	9b05      	ldr	r3, [sp, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	dd09      	ble.n	800989c <_dtoa_r+0x754>
 8009888:	42ab      	cmp	r3, r5
 800988a:	9a04      	ldr	r2, [sp, #16]
 800988c:	bfa8      	it	ge
 800988e:	462b      	movge	r3, r5
 8009890:	1ad2      	subs	r2, r2, r3
 8009892:	9204      	str	r2, [sp, #16]
 8009894:	9a05      	ldr	r2, [sp, #20]
 8009896:	1aed      	subs	r5, r5, r3
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	9b07      	ldr	r3, [sp, #28]
 800989e:	b31b      	cbz	r3, 80098e8 <_dtoa_r+0x7a0>
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80af 	beq.w	8009a06 <_dtoa_r+0x8be>
 80098a8:	2e00      	cmp	r6, #0
 80098aa:	dd13      	ble.n	80098d4 <_dtoa_r+0x78c>
 80098ac:	4639      	mov	r1, r7
 80098ae:	4632      	mov	r2, r6
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 fe2d 	bl	800a510 <__pow5mult>
 80098b6:	ee18 2a10 	vmov	r2, s16
 80098ba:	4601      	mov	r1, r0
 80098bc:	4607      	mov	r7, r0
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 fd7c 	bl	800a3bc <__multiply>
 80098c4:	ee18 1a10 	vmov	r1, s16
 80098c8:	4680      	mov	r8, r0
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fca8 	bl	800a220 <_Bfree>
 80098d0:	ee08 8a10 	vmov	s16, r8
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	1b9a      	subs	r2, r3, r6
 80098d8:	d006      	beq.n	80098e8 <_dtoa_r+0x7a0>
 80098da:	ee18 1a10 	vmov	r1, s16
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 fe16 	bl	800a510 <__pow5mult>
 80098e4:	ee08 0a10 	vmov	s16, r0
 80098e8:	2101      	movs	r1, #1
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 fd50 	bl	800a390 <__i2b>
 80098f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	4606      	mov	r6, r0
 80098f6:	f340 8088 	ble.w	8009a0a <_dtoa_r+0x8c2>
 80098fa:	461a      	mov	r2, r3
 80098fc:	4601      	mov	r1, r0
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fe06 	bl	800a510 <__pow5mult>
 8009904:	9b06      	ldr	r3, [sp, #24]
 8009906:	2b01      	cmp	r3, #1
 8009908:	4606      	mov	r6, r0
 800990a:	f340 8081 	ble.w	8009a10 <_dtoa_r+0x8c8>
 800990e:	f04f 0800 	mov.w	r8, #0
 8009912:	6933      	ldr	r3, [r6, #16]
 8009914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009918:	6918      	ldr	r0, [r3, #16]
 800991a:	f000 fce9 	bl	800a2f0 <__hi0bits>
 800991e:	f1c0 0020 	rsb	r0, r0, #32
 8009922:	9b05      	ldr	r3, [sp, #20]
 8009924:	4418      	add	r0, r3
 8009926:	f010 001f 	ands.w	r0, r0, #31
 800992a:	f000 8092 	beq.w	8009a52 <_dtoa_r+0x90a>
 800992e:	f1c0 0320 	rsb	r3, r0, #32
 8009932:	2b04      	cmp	r3, #4
 8009934:	f340 808a 	ble.w	8009a4c <_dtoa_r+0x904>
 8009938:	f1c0 001c 	rsb	r0, r0, #28
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	4403      	add	r3, r0
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	9b05      	ldr	r3, [sp, #20]
 8009944:	4403      	add	r3, r0
 8009946:	4405      	add	r5, r0
 8009948:	9305      	str	r3, [sp, #20]
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	dd07      	ble.n	8009960 <_dtoa_r+0x818>
 8009950:	ee18 1a10 	vmov	r1, s16
 8009954:	461a      	mov	r2, r3
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fe34 	bl	800a5c4 <__lshift>
 800995c:	ee08 0a10 	vmov	s16, r0
 8009960:	9b05      	ldr	r3, [sp, #20]
 8009962:	2b00      	cmp	r3, #0
 8009964:	dd05      	ble.n	8009972 <_dtoa_r+0x82a>
 8009966:	4631      	mov	r1, r6
 8009968:	461a      	mov	r2, r3
 800996a:	4620      	mov	r0, r4
 800996c:	f000 fe2a 	bl	800a5c4 <__lshift>
 8009970:	4606      	mov	r6, r0
 8009972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d06e      	beq.n	8009a56 <_dtoa_r+0x90e>
 8009978:	ee18 0a10 	vmov	r0, s16
 800997c:	4631      	mov	r1, r6
 800997e:	f000 fe91 	bl	800a6a4 <__mcmp>
 8009982:	2800      	cmp	r0, #0
 8009984:	da67      	bge.n	8009a56 <_dtoa_r+0x90e>
 8009986:	9b00      	ldr	r3, [sp, #0]
 8009988:	3b01      	subs	r3, #1
 800998a:	ee18 1a10 	vmov	r1, s16
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	220a      	movs	r2, #10
 8009992:	2300      	movs	r3, #0
 8009994:	4620      	mov	r0, r4
 8009996:	f000 fc65 	bl	800a264 <__multadd>
 800999a:	9b08      	ldr	r3, [sp, #32]
 800999c:	ee08 0a10 	vmov	s16, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 81b1 	beq.w	8009d08 <_dtoa_r+0xbc0>
 80099a6:	2300      	movs	r3, #0
 80099a8:	4639      	mov	r1, r7
 80099aa:	220a      	movs	r2, #10
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fc59 	bl	800a264 <__multadd>
 80099b2:	9b02      	ldr	r3, [sp, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	4607      	mov	r7, r0
 80099b8:	f300 808e 	bgt.w	8009ad8 <_dtoa_r+0x990>
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	dc51      	bgt.n	8009a66 <_dtoa_r+0x91e>
 80099c2:	e089      	b.n	8009ad8 <_dtoa_r+0x990>
 80099c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099ca:	e74b      	b.n	8009864 <_dtoa_r+0x71c>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	1e5e      	subs	r6, r3, #1
 80099d0:	9b07      	ldr	r3, [sp, #28]
 80099d2:	42b3      	cmp	r3, r6
 80099d4:	bfbf      	itttt	lt
 80099d6:	9b07      	ldrlt	r3, [sp, #28]
 80099d8:	9607      	strlt	r6, [sp, #28]
 80099da:	1af2      	sublt	r2, r6, r3
 80099dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80099de:	bfb6      	itet	lt
 80099e0:	189b      	addlt	r3, r3, r2
 80099e2:	1b9e      	subge	r6, r3, r6
 80099e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	bfb8      	it	lt
 80099ea:	2600      	movlt	r6, #0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bfb7      	itett	lt
 80099f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80099f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80099f8:	1a9d      	sublt	r5, r3, r2
 80099fa:	2300      	movlt	r3, #0
 80099fc:	e734      	b.n	8009868 <_dtoa_r+0x720>
 80099fe:	9e07      	ldr	r6, [sp, #28]
 8009a00:	9d04      	ldr	r5, [sp, #16]
 8009a02:	9f08      	ldr	r7, [sp, #32]
 8009a04:	e73b      	b.n	800987e <_dtoa_r+0x736>
 8009a06:	9a07      	ldr	r2, [sp, #28]
 8009a08:	e767      	b.n	80098da <_dtoa_r+0x792>
 8009a0a:	9b06      	ldr	r3, [sp, #24]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	dc18      	bgt.n	8009a42 <_dtoa_r+0x8fa>
 8009a10:	f1ba 0f00 	cmp.w	sl, #0
 8009a14:	d115      	bne.n	8009a42 <_dtoa_r+0x8fa>
 8009a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a1a:	b993      	cbnz	r3, 8009a42 <_dtoa_r+0x8fa>
 8009a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a20:	0d1b      	lsrs	r3, r3, #20
 8009a22:	051b      	lsls	r3, r3, #20
 8009a24:	b183      	cbz	r3, 8009a48 <_dtoa_r+0x900>
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	9305      	str	r3, [sp, #20]
 8009a32:	f04f 0801 	mov.w	r8, #1
 8009a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f47f af6a 	bne.w	8009912 <_dtoa_r+0x7ca>
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e76f      	b.n	8009922 <_dtoa_r+0x7da>
 8009a42:	f04f 0800 	mov.w	r8, #0
 8009a46:	e7f6      	b.n	8009a36 <_dtoa_r+0x8ee>
 8009a48:	4698      	mov	r8, r3
 8009a4a:	e7f4      	b.n	8009a36 <_dtoa_r+0x8ee>
 8009a4c:	f43f af7d 	beq.w	800994a <_dtoa_r+0x802>
 8009a50:	4618      	mov	r0, r3
 8009a52:	301c      	adds	r0, #28
 8009a54:	e772      	b.n	800993c <_dtoa_r+0x7f4>
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	dc37      	bgt.n	8009acc <_dtoa_r+0x984>
 8009a5c:	9b06      	ldr	r3, [sp, #24]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	dd34      	ble.n	8009acc <_dtoa_r+0x984>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	9302      	str	r3, [sp, #8]
 8009a66:	9b02      	ldr	r3, [sp, #8]
 8009a68:	b96b      	cbnz	r3, 8009a86 <_dtoa_r+0x93e>
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	2205      	movs	r2, #5
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 fbf8 	bl	800a264 <__multadd>
 8009a74:	4601      	mov	r1, r0
 8009a76:	4606      	mov	r6, r0
 8009a78:	ee18 0a10 	vmov	r0, s16
 8009a7c:	f000 fe12 	bl	800a6a4 <__mcmp>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f73f adbb 	bgt.w	80095fc <_dtoa_r+0x4b4>
 8009a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a88:	9d01      	ldr	r5, [sp, #4]
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	4631      	mov	r1, r6
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fbc3 	bl	800a220 <_Bfree>
 8009a9a:	2f00      	cmp	r7, #0
 8009a9c:	f43f aea4 	beq.w	80097e8 <_dtoa_r+0x6a0>
 8009aa0:	f1b8 0f00 	cmp.w	r8, #0
 8009aa4:	d005      	beq.n	8009ab2 <_dtoa_r+0x96a>
 8009aa6:	45b8      	cmp	r8, r7
 8009aa8:	d003      	beq.n	8009ab2 <_dtoa_r+0x96a>
 8009aaa:	4641      	mov	r1, r8
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 fbb7 	bl	800a220 <_Bfree>
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 fbb3 	bl	800a220 <_Bfree>
 8009aba:	e695      	b.n	80097e8 <_dtoa_r+0x6a0>
 8009abc:	2600      	movs	r6, #0
 8009abe:	4637      	mov	r7, r6
 8009ac0:	e7e1      	b.n	8009a86 <_dtoa_r+0x93e>
 8009ac2:	9700      	str	r7, [sp, #0]
 8009ac4:	4637      	mov	r7, r6
 8009ac6:	e599      	b.n	80095fc <_dtoa_r+0x4b4>
 8009ac8:	40240000 	.word	0x40240000
 8009acc:	9b08      	ldr	r3, [sp, #32]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f000 80ca 	beq.w	8009c68 <_dtoa_r+0xb20>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	9302      	str	r3, [sp, #8]
 8009ad8:	2d00      	cmp	r5, #0
 8009ada:	dd05      	ble.n	8009ae8 <_dtoa_r+0x9a0>
 8009adc:	4639      	mov	r1, r7
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fd6f 	bl	800a5c4 <__lshift>
 8009ae6:	4607      	mov	r7, r0
 8009ae8:	f1b8 0f00 	cmp.w	r8, #0
 8009aec:	d05b      	beq.n	8009ba6 <_dtoa_r+0xa5e>
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fb55 	bl	800a1a0 <_Balloc>
 8009af6:	4605      	mov	r5, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <_dtoa_r+0x9be>
 8009afa:	4b87      	ldr	r3, [pc, #540]	; (8009d18 <_dtoa_r+0xbd0>)
 8009afc:	4602      	mov	r2, r0
 8009afe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b02:	f7ff bb3b 	b.w	800917c <_dtoa_r+0x34>
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	3202      	adds	r2, #2
 8009b0a:	0092      	lsls	r2, r2, #2
 8009b0c:	f107 010c 	add.w	r1, r7, #12
 8009b10:	300c      	adds	r0, #12
 8009b12:	f000 fb2b 	bl	800a16c <memcpy>
 8009b16:	2201      	movs	r2, #1
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 fd52 	bl	800a5c4 <__lshift>
 8009b20:	9b01      	ldr	r3, [sp, #4]
 8009b22:	f103 0901 	add.w	r9, r3, #1
 8009b26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	f00a 0301 	and.w	r3, sl, #1
 8009b32:	46b8      	mov	r8, r7
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	4607      	mov	r7, r0
 8009b38:	4631      	mov	r1, r6
 8009b3a:	ee18 0a10 	vmov	r0, s16
 8009b3e:	f7ff fa77 	bl	8009030 <quorem>
 8009b42:	4641      	mov	r1, r8
 8009b44:	9002      	str	r0, [sp, #8]
 8009b46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b4a:	ee18 0a10 	vmov	r0, s16
 8009b4e:	f000 fda9 	bl	800a6a4 <__mcmp>
 8009b52:	463a      	mov	r2, r7
 8009b54:	9003      	str	r0, [sp, #12]
 8009b56:	4631      	mov	r1, r6
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fdbf 	bl	800a6dc <__mdiff>
 8009b5e:	68c2      	ldr	r2, [r0, #12]
 8009b60:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b64:	4605      	mov	r5, r0
 8009b66:	bb02      	cbnz	r2, 8009baa <_dtoa_r+0xa62>
 8009b68:	4601      	mov	r1, r0
 8009b6a:	ee18 0a10 	vmov	r0, s16
 8009b6e:	f000 fd99 	bl	800a6a4 <__mcmp>
 8009b72:	4602      	mov	r2, r0
 8009b74:	4629      	mov	r1, r5
 8009b76:	4620      	mov	r0, r4
 8009b78:	9207      	str	r2, [sp, #28]
 8009b7a:	f000 fb51 	bl	800a220 <_Bfree>
 8009b7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b82:	ea43 0102 	orr.w	r1, r3, r2
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	464d      	mov	r5, r9
 8009b8c:	d10f      	bne.n	8009bae <_dtoa_r+0xa66>
 8009b8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b92:	d02a      	beq.n	8009bea <_dtoa_r+0xaa2>
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	dd02      	ble.n	8009ba0 <_dtoa_r+0xa58>
 8009b9a:	9b02      	ldr	r3, [sp, #8]
 8009b9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ba0:	f88b a000 	strb.w	sl, [fp]
 8009ba4:	e775      	b.n	8009a92 <_dtoa_r+0x94a>
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	e7ba      	b.n	8009b20 <_dtoa_r+0x9d8>
 8009baa:	2201      	movs	r2, #1
 8009bac:	e7e2      	b.n	8009b74 <_dtoa_r+0xa2c>
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	db04      	blt.n	8009bbe <_dtoa_r+0xa76>
 8009bb4:	9906      	ldr	r1, [sp, #24]
 8009bb6:	430b      	orrs	r3, r1
 8009bb8:	9904      	ldr	r1, [sp, #16]
 8009bba:	430b      	orrs	r3, r1
 8009bbc:	d122      	bne.n	8009c04 <_dtoa_r+0xabc>
 8009bbe:	2a00      	cmp	r2, #0
 8009bc0:	ddee      	ble.n	8009ba0 <_dtoa_r+0xa58>
 8009bc2:	ee18 1a10 	vmov	r1, s16
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 fcfb 	bl	800a5c4 <__lshift>
 8009bce:	4631      	mov	r1, r6
 8009bd0:	ee08 0a10 	vmov	s16, r0
 8009bd4:	f000 fd66 	bl	800a6a4 <__mcmp>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	dc03      	bgt.n	8009be4 <_dtoa_r+0xa9c>
 8009bdc:	d1e0      	bne.n	8009ba0 <_dtoa_r+0xa58>
 8009bde:	f01a 0f01 	tst.w	sl, #1
 8009be2:	d0dd      	beq.n	8009ba0 <_dtoa_r+0xa58>
 8009be4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009be8:	d1d7      	bne.n	8009b9a <_dtoa_r+0xa52>
 8009bea:	2339      	movs	r3, #57	; 0x39
 8009bec:	f88b 3000 	strb.w	r3, [fp]
 8009bf0:	462b      	mov	r3, r5
 8009bf2:	461d      	mov	r5, r3
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009bfa:	2a39      	cmp	r2, #57	; 0x39
 8009bfc:	d071      	beq.n	8009ce2 <_dtoa_r+0xb9a>
 8009bfe:	3201      	adds	r2, #1
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e746      	b.n	8009a92 <_dtoa_r+0x94a>
 8009c04:	2a00      	cmp	r2, #0
 8009c06:	dd07      	ble.n	8009c18 <_dtoa_r+0xad0>
 8009c08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c0c:	d0ed      	beq.n	8009bea <_dtoa_r+0xaa2>
 8009c0e:	f10a 0301 	add.w	r3, sl, #1
 8009c12:	f88b 3000 	strb.w	r3, [fp]
 8009c16:	e73c      	b.n	8009a92 <_dtoa_r+0x94a>
 8009c18:	9b05      	ldr	r3, [sp, #20]
 8009c1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009c1e:	4599      	cmp	r9, r3
 8009c20:	d047      	beq.n	8009cb2 <_dtoa_r+0xb6a>
 8009c22:	ee18 1a10 	vmov	r1, s16
 8009c26:	2300      	movs	r3, #0
 8009c28:	220a      	movs	r2, #10
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 fb1a 	bl	800a264 <__multadd>
 8009c30:	45b8      	cmp	r8, r7
 8009c32:	ee08 0a10 	vmov	s16, r0
 8009c36:	f04f 0300 	mov.w	r3, #0
 8009c3a:	f04f 020a 	mov.w	r2, #10
 8009c3e:	4641      	mov	r1, r8
 8009c40:	4620      	mov	r0, r4
 8009c42:	d106      	bne.n	8009c52 <_dtoa_r+0xb0a>
 8009c44:	f000 fb0e 	bl	800a264 <__multadd>
 8009c48:	4680      	mov	r8, r0
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	f109 0901 	add.w	r9, r9, #1
 8009c50:	e772      	b.n	8009b38 <_dtoa_r+0x9f0>
 8009c52:	f000 fb07 	bl	800a264 <__multadd>
 8009c56:	4639      	mov	r1, r7
 8009c58:	4680      	mov	r8, r0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 fb00 	bl	800a264 <__multadd>
 8009c64:	4607      	mov	r7, r0
 8009c66:	e7f1      	b.n	8009c4c <_dtoa_r+0xb04>
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	9d01      	ldr	r5, [sp, #4]
 8009c6e:	ee18 0a10 	vmov	r0, s16
 8009c72:	4631      	mov	r1, r6
 8009c74:	f7ff f9dc 	bl	8009030 <quorem>
 8009c78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c7c:	9b01      	ldr	r3, [sp, #4]
 8009c7e:	f805 ab01 	strb.w	sl, [r5], #1
 8009c82:	1aea      	subs	r2, r5, r3
 8009c84:	9b02      	ldr	r3, [sp, #8]
 8009c86:	4293      	cmp	r3, r2
 8009c88:	dd09      	ble.n	8009c9e <_dtoa_r+0xb56>
 8009c8a:	ee18 1a10 	vmov	r1, s16
 8009c8e:	2300      	movs	r3, #0
 8009c90:	220a      	movs	r2, #10
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fae6 	bl	800a264 <__multadd>
 8009c98:	ee08 0a10 	vmov	s16, r0
 8009c9c:	e7e7      	b.n	8009c6e <_dtoa_r+0xb26>
 8009c9e:	9b02      	ldr	r3, [sp, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	bfc8      	it	gt
 8009ca4:	461d      	movgt	r5, r3
 8009ca6:	9b01      	ldr	r3, [sp, #4]
 8009ca8:	bfd8      	it	le
 8009caa:	2501      	movle	r5, #1
 8009cac:	441d      	add	r5, r3
 8009cae:	f04f 0800 	mov.w	r8, #0
 8009cb2:	ee18 1a10 	vmov	r1, s16
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fc83 	bl	800a5c4 <__lshift>
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	ee08 0a10 	vmov	s16, r0
 8009cc4:	f000 fcee 	bl	800a6a4 <__mcmp>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	dc91      	bgt.n	8009bf0 <_dtoa_r+0xaa8>
 8009ccc:	d102      	bne.n	8009cd4 <_dtoa_r+0xb8c>
 8009cce:	f01a 0f01 	tst.w	sl, #1
 8009cd2:	d18d      	bne.n	8009bf0 <_dtoa_r+0xaa8>
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	461d      	mov	r5, r3
 8009cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cdc:	2a30      	cmp	r2, #48	; 0x30
 8009cde:	d0fa      	beq.n	8009cd6 <_dtoa_r+0xb8e>
 8009ce0:	e6d7      	b.n	8009a92 <_dtoa_r+0x94a>
 8009ce2:	9a01      	ldr	r2, [sp, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d184      	bne.n	8009bf2 <_dtoa_r+0xaaa>
 8009ce8:	9b00      	ldr	r3, [sp, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	2331      	movs	r3, #49	; 0x31
 8009cf0:	7013      	strb	r3, [r2, #0]
 8009cf2:	e6ce      	b.n	8009a92 <_dtoa_r+0x94a>
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <_dtoa_r+0xbd4>)
 8009cf6:	f7ff ba95 	b.w	8009224 <_dtoa_r+0xdc>
 8009cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f47f aa6e 	bne.w	80091de <_dtoa_r+0x96>
 8009d02:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <_dtoa_r+0xbd8>)
 8009d04:	f7ff ba8e 	b.w	8009224 <_dtoa_r+0xdc>
 8009d08:	9b02      	ldr	r3, [sp, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dcae      	bgt.n	8009c6c <_dtoa_r+0xb24>
 8009d0e:	9b06      	ldr	r3, [sp, #24]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	f73f aea8 	bgt.w	8009a66 <_dtoa_r+0x91e>
 8009d16:	e7a9      	b.n	8009c6c <_dtoa_r+0xb24>
 8009d18:	0800cb0f 	.word	0x0800cb0f
 8009d1c:	0800ca6c 	.word	0x0800ca6c
 8009d20:	0800ca90 	.word	0x0800ca90

08009d24 <__sflush_r>:
 8009d24:	898a      	ldrh	r2, [r1, #12]
 8009d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	0710      	lsls	r0, r2, #28
 8009d2e:	460c      	mov	r4, r1
 8009d30:	d458      	bmi.n	8009de4 <__sflush_r+0xc0>
 8009d32:	684b      	ldr	r3, [r1, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dc05      	bgt.n	8009d44 <__sflush_r+0x20>
 8009d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	dc02      	bgt.n	8009d44 <__sflush_r+0x20>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	d0f9      	beq.n	8009d3e <__sflush_r+0x1a>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d50:	682f      	ldr	r7, [r5, #0]
 8009d52:	602b      	str	r3, [r5, #0]
 8009d54:	d032      	beq.n	8009dbc <__sflush_r+0x98>
 8009d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	075a      	lsls	r2, r3, #29
 8009d5c:	d505      	bpl.n	8009d6a <__sflush_r+0x46>
 8009d5e:	6863      	ldr	r3, [r4, #4]
 8009d60:	1ac0      	subs	r0, r0, r3
 8009d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d64:	b10b      	cbz	r3, 8009d6a <__sflush_r+0x46>
 8009d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d68:	1ac0      	subs	r0, r0, r3
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d70:	6a21      	ldr	r1, [r4, #32]
 8009d72:	4628      	mov	r0, r5
 8009d74:	47b0      	blx	r6
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	d106      	bne.n	8009d8a <__sflush_r+0x66>
 8009d7c:	6829      	ldr	r1, [r5, #0]
 8009d7e:	291d      	cmp	r1, #29
 8009d80:	d82c      	bhi.n	8009ddc <__sflush_r+0xb8>
 8009d82:	4a2a      	ldr	r2, [pc, #168]	; (8009e2c <__sflush_r+0x108>)
 8009d84:	40ca      	lsrs	r2, r1
 8009d86:	07d6      	lsls	r6, r2, #31
 8009d88:	d528      	bpl.n	8009ddc <__sflush_r+0xb8>
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	6062      	str	r2, [r4, #4]
 8009d8e:	04d9      	lsls	r1, r3, #19
 8009d90:	6922      	ldr	r2, [r4, #16]
 8009d92:	6022      	str	r2, [r4, #0]
 8009d94:	d504      	bpl.n	8009da0 <__sflush_r+0x7c>
 8009d96:	1c42      	adds	r2, r0, #1
 8009d98:	d101      	bne.n	8009d9e <__sflush_r+0x7a>
 8009d9a:	682b      	ldr	r3, [r5, #0]
 8009d9c:	b903      	cbnz	r3, 8009da0 <__sflush_r+0x7c>
 8009d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8009da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da2:	602f      	str	r7, [r5, #0]
 8009da4:	2900      	cmp	r1, #0
 8009da6:	d0ca      	beq.n	8009d3e <__sflush_r+0x1a>
 8009da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d002      	beq.n	8009db6 <__sflush_r+0x92>
 8009db0:	4628      	mov	r0, r5
 8009db2:	f7fe fa95 	bl	80082e0 <_free_r>
 8009db6:	2000      	movs	r0, #0
 8009db8:	6360      	str	r0, [r4, #52]	; 0x34
 8009dba:	e7c1      	b.n	8009d40 <__sflush_r+0x1c>
 8009dbc:	6a21      	ldr	r1, [r4, #32]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b0      	blx	r6
 8009dc4:	1c41      	adds	r1, r0, #1
 8009dc6:	d1c7      	bne.n	8009d58 <__sflush_r+0x34>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0c4      	beq.n	8009d58 <__sflush_r+0x34>
 8009dce:	2b1d      	cmp	r3, #29
 8009dd0:	d001      	beq.n	8009dd6 <__sflush_r+0xb2>
 8009dd2:	2b16      	cmp	r3, #22
 8009dd4:	d101      	bne.n	8009dda <__sflush_r+0xb6>
 8009dd6:	602f      	str	r7, [r5, #0]
 8009dd8:	e7b1      	b.n	8009d3e <__sflush_r+0x1a>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	e7ad      	b.n	8009d40 <__sflush_r+0x1c>
 8009de4:	690f      	ldr	r7, [r1, #16]
 8009de6:	2f00      	cmp	r7, #0
 8009de8:	d0a9      	beq.n	8009d3e <__sflush_r+0x1a>
 8009dea:	0793      	lsls	r3, r2, #30
 8009dec:	680e      	ldr	r6, [r1, #0]
 8009dee:	bf08      	it	eq
 8009df0:	694b      	ldreq	r3, [r1, #20]
 8009df2:	600f      	str	r7, [r1, #0]
 8009df4:	bf18      	it	ne
 8009df6:	2300      	movne	r3, #0
 8009df8:	eba6 0807 	sub.w	r8, r6, r7
 8009dfc:	608b      	str	r3, [r1, #8]
 8009dfe:	f1b8 0f00 	cmp.w	r8, #0
 8009e02:	dd9c      	ble.n	8009d3e <__sflush_r+0x1a>
 8009e04:	6a21      	ldr	r1, [r4, #32]
 8009e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e08:	4643      	mov	r3, r8
 8009e0a:	463a      	mov	r2, r7
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b0      	blx	r6
 8009e10:	2800      	cmp	r0, #0
 8009e12:	dc06      	bgt.n	8009e22 <__sflush_r+0xfe>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	e78e      	b.n	8009d40 <__sflush_r+0x1c>
 8009e22:	4407      	add	r7, r0
 8009e24:	eba8 0800 	sub.w	r8, r8, r0
 8009e28:	e7e9      	b.n	8009dfe <__sflush_r+0xda>
 8009e2a:	bf00      	nop
 8009e2c:	20400001 	.word	0x20400001

08009e30 <_fflush_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	690b      	ldr	r3, [r1, #16]
 8009e34:	4605      	mov	r5, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	b913      	cbnz	r3, 8009e40 <_fflush_r+0x10>
 8009e3a:	2500      	movs	r5, #0
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	b118      	cbz	r0, 8009e4a <_fflush_r+0x1a>
 8009e42:	6983      	ldr	r3, [r0, #24]
 8009e44:	b90b      	cbnz	r3, 8009e4a <_fflush_r+0x1a>
 8009e46:	f000 f887 	bl	8009f58 <__sinit>
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <_fflush_r+0x6c>)
 8009e4c:	429c      	cmp	r4, r3
 8009e4e:	d11b      	bne.n	8009e88 <_fflush_r+0x58>
 8009e50:	686c      	ldr	r4, [r5, #4]
 8009e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0ef      	beq.n	8009e3a <_fflush_r+0xa>
 8009e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e5c:	07d0      	lsls	r0, r2, #31
 8009e5e:	d404      	bmi.n	8009e6a <_fflush_r+0x3a>
 8009e60:	0599      	lsls	r1, r3, #22
 8009e62:	d402      	bmi.n	8009e6a <_fflush_r+0x3a>
 8009e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e66:	f000 f91a 	bl	800a09e <__retarget_lock_acquire_recursive>
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	f7ff ff59 	bl	8009d24 <__sflush_r>
 8009e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e74:	07da      	lsls	r2, r3, #31
 8009e76:	4605      	mov	r5, r0
 8009e78:	d4e0      	bmi.n	8009e3c <_fflush_r+0xc>
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	059b      	lsls	r3, r3, #22
 8009e7e:	d4dd      	bmi.n	8009e3c <_fflush_r+0xc>
 8009e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e82:	f000 f90d 	bl	800a0a0 <__retarget_lock_release_recursive>
 8009e86:	e7d9      	b.n	8009e3c <_fflush_r+0xc>
 8009e88:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <_fflush_r+0x70>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	d101      	bne.n	8009e92 <_fflush_r+0x62>
 8009e8e:	68ac      	ldr	r4, [r5, #8]
 8009e90:	e7df      	b.n	8009e52 <_fflush_r+0x22>
 8009e92:	4b04      	ldr	r3, [pc, #16]	; (8009ea4 <_fflush_r+0x74>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	bf08      	it	eq
 8009e98:	68ec      	ldreq	r4, [r5, #12]
 8009e9a:	e7da      	b.n	8009e52 <_fflush_r+0x22>
 8009e9c:	0800cb40 	.word	0x0800cb40
 8009ea0:	0800cb60 	.word	0x0800cb60
 8009ea4:	0800cb20 	.word	0x0800cb20

08009ea8 <std>:
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	4604      	mov	r4, r0
 8009eae:	e9c0 3300 	strd	r3, r3, [r0]
 8009eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eb6:	6083      	str	r3, [r0, #8]
 8009eb8:	8181      	strh	r1, [r0, #12]
 8009eba:	6643      	str	r3, [r0, #100]	; 0x64
 8009ebc:	81c2      	strh	r2, [r0, #14]
 8009ebe:	6183      	str	r3, [r0, #24]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	2208      	movs	r2, #8
 8009ec4:	305c      	adds	r0, #92	; 0x5c
 8009ec6:	f7fe f9ed 	bl	80082a4 <memset>
 8009eca:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <std+0x38>)
 8009ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <std+0x3c>)
 8009ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ed2:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <std+0x40>)
 8009ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ed6:	4b05      	ldr	r3, [pc, #20]	; (8009eec <std+0x44>)
 8009ed8:	6224      	str	r4, [r4, #32]
 8009eda:	6323      	str	r3, [r4, #48]	; 0x30
 8009edc:	bd10      	pop	{r4, pc}
 8009ede:	bf00      	nop
 8009ee0:	0800ab5d 	.word	0x0800ab5d
 8009ee4:	0800ab7f 	.word	0x0800ab7f
 8009ee8:	0800abb7 	.word	0x0800abb7
 8009eec:	0800abdb 	.word	0x0800abdb

08009ef0 <_cleanup_r>:
 8009ef0:	4901      	ldr	r1, [pc, #4]	; (8009ef8 <_cleanup_r+0x8>)
 8009ef2:	f000 b8af 	b.w	800a054 <_fwalk_reent>
 8009ef6:	bf00      	nop
 8009ef8:	08009e31 	.word	0x08009e31

08009efc <__sfmoreglue>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	2268      	movs	r2, #104	; 0x68
 8009f00:	1e4d      	subs	r5, r1, #1
 8009f02:	4355      	muls	r5, r2
 8009f04:	460e      	mov	r6, r1
 8009f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f0a:	f7fe fa55 	bl	80083b8 <_malloc_r>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	b140      	cbz	r0, 8009f24 <__sfmoreglue+0x28>
 8009f12:	2100      	movs	r1, #0
 8009f14:	e9c0 1600 	strd	r1, r6, [r0]
 8009f18:	300c      	adds	r0, #12
 8009f1a:	60a0      	str	r0, [r4, #8]
 8009f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f20:	f7fe f9c0 	bl	80082a4 <memset>
 8009f24:	4620      	mov	r0, r4
 8009f26:	bd70      	pop	{r4, r5, r6, pc}

08009f28 <__sfp_lock_acquire>:
 8009f28:	4801      	ldr	r0, [pc, #4]	; (8009f30 <__sfp_lock_acquire+0x8>)
 8009f2a:	f000 b8b8 	b.w	800a09e <__retarget_lock_acquire_recursive>
 8009f2e:	bf00      	nop
 8009f30:	20000631 	.word	0x20000631

08009f34 <__sfp_lock_release>:
 8009f34:	4801      	ldr	r0, [pc, #4]	; (8009f3c <__sfp_lock_release+0x8>)
 8009f36:	f000 b8b3 	b.w	800a0a0 <__retarget_lock_release_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	20000631 	.word	0x20000631

08009f40 <__sinit_lock_acquire>:
 8009f40:	4801      	ldr	r0, [pc, #4]	; (8009f48 <__sinit_lock_acquire+0x8>)
 8009f42:	f000 b8ac 	b.w	800a09e <__retarget_lock_acquire_recursive>
 8009f46:	bf00      	nop
 8009f48:	20000632 	.word	0x20000632

08009f4c <__sinit_lock_release>:
 8009f4c:	4801      	ldr	r0, [pc, #4]	; (8009f54 <__sinit_lock_release+0x8>)
 8009f4e:	f000 b8a7 	b.w	800a0a0 <__retarget_lock_release_recursive>
 8009f52:	bf00      	nop
 8009f54:	20000632 	.word	0x20000632

08009f58 <__sinit>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	f7ff fff0 	bl	8009f40 <__sinit_lock_acquire>
 8009f60:	69a3      	ldr	r3, [r4, #24]
 8009f62:	b11b      	cbz	r3, 8009f6c <__sinit+0x14>
 8009f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f68:	f7ff bff0 	b.w	8009f4c <__sinit_lock_release>
 8009f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f70:	6523      	str	r3, [r4, #80]	; 0x50
 8009f72:	4b13      	ldr	r3, [pc, #76]	; (8009fc0 <__sinit+0x68>)
 8009f74:	4a13      	ldr	r2, [pc, #76]	; (8009fc4 <__sinit+0x6c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	bf04      	itt	eq
 8009f7e:	2301      	moveq	r3, #1
 8009f80:	61a3      	streq	r3, [r4, #24]
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f820 	bl	8009fc8 <__sfp>
 8009f88:	6060      	str	r0, [r4, #4]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 f81c 	bl	8009fc8 <__sfp>
 8009f90:	60a0      	str	r0, [r4, #8]
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 f818 	bl	8009fc8 <__sfp>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	60e0      	str	r0, [r4, #12]
 8009f9c:	2104      	movs	r1, #4
 8009f9e:	6860      	ldr	r0, [r4, #4]
 8009fa0:	f7ff ff82 	bl	8009ea8 <std>
 8009fa4:	68a0      	ldr	r0, [r4, #8]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	2109      	movs	r1, #9
 8009faa:	f7ff ff7d 	bl	8009ea8 <std>
 8009fae:	68e0      	ldr	r0, [r4, #12]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	2112      	movs	r1, #18
 8009fb4:	f7ff ff78 	bl	8009ea8 <std>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	61a3      	str	r3, [r4, #24]
 8009fbc:	e7d2      	b.n	8009f64 <__sinit+0xc>
 8009fbe:	bf00      	nop
 8009fc0:	0800ca58 	.word	0x0800ca58
 8009fc4:	08009ef1 	.word	0x08009ef1

08009fc8 <__sfp>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	4607      	mov	r7, r0
 8009fcc:	f7ff ffac 	bl	8009f28 <__sfp_lock_acquire>
 8009fd0:	4b1e      	ldr	r3, [pc, #120]	; (800a04c <__sfp+0x84>)
 8009fd2:	681e      	ldr	r6, [r3, #0]
 8009fd4:	69b3      	ldr	r3, [r6, #24]
 8009fd6:	b913      	cbnz	r3, 8009fde <__sfp+0x16>
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f7ff ffbd 	bl	8009f58 <__sinit>
 8009fde:	3648      	adds	r6, #72	; 0x48
 8009fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	d503      	bpl.n	8009ff0 <__sfp+0x28>
 8009fe8:	6833      	ldr	r3, [r6, #0]
 8009fea:	b30b      	cbz	r3, 800a030 <__sfp+0x68>
 8009fec:	6836      	ldr	r6, [r6, #0]
 8009fee:	e7f7      	b.n	8009fe0 <__sfp+0x18>
 8009ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ff4:	b9d5      	cbnz	r5, 800a02c <__sfp+0x64>
 8009ff6:	4b16      	ldr	r3, [pc, #88]	; (800a050 <__sfp+0x88>)
 8009ff8:	60e3      	str	r3, [r4, #12]
 8009ffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ffe:	6665      	str	r5, [r4, #100]	; 0x64
 800a000:	f000 f84c 	bl	800a09c <__retarget_lock_init_recursive>
 800a004:	f7ff ff96 	bl	8009f34 <__sfp_lock_release>
 800a008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a010:	6025      	str	r5, [r4, #0]
 800a012:	61a5      	str	r5, [r4, #24]
 800a014:	2208      	movs	r2, #8
 800a016:	4629      	mov	r1, r5
 800a018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a01c:	f7fe f942 	bl	80082a4 <memset>
 800a020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a028:	4620      	mov	r0, r4
 800a02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02c:	3468      	adds	r4, #104	; 0x68
 800a02e:	e7d9      	b.n	8009fe4 <__sfp+0x1c>
 800a030:	2104      	movs	r1, #4
 800a032:	4638      	mov	r0, r7
 800a034:	f7ff ff62 	bl	8009efc <__sfmoreglue>
 800a038:	4604      	mov	r4, r0
 800a03a:	6030      	str	r0, [r6, #0]
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d1d5      	bne.n	8009fec <__sfp+0x24>
 800a040:	f7ff ff78 	bl	8009f34 <__sfp_lock_release>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	e7ee      	b.n	800a028 <__sfp+0x60>
 800a04a:	bf00      	nop
 800a04c:	0800ca58 	.word	0x0800ca58
 800a050:	ffff0001 	.word	0xffff0001

0800a054 <_fwalk_reent>:
 800a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a058:	4606      	mov	r6, r0
 800a05a:	4688      	mov	r8, r1
 800a05c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a060:	2700      	movs	r7, #0
 800a062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a066:	f1b9 0901 	subs.w	r9, r9, #1
 800a06a:	d505      	bpl.n	800a078 <_fwalk_reent+0x24>
 800a06c:	6824      	ldr	r4, [r4, #0]
 800a06e:	2c00      	cmp	r4, #0
 800a070:	d1f7      	bne.n	800a062 <_fwalk_reent+0xe>
 800a072:	4638      	mov	r0, r7
 800a074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a078:	89ab      	ldrh	r3, [r5, #12]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d907      	bls.n	800a08e <_fwalk_reent+0x3a>
 800a07e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a082:	3301      	adds	r3, #1
 800a084:	d003      	beq.n	800a08e <_fwalk_reent+0x3a>
 800a086:	4629      	mov	r1, r5
 800a088:	4630      	mov	r0, r6
 800a08a:	47c0      	blx	r8
 800a08c:	4307      	orrs	r7, r0
 800a08e:	3568      	adds	r5, #104	; 0x68
 800a090:	e7e9      	b.n	800a066 <_fwalk_reent+0x12>
	...

0800a094 <_localeconv_r>:
 800a094:	4800      	ldr	r0, [pc, #0]	; (800a098 <_localeconv_r+0x4>)
 800a096:	4770      	bx	lr
 800a098:	20000160 	.word	0x20000160

0800a09c <__retarget_lock_init_recursive>:
 800a09c:	4770      	bx	lr

0800a09e <__retarget_lock_acquire_recursive>:
 800a09e:	4770      	bx	lr

0800a0a0 <__retarget_lock_release_recursive>:
 800a0a0:	4770      	bx	lr

0800a0a2 <__swhatbuf_r>:
 800a0a2:	b570      	push	{r4, r5, r6, lr}
 800a0a4:	460e      	mov	r6, r1
 800a0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0aa:	2900      	cmp	r1, #0
 800a0ac:	b096      	sub	sp, #88	; 0x58
 800a0ae:	4614      	mov	r4, r2
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	da08      	bge.n	800a0c6 <__swhatbuf_r+0x24>
 800a0b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	602a      	str	r2, [r5, #0]
 800a0bc:	061a      	lsls	r2, r3, #24
 800a0be:	d410      	bmi.n	800a0e2 <__swhatbuf_r+0x40>
 800a0c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0c4:	e00e      	b.n	800a0e4 <__swhatbuf_r+0x42>
 800a0c6:	466a      	mov	r2, sp
 800a0c8:	f000 fdde 	bl	800ac88 <_fstat_r>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	dbf1      	blt.n	800a0b4 <__swhatbuf_r+0x12>
 800a0d0:	9a01      	ldr	r2, [sp, #4]
 800a0d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0da:	425a      	negs	r2, r3
 800a0dc:	415a      	adcs	r2, r3
 800a0de:	602a      	str	r2, [r5, #0]
 800a0e0:	e7ee      	b.n	800a0c0 <__swhatbuf_r+0x1e>
 800a0e2:	2340      	movs	r3, #64	; 0x40
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	b016      	add	sp, #88	; 0x58
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}

0800a0ec <__smakebuf_r>:
 800a0ec:	898b      	ldrh	r3, [r1, #12]
 800a0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0f0:	079d      	lsls	r5, r3, #30
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	d507      	bpl.n	800a108 <__smakebuf_r+0x1c>
 800a0f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	2301      	movs	r3, #1
 800a102:	6163      	str	r3, [r4, #20]
 800a104:	b002      	add	sp, #8
 800a106:	bd70      	pop	{r4, r5, r6, pc}
 800a108:	ab01      	add	r3, sp, #4
 800a10a:	466a      	mov	r2, sp
 800a10c:	f7ff ffc9 	bl	800a0a2 <__swhatbuf_r>
 800a110:	9900      	ldr	r1, [sp, #0]
 800a112:	4605      	mov	r5, r0
 800a114:	4630      	mov	r0, r6
 800a116:	f7fe f94f 	bl	80083b8 <_malloc_r>
 800a11a:	b948      	cbnz	r0, 800a130 <__smakebuf_r+0x44>
 800a11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a120:	059a      	lsls	r2, r3, #22
 800a122:	d4ef      	bmi.n	800a104 <__smakebuf_r+0x18>
 800a124:	f023 0303 	bic.w	r3, r3, #3
 800a128:	f043 0302 	orr.w	r3, r3, #2
 800a12c:	81a3      	strh	r3, [r4, #12]
 800a12e:	e7e3      	b.n	800a0f8 <__smakebuf_r+0xc>
 800a130:	4b0d      	ldr	r3, [pc, #52]	; (800a168 <__smakebuf_r+0x7c>)
 800a132:	62b3      	str	r3, [r6, #40]	; 0x28
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	6020      	str	r0, [r4, #0]
 800a138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13c:	81a3      	strh	r3, [r4, #12]
 800a13e:	9b00      	ldr	r3, [sp, #0]
 800a140:	6163      	str	r3, [r4, #20]
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	6120      	str	r0, [r4, #16]
 800a146:	b15b      	cbz	r3, 800a160 <__smakebuf_r+0x74>
 800a148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a14c:	4630      	mov	r0, r6
 800a14e:	f000 fdad 	bl	800acac <_isatty_r>
 800a152:	b128      	cbz	r0, 800a160 <__smakebuf_r+0x74>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	f023 0303 	bic.w	r3, r3, #3
 800a15a:	f043 0301 	orr.w	r3, r3, #1
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	89a0      	ldrh	r0, [r4, #12]
 800a162:	4305      	orrs	r5, r0
 800a164:	81a5      	strh	r5, [r4, #12]
 800a166:	e7cd      	b.n	800a104 <__smakebuf_r+0x18>
 800a168:	08009ef1 	.word	0x08009ef1

0800a16c <memcpy>:
 800a16c:	440a      	add	r2, r1
 800a16e:	4291      	cmp	r1, r2
 800a170:	f100 33ff 	add.w	r3, r0, #4294967295
 800a174:	d100      	bne.n	800a178 <memcpy+0xc>
 800a176:	4770      	bx	lr
 800a178:	b510      	push	{r4, lr}
 800a17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a17e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a182:	4291      	cmp	r1, r2
 800a184:	d1f9      	bne.n	800a17a <memcpy+0xe>
 800a186:	bd10      	pop	{r4, pc}

0800a188 <__malloc_lock>:
 800a188:	4801      	ldr	r0, [pc, #4]	; (800a190 <__malloc_lock+0x8>)
 800a18a:	f7ff bf88 	b.w	800a09e <__retarget_lock_acquire_recursive>
 800a18e:	bf00      	nop
 800a190:	20000630 	.word	0x20000630

0800a194 <__malloc_unlock>:
 800a194:	4801      	ldr	r0, [pc, #4]	; (800a19c <__malloc_unlock+0x8>)
 800a196:	f7ff bf83 	b.w	800a0a0 <__retarget_lock_release_recursive>
 800a19a:	bf00      	nop
 800a19c:	20000630 	.word	0x20000630

0800a1a0 <_Balloc>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	460d      	mov	r5, r1
 800a1a8:	b976      	cbnz	r6, 800a1c8 <_Balloc+0x28>
 800a1aa:	2010      	movs	r0, #16
 800a1ac:	f7fe f872 	bl	8008294 <malloc>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	6260      	str	r0, [r4, #36]	; 0x24
 800a1b4:	b920      	cbnz	r0, 800a1c0 <_Balloc+0x20>
 800a1b6:	4b18      	ldr	r3, [pc, #96]	; (800a218 <_Balloc+0x78>)
 800a1b8:	4818      	ldr	r0, [pc, #96]	; (800a21c <_Balloc+0x7c>)
 800a1ba:	2166      	movs	r1, #102	; 0x66
 800a1bc:	f000 fd24 	bl	800ac08 <__assert_func>
 800a1c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1c4:	6006      	str	r6, [r0, #0]
 800a1c6:	60c6      	str	r6, [r0, #12]
 800a1c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1ca:	68f3      	ldr	r3, [r6, #12]
 800a1cc:	b183      	cbz	r3, 800a1f0 <_Balloc+0x50>
 800a1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1d6:	b9b8      	cbnz	r0, 800a208 <_Balloc+0x68>
 800a1d8:	2101      	movs	r1, #1
 800a1da:	fa01 f605 	lsl.w	r6, r1, r5
 800a1de:	1d72      	adds	r2, r6, #5
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f7fe f866 	bl	80082b4 <_calloc_r>
 800a1e8:	b160      	cbz	r0, 800a204 <_Balloc+0x64>
 800a1ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1ee:	e00e      	b.n	800a20e <_Balloc+0x6e>
 800a1f0:	2221      	movs	r2, #33	; 0x21
 800a1f2:	2104      	movs	r1, #4
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f7fe f85d 	bl	80082b4 <_calloc_r>
 800a1fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1fc:	60f0      	str	r0, [r6, #12]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e4      	bne.n	800a1ce <_Balloc+0x2e>
 800a204:	2000      	movs	r0, #0
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	6802      	ldr	r2, [r0, #0]
 800a20a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a20e:	2300      	movs	r3, #0
 800a210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a214:	e7f7      	b.n	800a206 <_Balloc+0x66>
 800a216:	bf00      	nop
 800a218:	0800ca9d 	.word	0x0800ca9d
 800a21c:	0800cb80 	.word	0x0800cb80

0800a220 <_Bfree>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a224:	4605      	mov	r5, r0
 800a226:	460c      	mov	r4, r1
 800a228:	b976      	cbnz	r6, 800a248 <_Bfree+0x28>
 800a22a:	2010      	movs	r0, #16
 800a22c:	f7fe f832 	bl	8008294 <malloc>
 800a230:	4602      	mov	r2, r0
 800a232:	6268      	str	r0, [r5, #36]	; 0x24
 800a234:	b920      	cbnz	r0, 800a240 <_Bfree+0x20>
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <_Bfree+0x3c>)
 800a238:	4809      	ldr	r0, [pc, #36]	; (800a260 <_Bfree+0x40>)
 800a23a:	218a      	movs	r1, #138	; 0x8a
 800a23c:	f000 fce4 	bl	800ac08 <__assert_func>
 800a240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a244:	6006      	str	r6, [r0, #0]
 800a246:	60c6      	str	r6, [r0, #12]
 800a248:	b13c      	cbz	r4, 800a25a <_Bfree+0x3a>
 800a24a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a24c:	6862      	ldr	r2, [r4, #4]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a254:	6021      	str	r1, [r4, #0]
 800a256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	0800ca9d 	.word	0x0800ca9d
 800a260:	0800cb80 	.word	0x0800cb80

0800a264 <__multadd>:
 800a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a268:	690d      	ldr	r5, [r1, #16]
 800a26a:	4607      	mov	r7, r0
 800a26c:	460c      	mov	r4, r1
 800a26e:	461e      	mov	r6, r3
 800a270:	f101 0c14 	add.w	ip, r1, #20
 800a274:	2000      	movs	r0, #0
 800a276:	f8dc 3000 	ldr.w	r3, [ip]
 800a27a:	b299      	uxth	r1, r3
 800a27c:	fb02 6101 	mla	r1, r2, r1, r6
 800a280:	0c1e      	lsrs	r6, r3, #16
 800a282:	0c0b      	lsrs	r3, r1, #16
 800a284:	fb02 3306 	mla	r3, r2, r6, r3
 800a288:	b289      	uxth	r1, r1
 800a28a:	3001      	adds	r0, #1
 800a28c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a290:	4285      	cmp	r5, r0
 800a292:	f84c 1b04 	str.w	r1, [ip], #4
 800a296:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a29a:	dcec      	bgt.n	800a276 <__multadd+0x12>
 800a29c:	b30e      	cbz	r6, 800a2e2 <__multadd+0x7e>
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	42ab      	cmp	r3, r5
 800a2a2:	dc19      	bgt.n	800a2d8 <__multadd+0x74>
 800a2a4:	6861      	ldr	r1, [r4, #4]
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	3101      	adds	r1, #1
 800a2aa:	f7ff ff79 	bl	800a1a0 <_Balloc>
 800a2ae:	4680      	mov	r8, r0
 800a2b0:	b928      	cbnz	r0, 800a2be <__multadd+0x5a>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	4b0c      	ldr	r3, [pc, #48]	; (800a2e8 <__multadd+0x84>)
 800a2b6:	480d      	ldr	r0, [pc, #52]	; (800a2ec <__multadd+0x88>)
 800a2b8:	21b5      	movs	r1, #181	; 0xb5
 800a2ba:	f000 fca5 	bl	800ac08 <__assert_func>
 800a2be:	6922      	ldr	r2, [r4, #16]
 800a2c0:	3202      	adds	r2, #2
 800a2c2:	f104 010c 	add.w	r1, r4, #12
 800a2c6:	0092      	lsls	r2, r2, #2
 800a2c8:	300c      	adds	r0, #12
 800a2ca:	f7ff ff4f 	bl	800a16c <memcpy>
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7ff ffa5 	bl	800a220 <_Bfree>
 800a2d6:	4644      	mov	r4, r8
 800a2d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2dc:	3501      	adds	r5, #1
 800a2de:	615e      	str	r6, [r3, #20]
 800a2e0:	6125      	str	r5, [r4, #16]
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e8:	0800cb0f 	.word	0x0800cb0f
 800a2ec:	0800cb80 	.word	0x0800cb80

0800a2f0 <__hi0bits>:
 800a2f0:	0c03      	lsrs	r3, r0, #16
 800a2f2:	041b      	lsls	r3, r3, #16
 800a2f4:	b9d3      	cbnz	r3, 800a32c <__hi0bits+0x3c>
 800a2f6:	0400      	lsls	r0, r0, #16
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2fe:	bf04      	itt	eq
 800a300:	0200      	lsleq	r0, r0, #8
 800a302:	3308      	addeq	r3, #8
 800a304:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a308:	bf04      	itt	eq
 800a30a:	0100      	lsleq	r0, r0, #4
 800a30c:	3304      	addeq	r3, #4
 800a30e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a312:	bf04      	itt	eq
 800a314:	0080      	lsleq	r0, r0, #2
 800a316:	3302      	addeq	r3, #2
 800a318:	2800      	cmp	r0, #0
 800a31a:	db05      	blt.n	800a328 <__hi0bits+0x38>
 800a31c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a320:	f103 0301 	add.w	r3, r3, #1
 800a324:	bf08      	it	eq
 800a326:	2320      	moveq	r3, #32
 800a328:	4618      	mov	r0, r3
 800a32a:	4770      	bx	lr
 800a32c:	2300      	movs	r3, #0
 800a32e:	e7e4      	b.n	800a2fa <__hi0bits+0xa>

0800a330 <__lo0bits>:
 800a330:	6803      	ldr	r3, [r0, #0]
 800a332:	f013 0207 	ands.w	r2, r3, #7
 800a336:	4601      	mov	r1, r0
 800a338:	d00b      	beq.n	800a352 <__lo0bits+0x22>
 800a33a:	07da      	lsls	r2, r3, #31
 800a33c:	d423      	bmi.n	800a386 <__lo0bits+0x56>
 800a33e:	0798      	lsls	r0, r3, #30
 800a340:	bf49      	itett	mi
 800a342:	085b      	lsrmi	r3, r3, #1
 800a344:	089b      	lsrpl	r3, r3, #2
 800a346:	2001      	movmi	r0, #1
 800a348:	600b      	strmi	r3, [r1, #0]
 800a34a:	bf5c      	itt	pl
 800a34c:	600b      	strpl	r3, [r1, #0]
 800a34e:	2002      	movpl	r0, #2
 800a350:	4770      	bx	lr
 800a352:	b298      	uxth	r0, r3
 800a354:	b9a8      	cbnz	r0, 800a382 <__lo0bits+0x52>
 800a356:	0c1b      	lsrs	r3, r3, #16
 800a358:	2010      	movs	r0, #16
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	b90a      	cbnz	r2, 800a362 <__lo0bits+0x32>
 800a35e:	3008      	adds	r0, #8
 800a360:	0a1b      	lsrs	r3, r3, #8
 800a362:	071a      	lsls	r2, r3, #28
 800a364:	bf04      	itt	eq
 800a366:	091b      	lsreq	r3, r3, #4
 800a368:	3004      	addeq	r0, #4
 800a36a:	079a      	lsls	r2, r3, #30
 800a36c:	bf04      	itt	eq
 800a36e:	089b      	lsreq	r3, r3, #2
 800a370:	3002      	addeq	r0, #2
 800a372:	07da      	lsls	r2, r3, #31
 800a374:	d403      	bmi.n	800a37e <__lo0bits+0x4e>
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	f100 0001 	add.w	r0, r0, #1
 800a37c:	d005      	beq.n	800a38a <__lo0bits+0x5a>
 800a37e:	600b      	str	r3, [r1, #0]
 800a380:	4770      	bx	lr
 800a382:	4610      	mov	r0, r2
 800a384:	e7e9      	b.n	800a35a <__lo0bits+0x2a>
 800a386:	2000      	movs	r0, #0
 800a388:	4770      	bx	lr
 800a38a:	2020      	movs	r0, #32
 800a38c:	4770      	bx	lr
	...

0800a390 <__i2b>:
 800a390:	b510      	push	{r4, lr}
 800a392:	460c      	mov	r4, r1
 800a394:	2101      	movs	r1, #1
 800a396:	f7ff ff03 	bl	800a1a0 <_Balloc>
 800a39a:	4602      	mov	r2, r0
 800a39c:	b928      	cbnz	r0, 800a3aa <__i2b+0x1a>
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <__i2b+0x24>)
 800a3a0:	4805      	ldr	r0, [pc, #20]	; (800a3b8 <__i2b+0x28>)
 800a3a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3a6:	f000 fc2f 	bl	800ac08 <__assert_func>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	6144      	str	r4, [r0, #20]
 800a3ae:	6103      	str	r3, [r0, #16]
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	bf00      	nop
 800a3b4:	0800cb0f 	.word	0x0800cb0f
 800a3b8:	0800cb80 	.word	0x0800cb80

0800a3bc <__multiply>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	4691      	mov	r9, r2
 800a3c2:	690a      	ldr	r2, [r1, #16]
 800a3c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	bfb8      	it	lt
 800a3cc:	460b      	movlt	r3, r1
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	bfbc      	itt	lt
 800a3d2:	464c      	movlt	r4, r9
 800a3d4:	4699      	movlt	r9, r3
 800a3d6:	6927      	ldr	r7, [r4, #16]
 800a3d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3dc:	68a3      	ldr	r3, [r4, #8]
 800a3de:	6861      	ldr	r1, [r4, #4]
 800a3e0:	eb07 060a 	add.w	r6, r7, sl
 800a3e4:	42b3      	cmp	r3, r6
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	bfb8      	it	lt
 800a3ea:	3101      	addlt	r1, #1
 800a3ec:	f7ff fed8 	bl	800a1a0 <_Balloc>
 800a3f0:	b930      	cbnz	r0, 800a400 <__multiply+0x44>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4b44      	ldr	r3, [pc, #272]	; (800a508 <__multiply+0x14c>)
 800a3f6:	4845      	ldr	r0, [pc, #276]	; (800a50c <__multiply+0x150>)
 800a3f8:	f240 115d 	movw	r1, #349	; 0x15d
 800a3fc:	f000 fc04 	bl	800ac08 <__assert_func>
 800a400:	f100 0514 	add.w	r5, r0, #20
 800a404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a408:	462b      	mov	r3, r5
 800a40a:	2200      	movs	r2, #0
 800a40c:	4543      	cmp	r3, r8
 800a40e:	d321      	bcc.n	800a454 <__multiply+0x98>
 800a410:	f104 0314 	add.w	r3, r4, #20
 800a414:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a418:	f109 0314 	add.w	r3, r9, #20
 800a41c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a420:	9202      	str	r2, [sp, #8]
 800a422:	1b3a      	subs	r2, r7, r4
 800a424:	3a15      	subs	r2, #21
 800a426:	f022 0203 	bic.w	r2, r2, #3
 800a42a:	3204      	adds	r2, #4
 800a42c:	f104 0115 	add.w	r1, r4, #21
 800a430:	428f      	cmp	r7, r1
 800a432:	bf38      	it	cc
 800a434:	2204      	movcc	r2, #4
 800a436:	9201      	str	r2, [sp, #4]
 800a438:	9a02      	ldr	r2, [sp, #8]
 800a43a:	9303      	str	r3, [sp, #12]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d80c      	bhi.n	800a45a <__multiply+0x9e>
 800a440:	2e00      	cmp	r6, #0
 800a442:	dd03      	ble.n	800a44c <__multiply+0x90>
 800a444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d05a      	beq.n	800a502 <__multiply+0x146>
 800a44c:	6106      	str	r6, [r0, #16]
 800a44e:	b005      	add	sp, #20
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a454:	f843 2b04 	str.w	r2, [r3], #4
 800a458:	e7d8      	b.n	800a40c <__multiply+0x50>
 800a45a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a45e:	f1ba 0f00 	cmp.w	sl, #0
 800a462:	d024      	beq.n	800a4ae <__multiply+0xf2>
 800a464:	f104 0e14 	add.w	lr, r4, #20
 800a468:	46a9      	mov	r9, r5
 800a46a:	f04f 0c00 	mov.w	ip, #0
 800a46e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a472:	f8d9 1000 	ldr.w	r1, [r9]
 800a476:	fa1f fb82 	uxth.w	fp, r2
 800a47a:	b289      	uxth	r1, r1
 800a47c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a480:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a484:	f8d9 2000 	ldr.w	r2, [r9]
 800a488:	4461      	add	r1, ip
 800a48a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a48e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a492:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a496:	b289      	uxth	r1, r1
 800a498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a49c:	4577      	cmp	r7, lr
 800a49e:	f849 1b04 	str.w	r1, [r9], #4
 800a4a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4a6:	d8e2      	bhi.n	800a46e <__multiply+0xb2>
 800a4a8:	9a01      	ldr	r2, [sp, #4]
 800a4aa:	f845 c002 	str.w	ip, [r5, r2]
 800a4ae:	9a03      	ldr	r2, [sp, #12]
 800a4b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ba:	d020      	beq.n	800a4fe <__multiply+0x142>
 800a4bc:	6829      	ldr	r1, [r5, #0]
 800a4be:	f104 0c14 	add.w	ip, r4, #20
 800a4c2:	46ae      	mov	lr, r5
 800a4c4:	f04f 0a00 	mov.w	sl, #0
 800a4c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a4cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4d0:	fb09 220b 	mla	r2, r9, fp, r2
 800a4d4:	4492      	add	sl, r2
 800a4d6:	b289      	uxth	r1, r1
 800a4d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4dc:	f84e 1b04 	str.w	r1, [lr], #4
 800a4e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4e4:	f8be 1000 	ldrh.w	r1, [lr]
 800a4e8:	0c12      	lsrs	r2, r2, #16
 800a4ea:	fb09 1102 	mla	r1, r9, r2, r1
 800a4ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4f2:	4567      	cmp	r7, ip
 800a4f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4f8:	d8e6      	bhi.n	800a4c8 <__multiply+0x10c>
 800a4fa:	9a01      	ldr	r2, [sp, #4]
 800a4fc:	50a9      	str	r1, [r5, r2]
 800a4fe:	3504      	adds	r5, #4
 800a500:	e79a      	b.n	800a438 <__multiply+0x7c>
 800a502:	3e01      	subs	r6, #1
 800a504:	e79c      	b.n	800a440 <__multiply+0x84>
 800a506:	bf00      	nop
 800a508:	0800cb0f 	.word	0x0800cb0f
 800a50c:	0800cb80 	.word	0x0800cb80

0800a510 <__pow5mult>:
 800a510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a514:	4615      	mov	r5, r2
 800a516:	f012 0203 	ands.w	r2, r2, #3
 800a51a:	4606      	mov	r6, r0
 800a51c:	460f      	mov	r7, r1
 800a51e:	d007      	beq.n	800a530 <__pow5mult+0x20>
 800a520:	4c25      	ldr	r4, [pc, #148]	; (800a5b8 <__pow5mult+0xa8>)
 800a522:	3a01      	subs	r2, #1
 800a524:	2300      	movs	r3, #0
 800a526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a52a:	f7ff fe9b 	bl	800a264 <__multadd>
 800a52e:	4607      	mov	r7, r0
 800a530:	10ad      	asrs	r5, r5, #2
 800a532:	d03d      	beq.n	800a5b0 <__pow5mult+0xa0>
 800a534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a536:	b97c      	cbnz	r4, 800a558 <__pow5mult+0x48>
 800a538:	2010      	movs	r0, #16
 800a53a:	f7fd feab 	bl	8008294 <malloc>
 800a53e:	4602      	mov	r2, r0
 800a540:	6270      	str	r0, [r6, #36]	; 0x24
 800a542:	b928      	cbnz	r0, 800a550 <__pow5mult+0x40>
 800a544:	4b1d      	ldr	r3, [pc, #116]	; (800a5bc <__pow5mult+0xac>)
 800a546:	481e      	ldr	r0, [pc, #120]	; (800a5c0 <__pow5mult+0xb0>)
 800a548:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a54c:	f000 fb5c 	bl	800ac08 <__assert_func>
 800a550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a554:	6004      	str	r4, [r0, #0]
 800a556:	60c4      	str	r4, [r0, #12]
 800a558:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a55c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a560:	b94c      	cbnz	r4, 800a576 <__pow5mult+0x66>
 800a562:	f240 2171 	movw	r1, #625	; 0x271
 800a566:	4630      	mov	r0, r6
 800a568:	f7ff ff12 	bl	800a390 <__i2b>
 800a56c:	2300      	movs	r3, #0
 800a56e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a572:	4604      	mov	r4, r0
 800a574:	6003      	str	r3, [r0, #0]
 800a576:	f04f 0900 	mov.w	r9, #0
 800a57a:	07eb      	lsls	r3, r5, #31
 800a57c:	d50a      	bpl.n	800a594 <__pow5mult+0x84>
 800a57e:	4639      	mov	r1, r7
 800a580:	4622      	mov	r2, r4
 800a582:	4630      	mov	r0, r6
 800a584:	f7ff ff1a 	bl	800a3bc <__multiply>
 800a588:	4639      	mov	r1, r7
 800a58a:	4680      	mov	r8, r0
 800a58c:	4630      	mov	r0, r6
 800a58e:	f7ff fe47 	bl	800a220 <_Bfree>
 800a592:	4647      	mov	r7, r8
 800a594:	106d      	asrs	r5, r5, #1
 800a596:	d00b      	beq.n	800a5b0 <__pow5mult+0xa0>
 800a598:	6820      	ldr	r0, [r4, #0]
 800a59a:	b938      	cbnz	r0, 800a5ac <__pow5mult+0x9c>
 800a59c:	4622      	mov	r2, r4
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7ff ff0b 	bl	800a3bc <__multiply>
 800a5a6:	6020      	str	r0, [r4, #0]
 800a5a8:	f8c0 9000 	str.w	r9, [r0]
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	e7e4      	b.n	800a57a <__pow5mult+0x6a>
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b6:	bf00      	nop
 800a5b8:	0800ccd0 	.word	0x0800ccd0
 800a5bc:	0800ca9d 	.word	0x0800ca9d
 800a5c0:	0800cb80 	.word	0x0800cb80

0800a5c4 <__lshift>:
 800a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	6849      	ldr	r1, [r1, #4]
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	4691      	mov	r9, r2
 800a5d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5dc:	f108 0601 	add.w	r6, r8, #1
 800a5e0:	42b3      	cmp	r3, r6
 800a5e2:	db0b      	blt.n	800a5fc <__lshift+0x38>
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7ff fddb 	bl	800a1a0 <_Balloc>
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	b948      	cbnz	r0, 800a602 <__lshift+0x3e>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	4b2a      	ldr	r3, [pc, #168]	; (800a69c <__lshift+0xd8>)
 800a5f2:	482b      	ldr	r0, [pc, #172]	; (800a6a0 <__lshift+0xdc>)
 800a5f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5f8:	f000 fb06 	bl	800ac08 <__assert_func>
 800a5fc:	3101      	adds	r1, #1
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	e7ee      	b.n	800a5e0 <__lshift+0x1c>
 800a602:	2300      	movs	r3, #0
 800a604:	f100 0114 	add.w	r1, r0, #20
 800a608:	f100 0210 	add.w	r2, r0, #16
 800a60c:	4618      	mov	r0, r3
 800a60e:	4553      	cmp	r3, sl
 800a610:	db37      	blt.n	800a682 <__lshift+0xbe>
 800a612:	6920      	ldr	r0, [r4, #16]
 800a614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a618:	f104 0314 	add.w	r3, r4, #20
 800a61c:	f019 091f 	ands.w	r9, r9, #31
 800a620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a624:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a628:	d02f      	beq.n	800a68a <__lshift+0xc6>
 800a62a:	f1c9 0e20 	rsb	lr, r9, #32
 800a62e:	468a      	mov	sl, r1
 800a630:	f04f 0c00 	mov.w	ip, #0
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	fa02 f209 	lsl.w	r2, r2, r9
 800a63a:	ea42 020c 	orr.w	r2, r2, ip
 800a63e:	f84a 2b04 	str.w	r2, [sl], #4
 800a642:	f853 2b04 	ldr.w	r2, [r3], #4
 800a646:	4298      	cmp	r0, r3
 800a648:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a64c:	d8f2      	bhi.n	800a634 <__lshift+0x70>
 800a64e:	1b03      	subs	r3, r0, r4
 800a650:	3b15      	subs	r3, #21
 800a652:	f023 0303 	bic.w	r3, r3, #3
 800a656:	3304      	adds	r3, #4
 800a658:	f104 0215 	add.w	r2, r4, #21
 800a65c:	4290      	cmp	r0, r2
 800a65e:	bf38      	it	cc
 800a660:	2304      	movcc	r3, #4
 800a662:	f841 c003 	str.w	ip, [r1, r3]
 800a666:	f1bc 0f00 	cmp.w	ip, #0
 800a66a:	d001      	beq.n	800a670 <__lshift+0xac>
 800a66c:	f108 0602 	add.w	r6, r8, #2
 800a670:	3e01      	subs	r6, #1
 800a672:	4638      	mov	r0, r7
 800a674:	612e      	str	r6, [r5, #16]
 800a676:	4621      	mov	r1, r4
 800a678:	f7ff fdd2 	bl	800a220 <_Bfree>
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	f842 0f04 	str.w	r0, [r2, #4]!
 800a686:	3301      	adds	r3, #1
 800a688:	e7c1      	b.n	800a60e <__lshift+0x4a>
 800a68a:	3904      	subs	r1, #4
 800a68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a690:	f841 2f04 	str.w	r2, [r1, #4]!
 800a694:	4298      	cmp	r0, r3
 800a696:	d8f9      	bhi.n	800a68c <__lshift+0xc8>
 800a698:	e7ea      	b.n	800a670 <__lshift+0xac>
 800a69a:	bf00      	nop
 800a69c:	0800cb0f 	.word	0x0800cb0f
 800a6a0:	0800cb80 	.word	0x0800cb80

0800a6a4 <__mcmp>:
 800a6a4:	b530      	push	{r4, r5, lr}
 800a6a6:	6902      	ldr	r2, [r0, #16]
 800a6a8:	690c      	ldr	r4, [r1, #16]
 800a6aa:	1b12      	subs	r2, r2, r4
 800a6ac:	d10e      	bne.n	800a6cc <__mcmp+0x28>
 800a6ae:	f100 0314 	add.w	r3, r0, #20
 800a6b2:	3114      	adds	r1, #20
 800a6b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6c4:	42a5      	cmp	r5, r4
 800a6c6:	d003      	beq.n	800a6d0 <__mcmp+0x2c>
 800a6c8:	d305      	bcc.n	800a6d6 <__mcmp+0x32>
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	bd30      	pop	{r4, r5, pc}
 800a6d0:	4283      	cmp	r3, r0
 800a6d2:	d3f3      	bcc.n	800a6bc <__mcmp+0x18>
 800a6d4:	e7fa      	b.n	800a6cc <__mcmp+0x28>
 800a6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6da:	e7f7      	b.n	800a6cc <__mcmp+0x28>

0800a6dc <__mdiff>:
 800a6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	4690      	mov	r8, r2
 800a6ea:	f7ff ffdb 	bl	800a6a4 <__mcmp>
 800a6ee:	1e05      	subs	r5, r0, #0
 800a6f0:	d110      	bne.n	800a714 <__mdiff+0x38>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7ff fd53 	bl	800a1a0 <_Balloc>
 800a6fa:	b930      	cbnz	r0, 800a70a <__mdiff+0x2e>
 800a6fc:	4b3a      	ldr	r3, [pc, #232]	; (800a7e8 <__mdiff+0x10c>)
 800a6fe:	4602      	mov	r2, r0
 800a700:	f240 2132 	movw	r1, #562	; 0x232
 800a704:	4839      	ldr	r0, [pc, #228]	; (800a7ec <__mdiff+0x110>)
 800a706:	f000 fa7f 	bl	800ac08 <__assert_func>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a714:	bfa4      	itt	ge
 800a716:	4643      	movge	r3, r8
 800a718:	46a0      	movge	r8, r4
 800a71a:	4630      	mov	r0, r6
 800a71c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a720:	bfa6      	itte	ge
 800a722:	461c      	movge	r4, r3
 800a724:	2500      	movge	r5, #0
 800a726:	2501      	movlt	r5, #1
 800a728:	f7ff fd3a 	bl	800a1a0 <_Balloc>
 800a72c:	b920      	cbnz	r0, 800a738 <__mdiff+0x5c>
 800a72e:	4b2e      	ldr	r3, [pc, #184]	; (800a7e8 <__mdiff+0x10c>)
 800a730:	4602      	mov	r2, r0
 800a732:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a736:	e7e5      	b.n	800a704 <__mdiff+0x28>
 800a738:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a73c:	6926      	ldr	r6, [r4, #16]
 800a73e:	60c5      	str	r5, [r0, #12]
 800a740:	f104 0914 	add.w	r9, r4, #20
 800a744:	f108 0514 	add.w	r5, r8, #20
 800a748:	f100 0e14 	add.w	lr, r0, #20
 800a74c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a750:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a754:	f108 0210 	add.w	r2, r8, #16
 800a758:	46f2      	mov	sl, lr
 800a75a:	2100      	movs	r1, #0
 800a75c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a760:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a764:	fa1f f883 	uxth.w	r8, r3
 800a768:	fa11 f18b 	uxtah	r1, r1, fp
 800a76c:	0c1b      	lsrs	r3, r3, #16
 800a76e:	eba1 0808 	sub.w	r8, r1, r8
 800a772:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a776:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a77a:	fa1f f888 	uxth.w	r8, r8
 800a77e:	1419      	asrs	r1, r3, #16
 800a780:	454e      	cmp	r6, r9
 800a782:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a786:	f84a 3b04 	str.w	r3, [sl], #4
 800a78a:	d8e7      	bhi.n	800a75c <__mdiff+0x80>
 800a78c:	1b33      	subs	r3, r6, r4
 800a78e:	3b15      	subs	r3, #21
 800a790:	f023 0303 	bic.w	r3, r3, #3
 800a794:	3304      	adds	r3, #4
 800a796:	3415      	adds	r4, #21
 800a798:	42a6      	cmp	r6, r4
 800a79a:	bf38      	it	cc
 800a79c:	2304      	movcc	r3, #4
 800a79e:	441d      	add	r5, r3
 800a7a0:	4473      	add	r3, lr
 800a7a2:	469e      	mov	lr, r3
 800a7a4:	462e      	mov	r6, r5
 800a7a6:	4566      	cmp	r6, ip
 800a7a8:	d30e      	bcc.n	800a7c8 <__mdiff+0xec>
 800a7aa:	f10c 0203 	add.w	r2, ip, #3
 800a7ae:	1b52      	subs	r2, r2, r5
 800a7b0:	f022 0203 	bic.w	r2, r2, #3
 800a7b4:	3d03      	subs	r5, #3
 800a7b6:	45ac      	cmp	ip, r5
 800a7b8:	bf38      	it	cc
 800a7ba:	2200      	movcc	r2, #0
 800a7bc:	441a      	add	r2, r3
 800a7be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7c2:	b17b      	cbz	r3, 800a7e4 <__mdiff+0x108>
 800a7c4:	6107      	str	r7, [r0, #16]
 800a7c6:	e7a3      	b.n	800a710 <__mdiff+0x34>
 800a7c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7cc:	fa11 f288 	uxtah	r2, r1, r8
 800a7d0:	1414      	asrs	r4, r2, #16
 800a7d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7d6:	b292      	uxth	r2, r2
 800a7d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a7e0:	1421      	asrs	r1, r4, #16
 800a7e2:	e7e0      	b.n	800a7a6 <__mdiff+0xca>
 800a7e4:	3f01      	subs	r7, #1
 800a7e6:	e7ea      	b.n	800a7be <__mdiff+0xe2>
 800a7e8:	0800cb0f 	.word	0x0800cb0f
 800a7ec:	0800cb80 	.word	0x0800cb80

0800a7f0 <__d2b>:
 800a7f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	4689      	mov	r9, r1
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	ec57 6b10 	vmov	r6, r7, d0
 800a7fc:	4690      	mov	r8, r2
 800a7fe:	f7ff fccf 	bl	800a1a0 <_Balloc>
 800a802:	4604      	mov	r4, r0
 800a804:	b930      	cbnz	r0, 800a814 <__d2b+0x24>
 800a806:	4602      	mov	r2, r0
 800a808:	4b25      	ldr	r3, [pc, #148]	; (800a8a0 <__d2b+0xb0>)
 800a80a:	4826      	ldr	r0, [pc, #152]	; (800a8a4 <__d2b+0xb4>)
 800a80c:	f240 310a 	movw	r1, #778	; 0x30a
 800a810:	f000 f9fa 	bl	800ac08 <__assert_func>
 800a814:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a81c:	bb35      	cbnz	r5, 800a86c <__d2b+0x7c>
 800a81e:	2e00      	cmp	r6, #0
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	d028      	beq.n	800a876 <__d2b+0x86>
 800a824:	4668      	mov	r0, sp
 800a826:	9600      	str	r6, [sp, #0]
 800a828:	f7ff fd82 	bl	800a330 <__lo0bits>
 800a82c:	9900      	ldr	r1, [sp, #0]
 800a82e:	b300      	cbz	r0, 800a872 <__d2b+0x82>
 800a830:	9a01      	ldr	r2, [sp, #4]
 800a832:	f1c0 0320 	rsb	r3, r0, #32
 800a836:	fa02 f303 	lsl.w	r3, r2, r3
 800a83a:	430b      	orrs	r3, r1
 800a83c:	40c2      	lsrs	r2, r0
 800a83e:	6163      	str	r3, [r4, #20]
 800a840:	9201      	str	r2, [sp, #4]
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	61a3      	str	r3, [r4, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	bf14      	ite	ne
 800a84a:	2202      	movne	r2, #2
 800a84c:	2201      	moveq	r2, #1
 800a84e:	6122      	str	r2, [r4, #16]
 800a850:	b1d5      	cbz	r5, 800a888 <__d2b+0x98>
 800a852:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a856:	4405      	add	r5, r0
 800a858:	f8c9 5000 	str.w	r5, [r9]
 800a85c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a860:	f8c8 0000 	str.w	r0, [r8]
 800a864:	4620      	mov	r0, r4
 800a866:	b003      	add	sp, #12
 800a868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a86c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a870:	e7d5      	b.n	800a81e <__d2b+0x2e>
 800a872:	6161      	str	r1, [r4, #20]
 800a874:	e7e5      	b.n	800a842 <__d2b+0x52>
 800a876:	a801      	add	r0, sp, #4
 800a878:	f7ff fd5a 	bl	800a330 <__lo0bits>
 800a87c:	9b01      	ldr	r3, [sp, #4]
 800a87e:	6163      	str	r3, [r4, #20]
 800a880:	2201      	movs	r2, #1
 800a882:	6122      	str	r2, [r4, #16]
 800a884:	3020      	adds	r0, #32
 800a886:	e7e3      	b.n	800a850 <__d2b+0x60>
 800a888:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a88c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a890:	f8c9 0000 	str.w	r0, [r9]
 800a894:	6918      	ldr	r0, [r3, #16]
 800a896:	f7ff fd2b 	bl	800a2f0 <__hi0bits>
 800a89a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a89e:	e7df      	b.n	800a860 <__d2b+0x70>
 800a8a0:	0800cb0f 	.word	0x0800cb0f
 800a8a4:	0800cb80 	.word	0x0800cb80

0800a8a8 <__sfputc_r>:
 800a8a8:	6893      	ldr	r3, [r2, #8]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	b410      	push	{r4}
 800a8b0:	6093      	str	r3, [r2, #8]
 800a8b2:	da08      	bge.n	800a8c6 <__sfputc_r+0x1e>
 800a8b4:	6994      	ldr	r4, [r2, #24]
 800a8b6:	42a3      	cmp	r3, r4
 800a8b8:	db01      	blt.n	800a8be <__sfputc_r+0x16>
 800a8ba:	290a      	cmp	r1, #10
 800a8bc:	d103      	bne.n	800a8c6 <__sfputc_r+0x1e>
 800a8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8c2:	f7fe baf5 	b.w	8008eb0 <__swbuf_r>
 800a8c6:	6813      	ldr	r3, [r2, #0]
 800a8c8:	1c58      	adds	r0, r3, #1
 800a8ca:	6010      	str	r0, [r2, #0]
 800a8cc:	7019      	strb	r1, [r3, #0]
 800a8ce:	4608      	mov	r0, r1
 800a8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <__sfputs_r>:
 800a8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d8:	4606      	mov	r6, r0
 800a8da:	460f      	mov	r7, r1
 800a8dc:	4614      	mov	r4, r2
 800a8de:	18d5      	adds	r5, r2, r3
 800a8e0:	42ac      	cmp	r4, r5
 800a8e2:	d101      	bne.n	800a8e8 <__sfputs_r+0x12>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e007      	b.n	800a8f8 <__sfputs_r+0x22>
 800a8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ec:	463a      	mov	r2, r7
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ffda 	bl	800a8a8 <__sfputc_r>
 800a8f4:	1c43      	adds	r3, r0, #1
 800a8f6:	d1f3      	bne.n	800a8e0 <__sfputs_r+0xa>
 800a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8fc <_vfiprintf_r>:
 800a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	460d      	mov	r5, r1
 800a902:	b09d      	sub	sp, #116	; 0x74
 800a904:	4614      	mov	r4, r2
 800a906:	4698      	mov	r8, r3
 800a908:	4606      	mov	r6, r0
 800a90a:	b118      	cbz	r0, 800a914 <_vfiprintf_r+0x18>
 800a90c:	6983      	ldr	r3, [r0, #24]
 800a90e:	b90b      	cbnz	r3, 800a914 <_vfiprintf_r+0x18>
 800a910:	f7ff fb22 	bl	8009f58 <__sinit>
 800a914:	4b89      	ldr	r3, [pc, #548]	; (800ab3c <_vfiprintf_r+0x240>)
 800a916:	429d      	cmp	r5, r3
 800a918:	d11b      	bne.n	800a952 <_vfiprintf_r+0x56>
 800a91a:	6875      	ldr	r5, [r6, #4]
 800a91c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a91e:	07d9      	lsls	r1, r3, #31
 800a920:	d405      	bmi.n	800a92e <_vfiprintf_r+0x32>
 800a922:	89ab      	ldrh	r3, [r5, #12]
 800a924:	059a      	lsls	r2, r3, #22
 800a926:	d402      	bmi.n	800a92e <_vfiprintf_r+0x32>
 800a928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a92a:	f7ff fbb8 	bl	800a09e <__retarget_lock_acquire_recursive>
 800a92e:	89ab      	ldrh	r3, [r5, #12]
 800a930:	071b      	lsls	r3, r3, #28
 800a932:	d501      	bpl.n	800a938 <_vfiprintf_r+0x3c>
 800a934:	692b      	ldr	r3, [r5, #16]
 800a936:	b9eb      	cbnz	r3, 800a974 <_vfiprintf_r+0x78>
 800a938:	4629      	mov	r1, r5
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7fe fb0a 	bl	8008f54 <__swsetup_r>
 800a940:	b1c0      	cbz	r0, 800a974 <_vfiprintf_r+0x78>
 800a942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a944:	07dc      	lsls	r4, r3, #31
 800a946:	d50e      	bpl.n	800a966 <_vfiprintf_r+0x6a>
 800a948:	f04f 30ff 	mov.w	r0, #4294967295
 800a94c:	b01d      	add	sp, #116	; 0x74
 800a94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a952:	4b7b      	ldr	r3, [pc, #492]	; (800ab40 <_vfiprintf_r+0x244>)
 800a954:	429d      	cmp	r5, r3
 800a956:	d101      	bne.n	800a95c <_vfiprintf_r+0x60>
 800a958:	68b5      	ldr	r5, [r6, #8]
 800a95a:	e7df      	b.n	800a91c <_vfiprintf_r+0x20>
 800a95c:	4b79      	ldr	r3, [pc, #484]	; (800ab44 <_vfiprintf_r+0x248>)
 800a95e:	429d      	cmp	r5, r3
 800a960:	bf08      	it	eq
 800a962:	68f5      	ldreq	r5, [r6, #12]
 800a964:	e7da      	b.n	800a91c <_vfiprintf_r+0x20>
 800a966:	89ab      	ldrh	r3, [r5, #12]
 800a968:	0598      	lsls	r0, r3, #22
 800a96a:	d4ed      	bmi.n	800a948 <_vfiprintf_r+0x4c>
 800a96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a96e:	f7ff fb97 	bl	800a0a0 <__retarget_lock_release_recursive>
 800a972:	e7e9      	b.n	800a948 <_vfiprintf_r+0x4c>
 800a974:	2300      	movs	r3, #0
 800a976:	9309      	str	r3, [sp, #36]	; 0x24
 800a978:	2320      	movs	r3, #32
 800a97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a982:	2330      	movs	r3, #48	; 0x30
 800a984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab48 <_vfiprintf_r+0x24c>
 800a988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a98c:	f04f 0901 	mov.w	r9, #1
 800a990:	4623      	mov	r3, r4
 800a992:	469a      	mov	sl, r3
 800a994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a998:	b10a      	cbz	r2, 800a99e <_vfiprintf_r+0xa2>
 800a99a:	2a25      	cmp	r2, #37	; 0x25
 800a99c:	d1f9      	bne.n	800a992 <_vfiprintf_r+0x96>
 800a99e:	ebba 0b04 	subs.w	fp, sl, r4
 800a9a2:	d00b      	beq.n	800a9bc <_vfiprintf_r+0xc0>
 800a9a4:	465b      	mov	r3, fp
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff ff93 	bl	800a8d6 <__sfputs_r>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f000 80aa 	beq.w	800ab0a <_vfiprintf_r+0x20e>
 800a9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b8:	445a      	add	r2, fp
 800a9ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 80a2 	beq.w	800ab0a <_vfiprintf_r+0x20e>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9d0:	f10a 0a01 	add.w	sl, sl, #1
 800a9d4:	9304      	str	r3, [sp, #16]
 800a9d6:	9307      	str	r3, [sp, #28]
 800a9d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9dc:	931a      	str	r3, [sp, #104]	; 0x68
 800a9de:	4654      	mov	r4, sl
 800a9e0:	2205      	movs	r2, #5
 800a9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e6:	4858      	ldr	r0, [pc, #352]	; (800ab48 <_vfiprintf_r+0x24c>)
 800a9e8:	f7f5 fc1a 	bl	8000220 <memchr>
 800a9ec:	9a04      	ldr	r2, [sp, #16]
 800a9ee:	b9d8      	cbnz	r0, 800aa28 <_vfiprintf_r+0x12c>
 800a9f0:	06d1      	lsls	r1, r2, #27
 800a9f2:	bf44      	itt	mi
 800a9f4:	2320      	movmi	r3, #32
 800a9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9fa:	0713      	lsls	r3, r2, #28
 800a9fc:	bf44      	itt	mi
 800a9fe:	232b      	movmi	r3, #43	; 0x2b
 800aa00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa04:	f89a 3000 	ldrb.w	r3, [sl]
 800aa08:	2b2a      	cmp	r3, #42	; 0x2a
 800aa0a:	d015      	beq.n	800aa38 <_vfiprintf_r+0x13c>
 800aa0c:	9a07      	ldr	r2, [sp, #28]
 800aa0e:	4654      	mov	r4, sl
 800aa10:	2000      	movs	r0, #0
 800aa12:	f04f 0c0a 	mov.w	ip, #10
 800aa16:	4621      	mov	r1, r4
 800aa18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa1c:	3b30      	subs	r3, #48	; 0x30
 800aa1e:	2b09      	cmp	r3, #9
 800aa20:	d94e      	bls.n	800aac0 <_vfiprintf_r+0x1c4>
 800aa22:	b1b0      	cbz	r0, 800aa52 <_vfiprintf_r+0x156>
 800aa24:	9207      	str	r2, [sp, #28]
 800aa26:	e014      	b.n	800aa52 <_vfiprintf_r+0x156>
 800aa28:	eba0 0308 	sub.w	r3, r0, r8
 800aa2c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa30:	4313      	orrs	r3, r2
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	46a2      	mov	sl, r4
 800aa36:	e7d2      	b.n	800a9de <_vfiprintf_r+0xe2>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	1d19      	adds	r1, r3, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	9103      	str	r1, [sp, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bfbb      	ittet	lt
 800aa44:	425b      	neglt	r3, r3
 800aa46:	f042 0202 	orrlt.w	r2, r2, #2
 800aa4a:	9307      	strge	r3, [sp, #28]
 800aa4c:	9307      	strlt	r3, [sp, #28]
 800aa4e:	bfb8      	it	lt
 800aa50:	9204      	strlt	r2, [sp, #16]
 800aa52:	7823      	ldrb	r3, [r4, #0]
 800aa54:	2b2e      	cmp	r3, #46	; 0x2e
 800aa56:	d10c      	bne.n	800aa72 <_vfiprintf_r+0x176>
 800aa58:	7863      	ldrb	r3, [r4, #1]
 800aa5a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa5c:	d135      	bne.n	800aaca <_vfiprintf_r+0x1ce>
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	1d1a      	adds	r2, r3, #4
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	9203      	str	r2, [sp, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfb8      	it	lt
 800aa6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa6e:	3402      	adds	r4, #2
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab58 <_vfiprintf_r+0x25c>
 800aa76:	7821      	ldrb	r1, [r4, #0]
 800aa78:	2203      	movs	r2, #3
 800aa7a:	4650      	mov	r0, sl
 800aa7c:	f7f5 fbd0 	bl	8000220 <memchr>
 800aa80:	b140      	cbz	r0, 800aa94 <_vfiprintf_r+0x198>
 800aa82:	2340      	movs	r3, #64	; 0x40
 800aa84:	eba0 000a 	sub.w	r0, r0, sl
 800aa88:	fa03 f000 	lsl.w	r0, r3, r0
 800aa8c:	9b04      	ldr	r3, [sp, #16]
 800aa8e:	4303      	orrs	r3, r0
 800aa90:	3401      	adds	r4, #1
 800aa92:	9304      	str	r3, [sp, #16]
 800aa94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa98:	482c      	ldr	r0, [pc, #176]	; (800ab4c <_vfiprintf_r+0x250>)
 800aa9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa9e:	2206      	movs	r2, #6
 800aaa0:	f7f5 fbbe 	bl	8000220 <memchr>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d03f      	beq.n	800ab28 <_vfiprintf_r+0x22c>
 800aaa8:	4b29      	ldr	r3, [pc, #164]	; (800ab50 <_vfiprintf_r+0x254>)
 800aaaa:	bb1b      	cbnz	r3, 800aaf4 <_vfiprintf_r+0x1f8>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	3307      	adds	r3, #7
 800aab0:	f023 0307 	bic.w	r3, r3, #7
 800aab4:	3308      	adds	r3, #8
 800aab6:	9303      	str	r3, [sp, #12]
 800aab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaba:	443b      	add	r3, r7
 800aabc:	9309      	str	r3, [sp, #36]	; 0x24
 800aabe:	e767      	b.n	800a990 <_vfiprintf_r+0x94>
 800aac0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aac4:	460c      	mov	r4, r1
 800aac6:	2001      	movs	r0, #1
 800aac8:	e7a5      	b.n	800aa16 <_vfiprintf_r+0x11a>
 800aaca:	2300      	movs	r3, #0
 800aacc:	3401      	adds	r4, #1
 800aace:	9305      	str	r3, [sp, #20]
 800aad0:	4619      	mov	r1, r3
 800aad2:	f04f 0c0a 	mov.w	ip, #10
 800aad6:	4620      	mov	r0, r4
 800aad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aadc:	3a30      	subs	r2, #48	; 0x30
 800aade:	2a09      	cmp	r2, #9
 800aae0:	d903      	bls.n	800aaea <_vfiprintf_r+0x1ee>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0c5      	beq.n	800aa72 <_vfiprintf_r+0x176>
 800aae6:	9105      	str	r1, [sp, #20]
 800aae8:	e7c3      	b.n	800aa72 <_vfiprintf_r+0x176>
 800aaea:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaee:	4604      	mov	r4, r0
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e7f0      	b.n	800aad6 <_vfiprintf_r+0x1da>
 800aaf4:	ab03      	add	r3, sp, #12
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	462a      	mov	r2, r5
 800aafa:	4b16      	ldr	r3, [pc, #88]	; (800ab54 <_vfiprintf_r+0x258>)
 800aafc:	a904      	add	r1, sp, #16
 800aafe:	4630      	mov	r0, r6
 800ab00:	f7fd fd6e 	bl	80085e0 <_printf_float>
 800ab04:	4607      	mov	r7, r0
 800ab06:	1c78      	adds	r0, r7, #1
 800ab08:	d1d6      	bne.n	800aab8 <_vfiprintf_r+0x1bc>
 800ab0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab0c:	07d9      	lsls	r1, r3, #31
 800ab0e:	d405      	bmi.n	800ab1c <_vfiprintf_r+0x220>
 800ab10:	89ab      	ldrh	r3, [r5, #12]
 800ab12:	059a      	lsls	r2, r3, #22
 800ab14:	d402      	bmi.n	800ab1c <_vfiprintf_r+0x220>
 800ab16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab18:	f7ff fac2 	bl	800a0a0 <__retarget_lock_release_recursive>
 800ab1c:	89ab      	ldrh	r3, [r5, #12]
 800ab1e:	065b      	lsls	r3, r3, #25
 800ab20:	f53f af12 	bmi.w	800a948 <_vfiprintf_r+0x4c>
 800ab24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab26:	e711      	b.n	800a94c <_vfiprintf_r+0x50>
 800ab28:	ab03      	add	r3, sp, #12
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	462a      	mov	r2, r5
 800ab2e:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <_vfiprintf_r+0x258>)
 800ab30:	a904      	add	r1, sp, #16
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7fd fff8 	bl	8008b28 <_printf_i>
 800ab38:	e7e4      	b.n	800ab04 <_vfiprintf_r+0x208>
 800ab3a:	bf00      	nop
 800ab3c:	0800cb40 	.word	0x0800cb40
 800ab40:	0800cb60 	.word	0x0800cb60
 800ab44:	0800cb20 	.word	0x0800cb20
 800ab48:	0800ccdc 	.word	0x0800ccdc
 800ab4c:	0800cce6 	.word	0x0800cce6
 800ab50:	080085e1 	.word	0x080085e1
 800ab54:	0800a8d7 	.word	0x0800a8d7
 800ab58:	0800cce2 	.word	0x0800cce2

0800ab5c <__sread>:
 800ab5c:	b510      	push	{r4, lr}
 800ab5e:	460c      	mov	r4, r1
 800ab60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab64:	f000 f8d6 	bl	800ad14 <_read_r>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	bfab      	itete	ge
 800ab6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab70:	181b      	addge	r3, r3, r0
 800ab72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab76:	bfac      	ite	ge
 800ab78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab7a:	81a3      	strhlt	r3, [r4, #12]
 800ab7c:	bd10      	pop	{r4, pc}

0800ab7e <__swrite>:
 800ab7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab82:	461f      	mov	r7, r3
 800ab84:	898b      	ldrh	r3, [r1, #12]
 800ab86:	05db      	lsls	r3, r3, #23
 800ab88:	4605      	mov	r5, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	4616      	mov	r6, r2
 800ab8e:	d505      	bpl.n	800ab9c <__swrite+0x1e>
 800ab90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab94:	2302      	movs	r3, #2
 800ab96:	2200      	movs	r2, #0
 800ab98:	f000 f898 	bl	800accc <_lseek_r>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aba6:	81a3      	strh	r3, [r4, #12]
 800aba8:	4632      	mov	r2, r6
 800abaa:	463b      	mov	r3, r7
 800abac:	4628      	mov	r0, r5
 800abae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abb2:	f000 b817 	b.w	800abe4 <_write_r>

0800abb6 <__sseek>:
 800abb6:	b510      	push	{r4, lr}
 800abb8:	460c      	mov	r4, r1
 800abba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abbe:	f000 f885 	bl	800accc <_lseek_r>
 800abc2:	1c43      	adds	r3, r0, #1
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	bf15      	itete	ne
 800abc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800abca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abd2:	81a3      	strheq	r3, [r4, #12]
 800abd4:	bf18      	it	ne
 800abd6:	81a3      	strhne	r3, [r4, #12]
 800abd8:	bd10      	pop	{r4, pc}

0800abda <__sclose>:
 800abda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abde:	f000 b831 	b.w	800ac44 <_close_r>
	...

0800abe4 <_write_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4d07      	ldr	r5, [pc, #28]	; (800ac04 <_write_r+0x20>)
 800abe8:	4604      	mov	r4, r0
 800abea:	4608      	mov	r0, r1
 800abec:	4611      	mov	r1, r2
 800abee:	2200      	movs	r2, #0
 800abf0:	602a      	str	r2, [r5, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	f7f8 fbd4 	bl	80033a0 <_write>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_write_r+0x1e>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_write_r+0x1e>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	20000634 	.word	0x20000634

0800ac08 <__assert_func>:
 800ac08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac0a:	4614      	mov	r4, r2
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	4b09      	ldr	r3, [pc, #36]	; (800ac34 <__assert_func+0x2c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4605      	mov	r5, r0
 800ac14:	68d8      	ldr	r0, [r3, #12]
 800ac16:	b14c      	cbz	r4, 800ac2c <__assert_func+0x24>
 800ac18:	4b07      	ldr	r3, [pc, #28]	; (800ac38 <__assert_func+0x30>)
 800ac1a:	9100      	str	r1, [sp, #0]
 800ac1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac20:	4906      	ldr	r1, [pc, #24]	; (800ac3c <__assert_func+0x34>)
 800ac22:	462b      	mov	r3, r5
 800ac24:	f000 f81e 	bl	800ac64 <fiprintf>
 800ac28:	f000 f893 	bl	800ad52 <abort>
 800ac2c:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <__assert_func+0x38>)
 800ac2e:	461c      	mov	r4, r3
 800ac30:	e7f3      	b.n	800ac1a <__assert_func+0x12>
 800ac32:	bf00      	nop
 800ac34:	2000000c 	.word	0x2000000c
 800ac38:	0800cced 	.word	0x0800cced
 800ac3c:	0800ccfa 	.word	0x0800ccfa
 800ac40:	0800cd28 	.word	0x0800cd28

0800ac44 <_close_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d06      	ldr	r5, [pc, #24]	; (800ac60 <_close_r+0x1c>)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7f8 ff7d 	bl	8003b4e <_close>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_close_r+0x1a>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_close_r+0x1a>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	20000634 	.word	0x20000634

0800ac64 <fiprintf>:
 800ac64:	b40e      	push	{r1, r2, r3}
 800ac66:	b503      	push	{r0, r1, lr}
 800ac68:	4601      	mov	r1, r0
 800ac6a:	ab03      	add	r3, sp, #12
 800ac6c:	4805      	ldr	r0, [pc, #20]	; (800ac84 <fiprintf+0x20>)
 800ac6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac72:	6800      	ldr	r0, [r0, #0]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	f7ff fe41 	bl	800a8fc <_vfiprintf_r>
 800ac7a:	b002      	add	sp, #8
 800ac7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac80:	b003      	add	sp, #12
 800ac82:	4770      	bx	lr
 800ac84:	2000000c 	.word	0x2000000c

0800ac88 <_fstat_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d07      	ldr	r5, [pc, #28]	; (800aca8 <_fstat_r+0x20>)
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4604      	mov	r4, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	4611      	mov	r1, r2
 800ac94:	602b      	str	r3, [r5, #0]
 800ac96:	f7f8 ff66 	bl	8003b66 <_fstat>
 800ac9a:	1c43      	adds	r3, r0, #1
 800ac9c:	d102      	bne.n	800aca4 <_fstat_r+0x1c>
 800ac9e:	682b      	ldr	r3, [r5, #0]
 800aca0:	b103      	cbz	r3, 800aca4 <_fstat_r+0x1c>
 800aca2:	6023      	str	r3, [r4, #0]
 800aca4:	bd38      	pop	{r3, r4, r5, pc}
 800aca6:	bf00      	nop
 800aca8:	20000634 	.word	0x20000634

0800acac <_isatty_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4d06      	ldr	r5, [pc, #24]	; (800acc8 <_isatty_r+0x1c>)
 800acb0:	2300      	movs	r3, #0
 800acb2:	4604      	mov	r4, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	f7f8 ff65 	bl	8003b86 <_isatty>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_isatty_r+0x1a>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_isatty_r+0x1a>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20000634 	.word	0x20000634

0800accc <_lseek_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	; (800acec <_lseek_r+0x20>)
 800acd0:	4604      	mov	r4, r0
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7f8 ff5e 	bl	8003b9c <_lseek>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_lseek_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_lseek_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000634 	.word	0x20000634

0800acf0 <__ascii_mbtowc>:
 800acf0:	b082      	sub	sp, #8
 800acf2:	b901      	cbnz	r1, 800acf6 <__ascii_mbtowc+0x6>
 800acf4:	a901      	add	r1, sp, #4
 800acf6:	b142      	cbz	r2, 800ad0a <__ascii_mbtowc+0x1a>
 800acf8:	b14b      	cbz	r3, 800ad0e <__ascii_mbtowc+0x1e>
 800acfa:	7813      	ldrb	r3, [r2, #0]
 800acfc:	600b      	str	r3, [r1, #0]
 800acfe:	7812      	ldrb	r2, [r2, #0]
 800ad00:	1e10      	subs	r0, r2, #0
 800ad02:	bf18      	it	ne
 800ad04:	2001      	movne	r0, #1
 800ad06:	b002      	add	sp, #8
 800ad08:	4770      	bx	lr
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	e7fb      	b.n	800ad06 <__ascii_mbtowc+0x16>
 800ad0e:	f06f 0001 	mvn.w	r0, #1
 800ad12:	e7f8      	b.n	800ad06 <__ascii_mbtowc+0x16>

0800ad14 <_read_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	; (800ad34 <_read_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7f8 fef6 	bl	8003b14 <_read>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_read_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_read_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	20000634 	.word	0x20000634

0800ad38 <__ascii_wctomb>:
 800ad38:	b149      	cbz	r1, 800ad4e <__ascii_wctomb+0x16>
 800ad3a:	2aff      	cmp	r2, #255	; 0xff
 800ad3c:	bf85      	ittet	hi
 800ad3e:	238a      	movhi	r3, #138	; 0x8a
 800ad40:	6003      	strhi	r3, [r0, #0]
 800ad42:	700a      	strbls	r2, [r1, #0]
 800ad44:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad48:	bf98      	it	ls
 800ad4a:	2001      	movls	r0, #1
 800ad4c:	4770      	bx	lr
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4770      	bx	lr

0800ad52 <abort>:
 800ad52:	b508      	push	{r3, lr}
 800ad54:	2006      	movs	r0, #6
 800ad56:	f000 f82b 	bl	800adb0 <raise>
 800ad5a:	2001      	movs	r0, #1
 800ad5c:	f7f8 fed0 	bl	8003b00 <_exit>

0800ad60 <_raise_r>:
 800ad60:	291f      	cmp	r1, #31
 800ad62:	b538      	push	{r3, r4, r5, lr}
 800ad64:	4604      	mov	r4, r0
 800ad66:	460d      	mov	r5, r1
 800ad68:	d904      	bls.n	800ad74 <_raise_r+0x14>
 800ad6a:	2316      	movs	r3, #22
 800ad6c:	6003      	str	r3, [r0, #0]
 800ad6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad76:	b112      	cbz	r2, 800ad7e <_raise_r+0x1e>
 800ad78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad7c:	b94b      	cbnz	r3, 800ad92 <_raise_r+0x32>
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 f830 	bl	800ade4 <_getpid_r>
 800ad84:	462a      	mov	r2, r5
 800ad86:	4601      	mov	r1, r0
 800ad88:	4620      	mov	r0, r4
 800ad8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad8e:	f000 b817 	b.w	800adc0 <_kill_r>
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d00a      	beq.n	800adac <_raise_r+0x4c>
 800ad96:	1c59      	adds	r1, r3, #1
 800ad98:	d103      	bne.n	800ada2 <_raise_r+0x42>
 800ad9a:	2316      	movs	r3, #22
 800ad9c:	6003      	str	r3, [r0, #0]
 800ad9e:	2001      	movs	r0, #1
 800ada0:	e7e7      	b.n	800ad72 <_raise_r+0x12>
 800ada2:	2400      	movs	r4, #0
 800ada4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ada8:	4628      	mov	r0, r5
 800adaa:	4798      	blx	r3
 800adac:	2000      	movs	r0, #0
 800adae:	e7e0      	b.n	800ad72 <_raise_r+0x12>

0800adb0 <raise>:
 800adb0:	4b02      	ldr	r3, [pc, #8]	; (800adbc <raise+0xc>)
 800adb2:	4601      	mov	r1, r0
 800adb4:	6818      	ldr	r0, [r3, #0]
 800adb6:	f7ff bfd3 	b.w	800ad60 <_raise_r>
 800adba:	bf00      	nop
 800adbc:	2000000c 	.word	0x2000000c

0800adc0 <_kill_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	; (800ade0 <_kill_r+0x20>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	4611      	mov	r1, r2
 800adcc:	602b      	str	r3, [r5, #0]
 800adce:	f7f8 fe87 	bl	8003ae0 <_kill>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d102      	bne.n	800addc <_kill_r+0x1c>
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	b103      	cbz	r3, 800addc <_kill_r+0x1c>
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	bd38      	pop	{r3, r4, r5, pc}
 800adde:	bf00      	nop
 800ade0:	20000634 	.word	0x20000634

0800ade4 <_getpid_r>:
 800ade4:	f7f8 be74 	b.w	8003ad0 <_getpid>

0800ade8 <atan>:
 800ade8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	ec55 4b10 	vmov	r4, r5, d0
 800adf0:	4bc3      	ldr	r3, [pc, #780]	; (800b100 <atan+0x318>)
 800adf2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800adf6:	429e      	cmp	r6, r3
 800adf8:	46ab      	mov	fp, r5
 800adfa:	dd18      	ble.n	800ae2e <atan+0x46>
 800adfc:	4bc1      	ldr	r3, [pc, #772]	; (800b104 <atan+0x31c>)
 800adfe:	429e      	cmp	r6, r3
 800ae00:	dc01      	bgt.n	800ae06 <atan+0x1e>
 800ae02:	d109      	bne.n	800ae18 <atan+0x30>
 800ae04:	b144      	cbz	r4, 800ae18 <atan+0x30>
 800ae06:	4622      	mov	r2, r4
 800ae08:	462b      	mov	r3, r5
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	f7f5 fa5d 	bl	80002cc <__adddf3>
 800ae12:	4604      	mov	r4, r0
 800ae14:	460d      	mov	r5, r1
 800ae16:	e006      	b.n	800ae26 <atan+0x3e>
 800ae18:	f1bb 0f00 	cmp.w	fp, #0
 800ae1c:	f300 8131 	bgt.w	800b082 <atan+0x29a>
 800ae20:	a59b      	add	r5, pc, #620	; (adr r5, 800b090 <atan+0x2a8>)
 800ae22:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae26:	ec45 4b10 	vmov	d0, r4, r5
 800ae2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2e:	4bb6      	ldr	r3, [pc, #728]	; (800b108 <atan+0x320>)
 800ae30:	429e      	cmp	r6, r3
 800ae32:	dc14      	bgt.n	800ae5e <atan+0x76>
 800ae34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ae38:	429e      	cmp	r6, r3
 800ae3a:	dc0d      	bgt.n	800ae58 <atan+0x70>
 800ae3c:	a396      	add	r3, pc, #600	; (adr r3, 800b098 <atan+0x2b0>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	ee10 0a10 	vmov	r0, s0
 800ae46:	4629      	mov	r1, r5
 800ae48:	f7f5 fa40 	bl	80002cc <__adddf3>
 800ae4c:	4baf      	ldr	r3, [pc, #700]	; (800b10c <atan+0x324>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f7f5 fe82 	bl	8000b58 <__aeabi_dcmpgt>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d1e6      	bne.n	800ae26 <atan+0x3e>
 800ae58:	f04f 3aff 	mov.w	sl, #4294967295
 800ae5c:	e02b      	b.n	800aeb6 <atan+0xce>
 800ae5e:	f000 f9b7 	bl	800b1d0 <fabs>
 800ae62:	4bab      	ldr	r3, [pc, #684]	; (800b110 <atan+0x328>)
 800ae64:	429e      	cmp	r6, r3
 800ae66:	ec55 4b10 	vmov	r4, r5, d0
 800ae6a:	f300 80bf 	bgt.w	800afec <atan+0x204>
 800ae6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ae72:	429e      	cmp	r6, r3
 800ae74:	f300 80a0 	bgt.w	800afb8 <atan+0x1d0>
 800ae78:	ee10 2a10 	vmov	r2, s0
 800ae7c:	ee10 0a10 	vmov	r0, s0
 800ae80:	462b      	mov	r3, r5
 800ae82:	4629      	mov	r1, r5
 800ae84:	f7f5 fa22 	bl	80002cc <__adddf3>
 800ae88:	4ba0      	ldr	r3, [pc, #640]	; (800b10c <atan+0x324>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f7f5 fa1c 	bl	80002c8 <__aeabi_dsub>
 800ae90:	2200      	movs	r2, #0
 800ae92:	4606      	mov	r6, r0
 800ae94:	460f      	mov	r7, r1
 800ae96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f7f5 fa15 	bl	80002cc <__adddf3>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4630      	mov	r0, r6
 800aea8:	4639      	mov	r1, r7
 800aeaa:	f7f5 fcef 	bl	800088c <__aeabi_ddiv>
 800aeae:	f04f 0a00 	mov.w	sl, #0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	460d      	mov	r5, r1
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	462b      	mov	r3, r5
 800aeba:	4620      	mov	r0, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7f5 fbbb 	bl	8000638 <__aeabi_dmul>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4680      	mov	r8, r0
 800aec8:	4689      	mov	r9, r1
 800aeca:	f7f5 fbb5 	bl	8000638 <__aeabi_dmul>
 800aece:	a374      	add	r3, pc, #464	; (adr r3, 800b0a0 <atan+0x2b8>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	4606      	mov	r6, r0
 800aed6:	460f      	mov	r7, r1
 800aed8:	f7f5 fbae 	bl	8000638 <__aeabi_dmul>
 800aedc:	a372      	add	r3, pc, #456	; (adr r3, 800b0a8 <atan+0x2c0>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	f7f5 f9f3 	bl	80002cc <__adddf3>
 800aee6:	4632      	mov	r2, r6
 800aee8:	463b      	mov	r3, r7
 800aeea:	f7f5 fba5 	bl	8000638 <__aeabi_dmul>
 800aeee:	a370      	add	r3, pc, #448	; (adr r3, 800b0b0 <atan+0x2c8>)
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f7f5 f9ea 	bl	80002cc <__adddf3>
 800aef8:	4632      	mov	r2, r6
 800aefa:	463b      	mov	r3, r7
 800aefc:	f7f5 fb9c 	bl	8000638 <__aeabi_dmul>
 800af00:	a36d      	add	r3, pc, #436	; (adr r3, 800b0b8 <atan+0x2d0>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	f7f5 f9e1 	bl	80002cc <__adddf3>
 800af0a:	4632      	mov	r2, r6
 800af0c:	463b      	mov	r3, r7
 800af0e:	f7f5 fb93 	bl	8000638 <__aeabi_dmul>
 800af12:	a36b      	add	r3, pc, #428	; (adr r3, 800b0c0 <atan+0x2d8>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	f7f5 f9d8 	bl	80002cc <__adddf3>
 800af1c:	4632      	mov	r2, r6
 800af1e:	463b      	mov	r3, r7
 800af20:	f7f5 fb8a 	bl	8000638 <__aeabi_dmul>
 800af24:	a368      	add	r3, pc, #416	; (adr r3, 800b0c8 <atan+0x2e0>)
 800af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2a:	f7f5 f9cf 	bl	80002cc <__adddf3>
 800af2e:	4642      	mov	r2, r8
 800af30:	464b      	mov	r3, r9
 800af32:	f7f5 fb81 	bl	8000638 <__aeabi_dmul>
 800af36:	a366      	add	r3, pc, #408	; (adr r3, 800b0d0 <atan+0x2e8>)
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	4680      	mov	r8, r0
 800af3e:	4689      	mov	r9, r1
 800af40:	4630      	mov	r0, r6
 800af42:	4639      	mov	r1, r7
 800af44:	f7f5 fb78 	bl	8000638 <__aeabi_dmul>
 800af48:	a363      	add	r3, pc, #396	; (adr r3, 800b0d8 <atan+0x2f0>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7f5 f9bb 	bl	80002c8 <__aeabi_dsub>
 800af52:	4632      	mov	r2, r6
 800af54:	463b      	mov	r3, r7
 800af56:	f7f5 fb6f 	bl	8000638 <__aeabi_dmul>
 800af5a:	a361      	add	r3, pc, #388	; (adr r3, 800b0e0 <atan+0x2f8>)
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f7f5 f9b2 	bl	80002c8 <__aeabi_dsub>
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	f7f5 fb66 	bl	8000638 <__aeabi_dmul>
 800af6c:	a35e      	add	r3, pc, #376	; (adr r3, 800b0e8 <atan+0x300>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	f7f5 f9a9 	bl	80002c8 <__aeabi_dsub>
 800af76:	4632      	mov	r2, r6
 800af78:	463b      	mov	r3, r7
 800af7a:	f7f5 fb5d 	bl	8000638 <__aeabi_dmul>
 800af7e:	a35c      	add	r3, pc, #368	; (adr r3, 800b0f0 <atan+0x308>)
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	f7f5 f9a0 	bl	80002c8 <__aeabi_dsub>
 800af88:	4632      	mov	r2, r6
 800af8a:	463b      	mov	r3, r7
 800af8c:	f7f5 fb54 	bl	8000638 <__aeabi_dmul>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	4640      	mov	r0, r8
 800af96:	4649      	mov	r1, r9
 800af98:	f7f5 f998 	bl	80002cc <__adddf3>
 800af9c:	4622      	mov	r2, r4
 800af9e:	462b      	mov	r3, r5
 800afa0:	f7f5 fb4a 	bl	8000638 <__aeabi_dmul>
 800afa4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	d14b      	bne.n	800b046 <atan+0x25e>
 800afae:	4620      	mov	r0, r4
 800afb0:	4629      	mov	r1, r5
 800afb2:	f7f5 f989 	bl	80002c8 <__aeabi_dsub>
 800afb6:	e72c      	b.n	800ae12 <atan+0x2a>
 800afb8:	ee10 0a10 	vmov	r0, s0
 800afbc:	4b53      	ldr	r3, [pc, #332]	; (800b10c <atan+0x324>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 f981 	bl	80002c8 <__aeabi_dsub>
 800afc6:	4b51      	ldr	r3, [pc, #324]	; (800b10c <atan+0x324>)
 800afc8:	4606      	mov	r6, r0
 800afca:	460f      	mov	r7, r1
 800afcc:	2200      	movs	r2, #0
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f5 f97b 	bl	80002cc <__adddf3>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4630      	mov	r0, r6
 800afdc:	4639      	mov	r1, r7
 800afde:	f7f5 fc55 	bl	800088c <__aeabi_ddiv>
 800afe2:	f04f 0a01 	mov.w	sl, #1
 800afe6:	4604      	mov	r4, r0
 800afe8:	460d      	mov	r5, r1
 800afea:	e764      	b.n	800aeb6 <atan+0xce>
 800afec:	4b49      	ldr	r3, [pc, #292]	; (800b114 <atan+0x32c>)
 800afee:	429e      	cmp	r6, r3
 800aff0:	da1d      	bge.n	800b02e <atan+0x246>
 800aff2:	ee10 0a10 	vmov	r0, s0
 800aff6:	4b48      	ldr	r3, [pc, #288]	; (800b118 <atan+0x330>)
 800aff8:	2200      	movs	r2, #0
 800affa:	4629      	mov	r1, r5
 800affc:	f7f5 f964 	bl	80002c8 <__aeabi_dsub>
 800b000:	4b45      	ldr	r3, [pc, #276]	; (800b118 <atan+0x330>)
 800b002:	4606      	mov	r6, r0
 800b004:	460f      	mov	r7, r1
 800b006:	2200      	movs	r2, #0
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7f5 fb14 	bl	8000638 <__aeabi_dmul>
 800b010:	4b3e      	ldr	r3, [pc, #248]	; (800b10c <atan+0x324>)
 800b012:	2200      	movs	r2, #0
 800b014:	f7f5 f95a 	bl	80002cc <__adddf3>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 fc34 	bl	800088c <__aeabi_ddiv>
 800b024:	f04f 0a02 	mov.w	sl, #2
 800b028:	4604      	mov	r4, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	e743      	b.n	800aeb6 <atan+0xce>
 800b02e:	462b      	mov	r3, r5
 800b030:	ee10 2a10 	vmov	r2, s0
 800b034:	4939      	ldr	r1, [pc, #228]	; (800b11c <atan+0x334>)
 800b036:	2000      	movs	r0, #0
 800b038:	f7f5 fc28 	bl	800088c <__aeabi_ddiv>
 800b03c:	f04f 0a03 	mov.w	sl, #3
 800b040:	4604      	mov	r4, r0
 800b042:	460d      	mov	r5, r1
 800b044:	e737      	b.n	800aeb6 <atan+0xce>
 800b046:	4b36      	ldr	r3, [pc, #216]	; (800b120 <atan+0x338>)
 800b048:	4e36      	ldr	r6, [pc, #216]	; (800b124 <atan+0x33c>)
 800b04a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b04e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b052:	e9da 2300 	ldrd	r2, r3, [sl]
 800b056:	f7f5 f937 	bl	80002c8 <__aeabi_dsub>
 800b05a:	4622      	mov	r2, r4
 800b05c:	462b      	mov	r3, r5
 800b05e:	f7f5 f933 	bl	80002c8 <__aeabi_dsub>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b06a:	f7f5 f92d 	bl	80002c8 <__aeabi_dsub>
 800b06e:	f1bb 0f00 	cmp.w	fp, #0
 800b072:	4604      	mov	r4, r0
 800b074:	460d      	mov	r5, r1
 800b076:	f6bf aed6 	bge.w	800ae26 <atan+0x3e>
 800b07a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b07e:	461d      	mov	r5, r3
 800b080:	e6d1      	b.n	800ae26 <atan+0x3e>
 800b082:	a51d      	add	r5, pc, #116	; (adr r5, 800b0f8 <atan+0x310>)
 800b084:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b088:	e6cd      	b.n	800ae26 <atan+0x3e>
 800b08a:	bf00      	nop
 800b08c:	f3af 8000 	nop.w
 800b090:	54442d18 	.word	0x54442d18
 800b094:	bff921fb 	.word	0xbff921fb
 800b098:	8800759c 	.word	0x8800759c
 800b09c:	7e37e43c 	.word	0x7e37e43c
 800b0a0:	e322da11 	.word	0xe322da11
 800b0a4:	3f90ad3a 	.word	0x3f90ad3a
 800b0a8:	24760deb 	.word	0x24760deb
 800b0ac:	3fa97b4b 	.word	0x3fa97b4b
 800b0b0:	a0d03d51 	.word	0xa0d03d51
 800b0b4:	3fb10d66 	.word	0x3fb10d66
 800b0b8:	c54c206e 	.word	0xc54c206e
 800b0bc:	3fb745cd 	.word	0x3fb745cd
 800b0c0:	920083ff 	.word	0x920083ff
 800b0c4:	3fc24924 	.word	0x3fc24924
 800b0c8:	5555550d 	.word	0x5555550d
 800b0cc:	3fd55555 	.word	0x3fd55555
 800b0d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b0d4:	bfa2b444 	.word	0xbfa2b444
 800b0d8:	52defd9a 	.word	0x52defd9a
 800b0dc:	3fadde2d 	.word	0x3fadde2d
 800b0e0:	af749a6d 	.word	0xaf749a6d
 800b0e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b0e8:	fe231671 	.word	0xfe231671
 800b0ec:	3fbc71c6 	.word	0x3fbc71c6
 800b0f0:	9998ebc4 	.word	0x9998ebc4
 800b0f4:	3fc99999 	.word	0x3fc99999
 800b0f8:	54442d18 	.word	0x54442d18
 800b0fc:	3ff921fb 	.word	0x3ff921fb
 800b100:	440fffff 	.word	0x440fffff
 800b104:	7ff00000 	.word	0x7ff00000
 800b108:	3fdbffff 	.word	0x3fdbffff
 800b10c:	3ff00000 	.word	0x3ff00000
 800b110:	3ff2ffff 	.word	0x3ff2ffff
 800b114:	40038000 	.word	0x40038000
 800b118:	3ff80000 	.word	0x3ff80000
 800b11c:	bff00000 	.word	0xbff00000
 800b120:	0800ce58 	.word	0x0800ce58
 800b124:	0800ce38 	.word	0x0800ce38

0800b128 <cos>:
 800b128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b12a:	ec53 2b10 	vmov	r2, r3, d0
 800b12e:	4826      	ldr	r0, [pc, #152]	; (800b1c8 <cos+0xa0>)
 800b130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b134:	4281      	cmp	r1, r0
 800b136:	dc06      	bgt.n	800b146 <cos+0x1e>
 800b138:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b1c0 <cos+0x98>
 800b13c:	b005      	add	sp, #20
 800b13e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b142:	f000 bda1 	b.w	800bc88 <__kernel_cos>
 800b146:	4821      	ldr	r0, [pc, #132]	; (800b1cc <cos+0xa4>)
 800b148:	4281      	cmp	r1, r0
 800b14a:	dd09      	ble.n	800b160 <cos+0x38>
 800b14c:	ee10 0a10 	vmov	r0, s0
 800b150:	4619      	mov	r1, r3
 800b152:	f7f5 f8b9 	bl	80002c8 <__aeabi_dsub>
 800b156:	ec41 0b10 	vmov	d0, r0, r1
 800b15a:	b005      	add	sp, #20
 800b15c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b160:	4668      	mov	r0, sp
 800b162:	f000 fad1 	bl	800b708 <__ieee754_rem_pio2>
 800b166:	f000 0003 	and.w	r0, r0, #3
 800b16a:	2801      	cmp	r0, #1
 800b16c:	d00b      	beq.n	800b186 <cos+0x5e>
 800b16e:	2802      	cmp	r0, #2
 800b170:	d016      	beq.n	800b1a0 <cos+0x78>
 800b172:	b9e0      	cbnz	r0, 800b1ae <cos+0x86>
 800b174:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b178:	ed9d 0b00 	vldr	d0, [sp]
 800b17c:	f000 fd84 	bl	800bc88 <__kernel_cos>
 800b180:	ec51 0b10 	vmov	r0, r1, d0
 800b184:	e7e7      	b.n	800b156 <cos+0x2e>
 800b186:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b18a:	ed9d 0b00 	vldr	d0, [sp]
 800b18e:	f001 f993 	bl	800c4b8 <__kernel_sin>
 800b192:	ec53 2b10 	vmov	r2, r3, d0
 800b196:	ee10 0a10 	vmov	r0, s0
 800b19a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b19e:	e7da      	b.n	800b156 <cos+0x2e>
 800b1a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b1a4:	ed9d 0b00 	vldr	d0, [sp]
 800b1a8:	f000 fd6e 	bl	800bc88 <__kernel_cos>
 800b1ac:	e7f1      	b.n	800b192 <cos+0x6a>
 800b1ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b1b2:	ed9d 0b00 	vldr	d0, [sp]
 800b1b6:	2001      	movs	r0, #1
 800b1b8:	f001 f97e 	bl	800c4b8 <__kernel_sin>
 800b1bc:	e7e0      	b.n	800b180 <cos+0x58>
 800b1be:	bf00      	nop
	...
 800b1c8:	3fe921fb 	.word	0x3fe921fb
 800b1cc:	7fefffff 	.word	0x7fefffff

0800b1d0 <fabs>:
 800b1d0:	ec51 0b10 	vmov	r0, r1, d0
 800b1d4:	ee10 2a10 	vmov	r2, s0
 800b1d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1dc:	ec43 2b10 	vmov	d0, r2, r3
 800b1e0:	4770      	bx	lr
 800b1e2:	0000      	movs	r0, r0
 800b1e4:	0000      	movs	r0, r0
	...

0800b1e8 <sin>:
 800b1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1ea:	ec53 2b10 	vmov	r2, r3, d0
 800b1ee:	4828      	ldr	r0, [pc, #160]	; (800b290 <sin+0xa8>)
 800b1f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b1f4:	4281      	cmp	r1, r0
 800b1f6:	dc07      	bgt.n	800b208 <sin+0x20>
 800b1f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b288 <sin+0xa0>
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	b005      	add	sp, #20
 800b200:	f85d eb04 	ldr.w	lr, [sp], #4
 800b204:	f001 b958 	b.w	800c4b8 <__kernel_sin>
 800b208:	4822      	ldr	r0, [pc, #136]	; (800b294 <sin+0xac>)
 800b20a:	4281      	cmp	r1, r0
 800b20c:	dd09      	ble.n	800b222 <sin+0x3a>
 800b20e:	ee10 0a10 	vmov	r0, s0
 800b212:	4619      	mov	r1, r3
 800b214:	f7f5 f858 	bl	80002c8 <__aeabi_dsub>
 800b218:	ec41 0b10 	vmov	d0, r0, r1
 800b21c:	b005      	add	sp, #20
 800b21e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b222:	4668      	mov	r0, sp
 800b224:	f000 fa70 	bl	800b708 <__ieee754_rem_pio2>
 800b228:	f000 0003 	and.w	r0, r0, #3
 800b22c:	2801      	cmp	r0, #1
 800b22e:	d00c      	beq.n	800b24a <sin+0x62>
 800b230:	2802      	cmp	r0, #2
 800b232:	d011      	beq.n	800b258 <sin+0x70>
 800b234:	b9f0      	cbnz	r0, 800b274 <sin+0x8c>
 800b236:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b23a:	ed9d 0b00 	vldr	d0, [sp]
 800b23e:	2001      	movs	r0, #1
 800b240:	f001 f93a 	bl	800c4b8 <__kernel_sin>
 800b244:	ec51 0b10 	vmov	r0, r1, d0
 800b248:	e7e6      	b.n	800b218 <sin+0x30>
 800b24a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b24e:	ed9d 0b00 	vldr	d0, [sp]
 800b252:	f000 fd19 	bl	800bc88 <__kernel_cos>
 800b256:	e7f5      	b.n	800b244 <sin+0x5c>
 800b258:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b25c:	ed9d 0b00 	vldr	d0, [sp]
 800b260:	2001      	movs	r0, #1
 800b262:	f001 f929 	bl	800c4b8 <__kernel_sin>
 800b266:	ec53 2b10 	vmov	r2, r3, d0
 800b26a:	ee10 0a10 	vmov	r0, s0
 800b26e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b272:	e7d1      	b.n	800b218 <sin+0x30>
 800b274:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b278:	ed9d 0b00 	vldr	d0, [sp]
 800b27c:	f000 fd04 	bl	800bc88 <__kernel_cos>
 800b280:	e7f1      	b.n	800b266 <sin+0x7e>
 800b282:	bf00      	nop
 800b284:	f3af 8000 	nop.w
	...
 800b290:	3fe921fb 	.word	0x3fe921fb
 800b294:	7fefffff 	.word	0x7fefffff

0800b298 <atan2>:
 800b298:	f000 b85a 	b.w	800b350 <__ieee754_atan2>

0800b29c <fmod>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	ed2d 8b02 	vpush	{d8}
 800b2a2:	ec57 6b10 	vmov	r6, r7, d0
 800b2a6:	ec55 4b11 	vmov	r4, r5, d1
 800b2aa:	f000 f91b 	bl	800b4e4 <__ieee754_fmod>
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	462b      	mov	r3, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	eeb0 8a40 	vmov.f32	s16, s0
 800b2ba:	eef0 8a60 	vmov.f32	s17, s1
 800b2be:	f7f5 fc55 	bl	8000b6c <__aeabi_dcmpun>
 800b2c2:	b990      	cbnz	r0, 800b2ea <fmod+0x4e>
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f7f5 fc1c 	bl	8000b08 <__aeabi_dcmpeq>
 800b2d0:	b158      	cbz	r0, 800b2ea <fmod+0x4e>
 800b2d2:	f7fc ffb5 	bl	8008240 <__errno>
 800b2d6:	2321      	movs	r3, #33	; 0x21
 800b2d8:	6003      	str	r3, [r0, #0]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2300      	movs	r3, #0
 800b2de:	4610      	mov	r0, r2
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	f7f5 fad3 	bl	800088c <__aeabi_ddiv>
 800b2e6:	ec41 0b18 	vmov	d8, r0, r1
 800b2ea:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ee:	eef0 0a68 	vmov.f32	s1, s17
 800b2f2:	ecbd 8b02 	vpop	{d8}
 800b2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2f8 <sqrt>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	ed2d 8b02 	vpush	{d8}
 800b2fe:	ec55 4b10 	vmov	r4, r5, d0
 800b302:	f000 fc0d 	bl	800bb20 <__ieee754_sqrt>
 800b306:	4622      	mov	r2, r4
 800b308:	462b      	mov	r3, r5
 800b30a:	4620      	mov	r0, r4
 800b30c:	4629      	mov	r1, r5
 800b30e:	eeb0 8a40 	vmov.f32	s16, s0
 800b312:	eef0 8a60 	vmov.f32	s17, s1
 800b316:	f7f5 fc29 	bl	8000b6c <__aeabi_dcmpun>
 800b31a:	b990      	cbnz	r0, 800b342 <sqrt+0x4a>
 800b31c:	2200      	movs	r2, #0
 800b31e:	2300      	movs	r3, #0
 800b320:	4620      	mov	r0, r4
 800b322:	4629      	mov	r1, r5
 800b324:	f7f5 fbfa 	bl	8000b1c <__aeabi_dcmplt>
 800b328:	b158      	cbz	r0, 800b342 <sqrt+0x4a>
 800b32a:	f7fc ff89 	bl	8008240 <__errno>
 800b32e:	2321      	movs	r3, #33	; 0x21
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	2200      	movs	r2, #0
 800b334:	2300      	movs	r3, #0
 800b336:	4610      	mov	r0, r2
 800b338:	4619      	mov	r1, r3
 800b33a:	f7f5 faa7 	bl	800088c <__aeabi_ddiv>
 800b33e:	ec41 0b18 	vmov	d8, r0, r1
 800b342:	eeb0 0a48 	vmov.f32	s0, s16
 800b346:	eef0 0a68 	vmov.f32	s1, s17
 800b34a:	ecbd 8b02 	vpop	{d8}
 800b34e:	bd38      	pop	{r3, r4, r5, pc}

0800b350 <__ieee754_atan2>:
 800b350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b354:	ec57 6b11 	vmov	r6, r7, d1
 800b358:	4273      	negs	r3, r6
 800b35a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b4e0 <__ieee754_atan2+0x190>
 800b35e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b362:	4333      	orrs	r3, r6
 800b364:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b368:	4573      	cmp	r3, lr
 800b36a:	ec51 0b10 	vmov	r0, r1, d0
 800b36e:	ee11 8a10 	vmov	r8, s2
 800b372:	d80a      	bhi.n	800b38a <__ieee754_atan2+0x3a>
 800b374:	4244      	negs	r4, r0
 800b376:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b37a:	4304      	orrs	r4, r0
 800b37c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b380:	4574      	cmp	r4, lr
 800b382:	ee10 9a10 	vmov	r9, s0
 800b386:	468c      	mov	ip, r1
 800b388:	d907      	bls.n	800b39a <__ieee754_atan2+0x4a>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	f7f4 ff9d 	bl	80002cc <__adddf3>
 800b392:	ec41 0b10 	vmov	d0, r0, r1
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b39e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3a2:	4334      	orrs	r4, r6
 800b3a4:	d103      	bne.n	800b3ae <__ieee754_atan2+0x5e>
 800b3a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3aa:	f7ff bd1d 	b.w	800ade8 <atan>
 800b3ae:	17bc      	asrs	r4, r7, #30
 800b3b0:	f004 0402 	and.w	r4, r4, #2
 800b3b4:	ea53 0909 	orrs.w	r9, r3, r9
 800b3b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b3bc:	d107      	bne.n	800b3ce <__ieee754_atan2+0x7e>
 800b3be:	2c02      	cmp	r4, #2
 800b3c0:	d060      	beq.n	800b484 <__ieee754_atan2+0x134>
 800b3c2:	2c03      	cmp	r4, #3
 800b3c4:	d1e5      	bne.n	800b392 <__ieee754_atan2+0x42>
 800b3c6:	a142      	add	r1, pc, #264	; (adr r1, 800b4d0 <__ieee754_atan2+0x180>)
 800b3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3cc:	e7e1      	b.n	800b392 <__ieee754_atan2+0x42>
 800b3ce:	ea52 0808 	orrs.w	r8, r2, r8
 800b3d2:	d106      	bne.n	800b3e2 <__ieee754_atan2+0x92>
 800b3d4:	f1bc 0f00 	cmp.w	ip, #0
 800b3d8:	da5f      	bge.n	800b49a <__ieee754_atan2+0x14a>
 800b3da:	a13f      	add	r1, pc, #252	; (adr r1, 800b4d8 <__ieee754_atan2+0x188>)
 800b3dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e0:	e7d7      	b.n	800b392 <__ieee754_atan2+0x42>
 800b3e2:	4572      	cmp	r2, lr
 800b3e4:	d10f      	bne.n	800b406 <__ieee754_atan2+0xb6>
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	f104 34ff 	add.w	r4, r4, #4294967295
 800b3ec:	d107      	bne.n	800b3fe <__ieee754_atan2+0xae>
 800b3ee:	2c02      	cmp	r4, #2
 800b3f0:	d84c      	bhi.n	800b48c <__ieee754_atan2+0x13c>
 800b3f2:	4b35      	ldr	r3, [pc, #212]	; (800b4c8 <__ieee754_atan2+0x178>)
 800b3f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b3f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b3fc:	e7c9      	b.n	800b392 <__ieee754_atan2+0x42>
 800b3fe:	2c02      	cmp	r4, #2
 800b400:	d848      	bhi.n	800b494 <__ieee754_atan2+0x144>
 800b402:	4b32      	ldr	r3, [pc, #200]	; (800b4cc <__ieee754_atan2+0x17c>)
 800b404:	e7f6      	b.n	800b3f4 <__ieee754_atan2+0xa4>
 800b406:	4573      	cmp	r3, lr
 800b408:	d0e4      	beq.n	800b3d4 <__ieee754_atan2+0x84>
 800b40a:	1a9b      	subs	r3, r3, r2
 800b40c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b410:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b414:	da1e      	bge.n	800b454 <__ieee754_atan2+0x104>
 800b416:	2f00      	cmp	r7, #0
 800b418:	da01      	bge.n	800b41e <__ieee754_atan2+0xce>
 800b41a:	323c      	adds	r2, #60	; 0x3c
 800b41c:	db1e      	blt.n	800b45c <__ieee754_atan2+0x10c>
 800b41e:	4632      	mov	r2, r6
 800b420:	463b      	mov	r3, r7
 800b422:	f7f5 fa33 	bl	800088c <__aeabi_ddiv>
 800b426:	ec41 0b10 	vmov	d0, r0, r1
 800b42a:	f7ff fed1 	bl	800b1d0 <fabs>
 800b42e:	f7ff fcdb 	bl	800ade8 <atan>
 800b432:	ec51 0b10 	vmov	r0, r1, d0
 800b436:	2c01      	cmp	r4, #1
 800b438:	d013      	beq.n	800b462 <__ieee754_atan2+0x112>
 800b43a:	2c02      	cmp	r4, #2
 800b43c:	d015      	beq.n	800b46a <__ieee754_atan2+0x11a>
 800b43e:	2c00      	cmp	r4, #0
 800b440:	d0a7      	beq.n	800b392 <__ieee754_atan2+0x42>
 800b442:	a319      	add	r3, pc, #100	; (adr r3, 800b4a8 <__ieee754_atan2+0x158>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7f4 ff3e 	bl	80002c8 <__aeabi_dsub>
 800b44c:	a318      	add	r3, pc, #96	; (adr r3, 800b4b0 <__ieee754_atan2+0x160>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	e014      	b.n	800b47e <__ieee754_atan2+0x12e>
 800b454:	a118      	add	r1, pc, #96	; (adr r1, 800b4b8 <__ieee754_atan2+0x168>)
 800b456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b45a:	e7ec      	b.n	800b436 <__ieee754_atan2+0xe6>
 800b45c:	2000      	movs	r0, #0
 800b45e:	2100      	movs	r1, #0
 800b460:	e7e9      	b.n	800b436 <__ieee754_atan2+0xe6>
 800b462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b466:	4619      	mov	r1, r3
 800b468:	e793      	b.n	800b392 <__ieee754_atan2+0x42>
 800b46a:	a30f      	add	r3, pc, #60	; (adr r3, 800b4a8 <__ieee754_atan2+0x158>)
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f7f4 ff2a 	bl	80002c8 <__aeabi_dsub>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	a10d      	add	r1, pc, #52	; (adr r1, 800b4b0 <__ieee754_atan2+0x160>)
 800b47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b47e:	f7f4 ff23 	bl	80002c8 <__aeabi_dsub>
 800b482:	e786      	b.n	800b392 <__ieee754_atan2+0x42>
 800b484:	a10a      	add	r1, pc, #40	; (adr r1, 800b4b0 <__ieee754_atan2+0x160>)
 800b486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b48a:	e782      	b.n	800b392 <__ieee754_atan2+0x42>
 800b48c:	a10c      	add	r1, pc, #48	; (adr r1, 800b4c0 <__ieee754_atan2+0x170>)
 800b48e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b492:	e77e      	b.n	800b392 <__ieee754_atan2+0x42>
 800b494:	2000      	movs	r0, #0
 800b496:	2100      	movs	r1, #0
 800b498:	e77b      	b.n	800b392 <__ieee754_atan2+0x42>
 800b49a:	a107      	add	r1, pc, #28	; (adr r1, 800b4b8 <__ieee754_atan2+0x168>)
 800b49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4a0:	e777      	b.n	800b392 <__ieee754_atan2+0x42>
 800b4a2:	bf00      	nop
 800b4a4:	f3af 8000 	nop.w
 800b4a8:	33145c07 	.word	0x33145c07
 800b4ac:	3ca1a626 	.word	0x3ca1a626
 800b4b0:	54442d18 	.word	0x54442d18
 800b4b4:	400921fb 	.word	0x400921fb
 800b4b8:	54442d18 	.word	0x54442d18
 800b4bc:	3ff921fb 	.word	0x3ff921fb
 800b4c0:	54442d18 	.word	0x54442d18
 800b4c4:	3fe921fb 	.word	0x3fe921fb
 800b4c8:	0800ce78 	.word	0x0800ce78
 800b4cc:	0800ce90 	.word	0x0800ce90
 800b4d0:	54442d18 	.word	0x54442d18
 800b4d4:	c00921fb 	.word	0xc00921fb
 800b4d8:	54442d18 	.word	0x54442d18
 800b4dc:	bff921fb 	.word	0xbff921fb
 800b4e0:	7ff00000 	.word	0x7ff00000

0800b4e4 <__ieee754_fmod>:
 800b4e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	ec53 2b11 	vmov	r2, r3, d1
 800b4ec:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800b4f0:	ea5e 0402 	orrs.w	r4, lr, r2
 800b4f4:	ec51 0b10 	vmov	r0, r1, d0
 800b4f8:	ee11 7a10 	vmov	r7, s2
 800b4fc:	ee11 ca10 	vmov	ip, s2
 800b500:	461e      	mov	r6, r3
 800b502:	d00d      	beq.n	800b520 <__ieee754_fmod+0x3c>
 800b504:	4c7a      	ldr	r4, [pc, #488]	; (800b6f0 <__ieee754_fmod+0x20c>)
 800b506:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b50a:	45a0      	cmp	r8, r4
 800b50c:	4689      	mov	r9, r1
 800b50e:	dc07      	bgt.n	800b520 <__ieee754_fmod+0x3c>
 800b510:	4254      	negs	r4, r2
 800b512:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800b6fc <__ieee754_fmod+0x218>
 800b516:	4314      	orrs	r4, r2
 800b518:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800b51c:	455c      	cmp	r4, fp
 800b51e:	d909      	bls.n	800b534 <__ieee754_fmod+0x50>
 800b520:	f7f5 f88a 	bl	8000638 <__aeabi_dmul>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	f7f5 f9b0 	bl	800088c <__aeabi_ddiv>
 800b52c:	ec41 0b10 	vmov	d0, r0, r1
 800b530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b534:	45f0      	cmp	r8, lr
 800b536:	ee10 aa10 	vmov	sl, s0
 800b53a:	ee10 4a10 	vmov	r4, s0
 800b53e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b542:	dc09      	bgt.n	800b558 <__ieee754_fmod+0x74>
 800b544:	dbf2      	blt.n	800b52c <__ieee754_fmod+0x48>
 800b546:	4290      	cmp	r0, r2
 800b548:	d3f0      	bcc.n	800b52c <__ieee754_fmod+0x48>
 800b54a:	d105      	bne.n	800b558 <__ieee754_fmod+0x74>
 800b54c:	4b69      	ldr	r3, [pc, #420]	; (800b6f4 <__ieee754_fmod+0x210>)
 800b54e:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800b552:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b556:	e7e9      	b.n	800b52c <__ieee754_fmod+0x48>
 800b558:	ea19 0f0b 	tst.w	r9, fp
 800b55c:	d14a      	bne.n	800b5f4 <__ieee754_fmod+0x110>
 800b55e:	f1b8 0f00 	cmp.w	r8, #0
 800b562:	d13f      	bne.n	800b5e4 <__ieee754_fmod+0x100>
 800b564:	4964      	ldr	r1, [pc, #400]	; (800b6f8 <__ieee754_fmod+0x214>)
 800b566:	4653      	mov	r3, sl
 800b568:	2b00      	cmp	r3, #0
 800b56a:	dc38      	bgt.n	800b5de <__ieee754_fmod+0xfa>
 800b56c:	4b63      	ldr	r3, [pc, #396]	; (800b6fc <__ieee754_fmod+0x218>)
 800b56e:	4033      	ands	r3, r6
 800b570:	2b00      	cmp	r3, #0
 800b572:	d14f      	bne.n	800b614 <__ieee754_fmod+0x130>
 800b574:	f1be 0f00 	cmp.w	lr, #0
 800b578:	d144      	bne.n	800b604 <__ieee754_fmod+0x120>
 800b57a:	4a5f      	ldr	r2, [pc, #380]	; (800b6f8 <__ieee754_fmod+0x214>)
 800b57c:	463b      	mov	r3, r7
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dc3d      	bgt.n	800b5fe <__ieee754_fmod+0x11a>
 800b582:	4b5f      	ldr	r3, [pc, #380]	; (800b700 <__ieee754_fmod+0x21c>)
 800b584:	4299      	cmp	r1, r3
 800b586:	db4a      	blt.n	800b61e <__ieee754_fmod+0x13a>
 800b588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b58c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b590:	485b      	ldr	r0, [pc, #364]	; (800b700 <__ieee754_fmod+0x21c>)
 800b592:	4282      	cmp	r2, r0
 800b594:	db57      	blt.n	800b646 <__ieee754_fmod+0x162>
 800b596:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b59a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b59e:	1a89      	subs	r1, r1, r2
 800b5a0:	1b98      	subs	r0, r3, r6
 800b5a2:	eba4 070c 	sub.w	r7, r4, ip
 800b5a6:	2900      	cmp	r1, #0
 800b5a8:	d164      	bne.n	800b674 <__ieee754_fmod+0x190>
 800b5aa:	4564      	cmp	r4, ip
 800b5ac:	bf38      	it	cc
 800b5ae:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	bfa4      	itt	ge
 800b5b6:	463c      	movge	r4, r7
 800b5b8:	4603      	movge	r3, r0
 800b5ba:	ea53 0104 	orrs.w	r1, r3, r4
 800b5be:	d0c5      	beq.n	800b54c <__ieee754_fmod+0x68>
 800b5c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5c4:	db6b      	blt.n	800b69e <__ieee754_fmod+0x1ba>
 800b5c6:	494e      	ldr	r1, [pc, #312]	; (800b700 <__ieee754_fmod+0x21c>)
 800b5c8:	428a      	cmp	r2, r1
 800b5ca:	db6e      	blt.n	800b6aa <__ieee754_fmod+0x1c6>
 800b5cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b5d0:	431d      	orrs	r5, r3
 800b5d2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b5d6:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800b5da:	4620      	mov	r0, r4
 800b5dc:	e7a6      	b.n	800b52c <__ieee754_fmod+0x48>
 800b5de:	3901      	subs	r1, #1
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	e7c1      	b.n	800b568 <__ieee754_fmod+0x84>
 800b5e4:	4946      	ldr	r1, [pc, #280]	; (800b700 <__ieee754_fmod+0x21c>)
 800b5e6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	ddbe      	ble.n	800b56c <__ieee754_fmod+0x88>
 800b5ee:	3901      	subs	r1, #1
 800b5f0:	005b      	lsls	r3, r3, #1
 800b5f2:	e7fa      	b.n	800b5ea <__ieee754_fmod+0x106>
 800b5f4:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b5f8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b5fc:	e7b6      	b.n	800b56c <__ieee754_fmod+0x88>
 800b5fe:	3a01      	subs	r2, #1
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	e7bc      	b.n	800b57e <__ieee754_fmod+0x9a>
 800b604:	4a3e      	ldr	r2, [pc, #248]	; (800b700 <__ieee754_fmod+0x21c>)
 800b606:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	ddb9      	ble.n	800b582 <__ieee754_fmod+0x9e>
 800b60e:	3a01      	subs	r2, #1
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	e7fa      	b.n	800b60a <__ieee754_fmod+0x126>
 800b614:	ea4f 522e 	mov.w	r2, lr, asr #20
 800b618:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b61c:	e7b1      	b.n	800b582 <__ieee754_fmod+0x9e>
 800b61e:	1a5c      	subs	r4, r3, r1
 800b620:	2c1f      	cmp	r4, #31
 800b622:	dc0a      	bgt.n	800b63a <__ieee754_fmod+0x156>
 800b624:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b628:	fa08 f804 	lsl.w	r8, r8, r4
 800b62c:	fa2a f303 	lsr.w	r3, sl, r3
 800b630:	ea43 0308 	orr.w	r3, r3, r8
 800b634:	fa0a f404 	lsl.w	r4, sl, r4
 800b638:	e7aa      	b.n	800b590 <__ieee754_fmod+0xac>
 800b63a:	4b32      	ldr	r3, [pc, #200]	; (800b704 <__ieee754_fmod+0x220>)
 800b63c:	1a5b      	subs	r3, r3, r1
 800b63e:	fa0a f303 	lsl.w	r3, sl, r3
 800b642:	2400      	movs	r4, #0
 800b644:	e7a4      	b.n	800b590 <__ieee754_fmod+0xac>
 800b646:	eba0 0c02 	sub.w	ip, r0, r2
 800b64a:	f1bc 0f1f 	cmp.w	ip, #31
 800b64e:	dc0a      	bgt.n	800b666 <__ieee754_fmod+0x182>
 800b650:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b654:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b658:	fa27 f606 	lsr.w	r6, r7, r6
 800b65c:	ea46 060e 	orr.w	r6, r6, lr
 800b660:	fa07 fc0c 	lsl.w	ip, r7, ip
 800b664:	e79b      	b.n	800b59e <__ieee754_fmod+0xba>
 800b666:	4e27      	ldr	r6, [pc, #156]	; (800b704 <__ieee754_fmod+0x220>)
 800b668:	1ab6      	subs	r6, r6, r2
 800b66a:	fa07 f606 	lsl.w	r6, r7, r6
 800b66e:	f04f 0c00 	mov.w	ip, #0
 800b672:	e794      	b.n	800b59e <__ieee754_fmod+0xba>
 800b674:	4564      	cmp	r4, ip
 800b676:	bf38      	it	cc
 800b678:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b67c:	2800      	cmp	r0, #0
 800b67e:	da05      	bge.n	800b68c <__ieee754_fmod+0x1a8>
 800b680:	0fe0      	lsrs	r0, r4, #31
 800b682:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b686:	0064      	lsls	r4, r4, #1
 800b688:	3901      	subs	r1, #1
 800b68a:	e789      	b.n	800b5a0 <__ieee754_fmod+0xbc>
 800b68c:	ea50 0307 	orrs.w	r3, r0, r7
 800b690:	f43f af5c 	beq.w	800b54c <__ieee754_fmod+0x68>
 800b694:	0ffb      	lsrs	r3, r7, #31
 800b696:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b69a:	007c      	lsls	r4, r7, #1
 800b69c:	e7f4      	b.n	800b688 <__ieee754_fmod+0x1a4>
 800b69e:	0fe1      	lsrs	r1, r4, #31
 800b6a0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b6a4:	0064      	lsls	r4, r4, #1
 800b6a6:	3a01      	subs	r2, #1
 800b6a8:	e78a      	b.n	800b5c0 <__ieee754_fmod+0xdc>
 800b6aa:	1a89      	subs	r1, r1, r2
 800b6ac:	2914      	cmp	r1, #20
 800b6ae:	dc0a      	bgt.n	800b6c6 <__ieee754_fmod+0x1e2>
 800b6b0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b6b4:	fa03 f202 	lsl.w	r2, r3, r2
 800b6b8:	40cc      	lsrs	r4, r1
 800b6ba:	4322      	orrs	r2, r4
 800b6bc:	410b      	asrs	r3, r1
 800b6be:	ea43 0105 	orr.w	r1, r3, r5
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	e732      	b.n	800b52c <__ieee754_fmod+0x48>
 800b6c6:	291f      	cmp	r1, #31
 800b6c8:	dc07      	bgt.n	800b6da <__ieee754_fmod+0x1f6>
 800b6ca:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b6ce:	40cc      	lsrs	r4, r1
 800b6d0:	fa03 f202 	lsl.w	r2, r3, r2
 800b6d4:	4322      	orrs	r2, r4
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	e7f1      	b.n	800b6be <__ieee754_fmod+0x1da>
 800b6da:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b6de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b6e2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b6e6:	32e2      	adds	r2, #226	; 0xe2
 800b6e8:	fa43 f202 	asr.w	r2, r3, r2
 800b6ec:	e7f3      	b.n	800b6d6 <__ieee754_fmod+0x1f2>
 800b6ee:	bf00      	nop
 800b6f0:	7fefffff 	.word	0x7fefffff
 800b6f4:	0800cea8 	.word	0x0800cea8
 800b6f8:	fffffbed 	.word	0xfffffbed
 800b6fc:	7ff00000 	.word	0x7ff00000
 800b700:	fffffc02 	.word	0xfffffc02
 800b704:	fffffbe2 	.word	0xfffffbe2

0800b708 <__ieee754_rem_pio2>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	ed2d 8b02 	vpush	{d8}
 800b710:	ec55 4b10 	vmov	r4, r5, d0
 800b714:	4bca      	ldr	r3, [pc, #808]	; (800ba40 <__ieee754_rem_pio2+0x338>)
 800b716:	b08b      	sub	sp, #44	; 0x2c
 800b718:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b71c:	4598      	cmp	r8, r3
 800b71e:	4682      	mov	sl, r0
 800b720:	9502      	str	r5, [sp, #8]
 800b722:	dc08      	bgt.n	800b736 <__ieee754_rem_pio2+0x2e>
 800b724:	2200      	movs	r2, #0
 800b726:	2300      	movs	r3, #0
 800b728:	ed80 0b00 	vstr	d0, [r0]
 800b72c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b730:	f04f 0b00 	mov.w	fp, #0
 800b734:	e028      	b.n	800b788 <__ieee754_rem_pio2+0x80>
 800b736:	4bc3      	ldr	r3, [pc, #780]	; (800ba44 <__ieee754_rem_pio2+0x33c>)
 800b738:	4598      	cmp	r8, r3
 800b73a:	dc78      	bgt.n	800b82e <__ieee754_rem_pio2+0x126>
 800b73c:	9b02      	ldr	r3, [sp, #8]
 800b73e:	4ec2      	ldr	r6, [pc, #776]	; (800ba48 <__ieee754_rem_pio2+0x340>)
 800b740:	2b00      	cmp	r3, #0
 800b742:	ee10 0a10 	vmov	r0, s0
 800b746:	a3b0      	add	r3, pc, #704	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x300>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	4629      	mov	r1, r5
 800b74e:	dd39      	ble.n	800b7c4 <__ieee754_rem_pio2+0xbc>
 800b750:	f7f4 fdba 	bl	80002c8 <__aeabi_dsub>
 800b754:	45b0      	cmp	r8, r6
 800b756:	4604      	mov	r4, r0
 800b758:	460d      	mov	r5, r1
 800b75a:	d01b      	beq.n	800b794 <__ieee754_rem_pio2+0x8c>
 800b75c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x308>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f7f4 fdb1 	bl	80002c8 <__aeabi_dsub>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	e9ca 2300 	strd	r2, r3, [sl]
 800b76e:	4620      	mov	r0, r4
 800b770:	4629      	mov	r1, r5
 800b772:	f7f4 fda9 	bl	80002c8 <__aeabi_dsub>
 800b776:	a3a6      	add	r3, pc, #664	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x308>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f7f4 fda4 	bl	80002c8 <__aeabi_dsub>
 800b780:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b784:	f04f 0b01 	mov.w	fp, #1
 800b788:	4658      	mov	r0, fp
 800b78a:	b00b      	add	sp, #44	; 0x2c
 800b78c:	ecbd 8b02 	vpop	{d8}
 800b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b794:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x310>)
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	f7f4 fd95 	bl	80002c8 <__aeabi_dsub>
 800b79e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba20 <__ieee754_rem_pio2+0x318>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	460d      	mov	r5, r1
 800b7a8:	f7f4 fd8e 	bl	80002c8 <__aeabi_dsub>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	e9ca 2300 	strd	r2, r3, [sl]
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	f7f4 fd86 	bl	80002c8 <__aeabi_dsub>
 800b7bc:	a398      	add	r3, pc, #608	; (adr r3, 800ba20 <__ieee754_rem_pio2+0x318>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	e7db      	b.n	800b77c <__ieee754_rem_pio2+0x74>
 800b7c4:	f7f4 fd82 	bl	80002cc <__adddf3>
 800b7c8:	45b0      	cmp	r8, r6
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	d016      	beq.n	800b7fe <__ieee754_rem_pio2+0xf6>
 800b7d0:	a38f      	add	r3, pc, #572	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x308>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f4 fd79 	bl	80002cc <__adddf3>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	e9ca 2300 	strd	r2, r3, [sl]
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	4629      	mov	r1, r5
 800b7e6:	f7f4 fd6f 	bl	80002c8 <__aeabi_dsub>
 800b7ea:	a389      	add	r3, pc, #548	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x308>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f7f4 fd6c 	bl	80002cc <__adddf3>
 800b7f4:	f04f 3bff 	mov.w	fp, #4294967295
 800b7f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7fc:	e7c4      	b.n	800b788 <__ieee754_rem_pio2+0x80>
 800b7fe:	a386      	add	r3, pc, #536	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x310>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 fd62 	bl	80002cc <__adddf3>
 800b808:	a385      	add	r3, pc, #532	; (adr r3, 800ba20 <__ieee754_rem_pio2+0x318>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	4604      	mov	r4, r0
 800b810:	460d      	mov	r5, r1
 800b812:	f7f4 fd5b 	bl	80002cc <__adddf3>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	e9ca 2300 	strd	r2, r3, [sl]
 800b81e:	4620      	mov	r0, r4
 800b820:	4629      	mov	r1, r5
 800b822:	f7f4 fd51 	bl	80002c8 <__aeabi_dsub>
 800b826:	a37e      	add	r3, pc, #504	; (adr r3, 800ba20 <__ieee754_rem_pio2+0x318>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	e7e0      	b.n	800b7f0 <__ieee754_rem_pio2+0xe8>
 800b82e:	4b87      	ldr	r3, [pc, #540]	; (800ba4c <__ieee754_rem_pio2+0x344>)
 800b830:	4598      	cmp	r8, r3
 800b832:	f300 80d9 	bgt.w	800b9e8 <__ieee754_rem_pio2+0x2e0>
 800b836:	f7ff fccb 	bl	800b1d0 <fabs>
 800b83a:	ec55 4b10 	vmov	r4, r5, d0
 800b83e:	ee10 0a10 	vmov	r0, s0
 800b842:	a379      	add	r3, pc, #484	; (adr r3, 800ba28 <__ieee754_rem_pio2+0x320>)
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	4629      	mov	r1, r5
 800b84a:	f7f4 fef5 	bl	8000638 <__aeabi_dmul>
 800b84e:	4b80      	ldr	r3, [pc, #512]	; (800ba50 <__ieee754_rem_pio2+0x348>)
 800b850:	2200      	movs	r2, #0
 800b852:	f7f4 fd3b 	bl	80002cc <__adddf3>
 800b856:	f7f5 f99f 	bl	8000b98 <__aeabi_d2iz>
 800b85a:	4683      	mov	fp, r0
 800b85c:	f7f4 fe82 	bl	8000564 <__aeabi_i2d>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	ec43 2b18 	vmov	d8, r2, r3
 800b868:	a367      	add	r3, pc, #412	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x300>)
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f7f4 fee3 	bl	8000638 <__aeabi_dmul>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	4620      	mov	r0, r4
 800b878:	4629      	mov	r1, r5
 800b87a:	f7f4 fd25 	bl	80002c8 <__aeabi_dsub>
 800b87e:	a364      	add	r3, pc, #400	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x308>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	4606      	mov	r6, r0
 800b886:	460f      	mov	r7, r1
 800b888:	ec51 0b18 	vmov	r0, r1, d8
 800b88c:	f7f4 fed4 	bl	8000638 <__aeabi_dmul>
 800b890:	f1bb 0f1f 	cmp.w	fp, #31
 800b894:	4604      	mov	r4, r0
 800b896:	460d      	mov	r5, r1
 800b898:	dc0d      	bgt.n	800b8b6 <__ieee754_rem_pio2+0x1ae>
 800b89a:	4b6e      	ldr	r3, [pc, #440]	; (800ba54 <__ieee754_rem_pio2+0x34c>)
 800b89c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	4543      	cmp	r3, r8
 800b8a6:	d006      	beq.n	800b8b6 <__ieee754_rem_pio2+0x1ae>
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	462b      	mov	r3, r5
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f7f4 fd0a 	bl	80002c8 <__aeabi_dsub>
 800b8b4:	e00f      	b.n	800b8d6 <__ieee754_rem_pio2+0x1ce>
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f4 fd03 	bl	80002c8 <__aeabi_dsub>
 800b8c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b8c6:	9303      	str	r3, [sp, #12]
 800b8c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b8cc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b8d0:	f1b8 0f10 	cmp.w	r8, #16
 800b8d4:	dc02      	bgt.n	800b8dc <__ieee754_rem_pio2+0x1d4>
 800b8d6:	e9ca 0100 	strd	r0, r1, [sl]
 800b8da:	e039      	b.n	800b950 <__ieee754_rem_pio2+0x248>
 800b8dc:	a34e      	add	r3, pc, #312	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x310>)
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	ec51 0b18 	vmov	r0, r1, d8
 800b8e6:	f7f4 fea7 	bl	8000638 <__aeabi_dmul>
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	4639      	mov	r1, r7
 800b8f6:	f7f4 fce7 	bl	80002c8 <__aeabi_dsub>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4680      	mov	r8, r0
 800b900:	4689      	mov	r9, r1
 800b902:	4630      	mov	r0, r6
 800b904:	4639      	mov	r1, r7
 800b906:	f7f4 fcdf 	bl	80002c8 <__aeabi_dsub>
 800b90a:	4622      	mov	r2, r4
 800b90c:	462b      	mov	r3, r5
 800b90e:	f7f4 fcdb 	bl	80002c8 <__aeabi_dsub>
 800b912:	a343      	add	r3, pc, #268	; (adr r3, 800ba20 <__ieee754_rem_pio2+0x318>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	4604      	mov	r4, r0
 800b91a:	460d      	mov	r5, r1
 800b91c:	ec51 0b18 	vmov	r0, r1, d8
 800b920:	f7f4 fe8a 	bl	8000638 <__aeabi_dmul>
 800b924:	4622      	mov	r2, r4
 800b926:	462b      	mov	r3, r5
 800b928:	f7f4 fcce 	bl	80002c8 <__aeabi_dsub>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4604      	mov	r4, r0
 800b932:	460d      	mov	r5, r1
 800b934:	4640      	mov	r0, r8
 800b936:	4649      	mov	r1, r9
 800b938:	f7f4 fcc6 	bl	80002c8 <__aeabi_dsub>
 800b93c:	9a03      	ldr	r2, [sp, #12]
 800b93e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	2b31      	cmp	r3, #49	; 0x31
 800b946:	dc24      	bgt.n	800b992 <__ieee754_rem_pio2+0x28a>
 800b948:	e9ca 0100 	strd	r0, r1, [sl]
 800b94c:	4646      	mov	r6, r8
 800b94e:	464f      	mov	r7, r9
 800b950:	e9da 8900 	ldrd	r8, r9, [sl]
 800b954:	4630      	mov	r0, r6
 800b956:	4642      	mov	r2, r8
 800b958:	464b      	mov	r3, r9
 800b95a:	4639      	mov	r1, r7
 800b95c:	f7f4 fcb4 	bl	80002c8 <__aeabi_dsub>
 800b960:	462b      	mov	r3, r5
 800b962:	4622      	mov	r2, r4
 800b964:	f7f4 fcb0 	bl	80002c8 <__aeabi_dsub>
 800b968:	9b02      	ldr	r3, [sp, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b970:	f6bf af0a 	bge.w	800b788 <__ieee754_rem_pio2+0x80>
 800b974:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b978:	f8ca 3004 	str.w	r3, [sl, #4]
 800b97c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b980:	f8ca 8000 	str.w	r8, [sl]
 800b984:	f8ca 0008 	str.w	r0, [sl, #8]
 800b988:	f8ca 300c 	str.w	r3, [sl, #12]
 800b98c:	f1cb 0b00 	rsb	fp, fp, #0
 800b990:	e6fa      	b.n	800b788 <__ieee754_rem_pio2+0x80>
 800b992:	a327      	add	r3, pc, #156	; (adr r3, 800ba30 <__ieee754_rem_pio2+0x328>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	ec51 0b18 	vmov	r0, r1, d8
 800b99c:	f7f4 fe4c 	bl	8000638 <__aeabi_dmul>
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	f7f4 fc8c 	bl	80002c8 <__aeabi_dsub>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	460f      	mov	r7, r1
 800b9b8:	4640      	mov	r0, r8
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	f7f4 fc84 	bl	80002c8 <__aeabi_dsub>
 800b9c0:	4622      	mov	r2, r4
 800b9c2:	462b      	mov	r3, r5
 800b9c4:	f7f4 fc80 	bl	80002c8 <__aeabi_dsub>
 800b9c8:	a31b      	add	r3, pc, #108	; (adr r3, 800ba38 <__ieee754_rem_pio2+0x330>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	460d      	mov	r5, r1
 800b9d2:	ec51 0b18 	vmov	r0, r1, d8
 800b9d6:	f7f4 fe2f 	bl	8000638 <__aeabi_dmul>
 800b9da:	4622      	mov	r2, r4
 800b9dc:	462b      	mov	r3, r5
 800b9de:	f7f4 fc73 	bl	80002c8 <__aeabi_dsub>
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	460d      	mov	r5, r1
 800b9e6:	e75f      	b.n	800b8a8 <__ieee754_rem_pio2+0x1a0>
 800b9e8:	4b1b      	ldr	r3, [pc, #108]	; (800ba58 <__ieee754_rem_pio2+0x350>)
 800b9ea:	4598      	cmp	r8, r3
 800b9ec:	dd36      	ble.n	800ba5c <__ieee754_rem_pio2+0x354>
 800b9ee:	ee10 2a10 	vmov	r2, s0
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	f7f4 fc66 	bl	80002c8 <__aeabi_dsub>
 800b9fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba00:	e9ca 0100 	strd	r0, r1, [sl]
 800ba04:	e694      	b.n	800b730 <__ieee754_rem_pio2+0x28>
 800ba06:	bf00      	nop
 800ba08:	54400000 	.word	0x54400000
 800ba0c:	3ff921fb 	.word	0x3ff921fb
 800ba10:	1a626331 	.word	0x1a626331
 800ba14:	3dd0b461 	.word	0x3dd0b461
 800ba18:	1a600000 	.word	0x1a600000
 800ba1c:	3dd0b461 	.word	0x3dd0b461
 800ba20:	2e037073 	.word	0x2e037073
 800ba24:	3ba3198a 	.word	0x3ba3198a
 800ba28:	6dc9c883 	.word	0x6dc9c883
 800ba2c:	3fe45f30 	.word	0x3fe45f30
 800ba30:	2e000000 	.word	0x2e000000
 800ba34:	3ba3198a 	.word	0x3ba3198a
 800ba38:	252049c1 	.word	0x252049c1
 800ba3c:	397b839a 	.word	0x397b839a
 800ba40:	3fe921fb 	.word	0x3fe921fb
 800ba44:	4002d97b 	.word	0x4002d97b
 800ba48:	3ff921fb 	.word	0x3ff921fb
 800ba4c:	413921fb 	.word	0x413921fb
 800ba50:	3fe00000 	.word	0x3fe00000
 800ba54:	0800ceb8 	.word	0x0800ceb8
 800ba58:	7fefffff 	.word	0x7fefffff
 800ba5c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ba60:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ba64:	ee10 0a10 	vmov	r0, s0
 800ba68:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ba6c:	ee10 6a10 	vmov	r6, s0
 800ba70:	460f      	mov	r7, r1
 800ba72:	f7f5 f891 	bl	8000b98 <__aeabi_d2iz>
 800ba76:	f7f4 fd75 	bl	8000564 <__aeabi_i2d>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4630      	mov	r0, r6
 800ba80:	4639      	mov	r1, r7
 800ba82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba86:	f7f4 fc1f 	bl	80002c8 <__aeabi_dsub>
 800ba8a:	4b23      	ldr	r3, [pc, #140]	; (800bb18 <__ieee754_rem_pio2+0x410>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f7f4 fdd3 	bl	8000638 <__aeabi_dmul>
 800ba92:	460f      	mov	r7, r1
 800ba94:	4606      	mov	r6, r0
 800ba96:	f7f5 f87f 	bl	8000b98 <__aeabi_d2iz>
 800ba9a:	f7f4 fd63 	bl	8000564 <__aeabi_i2d>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4630      	mov	r0, r6
 800baa4:	4639      	mov	r1, r7
 800baa6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800baaa:	f7f4 fc0d 	bl	80002c8 <__aeabi_dsub>
 800baae:	4b1a      	ldr	r3, [pc, #104]	; (800bb18 <__ieee754_rem_pio2+0x410>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	f7f4 fdc1 	bl	8000638 <__aeabi_dmul>
 800bab6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800baba:	ad04      	add	r5, sp, #16
 800babc:	f04f 0803 	mov.w	r8, #3
 800bac0:	46a9      	mov	r9, r5
 800bac2:	2600      	movs	r6, #0
 800bac4:	2700      	movs	r7, #0
 800bac6:	4632      	mov	r2, r6
 800bac8:	463b      	mov	r3, r7
 800baca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bace:	46c3      	mov	fp, r8
 800bad0:	3d08      	subs	r5, #8
 800bad2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bad6:	f7f5 f817 	bl	8000b08 <__aeabi_dcmpeq>
 800bada:	2800      	cmp	r0, #0
 800badc:	d1f3      	bne.n	800bac6 <__ieee754_rem_pio2+0x3be>
 800bade:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <__ieee754_rem_pio2+0x414>)
 800bae0:	9301      	str	r3, [sp, #4]
 800bae2:	2302      	movs	r3, #2
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	4622      	mov	r2, r4
 800bae8:	465b      	mov	r3, fp
 800baea:	4651      	mov	r1, sl
 800baec:	4648      	mov	r0, r9
 800baee:	f000 f993 	bl	800be18 <__kernel_rem_pio2>
 800baf2:	9b02      	ldr	r3, [sp, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	4683      	mov	fp, r0
 800baf8:	f6bf ae46 	bge.w	800b788 <__ieee754_rem_pio2+0x80>
 800bafc:	e9da 2100 	ldrd	r2, r1, [sl]
 800bb00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb04:	e9ca 2300 	strd	r2, r3, [sl]
 800bb08:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bb0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb10:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bb14:	e73a      	b.n	800b98c <__ieee754_rem_pio2+0x284>
 800bb16:	bf00      	nop
 800bb18:	41700000 	.word	0x41700000
 800bb1c:	0800cf38 	.word	0x0800cf38

0800bb20 <__ieee754_sqrt>:
 800bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb24:	ec55 4b10 	vmov	r4, r5, d0
 800bb28:	4e55      	ldr	r6, [pc, #340]	; (800bc80 <__ieee754_sqrt+0x160>)
 800bb2a:	43ae      	bics	r6, r5
 800bb2c:	ee10 0a10 	vmov	r0, s0
 800bb30:	ee10 3a10 	vmov	r3, s0
 800bb34:	462a      	mov	r2, r5
 800bb36:	4629      	mov	r1, r5
 800bb38:	d110      	bne.n	800bb5c <__ieee754_sqrt+0x3c>
 800bb3a:	ee10 2a10 	vmov	r2, s0
 800bb3e:	462b      	mov	r3, r5
 800bb40:	f7f4 fd7a 	bl	8000638 <__aeabi_dmul>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4620      	mov	r0, r4
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	f7f4 fbbe 	bl	80002cc <__adddf3>
 800bb50:	4604      	mov	r4, r0
 800bb52:	460d      	mov	r5, r1
 800bb54:	ec45 4b10 	vmov	d0, r4, r5
 800bb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5c:	2d00      	cmp	r5, #0
 800bb5e:	dc10      	bgt.n	800bb82 <__ieee754_sqrt+0x62>
 800bb60:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb64:	4330      	orrs	r0, r6
 800bb66:	d0f5      	beq.n	800bb54 <__ieee754_sqrt+0x34>
 800bb68:	b15d      	cbz	r5, 800bb82 <__ieee754_sqrt+0x62>
 800bb6a:	ee10 2a10 	vmov	r2, s0
 800bb6e:	462b      	mov	r3, r5
 800bb70:	ee10 0a10 	vmov	r0, s0
 800bb74:	f7f4 fba8 	bl	80002c8 <__aeabi_dsub>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	f7f4 fe86 	bl	800088c <__aeabi_ddiv>
 800bb80:	e7e6      	b.n	800bb50 <__ieee754_sqrt+0x30>
 800bb82:	1512      	asrs	r2, r2, #20
 800bb84:	d074      	beq.n	800bc70 <__ieee754_sqrt+0x150>
 800bb86:	07d4      	lsls	r4, r2, #31
 800bb88:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bb8c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bb90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bb94:	bf5e      	ittt	pl
 800bb96:	0fda      	lsrpl	r2, r3, #31
 800bb98:	005b      	lslpl	r3, r3, #1
 800bb9a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bb9e:	2400      	movs	r4, #0
 800bba0:	0fda      	lsrs	r2, r3, #31
 800bba2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bba6:	107f      	asrs	r7, r7, #1
 800bba8:	005b      	lsls	r3, r3, #1
 800bbaa:	2516      	movs	r5, #22
 800bbac:	4620      	mov	r0, r4
 800bbae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bbb2:	1886      	adds	r6, r0, r2
 800bbb4:	428e      	cmp	r6, r1
 800bbb6:	bfde      	ittt	le
 800bbb8:	1b89      	suble	r1, r1, r6
 800bbba:	18b0      	addle	r0, r6, r2
 800bbbc:	18a4      	addle	r4, r4, r2
 800bbbe:	0049      	lsls	r1, r1, #1
 800bbc0:	3d01      	subs	r5, #1
 800bbc2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bbc6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bbca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbce:	d1f0      	bne.n	800bbb2 <__ieee754_sqrt+0x92>
 800bbd0:	462a      	mov	r2, r5
 800bbd2:	f04f 0e20 	mov.w	lr, #32
 800bbd6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bbda:	4281      	cmp	r1, r0
 800bbdc:	eb06 0c05 	add.w	ip, r6, r5
 800bbe0:	dc02      	bgt.n	800bbe8 <__ieee754_sqrt+0xc8>
 800bbe2:	d113      	bne.n	800bc0c <__ieee754_sqrt+0xec>
 800bbe4:	459c      	cmp	ip, r3
 800bbe6:	d811      	bhi.n	800bc0c <__ieee754_sqrt+0xec>
 800bbe8:	f1bc 0f00 	cmp.w	ip, #0
 800bbec:	eb0c 0506 	add.w	r5, ip, r6
 800bbf0:	da43      	bge.n	800bc7a <__ieee754_sqrt+0x15a>
 800bbf2:	2d00      	cmp	r5, #0
 800bbf4:	db41      	blt.n	800bc7a <__ieee754_sqrt+0x15a>
 800bbf6:	f100 0801 	add.w	r8, r0, #1
 800bbfa:	1a09      	subs	r1, r1, r0
 800bbfc:	459c      	cmp	ip, r3
 800bbfe:	bf88      	it	hi
 800bc00:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bc04:	eba3 030c 	sub.w	r3, r3, ip
 800bc08:	4432      	add	r2, r6
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bc10:	f1be 0e01 	subs.w	lr, lr, #1
 800bc14:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bc18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc1c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc20:	d1db      	bne.n	800bbda <__ieee754_sqrt+0xba>
 800bc22:	430b      	orrs	r3, r1
 800bc24:	d006      	beq.n	800bc34 <__ieee754_sqrt+0x114>
 800bc26:	1c50      	adds	r0, r2, #1
 800bc28:	bf13      	iteet	ne
 800bc2a:	3201      	addne	r2, #1
 800bc2c:	3401      	addeq	r4, #1
 800bc2e:	4672      	moveq	r2, lr
 800bc30:	f022 0201 	bicne.w	r2, r2, #1
 800bc34:	1063      	asrs	r3, r4, #1
 800bc36:	0852      	lsrs	r2, r2, #1
 800bc38:	07e1      	lsls	r1, r4, #31
 800bc3a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc3e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc42:	bf48      	it	mi
 800bc44:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bc48:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bc4c:	4614      	mov	r4, r2
 800bc4e:	e781      	b.n	800bb54 <__ieee754_sqrt+0x34>
 800bc50:	0ad9      	lsrs	r1, r3, #11
 800bc52:	3815      	subs	r0, #21
 800bc54:	055b      	lsls	r3, r3, #21
 800bc56:	2900      	cmp	r1, #0
 800bc58:	d0fa      	beq.n	800bc50 <__ieee754_sqrt+0x130>
 800bc5a:	02cd      	lsls	r5, r1, #11
 800bc5c:	d50a      	bpl.n	800bc74 <__ieee754_sqrt+0x154>
 800bc5e:	f1c2 0420 	rsb	r4, r2, #32
 800bc62:	fa23 f404 	lsr.w	r4, r3, r4
 800bc66:	1e55      	subs	r5, r2, #1
 800bc68:	4093      	lsls	r3, r2
 800bc6a:	4321      	orrs	r1, r4
 800bc6c:	1b42      	subs	r2, r0, r5
 800bc6e:	e78a      	b.n	800bb86 <__ieee754_sqrt+0x66>
 800bc70:	4610      	mov	r0, r2
 800bc72:	e7f0      	b.n	800bc56 <__ieee754_sqrt+0x136>
 800bc74:	0049      	lsls	r1, r1, #1
 800bc76:	3201      	adds	r2, #1
 800bc78:	e7ef      	b.n	800bc5a <__ieee754_sqrt+0x13a>
 800bc7a:	4680      	mov	r8, r0
 800bc7c:	e7bd      	b.n	800bbfa <__ieee754_sqrt+0xda>
 800bc7e:	bf00      	nop
 800bc80:	7ff00000 	.word	0x7ff00000
 800bc84:	00000000 	.word	0x00000000

0800bc88 <__kernel_cos>:
 800bc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8c:	ec57 6b10 	vmov	r6, r7, d0
 800bc90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bc94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bc98:	ed8d 1b00 	vstr	d1, [sp]
 800bc9c:	da07      	bge.n	800bcae <__kernel_cos+0x26>
 800bc9e:	ee10 0a10 	vmov	r0, s0
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 ff78 	bl	8000b98 <__aeabi_d2iz>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	f000 8088 	beq.w	800bdbe <__kernel_cos+0x136>
 800bcae:	4632      	mov	r2, r6
 800bcb0:	463b      	mov	r3, r7
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	f7f4 fcbf 	bl	8000638 <__aeabi_dmul>
 800bcba:	4b51      	ldr	r3, [pc, #324]	; (800be00 <__kernel_cos+0x178>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	f7f4 fcb9 	bl	8000638 <__aeabi_dmul>
 800bcc6:	a340      	add	r3, pc, #256	; (adr r3, 800bdc8 <__kernel_cos+0x140>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	4682      	mov	sl, r0
 800bcce:	468b      	mov	fp, r1
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f7f4 fcb0 	bl	8000638 <__aeabi_dmul>
 800bcd8:	a33d      	add	r3, pc, #244	; (adr r3, 800bdd0 <__kernel_cos+0x148>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f7f4 faf5 	bl	80002cc <__adddf3>
 800bce2:	4622      	mov	r2, r4
 800bce4:	462b      	mov	r3, r5
 800bce6:	f7f4 fca7 	bl	8000638 <__aeabi_dmul>
 800bcea:	a33b      	add	r3, pc, #236	; (adr r3, 800bdd8 <__kernel_cos+0x150>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	f7f4 faea 	bl	80002c8 <__aeabi_dsub>
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	f7f4 fc9e 	bl	8000638 <__aeabi_dmul>
 800bcfc:	a338      	add	r3, pc, #224	; (adr r3, 800bde0 <__kernel_cos+0x158>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fae3 	bl	80002cc <__adddf3>
 800bd06:	4622      	mov	r2, r4
 800bd08:	462b      	mov	r3, r5
 800bd0a:	f7f4 fc95 	bl	8000638 <__aeabi_dmul>
 800bd0e:	a336      	add	r3, pc, #216	; (adr r3, 800bde8 <__kernel_cos+0x160>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	f7f4 fad8 	bl	80002c8 <__aeabi_dsub>
 800bd18:	4622      	mov	r2, r4
 800bd1a:	462b      	mov	r3, r5
 800bd1c:	f7f4 fc8c 	bl	8000638 <__aeabi_dmul>
 800bd20:	a333      	add	r3, pc, #204	; (adr r3, 800bdf0 <__kernel_cos+0x168>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fad1 	bl	80002cc <__adddf3>
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	f7f4 fc83 	bl	8000638 <__aeabi_dmul>
 800bd32:	4622      	mov	r2, r4
 800bd34:	462b      	mov	r3, r5
 800bd36:	f7f4 fc7f 	bl	8000638 <__aeabi_dmul>
 800bd3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd3e:	4604      	mov	r4, r0
 800bd40:	460d      	mov	r5, r1
 800bd42:	4630      	mov	r0, r6
 800bd44:	4639      	mov	r1, r7
 800bd46:	f7f4 fc77 	bl	8000638 <__aeabi_dmul>
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4620      	mov	r0, r4
 800bd52:	f7f4 fab9 	bl	80002c8 <__aeabi_dsub>
 800bd56:	4b2b      	ldr	r3, [pc, #172]	; (800be04 <__kernel_cos+0x17c>)
 800bd58:	4598      	cmp	r8, r3
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	460f      	mov	r7, r1
 800bd5e:	dc10      	bgt.n	800bd82 <__kernel_cos+0xfa>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4650      	mov	r0, sl
 800bd66:	4659      	mov	r1, fp
 800bd68:	f7f4 faae 	bl	80002c8 <__aeabi_dsub>
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4926      	ldr	r1, [pc, #152]	; (800be08 <__kernel_cos+0x180>)
 800bd70:	4602      	mov	r2, r0
 800bd72:	2000      	movs	r0, #0
 800bd74:	f7f4 faa8 	bl	80002c8 <__aeabi_dsub>
 800bd78:	ec41 0b10 	vmov	d0, r0, r1
 800bd7c:	b003      	add	sp, #12
 800bd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd82:	4b22      	ldr	r3, [pc, #136]	; (800be0c <__kernel_cos+0x184>)
 800bd84:	4920      	ldr	r1, [pc, #128]	; (800be08 <__kernel_cos+0x180>)
 800bd86:	4598      	cmp	r8, r3
 800bd88:	bfcc      	ite	gt
 800bd8a:	4d21      	ldrgt	r5, [pc, #132]	; (800be10 <__kernel_cos+0x188>)
 800bd8c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bd90:	2400      	movs	r4, #0
 800bd92:	4622      	mov	r2, r4
 800bd94:	462b      	mov	r3, r5
 800bd96:	2000      	movs	r0, #0
 800bd98:	f7f4 fa96 	bl	80002c8 <__aeabi_dsub>
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	4680      	mov	r8, r0
 800bda0:	4689      	mov	r9, r1
 800bda2:	462b      	mov	r3, r5
 800bda4:	4650      	mov	r0, sl
 800bda6:	4659      	mov	r1, fp
 800bda8:	f7f4 fa8e 	bl	80002c8 <__aeabi_dsub>
 800bdac:	4632      	mov	r2, r6
 800bdae:	463b      	mov	r3, r7
 800bdb0:	f7f4 fa8a 	bl	80002c8 <__aeabi_dsub>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4640      	mov	r0, r8
 800bdba:	4649      	mov	r1, r9
 800bdbc:	e7da      	b.n	800bd74 <__kernel_cos+0xec>
 800bdbe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bdf8 <__kernel_cos+0x170>
 800bdc2:	e7db      	b.n	800bd7c <__kernel_cos+0xf4>
 800bdc4:	f3af 8000 	nop.w
 800bdc8:	be8838d4 	.word	0xbe8838d4
 800bdcc:	bda8fae9 	.word	0xbda8fae9
 800bdd0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bdd4:	3e21ee9e 	.word	0x3e21ee9e
 800bdd8:	809c52ad 	.word	0x809c52ad
 800bddc:	3e927e4f 	.word	0x3e927e4f
 800bde0:	19cb1590 	.word	0x19cb1590
 800bde4:	3efa01a0 	.word	0x3efa01a0
 800bde8:	16c15177 	.word	0x16c15177
 800bdec:	3f56c16c 	.word	0x3f56c16c
 800bdf0:	5555554c 	.word	0x5555554c
 800bdf4:	3fa55555 	.word	0x3fa55555
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	3ff00000 	.word	0x3ff00000
 800be00:	3fe00000 	.word	0x3fe00000
 800be04:	3fd33332 	.word	0x3fd33332
 800be08:	3ff00000 	.word	0x3ff00000
 800be0c:	3fe90000 	.word	0x3fe90000
 800be10:	3fd20000 	.word	0x3fd20000
 800be14:	00000000 	.word	0x00000000

0800be18 <__kernel_rem_pio2>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	ed2d 8b02 	vpush	{d8}
 800be20:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800be24:	f112 0f14 	cmn.w	r2, #20
 800be28:	9308      	str	r3, [sp, #32]
 800be2a:	9101      	str	r1, [sp, #4]
 800be2c:	4bc4      	ldr	r3, [pc, #784]	; (800c140 <__kernel_rem_pio2+0x328>)
 800be2e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800be30:	900b      	str	r0, [sp, #44]	; 0x2c
 800be32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be36:	9302      	str	r3, [sp, #8]
 800be38:	9b08      	ldr	r3, [sp, #32]
 800be3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800be3e:	bfa8      	it	ge
 800be40:	1ed4      	subge	r4, r2, #3
 800be42:	9306      	str	r3, [sp, #24]
 800be44:	bfb2      	itee	lt
 800be46:	2400      	movlt	r4, #0
 800be48:	2318      	movge	r3, #24
 800be4a:	fb94 f4f3 	sdivge	r4, r4, r3
 800be4e:	f06f 0317 	mvn.w	r3, #23
 800be52:	fb04 3303 	mla	r3, r4, r3, r3
 800be56:	eb03 0a02 	add.w	sl, r3, r2
 800be5a:	9b02      	ldr	r3, [sp, #8]
 800be5c:	9a06      	ldr	r2, [sp, #24]
 800be5e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c130 <__kernel_rem_pio2+0x318>
 800be62:	eb03 0802 	add.w	r8, r3, r2
 800be66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800be68:	1aa7      	subs	r7, r4, r2
 800be6a:	ae22      	add	r6, sp, #136	; 0x88
 800be6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800be70:	2500      	movs	r5, #0
 800be72:	4545      	cmp	r5, r8
 800be74:	dd13      	ble.n	800be9e <__kernel_rem_pio2+0x86>
 800be76:	9b08      	ldr	r3, [sp, #32]
 800be78:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c130 <__kernel_rem_pio2+0x318>
 800be7c:	aa22      	add	r2, sp, #136	; 0x88
 800be7e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800be82:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800be86:	f04f 0800 	mov.w	r8, #0
 800be8a:	9b02      	ldr	r3, [sp, #8]
 800be8c:	4598      	cmp	r8, r3
 800be8e:	dc2f      	bgt.n	800bef0 <__kernel_rem_pio2+0xd8>
 800be90:	ed8d 8b04 	vstr	d8, [sp, #16]
 800be94:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800be98:	462f      	mov	r7, r5
 800be9a:	2600      	movs	r6, #0
 800be9c:	e01b      	b.n	800bed6 <__kernel_rem_pio2+0xbe>
 800be9e:	42ef      	cmn	r7, r5
 800bea0:	d407      	bmi.n	800beb2 <__kernel_rem_pio2+0x9a>
 800bea2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bea6:	f7f4 fb5d 	bl	8000564 <__aeabi_i2d>
 800beaa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800beae:	3501      	adds	r5, #1
 800beb0:	e7df      	b.n	800be72 <__kernel_rem_pio2+0x5a>
 800beb2:	ec51 0b18 	vmov	r0, r1, d8
 800beb6:	e7f8      	b.n	800beaa <__kernel_rem_pio2+0x92>
 800beb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bebc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bec0:	f7f4 fbba 	bl	8000638 <__aeabi_dmul>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800becc:	f7f4 f9fe 	bl	80002cc <__adddf3>
 800bed0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bed4:	3601      	adds	r6, #1
 800bed6:	9b06      	ldr	r3, [sp, #24]
 800bed8:	429e      	cmp	r6, r3
 800beda:	f1a7 0708 	sub.w	r7, r7, #8
 800bede:	ddeb      	ble.n	800beb8 <__kernel_rem_pio2+0xa0>
 800bee0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bee4:	f108 0801 	add.w	r8, r8, #1
 800bee8:	ecab 7b02 	vstmia	fp!, {d7}
 800beec:	3508      	adds	r5, #8
 800beee:	e7cc      	b.n	800be8a <__kernel_rem_pio2+0x72>
 800bef0:	9b02      	ldr	r3, [sp, #8]
 800bef2:	aa0e      	add	r2, sp, #56	; 0x38
 800bef4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bef8:	930d      	str	r3, [sp, #52]	; 0x34
 800befa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800befc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bf00:	9c02      	ldr	r4, [sp, #8]
 800bf02:	930c      	str	r3, [sp, #48]	; 0x30
 800bf04:	00e3      	lsls	r3, r4, #3
 800bf06:	930a      	str	r3, [sp, #40]	; 0x28
 800bf08:	ab9a      	add	r3, sp, #616	; 0x268
 800bf0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf0e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bf12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bf16:	ab72      	add	r3, sp, #456	; 0x1c8
 800bf18:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bf1c:	46c3      	mov	fp, r8
 800bf1e:	46a1      	mov	r9, r4
 800bf20:	f1b9 0f00 	cmp.w	r9, #0
 800bf24:	f1a5 0508 	sub.w	r5, r5, #8
 800bf28:	dc77      	bgt.n	800c01a <__kernel_rem_pio2+0x202>
 800bf2a:	ec47 6b10 	vmov	d0, r6, r7
 800bf2e:	4650      	mov	r0, sl
 800bf30:	f000 fc02 	bl	800c738 <scalbn>
 800bf34:	ec57 6b10 	vmov	r6, r7, d0
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bf3e:	ee10 0a10 	vmov	r0, s0
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 fb78 	bl	8000638 <__aeabi_dmul>
 800bf48:	ec41 0b10 	vmov	d0, r0, r1
 800bf4c:	f000 fb74 	bl	800c638 <floor>
 800bf50:	4b7c      	ldr	r3, [pc, #496]	; (800c144 <__kernel_rem_pio2+0x32c>)
 800bf52:	ec51 0b10 	vmov	r0, r1, d0
 800bf56:	2200      	movs	r2, #0
 800bf58:	f7f4 fb6e 	bl	8000638 <__aeabi_dmul>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 f9b0 	bl	80002c8 <__aeabi_dsub>
 800bf68:	460f      	mov	r7, r1
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	f7f4 fe14 	bl	8000b98 <__aeabi_d2iz>
 800bf70:	9004      	str	r0, [sp, #16]
 800bf72:	f7f4 faf7 	bl	8000564 <__aeabi_i2d>
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	f7f4 f9a3 	bl	80002c8 <__aeabi_dsub>
 800bf82:	f1ba 0f00 	cmp.w	sl, #0
 800bf86:	4606      	mov	r6, r0
 800bf88:	460f      	mov	r7, r1
 800bf8a:	dd6d      	ble.n	800c068 <__kernel_rem_pio2+0x250>
 800bf8c:	1e62      	subs	r2, r4, #1
 800bf8e:	ab0e      	add	r3, sp, #56	; 0x38
 800bf90:	9d04      	ldr	r5, [sp, #16]
 800bf92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bf96:	f1ca 0118 	rsb	r1, sl, #24
 800bf9a:	fa40 f301 	asr.w	r3, r0, r1
 800bf9e:	441d      	add	r5, r3
 800bfa0:	408b      	lsls	r3, r1
 800bfa2:	1ac0      	subs	r0, r0, r3
 800bfa4:	ab0e      	add	r3, sp, #56	; 0x38
 800bfa6:	9504      	str	r5, [sp, #16]
 800bfa8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bfac:	f1ca 0317 	rsb	r3, sl, #23
 800bfb0:	fa40 fb03 	asr.w	fp, r0, r3
 800bfb4:	f1bb 0f00 	cmp.w	fp, #0
 800bfb8:	dd65      	ble.n	800c086 <__kernel_rem_pio2+0x26e>
 800bfba:	9b04      	ldr	r3, [sp, #16]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	9304      	str	r3, [sp, #16]
 800bfc2:	4615      	mov	r5, r2
 800bfc4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bfc8:	4294      	cmp	r4, r2
 800bfca:	f300 809c 	bgt.w	800c106 <__kernel_rem_pio2+0x2ee>
 800bfce:	f1ba 0f00 	cmp.w	sl, #0
 800bfd2:	dd07      	ble.n	800bfe4 <__kernel_rem_pio2+0x1cc>
 800bfd4:	f1ba 0f01 	cmp.w	sl, #1
 800bfd8:	f000 80c0 	beq.w	800c15c <__kernel_rem_pio2+0x344>
 800bfdc:	f1ba 0f02 	cmp.w	sl, #2
 800bfe0:	f000 80c6 	beq.w	800c170 <__kernel_rem_pio2+0x358>
 800bfe4:	f1bb 0f02 	cmp.w	fp, #2
 800bfe8:	d14d      	bne.n	800c086 <__kernel_rem_pio2+0x26e>
 800bfea:	4632      	mov	r2, r6
 800bfec:	463b      	mov	r3, r7
 800bfee:	4956      	ldr	r1, [pc, #344]	; (800c148 <__kernel_rem_pio2+0x330>)
 800bff0:	2000      	movs	r0, #0
 800bff2:	f7f4 f969 	bl	80002c8 <__aeabi_dsub>
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	2d00      	cmp	r5, #0
 800bffc:	d043      	beq.n	800c086 <__kernel_rem_pio2+0x26e>
 800bffe:	4650      	mov	r0, sl
 800c000:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c138 <__kernel_rem_pio2+0x320>
 800c004:	f000 fb98 	bl	800c738 <scalbn>
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	ec53 2b10 	vmov	r2, r3, d0
 800c010:	f7f4 f95a 	bl	80002c8 <__aeabi_dsub>
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	e035      	b.n	800c086 <__kernel_rem_pio2+0x26e>
 800c01a:	4b4c      	ldr	r3, [pc, #304]	; (800c14c <__kernel_rem_pio2+0x334>)
 800c01c:	2200      	movs	r2, #0
 800c01e:	4630      	mov	r0, r6
 800c020:	4639      	mov	r1, r7
 800c022:	f7f4 fb09 	bl	8000638 <__aeabi_dmul>
 800c026:	f7f4 fdb7 	bl	8000b98 <__aeabi_d2iz>
 800c02a:	f7f4 fa9b 	bl	8000564 <__aeabi_i2d>
 800c02e:	4602      	mov	r2, r0
 800c030:	460b      	mov	r3, r1
 800c032:	ec43 2b18 	vmov	d8, r2, r3
 800c036:	4b46      	ldr	r3, [pc, #280]	; (800c150 <__kernel_rem_pio2+0x338>)
 800c038:	2200      	movs	r2, #0
 800c03a:	f7f4 fafd 	bl	8000638 <__aeabi_dmul>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4630      	mov	r0, r6
 800c044:	4639      	mov	r1, r7
 800c046:	f7f4 f93f 	bl	80002c8 <__aeabi_dsub>
 800c04a:	f7f4 fda5 	bl	8000b98 <__aeabi_d2iz>
 800c04e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c052:	f84b 0b04 	str.w	r0, [fp], #4
 800c056:	ec51 0b18 	vmov	r0, r1, d8
 800c05a:	f7f4 f937 	bl	80002cc <__adddf3>
 800c05e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c062:	4606      	mov	r6, r0
 800c064:	460f      	mov	r7, r1
 800c066:	e75b      	b.n	800bf20 <__kernel_rem_pio2+0x108>
 800c068:	d106      	bne.n	800c078 <__kernel_rem_pio2+0x260>
 800c06a:	1e63      	subs	r3, r4, #1
 800c06c:	aa0e      	add	r2, sp, #56	; 0x38
 800c06e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c072:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c076:	e79d      	b.n	800bfb4 <__kernel_rem_pio2+0x19c>
 800c078:	4b36      	ldr	r3, [pc, #216]	; (800c154 <__kernel_rem_pio2+0x33c>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	f7f4 fd62 	bl	8000b44 <__aeabi_dcmpge>
 800c080:	2800      	cmp	r0, #0
 800c082:	d13d      	bne.n	800c100 <__kernel_rem_pio2+0x2e8>
 800c084:	4683      	mov	fp, r0
 800c086:	2200      	movs	r2, #0
 800c088:	2300      	movs	r3, #0
 800c08a:	4630      	mov	r0, r6
 800c08c:	4639      	mov	r1, r7
 800c08e:	f7f4 fd3b 	bl	8000b08 <__aeabi_dcmpeq>
 800c092:	2800      	cmp	r0, #0
 800c094:	f000 80c0 	beq.w	800c218 <__kernel_rem_pio2+0x400>
 800c098:	1e65      	subs	r5, r4, #1
 800c09a:	462b      	mov	r3, r5
 800c09c:	2200      	movs	r2, #0
 800c09e:	9902      	ldr	r1, [sp, #8]
 800c0a0:	428b      	cmp	r3, r1
 800c0a2:	da6c      	bge.n	800c17e <__kernel_rem_pio2+0x366>
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	f000 8089 	beq.w	800c1bc <__kernel_rem_pio2+0x3a4>
 800c0aa:	ab0e      	add	r3, sp, #56	; 0x38
 800c0ac:	f1aa 0a18 	sub.w	sl, sl, #24
 800c0b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f000 80ad 	beq.w	800c214 <__kernel_rem_pio2+0x3fc>
 800c0ba:	4650      	mov	r0, sl
 800c0bc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c138 <__kernel_rem_pio2+0x320>
 800c0c0:	f000 fb3a 	bl	800c738 <scalbn>
 800c0c4:	ab9a      	add	r3, sp, #616	; 0x268
 800c0c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0ca:	ec57 6b10 	vmov	r6, r7, d0
 800c0ce:	00ec      	lsls	r4, r5, #3
 800c0d0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c0d4:	46aa      	mov	sl, r5
 800c0d6:	f1ba 0f00 	cmp.w	sl, #0
 800c0da:	f280 80d6 	bge.w	800c28a <__kernel_rem_pio2+0x472>
 800c0de:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c130 <__kernel_rem_pio2+0x318>
 800c0e2:	462e      	mov	r6, r5
 800c0e4:	2e00      	cmp	r6, #0
 800c0e6:	f2c0 8104 	blt.w	800c2f2 <__kernel_rem_pio2+0x4da>
 800c0ea:	ab72      	add	r3, sp, #456	; 0x1c8
 800c0ec:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c0f0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c158 <__kernel_rem_pio2+0x340>
 800c0f4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c0f8:	f04f 0800 	mov.w	r8, #0
 800c0fc:	1baf      	subs	r7, r5, r6
 800c0fe:	e0ea      	b.n	800c2d6 <__kernel_rem_pio2+0x4be>
 800c100:	f04f 0b02 	mov.w	fp, #2
 800c104:	e759      	b.n	800bfba <__kernel_rem_pio2+0x1a2>
 800c106:	f8d8 3000 	ldr.w	r3, [r8]
 800c10a:	b955      	cbnz	r5, 800c122 <__kernel_rem_pio2+0x30a>
 800c10c:	b123      	cbz	r3, 800c118 <__kernel_rem_pio2+0x300>
 800c10e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c112:	f8c8 3000 	str.w	r3, [r8]
 800c116:	2301      	movs	r3, #1
 800c118:	3201      	adds	r2, #1
 800c11a:	f108 0804 	add.w	r8, r8, #4
 800c11e:	461d      	mov	r5, r3
 800c120:	e752      	b.n	800bfc8 <__kernel_rem_pio2+0x1b0>
 800c122:	1acb      	subs	r3, r1, r3
 800c124:	f8c8 3000 	str.w	r3, [r8]
 800c128:	462b      	mov	r3, r5
 800c12a:	e7f5      	b.n	800c118 <__kernel_rem_pio2+0x300>
 800c12c:	f3af 8000 	nop.w
	...
 800c13c:	3ff00000 	.word	0x3ff00000
 800c140:	0800d080 	.word	0x0800d080
 800c144:	40200000 	.word	0x40200000
 800c148:	3ff00000 	.word	0x3ff00000
 800c14c:	3e700000 	.word	0x3e700000
 800c150:	41700000 	.word	0x41700000
 800c154:	3fe00000 	.word	0x3fe00000
 800c158:	0800d040 	.word	0x0800d040
 800c15c:	1e62      	subs	r2, r4, #1
 800c15e:	ab0e      	add	r3, sp, #56	; 0x38
 800c160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c164:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c168:	a90e      	add	r1, sp, #56	; 0x38
 800c16a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c16e:	e739      	b.n	800bfe4 <__kernel_rem_pio2+0x1cc>
 800c170:	1e62      	subs	r2, r4, #1
 800c172:	ab0e      	add	r3, sp, #56	; 0x38
 800c174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c178:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c17c:	e7f4      	b.n	800c168 <__kernel_rem_pio2+0x350>
 800c17e:	a90e      	add	r1, sp, #56	; 0x38
 800c180:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c184:	3b01      	subs	r3, #1
 800c186:	430a      	orrs	r2, r1
 800c188:	e789      	b.n	800c09e <__kernel_rem_pio2+0x286>
 800c18a:	3301      	adds	r3, #1
 800c18c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c190:	2900      	cmp	r1, #0
 800c192:	d0fa      	beq.n	800c18a <__kernel_rem_pio2+0x372>
 800c194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c196:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c19a:	446a      	add	r2, sp
 800c19c:	3a98      	subs	r2, #152	; 0x98
 800c19e:	920a      	str	r2, [sp, #40]	; 0x28
 800c1a0:	9a08      	ldr	r2, [sp, #32]
 800c1a2:	18e3      	adds	r3, r4, r3
 800c1a4:	18a5      	adds	r5, r4, r2
 800c1a6:	aa22      	add	r2, sp, #136	; 0x88
 800c1a8:	f104 0801 	add.w	r8, r4, #1
 800c1ac:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c1b0:	9304      	str	r3, [sp, #16]
 800c1b2:	9b04      	ldr	r3, [sp, #16]
 800c1b4:	4543      	cmp	r3, r8
 800c1b6:	da04      	bge.n	800c1c2 <__kernel_rem_pio2+0x3aa>
 800c1b8:	461c      	mov	r4, r3
 800c1ba:	e6a3      	b.n	800bf04 <__kernel_rem_pio2+0xec>
 800c1bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e7e4      	b.n	800c18c <__kernel_rem_pio2+0x374>
 800c1c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c1c8:	f7f4 f9cc 	bl	8000564 <__aeabi_i2d>
 800c1cc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1d2:	46ab      	mov	fp, r5
 800c1d4:	461c      	mov	r4, r3
 800c1d6:	f04f 0900 	mov.w	r9, #0
 800c1da:	2600      	movs	r6, #0
 800c1dc:	2700      	movs	r7, #0
 800c1de:	9b06      	ldr	r3, [sp, #24]
 800c1e0:	4599      	cmp	r9, r3
 800c1e2:	dd06      	ble.n	800c1f2 <__kernel_rem_pio2+0x3da>
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c1ea:	f108 0801 	add.w	r8, r8, #1
 800c1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c1f0:	e7df      	b.n	800c1b2 <__kernel_rem_pio2+0x39a>
 800c1f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c1f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c1fa:	f7f4 fa1d 	bl	8000638 <__aeabi_dmul>
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	4630      	mov	r0, r6
 800c204:	4639      	mov	r1, r7
 800c206:	f7f4 f861 	bl	80002cc <__adddf3>
 800c20a:	f109 0901 	add.w	r9, r9, #1
 800c20e:	4606      	mov	r6, r0
 800c210:	460f      	mov	r7, r1
 800c212:	e7e4      	b.n	800c1de <__kernel_rem_pio2+0x3c6>
 800c214:	3d01      	subs	r5, #1
 800c216:	e748      	b.n	800c0aa <__kernel_rem_pio2+0x292>
 800c218:	ec47 6b10 	vmov	d0, r6, r7
 800c21c:	f1ca 0000 	rsb	r0, sl, #0
 800c220:	f000 fa8a 	bl	800c738 <scalbn>
 800c224:	ec57 6b10 	vmov	r6, r7, d0
 800c228:	4ba0      	ldr	r3, [pc, #640]	; (800c4ac <__kernel_rem_pio2+0x694>)
 800c22a:	ee10 0a10 	vmov	r0, s0
 800c22e:	2200      	movs	r2, #0
 800c230:	4639      	mov	r1, r7
 800c232:	f7f4 fc87 	bl	8000b44 <__aeabi_dcmpge>
 800c236:	b1f8      	cbz	r0, 800c278 <__kernel_rem_pio2+0x460>
 800c238:	4b9d      	ldr	r3, [pc, #628]	; (800c4b0 <__kernel_rem_pio2+0x698>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	4630      	mov	r0, r6
 800c23e:	4639      	mov	r1, r7
 800c240:	f7f4 f9fa 	bl	8000638 <__aeabi_dmul>
 800c244:	f7f4 fca8 	bl	8000b98 <__aeabi_d2iz>
 800c248:	4680      	mov	r8, r0
 800c24a:	f7f4 f98b 	bl	8000564 <__aeabi_i2d>
 800c24e:	4b97      	ldr	r3, [pc, #604]	; (800c4ac <__kernel_rem_pio2+0x694>)
 800c250:	2200      	movs	r2, #0
 800c252:	f7f4 f9f1 	bl	8000638 <__aeabi_dmul>
 800c256:	460b      	mov	r3, r1
 800c258:	4602      	mov	r2, r0
 800c25a:	4639      	mov	r1, r7
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7f4 f833 	bl	80002c8 <__aeabi_dsub>
 800c262:	f7f4 fc99 	bl	8000b98 <__aeabi_d2iz>
 800c266:	1c65      	adds	r5, r4, #1
 800c268:	ab0e      	add	r3, sp, #56	; 0x38
 800c26a:	f10a 0a18 	add.w	sl, sl, #24
 800c26e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c272:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c276:	e720      	b.n	800c0ba <__kernel_rem_pio2+0x2a2>
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 fc8c 	bl	8000b98 <__aeabi_d2iz>
 800c280:	ab0e      	add	r3, sp, #56	; 0x38
 800c282:	4625      	mov	r5, r4
 800c284:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c288:	e717      	b.n	800c0ba <__kernel_rem_pio2+0x2a2>
 800c28a:	ab0e      	add	r3, sp, #56	; 0x38
 800c28c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c290:	f7f4 f968 	bl	8000564 <__aeabi_i2d>
 800c294:	4632      	mov	r2, r6
 800c296:	463b      	mov	r3, r7
 800c298:	f7f4 f9ce 	bl	8000638 <__aeabi_dmul>
 800c29c:	4b84      	ldr	r3, [pc, #528]	; (800c4b0 <__kernel_rem_pio2+0x698>)
 800c29e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	f7f4 f9c6 	bl	8000638 <__aeabi_dmul>
 800c2ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2b0:	4606      	mov	r6, r0
 800c2b2:	460f      	mov	r7, r1
 800c2b4:	e70f      	b.n	800c0d6 <__kernel_rem_pio2+0x2be>
 800c2b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c2ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c2be:	f7f4 f9bb 	bl	8000638 <__aeabi_dmul>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ca:	f7f3 ffff 	bl	80002cc <__adddf3>
 800c2ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2d2:	f108 0801 	add.w	r8, r8, #1
 800c2d6:	9b02      	ldr	r3, [sp, #8]
 800c2d8:	4598      	cmp	r8, r3
 800c2da:	dc01      	bgt.n	800c2e0 <__kernel_rem_pio2+0x4c8>
 800c2dc:	45b8      	cmp	r8, r7
 800c2de:	ddea      	ble.n	800c2b6 <__kernel_rem_pio2+0x49e>
 800c2e0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c2e4:	ab4a      	add	r3, sp, #296	; 0x128
 800c2e6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c2ea:	ed87 7b00 	vstr	d7, [r7]
 800c2ee:	3e01      	subs	r6, #1
 800c2f0:	e6f8      	b.n	800c0e4 <__kernel_rem_pio2+0x2cc>
 800c2f2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	dc0b      	bgt.n	800c310 <__kernel_rem_pio2+0x4f8>
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dc35      	bgt.n	800c368 <__kernel_rem_pio2+0x550>
 800c2fc:	d059      	beq.n	800c3b2 <__kernel_rem_pio2+0x59a>
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	f003 0007 	and.w	r0, r3, #7
 800c304:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c308:	ecbd 8b02 	vpop	{d8}
 800c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c310:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c312:	2b03      	cmp	r3, #3
 800c314:	d1f3      	bne.n	800c2fe <__kernel_rem_pio2+0x4e6>
 800c316:	ab4a      	add	r3, sp, #296	; 0x128
 800c318:	4423      	add	r3, r4
 800c31a:	9306      	str	r3, [sp, #24]
 800c31c:	461c      	mov	r4, r3
 800c31e:	469a      	mov	sl, r3
 800c320:	9502      	str	r5, [sp, #8]
 800c322:	9b02      	ldr	r3, [sp, #8]
 800c324:	2b00      	cmp	r3, #0
 800c326:	f1aa 0a08 	sub.w	sl, sl, #8
 800c32a:	dc6b      	bgt.n	800c404 <__kernel_rem_pio2+0x5ec>
 800c32c:	46aa      	mov	sl, r5
 800c32e:	f1ba 0f01 	cmp.w	sl, #1
 800c332:	f1a4 0408 	sub.w	r4, r4, #8
 800c336:	f300 8085 	bgt.w	800c444 <__kernel_rem_pio2+0x62c>
 800c33a:	9c06      	ldr	r4, [sp, #24]
 800c33c:	2000      	movs	r0, #0
 800c33e:	3408      	adds	r4, #8
 800c340:	2100      	movs	r1, #0
 800c342:	2d01      	cmp	r5, #1
 800c344:	f300 809d 	bgt.w	800c482 <__kernel_rem_pio2+0x66a>
 800c348:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c34c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c350:	f1bb 0f00 	cmp.w	fp, #0
 800c354:	f040 809b 	bne.w	800c48e <__kernel_rem_pio2+0x676>
 800c358:	9b01      	ldr	r3, [sp, #4]
 800c35a:	e9c3 5600 	strd	r5, r6, [r3]
 800c35e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c362:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c366:	e7ca      	b.n	800c2fe <__kernel_rem_pio2+0x4e6>
 800c368:	3408      	adds	r4, #8
 800c36a:	ab4a      	add	r3, sp, #296	; 0x128
 800c36c:	441c      	add	r4, r3
 800c36e:	462e      	mov	r6, r5
 800c370:	2000      	movs	r0, #0
 800c372:	2100      	movs	r1, #0
 800c374:	2e00      	cmp	r6, #0
 800c376:	da36      	bge.n	800c3e6 <__kernel_rem_pio2+0x5ce>
 800c378:	f1bb 0f00 	cmp.w	fp, #0
 800c37c:	d039      	beq.n	800c3f2 <__kernel_rem_pio2+0x5da>
 800c37e:	4602      	mov	r2, r0
 800c380:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c384:	9c01      	ldr	r4, [sp, #4]
 800c386:	e9c4 2300 	strd	r2, r3, [r4]
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c392:	f7f3 ff99 	bl	80002c8 <__aeabi_dsub>
 800c396:	ae4c      	add	r6, sp, #304	; 0x130
 800c398:	2401      	movs	r4, #1
 800c39a:	42a5      	cmp	r5, r4
 800c39c:	da2c      	bge.n	800c3f8 <__kernel_rem_pio2+0x5e0>
 800c39e:	f1bb 0f00 	cmp.w	fp, #0
 800c3a2:	d002      	beq.n	800c3aa <__kernel_rem_pio2+0x592>
 800c3a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	9b01      	ldr	r3, [sp, #4]
 800c3ac:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c3b0:	e7a5      	b.n	800c2fe <__kernel_rem_pio2+0x4e6>
 800c3b2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c3b6:	eb0d 0403 	add.w	r4, sp, r3
 800c3ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c3be:	2000      	movs	r0, #0
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	2d00      	cmp	r5, #0
 800c3c4:	da09      	bge.n	800c3da <__kernel_rem_pio2+0x5c2>
 800c3c6:	f1bb 0f00 	cmp.w	fp, #0
 800c3ca:	d002      	beq.n	800c3d2 <__kernel_rem_pio2+0x5ba>
 800c3cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	9b01      	ldr	r3, [sp, #4]
 800c3d4:	e9c3 0100 	strd	r0, r1, [r3]
 800c3d8:	e791      	b.n	800c2fe <__kernel_rem_pio2+0x4e6>
 800c3da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3de:	f7f3 ff75 	bl	80002cc <__adddf3>
 800c3e2:	3d01      	subs	r5, #1
 800c3e4:	e7ed      	b.n	800c3c2 <__kernel_rem_pio2+0x5aa>
 800c3e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3ea:	f7f3 ff6f 	bl	80002cc <__adddf3>
 800c3ee:	3e01      	subs	r6, #1
 800c3f0:	e7c0      	b.n	800c374 <__kernel_rem_pio2+0x55c>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	e7c5      	b.n	800c384 <__kernel_rem_pio2+0x56c>
 800c3f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c3fc:	f7f3 ff66 	bl	80002cc <__adddf3>
 800c400:	3401      	adds	r4, #1
 800c402:	e7ca      	b.n	800c39a <__kernel_rem_pio2+0x582>
 800c404:	e9da 8900 	ldrd	r8, r9, [sl]
 800c408:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c40c:	9b02      	ldr	r3, [sp, #8]
 800c40e:	3b01      	subs	r3, #1
 800c410:	9302      	str	r3, [sp, #8]
 800c412:	4632      	mov	r2, r6
 800c414:	463b      	mov	r3, r7
 800c416:	4640      	mov	r0, r8
 800c418:	4649      	mov	r1, r9
 800c41a:	f7f3 ff57 	bl	80002cc <__adddf3>
 800c41e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4640      	mov	r0, r8
 800c428:	4649      	mov	r1, r9
 800c42a:	f7f3 ff4d 	bl	80002c8 <__aeabi_dsub>
 800c42e:	4632      	mov	r2, r6
 800c430:	463b      	mov	r3, r7
 800c432:	f7f3 ff4b 	bl	80002cc <__adddf3>
 800c436:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c43a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c43e:	ed8a 7b00 	vstr	d7, [sl]
 800c442:	e76e      	b.n	800c322 <__kernel_rem_pio2+0x50a>
 800c444:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c448:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c44c:	4640      	mov	r0, r8
 800c44e:	4632      	mov	r2, r6
 800c450:	463b      	mov	r3, r7
 800c452:	4649      	mov	r1, r9
 800c454:	f7f3 ff3a 	bl	80002cc <__adddf3>
 800c458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	4640      	mov	r0, r8
 800c462:	4649      	mov	r1, r9
 800c464:	f7f3 ff30 	bl	80002c8 <__aeabi_dsub>
 800c468:	4632      	mov	r2, r6
 800c46a:	463b      	mov	r3, r7
 800c46c:	f7f3 ff2e 	bl	80002cc <__adddf3>
 800c470:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c474:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c478:	ed84 7b00 	vstr	d7, [r4]
 800c47c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c480:	e755      	b.n	800c32e <__kernel_rem_pio2+0x516>
 800c482:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c486:	f7f3 ff21 	bl	80002cc <__adddf3>
 800c48a:	3d01      	subs	r5, #1
 800c48c:	e759      	b.n	800c342 <__kernel_rem_pio2+0x52a>
 800c48e:	9b01      	ldr	r3, [sp, #4]
 800c490:	9a01      	ldr	r2, [sp, #4]
 800c492:	601d      	str	r5, [r3, #0]
 800c494:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c498:	605c      	str	r4, [r3, #4]
 800c49a:	609f      	str	r7, [r3, #8]
 800c49c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c4a0:	60d3      	str	r3, [r2, #12]
 800c4a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4a6:	6110      	str	r0, [r2, #16]
 800c4a8:	6153      	str	r3, [r2, #20]
 800c4aa:	e728      	b.n	800c2fe <__kernel_rem_pio2+0x4e6>
 800c4ac:	41700000 	.word	0x41700000
 800c4b0:	3e700000 	.word	0x3e700000
 800c4b4:	00000000 	.word	0x00000000

0800c4b8 <__kernel_sin>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	ed2d 8b04 	vpush	{d8-d9}
 800c4c0:	eeb0 8a41 	vmov.f32	s16, s2
 800c4c4:	eef0 8a61 	vmov.f32	s17, s3
 800c4c8:	ec55 4b10 	vmov	r4, r5, d0
 800c4cc:	b083      	sub	sp, #12
 800c4ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c4d6:	9001      	str	r0, [sp, #4]
 800c4d8:	da06      	bge.n	800c4e8 <__kernel_sin+0x30>
 800c4da:	ee10 0a10 	vmov	r0, s0
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f4 fb5a 	bl	8000b98 <__aeabi_d2iz>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d051      	beq.n	800c58c <__kernel_sin+0xd4>
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	462b      	mov	r3, r5
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	f7f4 f8a2 	bl	8000638 <__aeabi_dmul>
 800c4f4:	4682      	mov	sl, r0
 800c4f6:	468b      	mov	fp, r1
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	f7f4 f89a 	bl	8000638 <__aeabi_dmul>
 800c504:	a341      	add	r3, pc, #260	; (adr r3, 800c60c <__kernel_sin+0x154>)
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	4680      	mov	r8, r0
 800c50c:	4689      	mov	r9, r1
 800c50e:	4650      	mov	r0, sl
 800c510:	4659      	mov	r1, fp
 800c512:	f7f4 f891 	bl	8000638 <__aeabi_dmul>
 800c516:	a33f      	add	r3, pc, #252	; (adr r3, 800c614 <__kernel_sin+0x15c>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	f7f3 fed4 	bl	80002c8 <__aeabi_dsub>
 800c520:	4652      	mov	r2, sl
 800c522:	465b      	mov	r3, fp
 800c524:	f7f4 f888 	bl	8000638 <__aeabi_dmul>
 800c528:	a33c      	add	r3, pc, #240	; (adr r3, 800c61c <__kernel_sin+0x164>)
 800c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52e:	f7f3 fecd 	bl	80002cc <__adddf3>
 800c532:	4652      	mov	r2, sl
 800c534:	465b      	mov	r3, fp
 800c536:	f7f4 f87f 	bl	8000638 <__aeabi_dmul>
 800c53a:	a33a      	add	r3, pc, #232	; (adr r3, 800c624 <__kernel_sin+0x16c>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f7f3 fec2 	bl	80002c8 <__aeabi_dsub>
 800c544:	4652      	mov	r2, sl
 800c546:	465b      	mov	r3, fp
 800c548:	f7f4 f876 	bl	8000638 <__aeabi_dmul>
 800c54c:	a337      	add	r3, pc, #220	; (adr r3, 800c62c <__kernel_sin+0x174>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	f7f3 febb 	bl	80002cc <__adddf3>
 800c556:	9b01      	ldr	r3, [sp, #4]
 800c558:	4606      	mov	r6, r0
 800c55a:	460f      	mov	r7, r1
 800c55c:	b9eb      	cbnz	r3, 800c59a <__kernel_sin+0xe2>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4650      	mov	r0, sl
 800c564:	4659      	mov	r1, fp
 800c566:	f7f4 f867 	bl	8000638 <__aeabi_dmul>
 800c56a:	a325      	add	r3, pc, #148	; (adr r3, 800c600 <__kernel_sin+0x148>)
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	f7f3 feaa 	bl	80002c8 <__aeabi_dsub>
 800c574:	4642      	mov	r2, r8
 800c576:	464b      	mov	r3, r9
 800c578:	f7f4 f85e 	bl	8000638 <__aeabi_dmul>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	4620      	mov	r0, r4
 800c582:	4629      	mov	r1, r5
 800c584:	f7f3 fea2 	bl	80002cc <__adddf3>
 800c588:	4604      	mov	r4, r0
 800c58a:	460d      	mov	r5, r1
 800c58c:	ec45 4b10 	vmov	d0, r4, r5
 800c590:	b003      	add	sp, #12
 800c592:	ecbd 8b04 	vpop	{d8-d9}
 800c596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59a:	4b1b      	ldr	r3, [pc, #108]	; (800c608 <__kernel_sin+0x150>)
 800c59c:	ec51 0b18 	vmov	r0, r1, d8
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f7f4 f849 	bl	8000638 <__aeabi_dmul>
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	ec41 0b19 	vmov	d9, r0, r1
 800c5ac:	463b      	mov	r3, r7
 800c5ae:	4640      	mov	r0, r8
 800c5b0:	4649      	mov	r1, r9
 800c5b2:	f7f4 f841 	bl	8000638 <__aeabi_dmul>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	ec51 0b19 	vmov	r0, r1, d9
 800c5be:	f7f3 fe83 	bl	80002c8 <__aeabi_dsub>
 800c5c2:	4652      	mov	r2, sl
 800c5c4:	465b      	mov	r3, fp
 800c5c6:	f7f4 f837 	bl	8000638 <__aeabi_dmul>
 800c5ca:	ec53 2b18 	vmov	r2, r3, d8
 800c5ce:	f7f3 fe7b 	bl	80002c8 <__aeabi_dsub>
 800c5d2:	a30b      	add	r3, pc, #44	; (adr r3, 800c600 <__kernel_sin+0x148>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	4606      	mov	r6, r0
 800c5da:	460f      	mov	r7, r1
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f4 f82a 	bl	8000638 <__aeabi_dmul>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	4639      	mov	r1, r7
 800c5ec:	f7f3 fe6e 	bl	80002cc <__adddf3>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f3 fe66 	bl	80002c8 <__aeabi_dsub>
 800c5fc:	e7c4      	b.n	800c588 <__kernel_sin+0xd0>
 800c5fe:	bf00      	nop
 800c600:	55555549 	.word	0x55555549
 800c604:	3fc55555 	.word	0x3fc55555
 800c608:	3fe00000 	.word	0x3fe00000
 800c60c:	5acfd57c 	.word	0x5acfd57c
 800c610:	3de5d93a 	.word	0x3de5d93a
 800c614:	8a2b9ceb 	.word	0x8a2b9ceb
 800c618:	3e5ae5e6 	.word	0x3e5ae5e6
 800c61c:	57b1fe7d 	.word	0x57b1fe7d
 800c620:	3ec71de3 	.word	0x3ec71de3
 800c624:	19c161d5 	.word	0x19c161d5
 800c628:	3f2a01a0 	.word	0x3f2a01a0
 800c62c:	1110f8a6 	.word	0x1110f8a6
 800c630:	3f811111 	.word	0x3f811111
 800c634:	00000000 	.word	0x00000000

0800c638 <floor>:
 800c638:	ec51 0b10 	vmov	r0, r1, d0
 800c63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c640:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c644:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c648:	2e13      	cmp	r6, #19
 800c64a:	ee10 5a10 	vmov	r5, s0
 800c64e:	ee10 8a10 	vmov	r8, s0
 800c652:	460c      	mov	r4, r1
 800c654:	dc32      	bgt.n	800c6bc <floor+0x84>
 800c656:	2e00      	cmp	r6, #0
 800c658:	da14      	bge.n	800c684 <floor+0x4c>
 800c65a:	a333      	add	r3, pc, #204	; (adr r3, 800c728 <floor+0xf0>)
 800c65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c660:	f7f3 fe34 	bl	80002cc <__adddf3>
 800c664:	2200      	movs	r2, #0
 800c666:	2300      	movs	r3, #0
 800c668:	f7f4 fa76 	bl	8000b58 <__aeabi_dcmpgt>
 800c66c:	b138      	cbz	r0, 800c67e <floor+0x46>
 800c66e:	2c00      	cmp	r4, #0
 800c670:	da57      	bge.n	800c722 <floor+0xea>
 800c672:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c676:	431d      	orrs	r5, r3
 800c678:	d001      	beq.n	800c67e <floor+0x46>
 800c67a:	4c2d      	ldr	r4, [pc, #180]	; (800c730 <floor+0xf8>)
 800c67c:	2500      	movs	r5, #0
 800c67e:	4621      	mov	r1, r4
 800c680:	4628      	mov	r0, r5
 800c682:	e025      	b.n	800c6d0 <floor+0x98>
 800c684:	4f2b      	ldr	r7, [pc, #172]	; (800c734 <floor+0xfc>)
 800c686:	4137      	asrs	r7, r6
 800c688:	ea01 0307 	and.w	r3, r1, r7
 800c68c:	4303      	orrs	r3, r0
 800c68e:	d01f      	beq.n	800c6d0 <floor+0x98>
 800c690:	a325      	add	r3, pc, #148	; (adr r3, 800c728 <floor+0xf0>)
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	f7f3 fe19 	bl	80002cc <__adddf3>
 800c69a:	2200      	movs	r2, #0
 800c69c:	2300      	movs	r3, #0
 800c69e:	f7f4 fa5b 	bl	8000b58 <__aeabi_dcmpgt>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d0eb      	beq.n	800c67e <floor+0x46>
 800c6a6:	2c00      	cmp	r4, #0
 800c6a8:	bfbe      	ittt	lt
 800c6aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c6ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800c6b2:	19a4      	addlt	r4, r4, r6
 800c6b4:	ea24 0407 	bic.w	r4, r4, r7
 800c6b8:	2500      	movs	r5, #0
 800c6ba:	e7e0      	b.n	800c67e <floor+0x46>
 800c6bc:	2e33      	cmp	r6, #51	; 0x33
 800c6be:	dd0b      	ble.n	800c6d8 <floor+0xa0>
 800c6c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c6c4:	d104      	bne.n	800c6d0 <floor+0x98>
 800c6c6:	ee10 2a10 	vmov	r2, s0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	f7f3 fdfe 	bl	80002cc <__adddf3>
 800c6d0:	ec41 0b10 	vmov	d0, r0, r1
 800c6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e0:	fa23 f707 	lsr.w	r7, r3, r7
 800c6e4:	4207      	tst	r7, r0
 800c6e6:	d0f3      	beq.n	800c6d0 <floor+0x98>
 800c6e8:	a30f      	add	r3, pc, #60	; (adr r3, 800c728 <floor+0xf0>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	f7f3 fded 	bl	80002cc <__adddf3>
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f7f4 fa2f 	bl	8000b58 <__aeabi_dcmpgt>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d0bf      	beq.n	800c67e <floor+0x46>
 800c6fe:	2c00      	cmp	r4, #0
 800c700:	da02      	bge.n	800c708 <floor+0xd0>
 800c702:	2e14      	cmp	r6, #20
 800c704:	d103      	bne.n	800c70e <floor+0xd6>
 800c706:	3401      	adds	r4, #1
 800c708:	ea25 0507 	bic.w	r5, r5, r7
 800c70c:	e7b7      	b.n	800c67e <floor+0x46>
 800c70e:	2301      	movs	r3, #1
 800c710:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c714:	fa03 f606 	lsl.w	r6, r3, r6
 800c718:	4435      	add	r5, r6
 800c71a:	4545      	cmp	r5, r8
 800c71c:	bf38      	it	cc
 800c71e:	18e4      	addcc	r4, r4, r3
 800c720:	e7f2      	b.n	800c708 <floor+0xd0>
 800c722:	2500      	movs	r5, #0
 800c724:	462c      	mov	r4, r5
 800c726:	e7aa      	b.n	800c67e <floor+0x46>
 800c728:	8800759c 	.word	0x8800759c
 800c72c:	7e37e43c 	.word	0x7e37e43c
 800c730:	bff00000 	.word	0xbff00000
 800c734:	000fffff 	.word	0x000fffff

0800c738 <scalbn>:
 800c738:	b570      	push	{r4, r5, r6, lr}
 800c73a:	ec55 4b10 	vmov	r4, r5, d0
 800c73e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c742:	4606      	mov	r6, r0
 800c744:	462b      	mov	r3, r5
 800c746:	b99a      	cbnz	r2, 800c770 <scalbn+0x38>
 800c748:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c74c:	4323      	orrs	r3, r4
 800c74e:	d036      	beq.n	800c7be <scalbn+0x86>
 800c750:	4b39      	ldr	r3, [pc, #228]	; (800c838 <scalbn+0x100>)
 800c752:	4629      	mov	r1, r5
 800c754:	ee10 0a10 	vmov	r0, s0
 800c758:	2200      	movs	r2, #0
 800c75a:	f7f3 ff6d 	bl	8000638 <__aeabi_dmul>
 800c75e:	4b37      	ldr	r3, [pc, #220]	; (800c83c <scalbn+0x104>)
 800c760:	429e      	cmp	r6, r3
 800c762:	4604      	mov	r4, r0
 800c764:	460d      	mov	r5, r1
 800c766:	da10      	bge.n	800c78a <scalbn+0x52>
 800c768:	a32b      	add	r3, pc, #172	; (adr r3, 800c818 <scalbn+0xe0>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	e03a      	b.n	800c7e6 <scalbn+0xae>
 800c770:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c774:	428a      	cmp	r2, r1
 800c776:	d10c      	bne.n	800c792 <scalbn+0x5a>
 800c778:	ee10 2a10 	vmov	r2, s0
 800c77c:	4620      	mov	r0, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	f7f3 fda4 	bl	80002cc <__adddf3>
 800c784:	4604      	mov	r4, r0
 800c786:	460d      	mov	r5, r1
 800c788:	e019      	b.n	800c7be <scalbn+0x86>
 800c78a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c78e:	460b      	mov	r3, r1
 800c790:	3a36      	subs	r2, #54	; 0x36
 800c792:	4432      	add	r2, r6
 800c794:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c798:	428a      	cmp	r2, r1
 800c79a:	dd08      	ble.n	800c7ae <scalbn+0x76>
 800c79c:	2d00      	cmp	r5, #0
 800c79e:	a120      	add	r1, pc, #128	; (adr r1, 800c820 <scalbn+0xe8>)
 800c7a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a4:	da1c      	bge.n	800c7e0 <scalbn+0xa8>
 800c7a6:	a120      	add	r1, pc, #128	; (adr r1, 800c828 <scalbn+0xf0>)
 800c7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ac:	e018      	b.n	800c7e0 <scalbn+0xa8>
 800c7ae:	2a00      	cmp	r2, #0
 800c7b0:	dd08      	ble.n	800c7c4 <scalbn+0x8c>
 800c7b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c7ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c7be:	ec45 4b10 	vmov	d0, r4, r5
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c7c8:	da19      	bge.n	800c7fe <scalbn+0xc6>
 800c7ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c7ce:	429e      	cmp	r6, r3
 800c7d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c7d4:	dd0a      	ble.n	800c7ec <scalbn+0xb4>
 800c7d6:	a112      	add	r1, pc, #72	; (adr r1, 800c820 <scalbn+0xe8>)
 800c7d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1e2      	bne.n	800c7a6 <scalbn+0x6e>
 800c7e0:	a30f      	add	r3, pc, #60	; (adr r3, 800c820 <scalbn+0xe8>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	f7f3 ff27 	bl	8000638 <__aeabi_dmul>
 800c7ea:	e7cb      	b.n	800c784 <scalbn+0x4c>
 800c7ec:	a10a      	add	r1, pc, #40	; (adr r1, 800c818 <scalbn+0xe0>)
 800c7ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0b8      	beq.n	800c768 <scalbn+0x30>
 800c7f6:	a10e      	add	r1, pc, #56	; (adr r1, 800c830 <scalbn+0xf8>)
 800c7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7fc:	e7b4      	b.n	800c768 <scalbn+0x30>
 800c7fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c802:	3236      	adds	r2, #54	; 0x36
 800c804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c808:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c80c:	4620      	mov	r0, r4
 800c80e:	4b0c      	ldr	r3, [pc, #48]	; (800c840 <scalbn+0x108>)
 800c810:	2200      	movs	r2, #0
 800c812:	e7e8      	b.n	800c7e6 <scalbn+0xae>
 800c814:	f3af 8000 	nop.w
 800c818:	c2f8f359 	.word	0xc2f8f359
 800c81c:	01a56e1f 	.word	0x01a56e1f
 800c820:	8800759c 	.word	0x8800759c
 800c824:	7e37e43c 	.word	0x7e37e43c
 800c828:	8800759c 	.word	0x8800759c
 800c82c:	fe37e43c 	.word	0xfe37e43c
 800c830:	c2f8f359 	.word	0xc2f8f359
 800c834:	81a56e1f 	.word	0x81a56e1f
 800c838:	43500000 	.word	0x43500000
 800c83c:	ffff3cb0 	.word	0xffff3cb0
 800c840:	3c900000 	.word	0x3c900000

0800c844 <_init>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	bf00      	nop
 800c848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84a:	bc08      	pop	{r3}
 800c84c:	469e      	mov	lr, r3
 800c84e:	4770      	bx	lr

0800c850 <_fini>:
 800c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c852:	bf00      	nop
 800c854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c856:	bc08      	pop	{r3}
 800c858:	469e      	mov	lr, r3
 800c85a:	4770      	bx	lr
