
PhobosMainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c774  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000838  0800c948  0800c948  0001c948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d180  0800d180  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d180  0800d180  0001d180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d188  0800d188  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d188  0800d188  0001d188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d18c  0800d18c  0001d18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  200001e0  0800d370  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  0800d370  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000201d1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004060  00000000  00000000  000403e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00044448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  000455a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f2b  00000000  00000000  00046550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018eba  00000000  00000000  0006c47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b19  00000000  00000000  00085335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158e4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  00158ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c92c 	.word	0x0800c92c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c92c 	.word	0x0800c92c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <avoidance_initialize>:
#include "avoidance.h"


void avoidance_initialize() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	avoidanceState = PATH_CLEAR;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <avoidance_initialize+0x28>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	avoidanceCurve = bezier_newEmpty();
 8000f8a:	f000 f911 	bl	80011b0 <bezier_newEmpty>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <avoidance_initialize+0x2c>)
 8000f92:	6013      	str	r3, [r2, #0]
	backtrackingAim = 0;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <avoidance_initialize+0x30>)
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
	avoidanceSpeedFactor = 1;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <avoidance_initialize+0x34>)
 8000f9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000258 	.word	0x20000258
 8000fac:	20000254 	.word	0x20000254
 8000fb0:	2000024c 	.word	0x2000024c
 8000fb4:	20000248 	.word	0x20000248

08000fb8 <avoidance_update>:


void avoidance_update(float t, Direction dir) {
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	70fb      	strb	r3, [r7, #3]
	int distance = lidar_getDistance(dir);
 8000fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fe88 	bl	8001ce0 <lidar_getDistance>
 8000fd0:	60f8      	str	r0, [r7, #12]

	if ((avoidanceState == PATH_CLEAR || avoidanceState == PATH_CROWDED) && distance < LIDAR_THRESHOLD) {
 8000fd2:	4b55      	ldr	r3, [pc, #340]	; (8001128 <avoidance_update+0x170>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <avoidance_update+0x2a>
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <avoidance_update+0x170>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d112      	bne.n	8001008 <avoidance_update+0x50>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b27      	cmp	r3, #39	; 0x27
 8000fe6:	dc0f      	bgt.n	8001008 <avoidance_update+0x50>
		avoidanceState = PATH_OBSTRUCTED;
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <avoidance_update+0x170>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	701a      	strb	r2, [r3, #0]
		printf("Obstacle detected. Waiting 2s...\r\n");
 8000fee:	484f      	ldr	r0, [pc, #316]	; (800112c <avoidance_update+0x174>)
 8000ff0:	f007 ffc0 	bl	8008f74 <puts>
		propulsion_setSpeeds(0, 0);
 8000ff4:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8001130 <avoidance_update+0x178>
 8000ff8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001130 <avoidance_update+0x178>
 8000ffc:	f001 f90c 	bl	8002218 <propulsion_setSpeeds>
		HAL_Delay(2000);
 8001000:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001004:	f003 fefa 	bl	8004dfc <HAL_Delay>
	}

	if ((avoidanceState == PATH_CLEAR || avoidanceState == PATH_OBSTRUCTED) && distance > LIDAR_THRESHOLD && distance < LIDAR_MAX_DISTANCE) {
 8001008:	4b47      	ldr	r3, [pc, #284]	; (8001128 <avoidance_update+0x170>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <avoidance_update+0x60>
 8001010:	4b45      	ldr	r3, [pc, #276]	; (8001128 <avoidance_update+0x170>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d117      	bne.n	8001048 <avoidance_update+0x90>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b28      	cmp	r3, #40	; 0x28
 800101c:	dd14      	ble.n	8001048 <avoidance_update+0x90>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b3b      	cmp	r3, #59	; 0x3b
 8001022:	dc11      	bgt.n	8001048 <avoidance_update+0x90>
		avoidanceSpeedFactor = (distance - LIDAR_THRESHOLD) / (LIDAR_MAX_DISTANCE - LIDAR_THRESHOLD);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3b28      	subs	r3, #40	; 0x28
 8001028:	4a42      	ldr	r2, [pc, #264]	; (8001134 <avoidance_update+0x17c>)
 800102a:	fb82 1203 	smull	r1, r2, r2, r3
 800102e:	10d2      	asrs	r2, r2, #3
 8001030:	17db      	asrs	r3, r3, #31
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	4b3e      	ldr	r3, [pc, #248]	; (8001138 <avoidance_update+0x180>)
 800103e:	edc3 7a00 	vstr	s15, [r3]
		avoidanceState = PATH_CROWDED;
 8001042:	4b39      	ldr	r3, [pc, #228]	; (8001128 <avoidance_update+0x170>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
	}

	if (avoidanceState == PATH_CROWDED && distance > LIDAR_MAX_DISTANCE) {
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <avoidance_update+0x170>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d105      	bne.n	800105c <avoidance_update+0xa4>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b3c      	cmp	r3, #60	; 0x3c
 8001054:	dd02      	ble.n	800105c <avoidance_update+0xa4>
		avoidanceState = PATH_CLEAR;
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <avoidance_update+0x170>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	}

	if (avoidanceState == PATH_OBSTRUCTED && distance >= LIDAR_THRESHOLD) {
 800105c:	4b32      	ldr	r3, [pc, #200]	; (8001128 <avoidance_update+0x170>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d108      	bne.n	8001076 <avoidance_update+0xbe>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b27      	cmp	r3, #39	; 0x27
 8001068:	dd05      	ble.n	8001076 <avoidance_update+0xbe>
		avoidanceState = PATH_CLEAR;
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <avoidance_update+0x170>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
		printf("Path cleared.\r\n");
 8001070:	4832      	ldr	r0, [pc, #200]	; (800113c <avoidance_update+0x184>)
 8001072:	f007 ff7f 	bl	8008f74 <puts>
	}

	if (avoidanceState == PATH_OBSTRUCTED && distance < LIDAR_THRESHOLD) {
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <avoidance_update+0x170>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d125      	bne.n	80010ca <avoidance_update+0x112>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b27      	cmp	r3, #39	; 0x27
 8001082:	dc22      	bgt.n	80010ca <avoidance_update+0x112>
		avoidanceState = BACKTRACKING;
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <avoidance_update+0x170>)
 8001086:	2203      	movs	r2, #3
 8001088:	701a      	strb	r2, [r3, #0]
		printf("Backtracking...\r\n");
 800108a:	482d      	ldr	r0, [pc, #180]	; (8001140 <avoidance_update+0x188>)
 800108c:	f007 ff72 	bl	8008f74 <puts>
		backtrackingAim = t - 0.2;
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fa79 	bl	8000588 <__aeabi_f2d>
 8001096:	a320      	add	r3, pc, #128	; (adr r3, 8001118 <avoidance_update+0x160>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f914 	bl	80002c8 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd9e 	bl	8000be8 <__aeabi_d2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a25      	ldr	r2, [pc, #148]	; (8001144 <avoidance_update+0x18c>)
 80010b0:	6013      	str	r3, [r2, #0]
		if (backtrackingAim < 0) {
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <avoidance_update+0x18c>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	d503      	bpl.n	80010ca <avoidance_update+0x112>
			backtrackingAim = 0;
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <avoidance_update+0x18c>)
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
		}
	}

	if (avoidanceState == BACKTRACKING && t <= backtrackingAim + 0.01) {
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <avoidance_update+0x170>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d11e      	bne.n	8001110 <avoidance_update+0x158>
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fa58 	bl	8000588 <__aeabi_f2d>
 80010d8:	4604      	mov	r4, r0
 80010da:	460d      	mov	r5, r1
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <avoidance_update+0x18c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa51 	bl	8000588 <__aeabi_f2d>
 80010e6:	a30e      	add	r3, pc, #56	; (adr r3, 8001120 <avoidance_update+0x168>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff f8ee 	bl	80002cc <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff fd1a 	bl	8000b30 <__aeabi_dcmple>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d100      	bne.n	8001104 <avoidance_update+0x14c>
		avoidanceState = PATH_CLEAR;
		printf("Trying again...\r\n");
	}
}
 8001102:	e005      	b.n	8001110 <avoidance_update+0x158>
		avoidanceState = PATH_CLEAR;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <avoidance_update+0x170>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
		printf("Trying again...\r\n");
 800110a:	480f      	ldr	r0, [pc, #60]	; (8001148 <avoidance_update+0x190>)
 800110c:	f007 ff32 	bl	8008f74 <puts>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	9999999a 	.word	0x9999999a
 800111c:	3fc99999 	.word	0x3fc99999
 8001120:	47ae147b 	.word	0x47ae147b
 8001124:	3f847ae1 	.word	0x3f847ae1
 8001128:	20000258 	.word	0x20000258
 800112c:	0800c948 	.word	0x0800c948
 8001130:	00000000 	.word	0x00000000
 8001134:	66666667 	.word	0x66666667
 8001138:	20000248 	.word	0x20000248
 800113c:	0800c96c 	.word	0x0800c96c
 8001140:	0800c97c 	.word	0x0800c97c
 8001144:	2000024c 	.word	0x2000024c
 8001148:	0800c990 	.word	0x0800c990

0800114c <bezier_new>:
#include "bezier.h"


Bezier* bezier_new(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0
 8001152:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001156:	edc7 0a08 	vstr	s1, [r7, #32]
 800115a:	ed87 1a07 	vstr	s2, [r7, #28]
 800115e:	edc7 1a06 	vstr	s3, [r7, #24]
 8001162:	ed87 2a05 	vstr	s4, [r7, #20]
 8001166:	edc7 2a04 	vstr	s5, [r7, #16]
 800116a:	ed87 3a03 	vstr	s6, [r7, #12]
 800116e:	edc7 3a02 	vstr	s7, [r7, #8]
 8001172:	6078      	str	r0, [r7, #4]
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8001174:	2028      	movs	r0, #40	; 0x28
 8001176:	f007 f943 	bl	8008400 <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
    bezier_set(b, x1, y1, x2, y2, x3, y3, x4, y4, lutLength);
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	edd7 3a02 	vldr	s7, [r7, #8]
 8001184:	ed97 3a03 	vldr	s6, [r7, #12]
 8001188:	edd7 2a04 	vldr	s5, [r7, #16]
 800118c:	ed97 2a05 	vldr	s4, [r7, #20]
 8001190:	edd7 1a06 	vldr	s3, [r7, #24]
 8001194:	ed97 1a07 	vldr	s2, [r7, #28]
 8001198:	edd7 0a08 	vldr	s1, [r7, #32]
 800119c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80011a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011a2:	f000 f812 	bl	80011ca <bezier_set>
    return b;
 80011a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3730      	adds	r7, #48	; 0x30
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <bezier_newEmpty>:


Bezier* bezier_newEmpty() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 80011b6:	2028      	movs	r0, #40	; 0x28
 80011b8:	f007 f922 	bl	8008400 <malloc>
 80011bc:	4603      	mov	r3, r0
 80011be:	607b      	str	r3, [r7, #4]
    return b;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <bezier_set>:


void bezier_set(Bezier* b, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b08f      	sub	sp, #60	; 0x3c
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6278      	str	r0, [r7, #36]	; 0x24
 80011d2:	ed87 0a08 	vstr	s0, [r7, #32]
 80011d6:	edc7 0a07 	vstr	s1, [r7, #28]
 80011da:	ed87 1a06 	vstr	s2, [r7, #24]
 80011de:	edc7 1a05 	vstr	s3, [r7, #20]
 80011e2:	ed87 2a04 	vstr	s4, [r7, #16]
 80011e6:	edc7 2a03 	vstr	s5, [r7, #12]
 80011ea:	ed87 3a02 	vstr	s6, [r7, #8]
 80011ee:	edc7 3a01 	vstr	s7, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
    b->p1 = vector2_new(x1, y1);
 80011f4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80011f6:	edd7 0a07 	vldr	s1, [r7, #28]
 80011fa:	ed97 0a08 	vldr	s0, [r7, #32]
 80011fe:	f002 f8f1 	bl	80033e4 <vector2_new>
 8001202:	eeb0 7a40 	vmov.f32	s14, s0
 8001206:	eef0 7a60 	vmov.f32	s15, s1
 800120a:	ed84 7a00 	vstr	s14, [r4]
 800120e:	edc4 7a01 	vstr	s15, [r4, #4]
    b->p2 = vector2_new(x2, y2);
 8001212:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001214:	edd7 0a05 	vldr	s1, [r7, #20]
 8001218:	ed97 0a06 	vldr	s0, [r7, #24]
 800121c:	f002 f8e2 	bl	80033e4 <vector2_new>
 8001220:	eeb0 7a40 	vmov.f32	s14, s0
 8001224:	eef0 7a60 	vmov.f32	s15, s1
 8001228:	ed84 7a02 	vstr	s14, [r4, #8]
 800122c:	edc4 7a03 	vstr	s15, [r4, #12]
    b->p3 = vector2_new(x3, y3);
 8001230:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001232:	edd7 0a03 	vldr	s1, [r7, #12]
 8001236:	ed97 0a04 	vldr	s0, [r7, #16]
 800123a:	f002 f8d3 	bl	80033e4 <vector2_new>
 800123e:	eeb0 7a40 	vmov.f32	s14, s0
 8001242:	eef0 7a60 	vmov.f32	s15, s1
 8001246:	ed84 7a04 	vstr	s14, [r4, #16]
 800124a:	edc4 7a05 	vstr	s15, [r4, #20]
    b->p4 = vector2_new(x4, y4);
 800124e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001250:	edd7 0a01 	vldr	s1, [r7, #4]
 8001254:	ed97 0a02 	vldr	s0, [r7, #8]
 8001258:	f002 f8c4 	bl	80033e4 <vector2_new>
 800125c:	eeb0 7a40 	vmov.f32	s14, s0
 8001260:	eef0 7a60 	vmov.f32	s15, s1
 8001264:	ed84 7a06 	vstr	s14, [r4, #24]
 8001268:	edc4 7a07 	vstr	s15, [r4, #28]
    b->lutLength = lutLength;
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
    b->lut = (Vector2*) malloc(sizeof(Vector2) * b->lutLength);
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4618      	mov	r0, r3
 800127a:	f007 f8c1 	bl	8008400 <malloc>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	621a      	str	r2, [r3, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
 800128a:	e02b      	b.n	80012e4 <bezier_set+0x11a>
        float t = (float) i/(b->lutLength-1);
 800128c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	3b01      	subs	r3, #1
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Vector2 eval = bezier_eval(b, t);
 80012ac:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80012b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012b2:	f000 f821 	bl	80012f8 <bezier_eval>
 80012b6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ba:	eef0 7a60 	vmov.f32	s15, s1
 80012be:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80012c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        b->lut[i] = eval;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	6a1a      	ldr	r2, [r3, #32]
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012da:	e882 0003 	stmia.w	r2, {r0, r1}
    for (int i=0; i<b->lutLength; i++) {
 80012de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e0:	3301      	adds	r3, #1
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dbce      	blt.n	800128c <bezier_set+0xc2>
    }
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	373c      	adds	r7, #60	; 0x3c
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}

080012f8 <bezier_eval>:
    vector2_display(b->p4);
    printf("}\r\n");
}


Vector2 bezier_eval(Bezier* b, float t) {
 80012f8:	b480      	push	{r7}
 80012fa:	b08d      	sub	sp, #52	; 0x34
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8001304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001308:	edd7 7a02 	vldr	s15, [r7, #8]
 800130c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001310:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = b->p1.x * u*u*u + b->p2.x * 3*u*u*t + b->p3.x * 3*u*t*t + b->p4.x * t*t*t;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	ed93 7a00 	vldr	s14, [r3]
 800131a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800131e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001322:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	edd3 7a02 	vldr	s15, [r3, #8]
 8001338:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800133c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001340:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001344:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001348:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800134c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001350:	edd7 7a02 	vldr	s15, [r7, #8]
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001362:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001366:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800136a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800136e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001372:	edd7 7a02 	vldr	s15, [r7, #8]
 8001376:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800137a:	edd7 7a02 	vldr	s15, [r7, #8]
 800137e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001382:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	edd3 6a06 	vldr	s13, [r3, #24]
 800138c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001390:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001394:	edd7 7a02 	vldr	s15, [r7, #8]
 8001398:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800139c:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = b->p1.y * u*u*u + b->p2.y * 3*u*u*t + b->p3.y * 3*u*t*t + b->p4.y * t*t*t;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80013b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80013d0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80013d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80013fa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80013fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001402:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001406:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800140a:	edd7 7a02 	vldr	s15, [r7, #8]
 800140e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001412:	edd7 7a02 	vldr	s15, [r7, #8]
 8001416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	edd3 6a07 	vldr	s13, [r3, #28]
 8001424:	edd7 7a02 	vldr	s15, [r7, #8]
 8001428:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800142c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001430:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001434:	edd7 7a02 	vldr	s15, [r7, #8]
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	61bb      	str	r3, [r7, #24]
    return eval;
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	f107 0214 	add.w	r2, r7, #20
 8001454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001458:	e883 0003 	stmia.w	r3, {r0, r1}
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	ee07 2a10 	vmov	s14, r2
 8001464:	ee07 3a90 	vmov	s15, r3
}
 8001468:	eeb0 0a47 	vmov.f32	s0, s14
 800146c:	eef0 0a67 	vmov.f32	s1, s15
 8001470:	3734      	adds	r7, #52	; 0x34
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <bezier_deriv1>:
    int i = round(t*(b->lutLength-1));
    return b->lut[i];
}


Vector2 bezier_deriv1(Bezier* b, float t) {
 800147a:	b480      	push	{r7}
 800147c:	b08d      	sub	sp, #52	; 0x34
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8001486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800148a:	edd7 7a02 	vldr	s15, [r7, #8]
 800148e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001492:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p2.x - b->p1.x) * 3*u*u + (b->p3.x - b->p2.x) * 6*u*t + (b->p4.x - b->p3.x) * 3*t*t;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	ed93 7a02 	vldr	s14, [r3, #8]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edd3 6a04 	vldr	s13, [r3, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014ce:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80014d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80014d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014de:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	edd3 6a06 	vldr	s13, [r3, #24]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80014f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014fa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80014fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001502:	edd7 7a02 	vldr	s15, [r7, #8]
 8001506:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800150a:	edd7 7a02 	vldr	s15, [r7, #8]
 800150e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p2.y - b->p1.y) * 3*u*u + (b->p3.y - b->p2.y) * 6*u*t + (b->p4.y - b->p3.y) * 3*t*t;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	edd3 7a01 	vldr	s15, [r3, #4]
 8001526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800152e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001532:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800153a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800153e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	edd3 6a05 	vldr	s13, [r3, #20]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	edd3 7a03 	vldr	s15, [r3, #12]
 800154e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001552:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001556:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800155a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800155e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001562:	edd7 7a02 	vldr	s15, [r7, #8]
 8001566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edd3 6a07 	vldr	s13, [r3, #28]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	edd3 7a05 	vldr	s15, [r3, #20]
 800157a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800157e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001582:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001586:	edd7 7a02 	vldr	s15, [r7, #8]
 800158a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800158e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	61bb      	str	r3, [r7, #24]
    return eval;
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	f107 0214 	add.w	r2, r7, #20
 80015ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	ee07 2a10 	vmov	s14, r2
 80015be:	ee07 3a90 	vmov	s15, r3
}
 80015c2:	eeb0 0a47 	vmov.f32	s0, s14
 80015c6:	eef0 0a67 	vmov.f32	s1, s15
 80015ca:	3734      	adds	r7, #52	; 0x34
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <bezier_deriv2>:


Vector2 bezier_deriv2(Bezier* b, float t) {
 80015d4:	b480      	push	{r7}
 80015d6:	b08d      	sub	sp, #52	; 0x34
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 80015e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p3.x - 2*b->p2.x + b->p1.x) * 6*u + (b->p4.x - 2*b->p3.x + b->p2.x) * 6*t;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001612:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001616:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800161a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	edd3 6a06 	vldr	s13, [r3, #24]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edd3 7a04 	vldr	s15, [r3, #16]
 800162a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800162e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	edd3 7a02 	vldr	s15, [r3, #8]
 8001638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800163c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001640:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001644:	edd7 7a02 	vldr	s15, [r7, #8]
 8001648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001650:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p3.y - 2*b->p2.y + b->p1.y) * 6*u + (b->p4.y - 2*b->p3.y + b->p2.y) * 6*t;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	ed93 7a05 	vldr	s14, [r3, #20]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	edd3 7a01 	vldr	s15, [r3, #4]
 800166e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001672:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001676:	ee27 7a87 	vmul.f32	s14, s15, s14
 800167a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800167e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edd3 6a07 	vldr	s13, [r3, #28]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	edd3 7a05 	vldr	s15, [r3, #20]
 800168e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001692:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	edd3 7a03 	vldr	s15, [r3, #12]
 800169c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016a0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80016a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 80016b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	61bb      	str	r3, [r7, #24]
    return eval;
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	f107 0214 	add.w	r2, r7, #20
 80016c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	ee07 2a10 	vmov	s14, r2
 80016d8:	ee07 3a90 	vmov	s15, r3
}
 80016dc:	eeb0 0a47 	vmov.f32	s0, s14
 80016e0:	eef0 0a67 	vmov.f32	s1, s15
 80016e4:	3734      	adds	r7, #52	; 0x34
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <bezier_curvature>:


float bezier_curvature(Bezier* b, float t) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	ed87 0a00 	vstr	s0, [r7]
    Vector2 diff1 = bezier_deriv1(b, t); // B'(t)
 80016fc:	ed97 0a00 	vldr	s0, [r7]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff feba 	bl	800147a <bezier_deriv1>
 8001706:	eeb0 7a40 	vmov.f32	s14, s0
 800170a:	eef0 7a60 	vmov.f32	s15, s1
 800170e:	ed87 7a04 	vstr	s14, [r7, #16]
 8001712:	edc7 7a05 	vstr	s15, [r7, #20]
    Vector2 diff2 = bezier_deriv2(b, t); // B''(t)
 8001716:	ed97 0a00 	vldr	s0, [r7]
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff5a 	bl	80015d4 <bezier_deriv2>
 8001720:	eeb0 7a40 	vmov.f32	s14, s0
 8001724:	eef0 7a60 	vmov.f32	s15, s1
 8001728:	ed87 7a02 	vstr	s14, [r7, #8]
 800172c:	edc7 7a03 	vstr	s15, [r7, #12]
    float num = vector2_cross(diff1, diff2);
 8001730:	ed97 6a02 	vldr	s12, [r7, #8]
 8001734:	edd7 6a03 	vldr	s13, [r7, #12]
 8001738:	ed97 7a04 	vldr	s14, [r7, #16]
 800173c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001740:	eeb0 1a46 	vmov.f32	s2, s12
 8001744:	eef0 1a66 	vmov.f32	s3, s13
 8001748:	eeb0 0a47 	vmov.f32	s0, s14
 800174c:	eef0 0a67 	vmov.f32	s1, s15
 8001750:	f001 ff38 	bl	80035c4 <vector2_cross>
 8001754:	ed87 0a07 	vstr	s0, [r7, #28]
    float den = vector2_norm(diff1);
 8001758:	ed97 7a04 	vldr	s14, [r7, #16]
 800175c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001760:	eeb0 0a47 	vmov.f32	s0, s14
 8001764:	eef0 0a67 	vmov.f32	s1, s15
 8001768:	f001 fe5e 	bl	8003428 <vector2_norm>
 800176c:	ed87 0a06 	vstr	s0, [r7, #24]
    if (den == 0)
 8001770:	edd7 7a06 	vldr	s15, [r7, #24]
 8001774:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	d102      	bne.n	8001784 <bezier_curvature+0x94>
        return INFINITY;
 800177e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80017ac <bezier_curvature+0xbc>
 8001782:	e00b      	b.n	800179c <bezier_curvature+0xac>
    return num/(den*den*den);
 8001784:	edd7 7a06 	vldr	s15, [r7, #24]
 8001788:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800178c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001794:	ed97 7a07 	vldr	s14, [r7, #28]
 8001798:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800179c:	eef0 7a66 	vmov.f32	s15, s13
}
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	7f800000 	.word	0x7f800000

080017b0 <bezier_projectLut>:


float bezier_projectLut(Bezier* b, Vector2 p) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	eeb0 7a40 	vmov.f32	s14, s0
 80017bc:	eef0 7a60 	vmov.f32	s15, s1
 80017c0:	ed87 7a01 	vstr	s14, [r7, #4]
 80017c4:	edc7 7a02 	vstr	s15, [r7, #8]
    float minDist = INFINITY;
 80017c8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    float minIndex = 0;
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	e02d      	b.n	8001836 <bezier_projectLut+0x86>
        float dist = vector2_dist2(p, b->lut[i]);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	ed93 6a00 	vldr	s12, [r3]
 80017e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80017ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f4:	eeb0 1a46 	vmov.f32	s2, s12
 80017f8:	eef0 1a66 	vmov.f32	s3, s13
 80017fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001800:	eef0 0a67 	vmov.f32	s1, s15
 8001804:	f001 fe6c 	bl	80034e0 <vector2_dist2>
 8001808:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < minDist) {
 800180c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001810:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d508      	bpl.n	8001830 <bezier_projectLut+0x80>
            minDist = dist;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
            minIndex = i;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182c:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbcc      	blt.n	80017da <bezier_projectLut+0x2a>
        }
    }
    float tLut = (float) minIndex/(b->lutLength-1);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	3b01      	subs	r3, #1
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001856:	edc7 7a06 	vstr	s15, [r7, #24]
    return tLut;
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	ee07 3a90 	vmov	s15, r3
}
 8001860:	eeb0 0a67 	vmov.f32	s0, s15
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <bezier_project>:


float bezier_project(Bezier* b, Vector2 p, float precision) {
 800186c:	b580      	push	{r7, lr}
 800186e:	ed2d 8b02 	vpush	{d8}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	eeb0 7a40 	vmov.f32	s14, s0
 800187c:	eef0 7a60 	vmov.f32	s15, s1
 8001880:	ed87 1a00 	vstr	s2, [r7]
 8001884:	ed87 7a01 	vstr	s14, [r7, #4]
 8001888:	edc7 7a02 	vstr	s15, [r7, #8]
    float tLut = bezier_projectLut(b, p);
 800188c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001890:	edd7 7a02 	vldr	s15, [r7, #8]
 8001894:	eeb0 0a47 	vmov.f32	s0, s14
 8001898:	eef0 0a67 	vmov.f32	s1, s15
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff ff87 	bl	80017b0 <bezier_projectLut>
 80018a2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    float halfWidth = 1.0/(b->lutLength-1);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	3b01      	subs	r3, #1
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe59 	bl	8000564 <__aeabi_i2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	495b      	ldr	r1, [pc, #364]	; (8001a28 <bezier_project+0x1bc>)
 80018bc:	f7fe ffe6 	bl	800088c <__aeabi_ddiv>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f98e 	bl	8000be8 <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	623b      	str	r3, [r7, #32]

    float t_a = tLut - halfWidth;
 80018d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80018d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t_a = (t_a<0)?0:t_a;
 80018e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	d502      	bpl.n	80018f4 <bezier_project+0x88>
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e000      	b.n	80018f6 <bezier_project+0x8a>
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    float t_b = tLut + halfWidth;
 80018f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001904:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t_b = (t_b>1)?1:t_b;
 8001908:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800190c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	dd02      	ble.n	8001920 <bezier_project+0xb4>
 800191a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800191e:	e000      	b.n	8001922 <bezier_project+0xb6>
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28

    Vector2 p_a, p_b;

    while (t_b - t_a > precision) {
 8001924:	e05f      	b.n	80019e6 <bezier_project+0x17a>
        p_a = bezier_eval(b, t_a);
 8001926:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff fce4 	bl	80012f8 <bezier_eval>
 8001930:	eeb0 7a40 	vmov.f32	s14, s0
 8001934:	eef0 7a60 	vmov.f32	s15, s1
 8001938:	ed87 7a06 	vstr	s14, [r7, #24]
 800193c:	edc7 7a07 	vstr	s15, [r7, #28]
        p_b = bezier_eval(b, t_b);
 8001940:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff fcd7 	bl	80012f8 <bezier_eval>
 800194a:	eeb0 7a40 	vmov.f32	s14, s0
 800194e:	eef0 7a60 	vmov.f32	s15, s1
 8001952:	ed87 7a04 	vstr	s14, [r7, #16]
 8001956:	edc7 7a05 	vstr	s15, [r7, #20]
        if (vector2_dist2(p, p_a) < vector2_dist2(p, p_b))
 800195a:	ed97 6a06 	vldr	s12, [r7, #24]
 800195e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001962:	ed97 7a01 	vldr	s14, [r7, #4]
 8001966:	edd7 7a02 	vldr	s15, [r7, #8]
 800196a:	eeb0 1a46 	vmov.f32	s2, s12
 800196e:	eef0 1a66 	vmov.f32	s3, s13
 8001972:	eeb0 0a47 	vmov.f32	s0, s14
 8001976:	eef0 0a67 	vmov.f32	s1, s15
 800197a:	f001 fdb1 	bl	80034e0 <vector2_dist2>
 800197e:	eeb0 8a40 	vmov.f32	s16, s0
 8001982:	ed97 6a04 	vldr	s12, [r7, #16]
 8001986:	edd7 6a05 	vldr	s13, [r7, #20]
 800198a:	ed97 7a01 	vldr	s14, [r7, #4]
 800198e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001992:	eeb0 1a46 	vmov.f32	s2, s12
 8001996:	eef0 1a66 	vmov.f32	s3, s13
 800199a:	eeb0 0a47 	vmov.f32	s0, s14
 800199e:	eef0 0a67 	vmov.f32	s1, s15
 80019a2:	f001 fd9d 	bl	80034e0 <vector2_dist2>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
 80019aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	d50c      	bpl.n	80019ce <bezier_project+0x162>
            t_b = (t_a + t_b)/2;
 80019b4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80019b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80019cc:	e00b      	b.n	80019e6 <bezier_project+0x17a>
        else
            t_a = (t_a + t_b)/2;
 80019ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80019d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while (t_b - t_a > precision) {
 80019e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f2:	ed97 7a00 	vldr	s14, [r7]
 80019f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	d492      	bmi.n	8001926 <bezier_project+0xba>
    }
    return (t_a + t_b)/2;
 8001a00:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a14:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	3730      	adds	r7, #48	; 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	ecbd 8b02 	vpop	{d8}
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	3ff00000 	.word	0x3ff00000

08001a2c <drv8825_initialize>:


void drv8825_initialize(Stepper *stepper, uint16_t enablePin,
                  GPIO_TypeDef* enableGPIO, uint16_t dirPin, 
                  GPIO_TypeDef *dirGPIO, TIM_HandleTypeDef *timer, 
                  uint8_t channel) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	817b      	strh	r3, [r7, #10]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	813b      	strh	r3, [r7, #8]
	stepper->enablePin = enablePin;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	897a      	ldrh	r2, [r7, #10]
 8001a44:	801a      	strh	r2, [r3, #0]
	stepper->enableGPIO = enableGPIO;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	605a      	str	r2, [r3, #4]

	stepper->dirPin = dirPin;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	893a      	ldrh	r2, [r7, #8]
 8001a50:	811a      	strh	r2, [r3, #8]
	stepper->dirGPIO = dirGPIO;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]

	stepper->timer = timer;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	611a      	str	r2, [r3, #16]
	stepper->channel = channel;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a64:	751a      	strb	r2, [r3, #20]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <drv8825_setDirection>:


void drv8825_setDirection(Stepper *stepper, StepperDirection direction) {
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(stepper->dirGPIO, stepper->dirPin, (uint8_t) direction);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68d8      	ldr	r0, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	891b      	ldrh	r3, [r3, #8]
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f003 fd2b 	bl	80054e4 <HAL_GPIO_WritePin>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <drv8825_enable>:


void drv8825_enable(Stepper *stepper) {
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6858      	ldr	r0, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f003 fd1b 	bl	80054e4 <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin, 
		(uint8_t) ACTIVE
	);
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <drv8825_disable>:


void drv8825_disable(Stepper *stepper) {
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6858      	ldr	r0, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f003 fd0b 	bl	80054e4 <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin,
		(uint8_t) PASSIVE
	);
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <drv8825_setPWMFrequency>:


void drv8825_setPWMFrequency(Stepper* stepper, uint16_t frequency) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if (frequency != 0) {
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <drv8825_setPWMFrequency+0x2a>
		stepper->timer->Init.Prescaler = 179;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	22b3      	movs	r2, #179	; 0xb3
 8001af0:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = (uint32_t)1000000/frequency;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	4945      	ldr	r1, [pc, #276]	; (8001c10 <drv8825_setPWMFrequency+0x138>)
 8001afa:	fbb1 f2f2 	udiv	r2, r1, r2
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	e009      	b.n	8001b16 <drv8825_setPWMFrequency+0x3e>
	} else {
		stepper->timer->Init.Prescaler = 0xFFFE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b0a:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = 0xFFFE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b14:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(stepper->timer) != HAL_OK) {
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fad0 	bl	80060c0 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <drv8825_setPWMFrequency+0x52>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001b26:	f002 f8f7 	bl	8003d18 <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(stepper->timer) != HAL_OK) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f004 fbee 	bl	8006310 <HAL_TIM_PWM_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <drv8825_setPWMFrequency+0x66>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001b3a:	f002 f8ed 	bl	8003d18 <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(stepper->timer, stepper->channel);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7d1b      	ldrb	r3, [r3, #20]
 8001b46:	4619      	mov	r1, r3
 8001b48:	4610      	mov	r0, r2
 8001b4a:	f004 fc3b 	bl	80063c4 <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch (stepper->channel) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7d1b      	ldrb	r3, [r3, #20]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d858      	bhi.n	8001c08 <drv8825_setPWMFrequency+0x130>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <drv8825_setPWMFrequency+0x84>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001b91 	.word	0x08001b91
 8001b60:	08001c09 	.word	0x08001c09
 8001b64:	08001c09 	.word	0x08001c09
 8001b68:	08001c09 	.word	0x08001c09
 8001b6c:	08001baf 	.word	0x08001baf
 8001b70:	08001c09 	.word	0x08001c09
 8001b74:	08001c09 	.word	0x08001c09
 8001b78:	08001c09 	.word	0x08001c09
 8001b7c:	08001bcd 	.word	0x08001bcd
 8001b80:	08001c09 	.word	0x08001c09
 8001b84:	08001c09 	.word	0x08001c09
 8001b88:	08001c09 	.word	0x08001c09
 8001b8c:	08001beb 	.word	0x08001beb
		case (TIM_CHANNEL_1):
			stepper->timer->Instance->CCR1 = (50*stepper->timer->Init.Period)/100;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2232      	movs	r2, #50	; 0x32
 8001b98:	fb02 f203 	mul.w	r2, r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	491c      	ldr	r1, [pc, #112]	; (8001c14 <drv8825_setPWMFrequency+0x13c>)
 8001ba4:	fba1 1202 	umull	r1, r2, r1, r2
 8001ba8:	0952      	lsrs	r2, r2, #5
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001bac:	e02c      	b.n	8001c08 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_2):
			stepper->timer->Instance->CCR2 = (50*stepper->timer->Init.Period)/100;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2232      	movs	r2, #50	; 0x32
 8001bb6:	fb02 f203 	mul.w	r2, r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4914      	ldr	r1, [pc, #80]	; (8001c14 <drv8825_setPWMFrequency+0x13c>)
 8001bc2:	fba1 1202 	umull	r1, r2, r1, r2
 8001bc6:	0952      	lsrs	r2, r2, #5
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001bca:	e01d      	b.n	8001c08 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_3):
			stepper->timer->Instance->CCR3 = (50*stepper->timer->Init.Period)/100;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2232      	movs	r2, #50	; 0x32
 8001bd4:	fb02 f203 	mul.w	r2, r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	490d      	ldr	r1, [pc, #52]	; (8001c14 <drv8825_setPWMFrequency+0x13c>)
 8001be0:	fba1 1202 	umull	r1, r2, r1, r2
 8001be4:	0952      	lsrs	r2, r2, #5
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001be8:	e00e      	b.n	8001c08 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_4):
			stepper->timer->Instance->CCR4 = (50*stepper->timer->Init.Period)/100;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2232      	movs	r2, #50	; 0x32
 8001bf2:	fb02 f203 	mul.w	r2, r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4905      	ldr	r1, [pc, #20]	; (8001c14 <drv8825_setPWMFrequency+0x13c>)
 8001bfe:	fba1 1202 	umull	r1, r2, r1, r2
 8001c02:	0952      	lsrs	r2, r2, #5
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001c06:	bf00      	nop
	}
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	000f4240 	.word	0x000f4240
 8001c14:	51eb851f 	.word	0x51eb851f

08001c18 <drv8825_setRotationSpeed>:


void drv8825_setRotationSpeed(Stepper *stepper, float rpm) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	ed87 0a00 	vstr	s0, [r7]
	uint16_t f = (rpm / 60) * STEPS_PER_REV * MICROSTEPS;
 8001c24:	ed97 7a00 	vldr	s14, [r7]
 8001c28:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001c5c <drv8825_setRotationSpeed+0x44>
 8001c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c30:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c60 <drv8825_setRotationSpeed+0x48>
 8001c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c38:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001c64 <drv8825_setRotationSpeed+0x4c>
 8001c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c44:	ee17 3a90 	vmov	r3, s15
 8001c48:	81fb      	strh	r3, [r7, #14]
	drv8825_setPWMFrequency(stepper, f);
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff42 	bl	8001ad8 <drv8825_setPWMFrequency>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	42700000 	.word	0x42700000
 8001c60:	43480000 	.word	0x43480000
 8001c64:	42000000 	.word	0x42000000

08001c68 <lidar_initialize>:
#include "lidar.h"

void lidar_initialize() {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
	for (int i=0; i<16; i++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	e00d      	b.n	8001c90 <lidar_initialize+0x28>
		lidar_distances[i] = 255;
 8001c74:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <lidar_initialize+0x3c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	22ff      	movs	r2, #255	; 0xff
 8001c7c:	701a      	strb	r2, [r3, #0]
		lidar_timeSinceData[i] = LIDAR_TIMEOUT;
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <lidar_initialize+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<16; i++) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	ddee      	ble.n	8001c74 <lidar_initialize+0xc>
	}
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	20000288 	.word	0x20000288
 8001ca8:	20000208 	.word	0x20000208

08001cac <lidar_updateDistance>:

void lidar_updateDistance(int index, uint8_t dist) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
	lidar_distances[index] = dist;
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <lidar_updateDistance+0x2c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	701a      	strb	r2, [r3, #0]
	lidar_timeSinceData[index] = 0;
 8001cc2:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <lidar_updateDistance+0x30>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//printf("%d -> %dcm\r\n", index, dist);
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000288 	.word	0x20000288
 8001cdc:	20000208 	.word	0x20000208

08001ce0 <lidar_getDistance>:

int lidar_getDistance(Direction dir) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	int minDist = 1000;
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	617b      	str	r3, [r7, #20]
	if (dir == FORWARD) {
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d11d      	bne.n	8001d34 <lidar_getDistance+0x54>
		for (int i=4; i<=8; i++) {
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	e016      	b.n	8001d2c <lidar_getDistance+0x4c>
			if (lidar_timeSinceData[i] <= LIDAR_TIMEOUT && lidar_distances[i] < minDist) {
 8001cfe:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <lidar_getDistance+0xc8>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d0a:	dc0c      	bgt.n	8001d26 <lidar_getDistance+0x46>
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <lidar_getDistance+0xcc>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	dd04      	ble.n	8001d26 <lidar_getDistance+0x46>
				minDist = lidar_distances[i];
 8001d1c:	4a23      	ldr	r2, [pc, #140]	; (8001dac <lidar_getDistance+0xcc>)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
		for (int i=4; i<=8; i++) {
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	dde5      	ble.n	8001cfe <lidar_getDistance+0x1e>
 8001d32:	e032      	b.n	8001d9a <lidar_getDistance+0xba>
			}
		}
	} else {
		int i=0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
		if (lidar_timeSinceData[i] <= LIDAR_TIMEOUT && lidar_distances[i] < minDist) {
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <lidar_getDistance+0xc8>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d44:	dc0c      	bgt.n	8001d60 <lidar_getDistance+0x80>
 8001d46:	4a19      	ldr	r2, [pc, #100]	; (8001dac <lidar_getDistance+0xcc>)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	4293      	cmp	r3, r2
 8001d54:	dd04      	ble.n	8001d60 <lidar_getDistance+0x80>
			minDist = lidar_distances[i];
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <lidar_getDistance+0xcc>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	617b      	str	r3, [r7, #20]
		}
		for (i=12; i<=15; i++) {
 8001d60:	230c      	movs	r3, #12
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e016      	b.n	8001d94 <lidar_getDistance+0xb4>
			if (lidar_timeSinceData[i] <= LIDAR_TIMEOUT && lidar_distances[i] < minDist) {
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <lidar_getDistance+0xc8>)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d72:	dc0c      	bgt.n	8001d8e <lidar_getDistance+0xae>
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <lidar_getDistance+0xcc>)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	dd04      	ble.n	8001d8e <lidar_getDistance+0xae>
				minDist = lidar_distances[i];
 8001d84:	4a09      	ldr	r2, [pc, #36]	; (8001dac <lidar_getDistance+0xcc>)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	617b      	str	r3, [r7, #20]
		for (i=12; i<=15; i++) {
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	dde5      	ble.n	8001d66 <lidar_getDistance+0x86>
			}
		}
	}
	return minDist;
 8001d9a:	697b      	ldr	r3, [r7, #20]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20000208 	.word	0x20000208
 8001dac:	20000288 	.word	0x20000288

08001db0 <lidar_incrementTime>:
		return false;
	}
	return true;
}

void lidar_incrementTime(int ms) {
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<16; i++) {
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e013      	b.n	8001de6 <lidar_incrementTime+0x36>
		if (lidar_timeSinceData[i] <= LIDAR_TIMEOUT) {
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <lidar_incrementTime+0x4c>)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dca:	dc09      	bgt.n	8001de0 <lidar_incrementTime+0x30>
			lidar_timeSinceData[i] += ms;
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <lidar_incrementTime+0x4c>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	441a      	add	r2, r3
 8001dd8:	4908      	ldr	r1, [pc, #32]	; (8001dfc <lidar_incrementTime+0x4c>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<16; i++) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	dde8      	ble.n	8001dbe <lidar_incrementTime+0xe>
		}
	}
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000208 	.word	0x20000208

08001e00 <getRightEncoderCount>:


extern Robot robot;


int16_t getRightEncoderCount() {
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
	int16_t count = (int16_t) R_ENCODER.Instance->CNT;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <getRightEncoderCount+0x28>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	80fb      	strh	r3, [r7, #6]
	R_ENCODER.Instance->CNT = 0;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <getRightEncoderCount+0x28>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8001e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000448 	.word	0x20000448

08001e2c <getLeftEncoderCount>:


int16_t getLeftEncoderCount() {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
	int16_t count = -1 * (int16_t) L_ENCODER.Instance->CNT;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <getLeftEncoderCount+0x2c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	80fb      	strh	r3, [r7, #6]
	L_ENCODER.Instance->CNT = 0;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <getLeftEncoderCount+0x2c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8001e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20000370 	.word	0x20000370
 8001e5c:	00000000 	.word	0x00000000

08001e60 <odometry_updatePosition>:

void odometry_updatePosition() {
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af00      	add	r7, sp, #0
	float coeff = M_TWOPI * ODOMETRY_RADIUS / TICKS_PER_REV;
 8001e66:	4baa      	ldr	r3, [pc, #680]	; (8002110 <odometry_updatePosition+0x2b0>)
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	float leftMov = getLeftEncoderCount() * coeff;
 8001e6a:	f7ff ffdf 	bl	8001e2c <getLeftEncoderCount>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e78:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e80:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float rightMov = getRightEncoderCount() * coeff;
 8001e84:	f7ff ffbc 	bl	8001e00 <getRightEncoderCount>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e92:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float r =  (leftMov + rightMov)/2;
 8001e9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001ea2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eaa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb2:	edc7 7a08 	vstr	s15, [r7, #32]
	float alpha = (leftMov - rightMov)/ENTRAXE_ODOMETRY;
 8001eb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001eba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec2:	ee17 0a90 	vmov	r0, s15
 8001ec6:	f7fe fb5f 	bl	8000588 <__aeabi_f2d>
 8001eca:	a385      	add	r3, pc, #532	; (adr r3, 80020e0 <odometry_updatePosition+0x280>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fcdc 	bl	800088c <__aeabi_ddiv>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe84 	bl	8000be8 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	61fb      	str	r3, [r7, #28]

	float deltaX = r * cos(robot.angle + alpha/2);
 8001ee4:	6a38      	ldr	r0, [r7, #32]
 8001ee6:	f7fe fb4f 	bl	8000588 <__aeabi_f2d>
 8001eea:	4604      	mov	r4, r0
 8001eec:	460d      	mov	r5, r1
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <odometry_updatePosition+0x2b4>)
 8001ef0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ef8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001efc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	ee17 0a90 	vmov	r0, s15
 8001f08:	f7fe fb3e 	bl	8000588 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	ec43 2b10 	vmov	d0, r2, r3
 8001f14:	f009 f97c 	bl	800b210 <cos>
 8001f18:	ec53 2b10 	vmov	r2, r3, d0
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe fb8a 	bl	8000638 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe5c 	bl	8000be8 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	61bb      	str	r3, [r7, #24]
	float deltaY = r * sin(robot.angle + alpha/2);
 8001f34:	6a38      	ldr	r0, [r7, #32]
 8001f36:	f7fe fb27 	bl	8000588 <__aeabi_f2d>
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	460d      	mov	r5, r1
 8001f3e:	4b75      	ldr	r3, [pc, #468]	; (8002114 <odometry_updatePosition+0x2b4>)
 8001f40:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f48:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f54:	ee17 0a90 	vmov	r0, s15
 8001f58:	f7fe fb16 	bl	8000588 <__aeabi_f2d>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	ec43 2b10 	vmov	d0, r2, r3
 8001f64:	f009 f9b0 	bl	800b2c8 <sin>
 8001f68:	ec53 2b10 	vmov	r2, r3, d0
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe fb62 	bl	8000638 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fe34 	bl	8000be8 <__aeabi_d2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	617b      	str	r3, [r7, #20]

	float dt = 0.01; // 10 ms
 8001f84:	4b64      	ldr	r3, [pc, #400]	; (8002118 <odometry_updatePosition+0x2b8>)
 8001f86:	613b      	str	r3, [r7, #16]

	robot.position.x += deltaX;
 8001f88:	4b62      	ldr	r3, [pc, #392]	; (8002114 <odometry_updatePosition+0x2b4>)
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <odometry_updatePosition+0x2b4>)
 8001f98:	edc3 7a00 	vstr	s15, [r3]
	robot.position.y += deltaY;
 8001f9c:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <odometry_updatePosition+0x2b4>)
 8001f9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <odometry_updatePosition+0x2b4>)
 8001fac:	edc3 7a01 	vstr	s15, [r3, #4]
	robot.angle += alpha;
 8001fb0:	4b58      	ldr	r3, [pc, #352]	; (8002114 <odometry_updatePosition+0x2b4>)
 8001fb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	4b55      	ldr	r3, [pc, #340]	; (8002114 <odometry_updatePosition+0x2b4>)
 8001fc0:	edc3 7a02 	vstr	s15, [r3, #8]

	float currentSpeed = vector2_norm(vector2_new(deltaX, deltaY)) / dt;
 8001fc4:	edd7 0a05 	vldr	s1, [r7, #20]
 8001fc8:	ed97 0a06 	vldr	s0, [r7, #24]
 8001fcc:	f001 fa0a 	bl	80033e4 <vector2_new>
 8001fd0:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd4:	eef0 7a60 	vmov.f32	s15, s1
 8001fd8:	ed87 7a01 	vstr	s14, [r7, #4]
 8001fdc:	edc7 7a02 	vstr	s15, [r7, #8]
 8001fe0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fe4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fec:	eef0 0a67 	vmov.f32	s1, s15
 8001ff0:	f001 fa1a 	bl	8003428 <vector2_norm>
 8001ff4:	eef0 6a40 	vmov.f32	s13, s0
 8001ff8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002000:	edc7 7a03 	vstr	s15, [r7, #12]
	robot.measuredSpeed = robot.measuredSpeed*0.8 + currentSpeed*0.2;
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <odometry_updatePosition+0x2b4>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fabd 	bl	8000588 <__aeabi_f2d>
 800200e:	a336      	add	r3, pc, #216	; (adr r3, 80020e8 <odometry_updatePosition+0x288>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fb10 	bl	8000638 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7fe fab1 	bl	8000588 <__aeabi_f2d>
 8002026:	a332      	add	r3, pc, #200	; (adr r3, 80020f0 <odometry_updatePosition+0x290>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe fb04 	bl	8000638 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe f948 	bl	80002cc <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fdd0 	bl	8000be8 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <odometry_updatePosition+0x2b4>)
 800204c:	61d3      	str	r3, [r2, #28]

	if (robot.angle > M_PI)
 800204e:	4b31      	ldr	r3, [pc, #196]	; (8002114 <odometry_updatePosition+0x2b4>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa98 	bl	8000588 <__aeabi_f2d>
 8002058:	a327      	add	r3, pc, #156	; (adr r3, 80020f8 <odometry_updatePosition+0x298>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe fd7b 	bl	8000b58 <__aeabi_dcmpgt>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <odometry_updatePosition+0x230>
		robot.angle = robot.angle - M_TWOPI;
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <odometry_updatePosition+0x2b4>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa8b 	bl	8000588 <__aeabi_f2d>
 8002072:	a323      	add	r3, pc, #140	; (adr r3, 8002100 <odometry_updatePosition+0x2a0>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe f926 	bl	80002c8 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fdb0 	bl	8000be8 <__aeabi_d2f>
 8002088:	4603      	mov	r3, r0
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <odometry_updatePosition+0x2b4>)
 800208c:	6093      	str	r3, [r2, #8]
	else if (robot.angle < -M_PI)
		robot.angle = robot.angle + M_TWOPI;

	DEBUG_ODOMETRY("x: %.1fmm, y: %.1fmm, angle: %.1fdeg\r\n", robot.position.x, robot.position.y, robot.angle/2/M_PI*360);
}
 800208e:	e020      	b.n	80020d2 <odometry_updatePosition+0x272>
	else if (robot.angle < -M_PI)
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <odometry_updatePosition+0x2b4>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa77 	bl	8000588 <__aeabi_f2d>
 800209a:	a31b      	add	r3, pc, #108	; (adr r3, 8002108 <odometry_updatePosition+0x2a8>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d100      	bne.n	80020ac <odometry_updatePosition+0x24c>
}
 80020aa:	e012      	b.n	80020d2 <odometry_updatePosition+0x272>
		robot.angle = robot.angle + M_TWOPI;
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <odometry_updatePosition+0x2b4>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa69 	bl	8000588 <__aeabi_f2d>
 80020b6:	a312      	add	r3, pc, #72	; (adr r3, 8002100 <odometry_updatePosition+0x2a0>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe f906 	bl	80002cc <__adddf3>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fd8e 	bl	8000be8 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <odometry_updatePosition+0x2b4>)
 80020d0:	6093      	str	r3, [r2, #8]
}
 80020d2:	bf00      	nop
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdb0      	pop	{r4, r5, r7, pc}
 80020da:	bf00      	nop
 80020dc:	f3af 8000 	nop.w
 80020e0:	a0a52696 	.word	0xa0a52696
 80020e4:	406675db 	.word	0x406675db
 80020e8:	9999999a 	.word	0x9999999a
 80020ec:	3fe99999 	.word	0x3fe99999
 80020f0:	9999999a 	.word	0x9999999a
 80020f4:	3fc99999 	.word	0x3fc99999
 80020f8:	54442d18 	.word	0x54442d18
 80020fc:	400921fb 	.word	0x400921fb
 8002100:	54442d18 	.word	0x54442d18
 8002104:	401921fb 	.word	0x401921fb
 8002108:	54442d18 	.word	0x54442d18
 800210c:	c00921fb 	.word	0xc00921fb
 8002110:	3ca986fa 	.word	0x3ca986fa
 8002114:	2000025c 	.word	0x2000025c
 8002118:	3c23d70a 	.word	0x3c23d70a

0800211c <odometry_setPosition>:


void odometry_setPosition(float x, float y) {
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	ed87 0a01 	vstr	s0, [r7, #4]
 8002126:	edc7 0a00 	vstr	s1, [r7]
	robot.position.x = x;
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <odometry_setPosition+0x28>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6013      	str	r3, [r2, #0]
	robot.position.y = y;
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <odometry_setPosition+0x28>)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6053      	str	r3, [r2, #4]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2000025c 	.word	0x2000025c

08002148 <odometry_setAngle>:


void odometry_setAngle(float angle) {
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	ed87 0a01 	vstr	s0, [r7, #4]
	robot.angle = angle;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <odometry_setAngle+0x1c>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6093      	str	r3, [r2, #8]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	2000025c 	.word	0x2000025c

08002168 <propulsion_initialize>:


extern Robot robot;


void propulsion_initialize() {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af04      	add	r7, sp, #16
    robot.leftMotor = (Stepper*) malloc(sizeof(Stepper));
 800216e:	2018      	movs	r0, #24
 8002170:	f006 f946 	bl	8008400 <malloc>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <propulsion_initialize+0x60>)
 800217a:	60da      	str	r2, [r3, #12]
    robot.rightMotor = (Stepper*) malloc(sizeof(Stepper));
 800217c:	2018      	movs	r0, #24
 800217e:	f006 f93f 	bl	8008400 <malloc>
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <propulsion_initialize+0x60>)
 8002188:	615a      	str	r2, [r3, #20]

    drv8825_initialize(
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <propulsion_initialize+0x60>)
 800218c:	68d8      	ldr	r0, [r3, #12]
 800218e:	2300      	movs	r3, #0
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <propulsion_initialize+0x64>)
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <propulsion_initialize+0x68>)
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2304      	movs	r3, #4
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <propulsion_initialize+0x68>)
 800219e:	2101      	movs	r1, #1
 80021a0:	f7ff fc44 	bl	8001a2c <drv8825_initialize>
        robot.leftMotor,
        L_MOTOR_EN_Pin, L_MOTOR_EN_GPIO_Port,
        L_MOTOR_DIR_Pin, L_MOTOR_DIR_GPIO_Port,
        &L_MOTOR_TIMER, TIM_CHANNEL_1
    );
    drv8825_initialize(
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <propulsion_initialize+0x60>)
 80021a6:	6958      	ldr	r0, [r3, #20]
 80021a8:	230c      	movs	r3, #12
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <propulsion_initialize+0x6c>)
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <propulsion_initialize+0x68>)
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <propulsion_initialize+0x68>)
 80021ba:	2102      	movs	r1, #2
 80021bc:	f7ff fc36 	bl	8001a2c <drv8825_initialize>
        robot.rightMotor,
        R_MOTOR_EN_Pin, R_MOTOR_EN_GPIO_Port,
        R_MOTOR_DIR_Pin, R_MOTOR_DIR_GPIO_Port,
        &R_MOTOR_TIMER, TIM_CHANNEL_4
    );
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000025c 	.word	0x2000025c
 80021cc:	200003b8 	.word	0x200003b8
 80021d0:	40020800 	.word	0x40020800
 80021d4:	20000298 	.word	0x20000298

080021d8 <propulsion_enableMotors>:


void propulsion_enableMotors() {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
    drv8825_enable(robot.leftMotor);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <propulsion_enableMotors+0x1c>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fc58 	bl	8001a96 <drv8825_enable>
    drv8825_enable(robot.rightMotor);
 80021e6:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <propulsion_enableMotors+0x1c>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fc53 	bl	8001a96 <drv8825_enable>
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000025c 	.word	0x2000025c

080021f8 <propulsion_disableMotors>:


void propulsion_disableMotors() {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
    drv8825_disable(robot.leftMotor);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <propulsion_disableMotors+0x1c>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fc58 	bl	8001ab6 <drv8825_disable>
    drv8825_disable(robot.rightMotor);
 8002206:	4b03      	ldr	r3, [pc, #12]	; (8002214 <propulsion_disableMotors+0x1c>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fc53 	bl	8001ab6 <drv8825_disable>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000025c 	.word	0x2000025c

08002218 <propulsion_setSpeeds>:


void propulsion_setSpeeds(float left, float right) {
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002222:	edc7 0a00 	vstr	s1, [r7]
    float greatestAbsoluteSpeed = fabs(fabs(left)>fabs(right)?left:right);
 8002226:	edd7 7a01 	vldr	s15, [r7, #4]
 800222a:	eeb0 7ae7 	vabs.f32	s14, s15
 800222e:	edd7 7a00 	vldr	s15, [r7]
 8002232:	eef0 7ae7 	vabs.f32	s15, s15
 8002236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	dd04      	ble.n	800224a <propulsion_setSpeeds+0x32>
 8002240:	edd7 7a01 	vldr	s15, [r7, #4]
 8002244:	eef0 7ae7 	vabs.f32	s15, s15
 8002248:	e003      	b.n	8002252 <propulsion_setSpeeds+0x3a>
 800224a:	edd7 7a00 	vldr	s15, [r7]
 800224e:	eef0 7ae7 	vabs.f32	s15, s15
 8002252:	edc7 7a03 	vstr	s15, [r7, #12]
    if (greatestAbsoluteSpeed > MAX_MOTOR_SPEED) {
 8002256:	edd7 7a03 	vldr	s15, [r7, #12]
 800225a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002380 <propulsion_setSpeeds+0x168>
 800225e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	dd17      	ble.n	8002298 <propulsion_setSpeeds+0x80>
        left = left/greatestAbsoluteSpeed*MAX_MOTOR_SPEED;
 8002268:	edd7 6a01 	vldr	s13, [r7, #4]
 800226c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002274:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002380 <propulsion_setSpeeds+0x168>
 8002278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227c:	edc7 7a01 	vstr	s15, [r7, #4]
        right = right/greatestAbsoluteSpeed*MAX_MOTOR_SPEED;
 8002280:	edd7 6a00 	vldr	s13, [r7]
 8002284:	ed97 7a03 	vldr	s14, [r7, #12]
 8002288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002380 <propulsion_setSpeeds+0x168>
 8002290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002294:	edc7 7a00 	vstr	s15, [r7]
    }

    robot.leftSpeed = left;
 8002298:	4a3a      	ldr	r2, [pc, #232]	; (8002384 <propulsion_setSpeeds+0x16c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6113      	str	r3, [r2, #16]
    drv8825_setDirection(robot.leftMotor, (left < 0)?NEGATIVE:POSITIVE);
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <propulsion_setSpeeds+0x16c>)
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ae:	bf4c      	ite	mi
 80022b0:	2301      	movmi	r3, #1
 80022b2:	2300      	movpl	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f7ff fbd6 	bl	8001a72 <drv8825_setDirection>
    drv8825_setRotationSpeed(robot.leftMotor, 60 * fabsf(left) / (2*M_PI*WHEEL_RADIUS));
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <propulsion_setSpeeds+0x16c>)
 80022c8:	68dc      	ldr	r4, [r3, #12]
 80022ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ce:	eef0 7ae7 	vabs.f32	s15, s15
 80022d2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002388 <propulsion_setSpeeds+0x170>
 80022d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022da:	ee17 0a90 	vmov	r0, s15
 80022de:	f7fe f953 	bl	8000588 <__aeabi_f2d>
 80022e2:	a325      	add	r3, pc, #148	; (adr r3, 8002378 <propulsion_setSpeeds+0x160>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe fad0 	bl	800088c <__aeabi_ddiv>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fc78 	bl	8000be8 <__aeabi_d2f>
 80022f8:	4603      	mov	r3, r0
 80022fa:	ee00 3a10 	vmov	s0, r3
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff fc8a 	bl	8001c18 <drv8825_setRotationSpeed>

    robot.rightSpeed = right;
 8002304:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <propulsion_setSpeeds+0x16c>)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6193      	str	r3, [r2, #24]
    drv8825_setDirection(robot.rightMotor, (right < 0)?NEGATIVE:POSITIVE);
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <propulsion_setSpeeds+0x16c>)
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	edd7 7a00 	vldr	s15, [r7]
 8002312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	bf4c      	ite	mi
 800231c:	2301      	movmi	r3, #1
 800231e:	2300      	movpl	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	4610      	mov	r0, r2
 800232e:	f7ff fba0 	bl	8001a72 <drv8825_setDirection>
    drv8825_setRotationSpeed(robot.rightMotor, 60 * fabsf(right) / (2*M_PI*WHEEL_RADIUS));
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <propulsion_setSpeeds+0x16c>)
 8002334:	695c      	ldr	r4, [r3, #20]
 8002336:	edd7 7a00 	vldr	s15, [r7]
 800233a:	eef0 7ae7 	vabs.f32	s15, s15
 800233e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002388 <propulsion_setSpeeds+0x170>
 8002342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f91d 	bl	8000588 <__aeabi_f2d>
 800234e:	a30a      	add	r3, pc, #40	; (adr r3, 8002378 <propulsion_setSpeeds+0x160>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe fa9a 	bl	800088c <__aeabi_ddiv>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fc42 	bl	8000be8 <__aeabi_d2f>
 8002364:	4603      	mov	r3, r0
 8002366:	ee00 3a10 	vmov	s0, r3
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff fc54 	bl	8001c18 <drv8825_setRotationSpeed>
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}
 8002378:	d64b7175 	.word	0xd64b7175
 800237c:	406552d4 	.word	0x406552d4
 8002380:	44480000 	.word	0x44480000
 8002384:	2000025c 	.word	0x2000025c
 8002388:	42700000 	.word	0x42700000
 800238c:	00000000 	.word	0x00000000

08002390 <getAngleError>:
    else if (robot.angle < -M_PI)
        robot.angle = robot.angle + M_TWOPI;
}


float getAngleError(Bezier* b, float t, Vector2 p, Direction dir) {
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b08e      	sub	sp, #56	; 0x38
 8002394:	af00      	add	r7, sp, #0
 8002396:	6178      	str	r0, [r7, #20]
 8002398:	ed87 0a04 	vstr	s0, [r7, #16]
 800239c:	eeb0 7a60 	vmov.f32	s14, s1
 80023a0:	eef0 7a41 	vmov.f32	s15, s2
 80023a4:	460b      	mov	r3, r1
 80023a6:	ed87 7a02 	vstr	s14, [r7, #8]
 80023aa:	edc7 7a03 	vstr	s15, [r7, #12]
 80023ae:	71fb      	strb	r3, [r7, #7]
    Vector2 tangent = bezier_deriv1(b, t);
 80023b0:	ed97 0a04 	vldr	s0, [r7, #16]
 80023b4:	6978      	ldr	r0, [r7, #20]
 80023b6:	f7ff f860 	bl	800147a <bezier_deriv1>
 80023ba:	eeb0 7a40 	vmov.f32	s14, s0
 80023be:	eef0 7a60 	vmov.f32	s15, s1
 80023c2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80023c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Vector2 displacement = vector2_diff(p, robot.position);
 80023ca:	4b69      	ldr	r3, [pc, #420]	; (8002570 <getAngleError+0x1e0>)
 80023cc:	ed93 6a00 	vldr	s12, [r3]
 80023d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80023d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80023d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023dc:	eeb0 1a46 	vmov.f32	s2, s12
 80023e0:	eef0 1a66 	vmov.f32	s3, s13
 80023e4:	eeb0 0a47 	vmov.f32	s0, s14
 80023e8:	eef0 0a67 	vmov.f32	s1, s15
 80023ec:	f001 f8b0 	bl	8003550 <vector2_diff>
 80023f0:	eeb0 7a40 	vmov.f32	s14, s0
 80023f4:	eef0 7a60 	vmov.f32	s15, s1
 80023f8:	ed87 7a07 	vstr	s14, [r7, #28]
 80023fc:	edc7 7a08 	vstr	s15, [r7, #32]

    float sign = vector2_cross(displacement, tangent); // (vaut -1, 0 ou 1)
 8002400:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8002404:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002408:	ed97 7a07 	vldr	s14, [r7, #28]
 800240c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002410:	eeb0 1a46 	vmov.f32	s2, s12
 8002414:	eef0 1a66 	vmov.f32	s3, s13
 8002418:	eeb0 0a47 	vmov.f32	s0, s14
 800241c:	eef0 0a67 	vmov.f32	s1, s15
 8002420:	f001 f8d0 	bl	80035c4 <vector2_cross>
 8002424:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    sign /= (sign != 0)?fabs(sign):1;
 8002428:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800242a:	f7fe f8ad 	bl	8000588 <__aeabi_f2d>
 800242e:	4604      	mov	r4, r0
 8002430:	460d      	mov	r5, r1
 8002432:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002436:	eef5 7a40 	vcmp.f32	s15, #0.0
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	d00a      	beq.n	8002456 <getAngleError+0xc6>
 8002440:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002444:	eef0 7ae7 	vabs.f32	s15, s15
 8002448:	ee17 0a90 	vmov	r0, s15
 800244c:	f7fe f89c 	bl	8000588 <__aeabi_f2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	e002      	b.n	800245c <getAngleError+0xcc>
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <getAngleError+0x1e4>)
 800245c:	4620      	mov	r0, r4
 800245e:	4629      	mov	r1, r5
 8002460:	f7fe fa14 	bl	800088c <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fbbc 	bl	8000be8 <__aeabi_d2f>
 8002470:	4603      	mov	r3, r0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
    float signedDistance = sign * vector2_norm(displacement);
 8002474:	ed97 7a07 	vldr	s14, [r7, #28]
 8002478:	edd7 7a08 	vldr	s15, [r7, #32]
 800247c:	eeb0 0a47 	vmov.f32	s0, s14
 8002480:	eef0 0a67 	vmov.f32	s1, s15
 8002484:	f000 ffd0 	bl	8003428 <vector2_norm>
 8002488:	eeb0 7a40 	vmov.f32	s14, s0
 800248c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    DEBUG_PROPULSION("dist: %.1fmm, ", signedDistance);
 8002498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800249a:	f7fe f875 	bl	8000588 <__aeabi_f2d>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4835      	ldr	r0, [pc, #212]	; (8002578 <getAngleError+0x1e8>)
 80024a4:	f006 fce0 	bl	8008e68 <iprintf>

    float angleError = (vector2_angle(tangent) - atan(signedDistance / 200.0))
 80024a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80024ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024b0:	eeb0 0a47 	vmov.f32	s0, s14
 80024b4:	eef0 0a67 	vmov.f32	s1, s15
 80024b8:	f000 ffe7 	bl	800348a <vector2_angle>
 80024bc:	ee10 3a10 	vmov	r3, s0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f861 	bl	8000588 <__aeabi_f2d>
 80024c6:	4604      	mov	r4, r0
 80024c8:	460d      	mov	r5, r1
 80024ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024cc:	f7fe f85c 	bl	8000588 <__aeabi_f2d>
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	4b29      	ldr	r3, [pc, #164]	; (800257c <getAngleError+0x1ec>)
 80024d6:	f7fe f9d9 	bl	800088c <__aeabi_ddiv>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	ec43 2b17 	vmov	d7, r2, r3
 80024e2:	eeb0 0a47 	vmov.f32	s0, s14
 80024e6:	eef0 0a67 	vmov.f32	s1, s15
 80024ea:	f008 fcf1 	bl	800aed0 <atan>
 80024ee:	ec53 2b10 	vmov	r2, r3, d0
 80024f2:	4620      	mov	r0, r4
 80024f4:	4629      	mov	r1, r5
 80024f6:	f7fd fee7 	bl	80002c8 <__aeabi_dsub>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4614      	mov	r4, r2
 8002500:	461d      	mov	r5, r3
            - (robot.angle + (dir==BACKWARD?M_PI:0));
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <getAngleError+0x1e0>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f83e 	bl	8000588 <__aeabi_f2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002514:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002518:	d103      	bne.n	8002522 <getAngleError+0x192>
 800251a:	a113      	add	r1, pc, #76	; (adr r1, 8002568 <getAngleError+0x1d8>)
 800251c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002520:	e003      	b.n	800252a <getAngleError+0x19a>
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	f7fd fecf 	bl	80002cc <__adddf3>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f7fd fec7 	bl	80002c8 <__aeabi_dsub>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
    float angleError = (vector2_angle(tangent) - atan(signedDistance / 200.0))
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe fb51 	bl	8000be8 <__aeabi_d2f>
 8002546:	4603      	mov	r3, r0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    angleError = standardAngle(angleError); // (entre -pi et pi)
 800254a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800254e:	f000 facf 	bl	8002af0 <standardAngle>
 8002552:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    return angleError;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	ee07 3a90 	vmov	s15, r3
}
 800255c:	eeb0 0a67 	vmov.f32	s0, s15
 8002560:	3738      	adds	r7, #56	; 0x38
 8002562:	46bd      	mov	sp, r7
 8002564:	bdb0      	pop	{r4, r5, r7, pc}
 8002566:	bf00      	nop
 8002568:	54442d18 	.word	0x54442d18
 800256c:	400921fb 	.word	0x400921fb
 8002570:	2000025c 	.word	0x2000025c
 8002574:	3ff00000 	.word	0x3ff00000
 8002578:	0800c9a4 	.word	0x0800c9a4
 800257c:	40690000 	.word	0x40690000

08002580 <getRobotSpeed>:


float getRobotSpeed(float t, float angleError, Direction dir, float initialSpeed, float finalSpeed) {
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	ed87 0a05 	vstr	s0, [r7, #20]
 800258a:	edc7 0a04 	vstr	s1, [r7, #16]
 800258e:	4603      	mov	r3, r0
 8002590:	ed87 1a02 	vstr	s2, [r7, #8]
 8002594:	edc7 1a01 	vstr	s3, [r7, #4]
 8002598:	73fb      	strb	r3, [r7, #15]
    float slowDownFactor = 1 - fabs(angleError/M_PI) * 10;
 800259a:	6938      	ldr	r0, [r7, #16]
 800259c:	f7fd fff4 	bl	8000588 <__aeabi_f2d>
 80025a0:	a368      	add	r3, pc, #416	; (adr r3, 8002744 <getRobotSpeed+0x1c4>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe f971 	bl	800088c <__aeabi_ddiv>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4614      	mov	r4, r2
 80025b0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <getRobotSpeed+0x1b0>)
 80025ba:	4620      	mov	r0, r4
 80025bc:	4629      	mov	r1, r5
 80025be:	f7fe f83b 	bl	8000638 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	f04f 0000 	mov.w	r0, #0
 80025ca:	495a      	ldr	r1, [pc, #360]	; (8002734 <getRobotSpeed+0x1b4>)
 80025cc:	f7fd fe7c 	bl	80002c8 <__aeabi_dsub>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7fe fb06 	bl	8000be8 <__aeabi_d2f>
 80025dc:	4603      	mov	r3, r0
 80025de:	61bb      	str	r3, [r7, #24]
    slowDownFactor = slowDownFactor>0?slowDownFactor:0;
 80025e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80025e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	dd01      	ble.n	80025f2 <getRobotSpeed+0x72>
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	e001      	b.n	80025f6 <getRobotSpeed+0x76>
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]

    float speed = (dir==BACKWARD?-1:1) * slowDownFactor;
 80025f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002600:	d102      	bne.n	8002608 <getRobotSpeed+0x88>
 8002602:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002606:	e001      	b.n	800260c <getRobotSpeed+0x8c>
 8002608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800260c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002614:	edc7 7a07 	vstr	s15, [r7, #28]
    if (initialSpeed < 1 && finalSpeed < 1)
 8002618:	edd7 7a02 	vldr	s15, [r7, #8]
 800261c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	d51d      	bpl.n	8002666 <getRobotSpeed+0xe6>
 800262a:	edd7 7a01 	vldr	s15, [r7, #4]
 800262e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	d514      	bpl.n	8002666 <getRobotSpeed+0xe6>
        speed *= 600*(1-t) + 20;
 800263c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002640:	edd7 7a05 	vldr	s15, [r7, #20]
 8002644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002648:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002738 <getRobotSpeed+0x1b8>
 800264c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002650:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002658:	ed97 7a07 	vldr	s14, [r7, #28]
 800265c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002660:	edc7 7a07 	vstr	s15, [r7, #28]
 8002664:	e01b      	b.n	800269e <getRobotSpeed+0x11e>
    else
        speed *= initialSpeed*(1-t) + finalSpeed*t + 50;
 8002666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800266a:	edd7 7a05 	vldr	s15, [r7, #20]
 800266e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002672:	edd7 7a02 	vldr	s15, [r7, #8]
 8002676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800267a:	edd7 6a01 	vldr	s13, [r7, #4]
 800267e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800273c <getRobotSpeed+0x1bc>
 800268e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002692:	ed97 7a07 	vldr	s14, [r7, #28]
 8002696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Limite les accelerations brutales
    if (fabs(speed) > robot.measuredSpeed + 15)
 800269e:	edd7 7a07 	vldr	s15, [r7, #28]
 80026a2:	eeb0 7ae7 	vabs.f32	s14, s15
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <getRobotSpeed+0x1c0>)
 80026a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80026ac:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80026b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd2f      	ble.n	800271e <getRobotSpeed+0x19e>
        speed = (robot.measuredSpeed + 15) * fabs(speed) / speed;
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <getRobotSpeed+0x1c0>)
 80026c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80026c4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80026c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026cc:	ee17 0a90 	vmov	r0, s15
 80026d0:	f7fd ff5a 	bl	8000588 <__aeabi_f2d>
 80026d4:	4604      	mov	r4, r0
 80026d6:	460d      	mov	r5, r1
 80026d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026dc:	eef0 7ae7 	vabs.f32	s15, s15
 80026e0:	ee17 0a90 	vmov	r0, s15
 80026e4:	f7fd ff50 	bl	8000588 <__aeabi_f2d>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd ffa2 	bl	8000638 <__aeabi_dmul>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4614      	mov	r4, r2
 80026fa:	461d      	mov	r5, r3
 80026fc:	69f8      	ldr	r0, [r7, #28]
 80026fe:	f7fd ff43 	bl	8000588 <__aeabi_f2d>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4620      	mov	r0, r4
 8002708:	4629      	mov	r1, r5
 800270a:	f7fe f8bf 	bl	800088c <__aeabi_ddiv>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f7fe fa67 	bl	8000be8 <__aeabi_d2f>
 800271a:	4603      	mov	r3, r0
 800271c:	61fb      	str	r3, [r7, #28]

    return speed;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	ee07 3a90 	vmov	s15, r3
}
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bdb0      	pop	{r4, r5, r7, pc}
 800272e:	bf00      	nop
 8002730:	40240000 	.word	0x40240000
 8002734:	3ff00000 	.word	0x3ff00000
 8002738:	44160000 	.word	0x44160000
 800273c:	42480000 	.word	0x42480000
 8002740:	2000025c 	.word	0x2000025c
 8002744:	54442d18 	.word	0x54442d18
 8002748:	400921fb 	.word	0x400921fb
 800274c:	00000000 	.word	0x00000000

08002750 <calculateMotorSpeeds>:


void calculateMotorSpeeds(float* leftSpeed, float* rightSpeed, Bezier* b, float t, Direction dir, float speed) {
 8002750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002754:	b088      	sub	sp, #32
 8002756:	af00      	add	r7, sp, #0
 8002758:	6178      	str	r0, [r7, #20]
 800275a:	6139      	str	r1, [r7, #16]
 800275c:	60fa      	str	r2, [r7, #12]
 800275e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002762:	edc7 0a00 	vstr	s1, [r7]
 8002766:	71fb      	strb	r3, [r7, #7]
    float k = bezier_curvature(b, t);
 8002768:	ed97 0a02 	vldr	s0, [r7, #8]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7fe ffbf 	bl	80016f0 <bezier_curvature>
 8002772:	ed87 0a07 	vstr	s0, [r7, #28]

    *leftSpeed = speed * (1 + dir*ENTRAXE_MOTOR*k/2);
 8002776:	6838      	ldr	r0, [r7, #0]
 8002778:	f7fd ff06 	bl	8000588 <__aeabi_f2d>
 800277c:	4604      	mov	r4, r0
 800277e:	460d      	mov	r5, r1
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd feed 	bl	8000564 <__aeabi_i2d>
 800278a:	a33b      	add	r3, pc, #236	; (adr r3, 8002878 <calculateMotorSpeeds+0x128>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd ff52 	bl	8000638 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4690      	mov	r8, r2
 800279a:	4699      	mov	r9, r3
 800279c:	69f8      	ldr	r0, [r7, #28]
 800279e:	f7fd fef3 	bl	8000588 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4640      	mov	r0, r8
 80027a8:	4649      	mov	r1, r9
 80027aa:	f7fd ff45 	bl	8000638 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027be:	f7fe f865 	bl	800088c <__aeabi_ddiv>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <calculateMotorSpeeds+0x130>)
 80027d0:	f7fd fd7c 	bl	80002cc <__adddf3>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4620      	mov	r0, r4
 80027da:	4629      	mov	r1, r5
 80027dc:	f7fd ff2c 	bl	8000638 <__aeabi_dmul>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7fe f9fe 	bl	8000be8 <__aeabi_d2f>
 80027ec:	4602      	mov	r2, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	601a      	str	r2, [r3, #0]
    *rightSpeed = speed * (1 - dir*ENTRAXE_MOTOR*k/2);
 80027f2:	6838      	ldr	r0, [r7, #0]
 80027f4:	f7fd fec8 	bl	8000588 <__aeabi_f2d>
 80027f8:	4604      	mov	r4, r0
 80027fa:	460d      	mov	r5, r1
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd feaf 	bl	8000564 <__aeabi_i2d>
 8002806:	a31c      	add	r3, pc, #112	; (adr r3, 8002878 <calculateMotorSpeeds+0x128>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fd ff14 	bl	8000638 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4690      	mov	r8, r2
 8002816:	4699      	mov	r9, r3
 8002818:	69f8      	ldr	r0, [r7, #28]
 800281a:	f7fd feb5 	bl	8000588 <__aeabi_f2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4640      	mov	r0, r8
 8002824:	4649      	mov	r1, r9
 8002826:	f7fd ff07 	bl	8000638 <__aeabi_dmul>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800283a:	f7fe f827 	bl	800088c <__aeabi_ddiv>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	f04f 0000 	mov.w	r0, #0
 8002846:	490e      	ldr	r1, [pc, #56]	; (8002880 <calculateMotorSpeeds+0x130>)
 8002848:	f7fd fd3e 	bl	80002c8 <__aeabi_dsub>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fef0 	bl	8000638 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f9c2 	bl	8000be8 <__aeabi_d2f>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002874:	f3af 8000 	nop.w
 8002878:	e147ae14 	.word	0xe147ae14
 800287c:	405c147a 	.word	0x405c147a
 8002880:	3ff00000 	.word	0x3ff00000

08002884 <addCorrection>:


void addCorrection(float* leftSpeed, float* rightSpeed, float angleError) {
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	ed87 0a01 	vstr	s0, [r7, #4]
    float correction = -angleError*200; // contre réaction
 8002892:	edd7 7a01 	vldr	s15, [r7, #4]
 8002896:	eef1 7a67 	vneg.f32	s15, s15
 800289a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002948 <addCorrection+0xc4>
 800289e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a2:	edc7 7a05 	vstr	s15, [r7, #20]

    if (fabs(correction) > MAX_CORRECTION) {
 80028a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028aa:	eef0 7ae7 	vabs.f32	s15, s15
 80028ae:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800294c <addCorrection+0xc8>
 80028b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	dd25      	ble.n	8002908 <addCorrection+0x84>
        correction *= MAX_CORRECTION / abs(correction);
 80028bc:	6978      	ldr	r0, [r7, #20]
 80028be:	f7fd fe63 	bl	8000588 <__aeabi_f2d>
 80028c2:	4604      	mov	r4, r0
 80028c4:	460d      	mov	r5, r1
 80028c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ce:	ee17 3a90 	vmov	r3, s15
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bfb8      	it	lt
 80028d6:	425b      	neglt	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe43 	bl	8000564 <__aeabi_i2d>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	491a      	ldr	r1, [pc, #104]	; (8002950 <addCorrection+0xcc>)
 80028e8:	f7fd ffd0 	bl	800088c <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fd fea0 	bl	8000638 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fe f972 	bl	8000be8 <__aeabi_d2f>
 8002904:	4603      	mov	r3, r0
 8002906:	617b      	str	r3, [r7, #20]
    }

    DEBUG_PROPULSION("corr: %.1fmm\r\n", correction);
 8002908:	6978      	ldr	r0, [r7, #20]
 800290a:	f7fd fe3d 	bl	8000588 <__aeabi_f2d>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4810      	ldr	r0, [pc, #64]	; (8002954 <addCorrection+0xd0>)
 8002914:	f006 faa8 	bl	8008e68 <iprintf>

    *leftSpeed -= correction;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	ed93 7a00 	vldr	s14, [r3]
 800291e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	edc3 7a00 	vstr	s15, [r3]
    *rightSpeed += correction;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	ed93 7a00 	vldr	s14, [r3]
 8002932:	edd7 7a05 	vldr	s15, [r7, #20]
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	edc3 7a00 	vstr	s15, [r3]
}
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bdb0      	pop	{r4, r5, r7, pc}
 8002948:	43480000 	.word	0x43480000
 800294c:	42a00000 	.word	0x42a00000
 8002950:	40540000 	.word	0x40540000
 8002954:	0800c9b4 	.word	0x0800c9b4

08002958 <propulsion_followBezier>:


// C'est ici que la magie a lieu !
float propulsion_followBezier(Bezier* b, Direction dir, float initialSpeed, float finalSpeed, bool reverse) {
 8002958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800295c:	b094      	sub	sp, #80	; 0x50
 800295e:	af06      	add	r7, sp, #24
 8002960:	6178      	str	r0, [r7, #20]
 8002962:	460b      	mov	r3, r1
 8002964:	ed87 0a03 	vstr	s0, [r7, #12]
 8002968:	edc7 0a02 	vstr	s1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	74fb      	strb	r3, [r7, #19]
    float t = bezier_project(b, robot.position, 0.0001); // (entre 0 et 1)
 8002970:	4b5b      	ldr	r3, [pc, #364]	; (8002ae0 <propulsion_followBezier+0x188>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	edd3 7a01 	vldr	s15, [r3, #4]
 800297a:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8002ae4 <propulsion_followBezier+0x18c>
 800297e:	eeb0 0a47 	vmov.f32	s0, s14
 8002982:	eef0 0a67 	vmov.f32	s1, s15
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7fe ff70 	bl	800186c <bezier_project>
 800298c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    Vector2 p = bezier_eval(b, t); // Point de la courbe le plus proche du robot
 8002990:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002994:	6978      	ldr	r0, [r7, #20]
 8002996:	f7fe fcaf 	bl	80012f8 <bezier_eval>
 800299a:	eeb0 7a40 	vmov.f32	s14, s0
 800299e:	eef0 7a60 	vmov.f32	s15, s1
 80029a2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80029a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    DEBUG_PROPULSION("t: %.5f, x: %.1fmm, y: %.1fmm, a: %.1fdeg, ", t, robot.position.x, robot.position.y, robot.angle / M_PI / 2 * 360);
 80029aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029ac:	f7fd fdec 	bl	8000588 <__aeabi_f2d>
 80029b0:	4682      	mov	sl, r0
 80029b2:	468b      	mov	fp, r1
 80029b4:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <propulsion_followBezier+0x188>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fde5 	bl	8000588 <__aeabi_f2d>
 80029be:	4604      	mov	r4, r0
 80029c0:	460d      	mov	r5, r1
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <propulsion_followBezier+0x188>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fdde 	bl	8000588 <__aeabi_f2d>
 80029cc:	4680      	mov	r8, r0
 80029ce:	4689      	mov	r9, r1
 80029d0:	4b43      	ldr	r3, [pc, #268]	; (8002ae0 <propulsion_followBezier+0x188>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdd7 	bl	8000588 <__aeabi_f2d>
 80029da:	a33f      	add	r3, pc, #252	; (adr r3, 8002ad8 <propulsion_followBezier+0x180>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd ff54 	bl	800088c <__aeabi_ddiv>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029f4:	f7fd ff4a 	bl	800088c <__aeabi_ddiv>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <propulsion_followBezier+0x190>)
 8002a06:	f7fd fe17 	bl	8000638 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a12:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a16:	e9cd 4500 	strd	r4, r5, [sp]
 8002a1a:	4652      	mov	r2, sl
 8002a1c:	465b      	mov	r3, fp
 8002a1e:	4833      	ldr	r0, [pc, #204]	; (8002aec <propulsion_followBezier+0x194>)
 8002a20:	f006 fa22 	bl	8008e68 <iprintf>

    // Erreur d'orientation
    float angleError = getAngleError(b, t, p, dir);
 8002a24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a28:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002a2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a30:	4619      	mov	r1, r3
 8002a32:	eef0 0a47 	vmov.f32	s1, s14
 8002a36:	eeb0 1a67 	vmov.f32	s2, s15
 8002a3a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff fca6 	bl	8002390 <getAngleError>
 8002a44:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

    if (reverse) {
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <propulsion_followBezier+0xfc>
    	angleError = 0;
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Vitesse globale du robot
    float speed = getRobotSpeed(t, angleError, dir, initialSpeed, finalSpeed);
 8002a54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a58:	edd7 1a02 	vldr	s3, [r7, #8]
 8002a5c:	ed97 1a03 	vldr	s2, [r7, #12]
 8002a60:	4618      	mov	r0, r3
 8002a62:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8002a66:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002a6a:	f7ff fd89 	bl	8002580 <getRobotSpeed>
 8002a6e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

    if (reverse) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <propulsion_followBezier+0x12c>
    	speed *= -1;
 8002a78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a7c:	eef1 7a67 	vneg.f32	s15, s15
 8002a80:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }

    float leftSpeed, rightSpeed;

    // Boucle ouverte
    calculateMotorSpeeds(&leftSpeed, &rightSpeed, b, t, dir, speed);
 8002a84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a88:	f107 011c 	add.w	r1, r7, #28
 8002a8c:	f107 0020 	add.w	r0, r7, #32
 8002a90:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002a94:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	f7ff fe59 	bl	8002750 <calculateMotorSpeeds>

    // Boucle fermée
    addCorrection(&leftSpeed, &rightSpeed, angleError);
 8002a9e:	f107 021c 	add.w	r2, r7, #28
 8002aa2:	f107 0320 	add.w	r3, r7, #32
 8002aa6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fee9 	bl	8002884 <addCorrection>

    // Commande des moteurs
    propulsion_setSpeeds(leftSpeed, rightSpeed);
 8002ab2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ab6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002aba:	eef0 0a47 	vmov.f32	s1, s14
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	f7ff fba9 	bl	8002218 <propulsion_setSpeeds>

    return t;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	ee07 3a90 	vmov	s15, r3
}
 8002acc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad0:	3738      	adds	r7, #56	; 0x38
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad8:	54442d18 	.word	0x54442d18
 8002adc:	400921fb 	.word	0x400921fb
 8002ae0:	2000025c 	.word	0x2000025c
 8002ae4:	38d1b717 	.word	0x38d1b717
 8002ae8:	40768000 	.word	0x40768000
 8002aec:	0800c9c4 	.word	0x0800c9c4

08002af0 <standardAngle>:


float standardAngle(float angle) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	ed87 0a01 	vstr	s0, [r7, #4]
    return fmod(fmod(angle + M_PI, M_TWOPI) + M_TWOPI, M_TWOPI) - M_PI;
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fd fd44 	bl	8000588 <__aeabi_f2d>
 8002b00:	a31f      	add	r3, pc, #124	; (adr r3, 8002b80 <standardAngle+0x90>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fbe1 	bl	80002cc <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	ec43 2b17 	vmov	d7, r2, r3
 8002b12:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8002b78 <standardAngle+0x88>
 8002b16:	eeb0 0a47 	vmov.f32	s0, s14
 8002b1a:	eef0 0a67 	vmov.f32	s1, s15
 8002b1e:	f008 fc29 	bl	800b374 <fmod>
 8002b22:	ec51 0b10 	vmov	r0, r1, d0
 8002b26:	a314      	add	r3, pc, #80	; (adr r3, 8002b78 <standardAngle+0x88>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f7fd fbce 	bl	80002cc <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	ec43 2b17 	vmov	d7, r2, r3
 8002b38:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002b78 <standardAngle+0x88>
 8002b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b40:	eef0 0a67 	vmov.f32	s1, s15
 8002b44:	f008 fc16 	bl	800b374 <fmod>
 8002b48:	ec51 0b10 	vmov	r0, r1, d0
 8002b4c:	a30c      	add	r3, pc, #48	; (adr r3, 8002b80 <standardAngle+0x90>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	f7fd fbb9 	bl	80002c8 <__aeabi_dsub>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f7fe f843 	bl	8000be8 <__aeabi_d2f>
 8002b62:	4603      	mov	r3, r0
 8002b64:	ee07 3a90 	vmov	s15, r3
}
 8002b68:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	f3af 8000 	nop.w
 8002b78:	54442d18 	.word	0x54442d18
 8002b7c:	401921fb 	.word	0x401921fb
 8002b80:	54442d18 	.word	0x54442d18
 8002b84:	400921fb 	.word	0x400921fb

08002b88 <serial_send>:
#include "serial.h"

int serial_send(uint8_t *ptr, int len, int uartPort) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
	if (uartPort == 4)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d108      	bne.n	8002bac <serial_send+0x24>
		HAL_UART_Transmit(&huart4, ptr, len, HAL_MAX_DELAY);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	481d      	ldr	r0, [pc, #116]	; (8002c1c <serial_send+0x94>)
 8002ba6:	f004 fc7e 	bl	80074a6 <HAL_UART_Transmit>
 8002baa:	e032      	b.n	8002c12 <serial_send+0x8a>
	else if (uartPort == 5)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d108      	bne.n	8002bc4 <serial_send+0x3c>
		HAL_UART_Transmit(&huart5, ptr, len, HAL_MAX_DELAY);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bba:	68f9      	ldr	r1, [r7, #12]
 8002bbc:	4818      	ldr	r0, [pc, #96]	; (8002c20 <serial_send+0x98>)
 8002bbe:	f004 fc72 	bl	80074a6 <HAL_UART_Transmit>
 8002bc2:	e026      	b.n	8002c12 <serial_send+0x8a>
	else if (uartPort == 6) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d123      	bne.n	8002c12 <serial_send+0x8a>
		uint8_t action = *ptr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	75fb      	strb	r3, [r7, #23]
		if (robot.team == PURPLE) {
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <serial_send+0x9c>)
 8002bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d112      	bne.n	8002c00 <serial_send+0x78>
			if (action == 0xA1) {
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	2ba1      	cmp	r3, #161	; 0xa1
 8002bde:	d102      	bne.n	8002be6 <serial_send+0x5e>
				action = 0xA2;
 8002be0:	23a2      	movs	r3, #162	; 0xa2
 8002be2:	75fb      	strb	r3, [r7, #23]
 8002be4:	e00c      	b.n	8002c00 <serial_send+0x78>
			} else if (*ptr == 0xCA) {
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2bca      	cmp	r3, #202	; 0xca
 8002bec:	d102      	bne.n	8002bf4 <serial_send+0x6c>
				action = 0xCB;
 8002bee:	23cb      	movs	r3, #203	; 0xcb
 8002bf0:	75fb      	strb	r3, [r7, #23]
 8002bf2:	e005      	b.n	8002c00 <serial_send+0x78>
			} else if (*ptr == 0xCB) {
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2bcb      	cmp	r3, #203	; 0xcb
 8002bfa:	d101      	bne.n	8002c00 <serial_send+0x78>
				action = 0xCA;
 8002bfc:	23ca      	movs	r3, #202	; 0xca
 8002bfe:	75fb      	strb	r3, [r7, #23]
			}
		}
		HAL_UART_Transmit(&huart6, &action, len, HAL_MAX_DELAY);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f107 0117 	add.w	r1, r7, #23
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0c:	4806      	ldr	r0, [pc, #24]	; (8002c28 <serial_send+0xa0>)
 8002c0e:	f004 fc4a 	bl	80074a6 <HAL_UART_Transmit>
		//printf("Sending %x\r\n", *ptr);
	}
	return len;
 8002c12:	68bb      	ldr	r3, [r7, #8]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200005a8 	.word	0x200005a8
 8002c20:	20000520 	.word	0x20000520
 8002c24:	2000025c 	.word	0x2000025c
 8002c28:	20000564 	.word	0x20000564

08002c2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <HAL_UART_RxCpltCallback+0x78>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d115      	bne.n	8002c6a <HAL_UART_RxCpltCallback+0x3e>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		int id = lidarData >> 4;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <HAL_UART_RxCpltCallback+0x7c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	60fb      	str	r3, [r7, #12]
		uint8_t dist = (lidarData & 0xF) << 2;
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_UART_RxCpltCallback+0x7c>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002c54:	72fb      	strb	r3, [r7, #11]
		lidar_updateDistance(id, dist);
 8002c56:	7afb      	ldrb	r3, [r7, #11]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff f826 	bl	8001cac <lidar_updateDistance>
		HAL_UART_Receive_IT(&huart4, &lidarData, 1);
 8002c60:	2201      	movs	r2, #1
 8002c62:	4911      	ldr	r1, [pc, #68]	; (8002ca8 <HAL_UART_RxCpltCallback+0x7c>)
 8002c64:	4811      	ldr	r0, [pc, #68]	; (8002cac <HAL_UART_RxCpltCallback+0x80>)
 8002c66:	f004 fcb0 	bl	80075ca <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART6){
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_UART_RxCpltCallback+0x84>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d112      	bne.n	8002c9a <HAL_UART_RxCpltCallback+0x6e>
		if (armData == 0xFF) {
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_UART_RxCpltCallback+0x88>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2bff      	cmp	r3, #255	; 0xff
 8002c7a:	d109      	bne.n	8002c90 <HAL_UART_RxCpltCallback+0x64>
			HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	480e      	ldr	r0, [pc, #56]	; (8002cb8 <HAL_UART_RxCpltCallback+0x8c>)
 8002c80:	f002 fc49 	bl	8005516 <HAL_GPIO_TogglePin>
			robot.waitingForOnSiteAction = false;
 8002c84:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_UART_RxCpltCallback+0x90>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
			robot.waitingForOnMoveAction = false;
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_UART_RxCpltCallback+0x90>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
			//printf("Arm: Continue.\r\n");
		}

		HAL_UART_Receive_IT(&huart6, &armData, 1);
 8002c90:	2201      	movs	r2, #1
 8002c92:	4908      	ldr	r1, [pc, #32]	; (8002cb4 <HAL_UART_RxCpltCallback+0x88>)
 8002c94:	480a      	ldr	r0, [pc, #40]	; (8002cc0 <HAL_UART_RxCpltCallback+0x94>)
 8002c96:	f004 fc98 	bl	80075ca <HAL_UART_Receive_IT>
	}
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40004c00 	.word	0x40004c00
 8002ca8:	20000250 	.word	0x20000250
 8002cac:	200005a8 	.word	0x200005a8
 8002cb0:	40011400 	.word	0x40011400
 8002cb4:	20000251 	.word	0x20000251
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	2000025c 	.word	0x2000025c
 8002cc0:	20000564 	.word	0x20000564

08002cc4 <strategy_initialize>:
#include "strategy.h"

Strategy* strategy_initialize() {
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
    Strategy* strategy = (Strategy*) malloc(sizeof(Strategy));
 8002cca:	2020      	movs	r0, #32
 8002ccc:	f005 fb98 	bl	8008400 <malloc>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	607b      	str	r3, [r7, #4]
    strategy->length = 12;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	601a      	str	r2, [r3, #0]
    strategy->path = (Bezier**) malloc(sizeof(Bezier*) * strategy->length);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f005 fb8d 	bl	8008400 <malloc>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	605a      	str	r2, [r3, #4]

    strategy->directions = (Direction*) malloc(sizeof(Direction) * strategy->length);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f005 fb84 	bl	8008400 <malloc>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
    strategy->speeds = (float*) calloc(strategy->length+1, sizeof(float));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	2104      	movs	r1, #4
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f005 fb47 	bl	800839c <calloc>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	60da      	str	r2, [r3, #12]

    strategy->onSiteActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f005 fb6e 	bl	8008400 <malloc>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	611a      	str	r2, [r3, #16]
    strategy->onSiteActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	2104      	movs	r1, #4
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fb31 	bl	800839c <calloc>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	619a      	str	r2, [r3, #24]
    strategy->onMoveActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f005 fb58 	bl	8008400 <malloc>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	615a      	str	r2, [r3, #20]
    strategy->onMoveActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	2104      	movs	r1, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f005 fb1b 	bl	800839c <calloc>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	61da      	str	r2, [r3, #28]

    strategy->path[0] = bezier_new(119.969, 879.929, 178.004, 880.012, 440.576, 851.894, 572.422, 1018.733, 30);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685c      	ldr	r4, [r3, #4]
 8002d72:	201e      	movs	r0, #30
 8002d74:	eddf 3ace 	vldr	s7, [pc, #824]	; 80030b0 <strategy_initialize+0x3ec>
 8002d78:	ed9f 3ace 	vldr	s6, [pc, #824]	; 80030b4 <strategy_initialize+0x3f0>
 8002d7c:	eddf 2ace 	vldr	s5, [pc, #824]	; 80030b8 <strategy_initialize+0x3f4>
 8002d80:	ed9f 2ace 	vldr	s4, [pc, #824]	; 80030bc <strategy_initialize+0x3f8>
 8002d84:	eddf 1ace 	vldr	s3, [pc, #824]	; 80030c0 <strategy_initialize+0x3fc>
 8002d88:	ed9f 1ace 	vldr	s2, [pc, #824]	; 80030c4 <strategy_initialize+0x400>
 8002d8c:	eddf 0ace 	vldr	s1, [pc, #824]	; 80030c8 <strategy_initialize+0x404>
 8002d90:	ed9f 0ace 	vldr	s0, [pc, #824]	; 80030cc <strategy_initialize+0x408>
 8002d94:	f7fe f9da 	bl	800114c <bezier_new>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	6023      	str	r3, [r4, #0]
    strategy->path[1] = bezier_new(572.422, 1018.733, 704.269, 1185.571, 605.615, 1388.480, 510.343, 1485.028, 30);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	1d1c      	adds	r4, r3, #4
 8002da2:	201e      	movs	r0, #30
 8002da4:	eddf 3aca 	vldr	s7, [pc, #808]	; 80030d0 <strategy_initialize+0x40c>
 8002da8:	ed9f 3aca 	vldr	s6, [pc, #808]	; 80030d4 <strategy_initialize+0x410>
 8002dac:	eddf 2aca 	vldr	s5, [pc, #808]	; 80030d8 <strategy_initialize+0x414>
 8002db0:	ed9f 2aca 	vldr	s4, [pc, #808]	; 80030dc <strategy_initialize+0x418>
 8002db4:	eddf 1aca 	vldr	s3, [pc, #808]	; 80030e0 <strategy_initialize+0x41c>
 8002db8:	ed9f 1aca 	vldr	s2, [pc, #808]	; 80030e4 <strategy_initialize+0x420>
 8002dbc:	eddf 0abc 	vldr	s1, [pc, #752]	; 80030b0 <strategy_initialize+0x3ec>
 8002dc0:	ed9f 0abc 	vldr	s0, [pc, #752]	; 80030b4 <strategy_initialize+0x3f0>
 8002dc4:	f7fe f9c2 	bl	800114c <bezier_new>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	6023      	str	r3, [r4, #0]
    strategy->path[2] = bezier_new(510.343, 1485.028, 415.070, 1581.576, 435.653, 1569.172, 385.564, 1614.828, 30);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f103 0408 	add.w	r4, r3, #8
 8002dd4:	201e      	movs	r0, #30
 8002dd6:	eddf 3ac4 	vldr	s7, [pc, #784]	; 80030e8 <strategy_initialize+0x424>
 8002dda:	ed9f 3ac4 	vldr	s6, [pc, #784]	; 80030ec <strategy_initialize+0x428>
 8002dde:	eddf 2ac4 	vldr	s5, [pc, #784]	; 80030f0 <strategy_initialize+0x42c>
 8002de2:	ed9f 2ac4 	vldr	s4, [pc, #784]	; 80030f4 <strategy_initialize+0x430>
 8002de6:	eddf 1ac4 	vldr	s3, [pc, #784]	; 80030f8 <strategy_initialize+0x434>
 8002dea:	ed9f 1ac4 	vldr	s2, [pc, #784]	; 80030fc <strategy_initialize+0x438>
 8002dee:	eddf 0ab8 	vldr	s1, [pc, #736]	; 80030d0 <strategy_initialize+0x40c>
 8002df2:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 80030d4 <strategy_initialize+0x410>
 8002df6:	f7fe f9a9 	bl	800114c <bezier_new>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6023      	str	r3, [r4, #0]
    strategy->path[3] = bezier_new(385.564, 1614.828, 185.559, 1420.743, 227.721, 912.121, 226.543, 616.533, 30);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f103 040c 	add.w	r4, r3, #12
 8002e06:	201e      	movs	r0, #30
 8002e08:	eddf 3abd 	vldr	s7, [pc, #756]	; 8003100 <strategy_initialize+0x43c>
 8002e0c:	ed9f 3abd 	vldr	s6, [pc, #756]	; 8003104 <strategy_initialize+0x440>
 8002e10:	eddf 2abd 	vldr	s5, [pc, #756]	; 8003108 <strategy_initialize+0x444>
 8002e14:	ed9f 2abd 	vldr	s4, [pc, #756]	; 800310c <strategy_initialize+0x448>
 8002e18:	eddf 1abd 	vldr	s3, [pc, #756]	; 8003110 <strategy_initialize+0x44c>
 8002e1c:	ed9f 1abd 	vldr	s2, [pc, #756]	; 8003114 <strategy_initialize+0x450>
 8002e20:	eddf 0ab1 	vldr	s1, [pc, #708]	; 80030e8 <strategy_initialize+0x424>
 8002e24:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80030ec <strategy_initialize+0x428>
 8002e28:	f7fe f990 	bl	800114c <bezier_new>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	6023      	str	r3, [r4, #0]
    strategy->path[4] = bezier_new(226.543, 616.533, 225.365, 320.945, 225.207, 311.644, 223.404, 156.592, 30);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f103 0410 	add.w	r4, r3, #16
 8002e38:	201e      	movs	r0, #30
 8002e3a:	eddf 3ab7 	vldr	s7, [pc, #732]	; 8003118 <strategy_initialize+0x454>
 8002e3e:	ed9f 3ab7 	vldr	s6, [pc, #732]	; 800311c <strategy_initialize+0x458>
 8002e42:	eddf 2ab7 	vldr	s5, [pc, #732]	; 8003120 <strategy_initialize+0x45c>
 8002e46:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8003124 <strategy_initialize+0x460>
 8002e4a:	eddf 1ab7 	vldr	s3, [pc, #732]	; 8003128 <strategy_initialize+0x464>
 8002e4e:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 800312c <strategy_initialize+0x468>
 8002e52:	eddf 0aab 	vldr	s1, [pc, #684]	; 8003100 <strategy_initialize+0x43c>
 8002e56:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8003104 <strategy_initialize+0x440>
 8002e5a:	f7fe f977 	bl	800114c <bezier_new>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	6023      	str	r3, [r4, #0]
    strategy->path[5] = bezier_new(223.404, 156.592, 223.848, 443.925, 223.174, 511.307, 233.619, 846.817, 30);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f103 0414 	add.w	r4, r3, #20
 8002e6a:	201e      	movs	r0, #30
 8002e6c:	eddf 3ab0 	vldr	s7, [pc, #704]	; 8003130 <strategy_initialize+0x46c>
 8002e70:	ed9f 3ab0 	vldr	s6, [pc, #704]	; 8003134 <strategy_initialize+0x470>
 8002e74:	eddf 2ab0 	vldr	s5, [pc, #704]	; 8003138 <strategy_initialize+0x474>
 8002e78:	ed9f 2ab0 	vldr	s4, [pc, #704]	; 800313c <strategy_initialize+0x478>
 8002e7c:	eddf 1ab0 	vldr	s3, [pc, #704]	; 8003140 <strategy_initialize+0x47c>
 8002e80:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8003144 <strategy_initialize+0x480>
 8002e84:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8003118 <strategy_initialize+0x454>
 8002e88:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 800311c <strategy_initialize+0x458>
 8002e8c:	f7fe f95e 	bl	800114c <bezier_new>
 8002e90:	4603      	mov	r3, r0
 8002e92:	6023      	str	r3, [r4, #0]
    strategy->path[6] = bezier_new(233.619, 846.817, 244.065, 1182.327, 308.785, 1439.988, 362.240, 1556.043, 30);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f103 0418 	add.w	r4, r3, #24
 8002e9c:	201e      	movs	r0, #30
 8002e9e:	eddf 3aaa 	vldr	s7, [pc, #680]	; 8003148 <strategy_initialize+0x484>
 8002ea2:	ed9f 3aaa 	vldr	s6, [pc, #680]	; 800314c <strategy_initialize+0x488>
 8002ea6:	eddf 2aaa 	vldr	s5, [pc, #680]	; 8003150 <strategy_initialize+0x48c>
 8002eaa:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8003154 <strategy_initialize+0x490>
 8002eae:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8003158 <strategy_initialize+0x494>
 8002eb2:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 800315c <strategy_initialize+0x498>
 8002eb6:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8003130 <strategy_initialize+0x46c>
 8002eba:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8003134 <strategy_initialize+0x470>
 8002ebe:	f7fe f945 	bl	800114c <bezier_new>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6023      	str	r3, [r4, #0]
    strategy->path[7] = bezier_new(362.240, 1556.043, 415.695, 1672.097, 550.885, 1798.591, 677.165, 1799.998, 30);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f103 041c 	add.w	r4, r3, #28
 8002ece:	201e      	movs	r0, #30
 8002ed0:	eddf 3aa3 	vldr	s7, [pc, #652]	; 8003160 <strategy_initialize+0x49c>
 8002ed4:	ed9f 3aa3 	vldr	s6, [pc, #652]	; 8003164 <strategy_initialize+0x4a0>
 8002ed8:	eddf 2aa3 	vldr	s5, [pc, #652]	; 8003168 <strategy_initialize+0x4a4>
 8002edc:	ed9f 2aa3 	vldr	s4, [pc, #652]	; 800316c <strategy_initialize+0x4a8>
 8002ee0:	eddf 1aa3 	vldr	s3, [pc, #652]	; 8003170 <strategy_initialize+0x4ac>
 8002ee4:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8003174 <strategy_initialize+0x4b0>
 8002ee8:	eddf 0a97 	vldr	s1, [pc, #604]	; 8003148 <strategy_initialize+0x484>
 8002eec:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800314c <strategy_initialize+0x488>
 8002ef0:	f7fe f92c 	bl	800114c <bezier_new>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	6023      	str	r3, [r4, #0]
    strategy->path[8] = bezier_new(677.165, 1799.998, 760.999, 1800.447, 809.049, 1800.407, 863.127, 1799.892, 30);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f103 0420 	add.w	r4, r3, #32
 8002f00:	201e      	movs	r0, #30
 8002f02:	eddf 3a9d 	vldr	s7, [pc, #628]	; 8003178 <strategy_initialize+0x4b4>
 8002f06:	ed9f 3a9d 	vldr	s6, [pc, #628]	; 800317c <strategy_initialize+0x4b8>
 8002f0a:	eddf 2a9d 	vldr	s5, [pc, #628]	; 8003180 <strategy_initialize+0x4bc>
 8002f0e:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8003184 <strategy_initialize+0x4c0>
 8002f12:	eddf 1a9d 	vldr	s3, [pc, #628]	; 8003188 <strategy_initialize+0x4c4>
 8002f16:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 800318c <strategy_initialize+0x4c8>
 8002f1a:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003160 <strategy_initialize+0x49c>
 8002f1e:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8003164 <strategy_initialize+0x4a0>
 8002f22:	f7fe f913 	bl	800114c <bezier_new>
 8002f26:	4603      	mov	r3, r0
 8002f28:	6023      	str	r3, [r4, #0]
    strategy->path[9] = bezier_new(863.127, 1799.892, 917.119, 1799.719, 989.549, 1799.801, 1044.142, 1799.815, 30);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002f32:	201e      	movs	r0, #30
 8002f34:	eddf 3a96 	vldr	s7, [pc, #600]	; 8003190 <strategy_initialize+0x4cc>
 8002f38:	ed9f 3a96 	vldr	s6, [pc, #600]	; 8003194 <strategy_initialize+0x4d0>
 8002f3c:	eddf 2a96 	vldr	s5, [pc, #600]	; 8003198 <strategy_initialize+0x4d4>
 8002f40:	ed9f 2a96 	vldr	s4, [pc, #600]	; 800319c <strategy_initialize+0x4d8>
 8002f44:	eddf 1a96 	vldr	s3, [pc, #600]	; 80031a0 <strategy_initialize+0x4dc>
 8002f48:	ed9f 1a96 	vldr	s2, [pc, #600]	; 80031a4 <strategy_initialize+0x4e0>
 8002f4c:	eddf 0a8a 	vldr	s1, [pc, #552]	; 8003178 <strategy_initialize+0x4b4>
 8002f50:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 800317c <strategy_initialize+0x4b8>
 8002f54:	f7fe f8fa 	bl	800114c <bezier_new>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	6023      	str	r3, [r4, #0]
    strategy->path[10] = bezier_new(1044.142, 1799.815, 1098.736, 1799.662, 1172.146, 1799.798, 1216.696, 1800.056, 30);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002f64:	201e      	movs	r0, #30
 8002f66:	eddf 3a90 	vldr	s7, [pc, #576]	; 80031a8 <strategy_initialize+0x4e4>
 8002f6a:	ed9f 3a90 	vldr	s6, [pc, #576]	; 80031ac <strategy_initialize+0x4e8>
 8002f6e:	eddf 2a90 	vldr	s5, [pc, #576]	; 80031b0 <strategy_initialize+0x4ec>
 8002f72:	ed9f 2a90 	vldr	s4, [pc, #576]	; 80031b4 <strategy_initialize+0x4f0>
 8002f76:	eddf 1a90 	vldr	s3, [pc, #576]	; 80031b8 <strategy_initialize+0x4f4>
 8002f7a:	ed9f 1a90 	vldr	s2, [pc, #576]	; 80031bc <strategy_initialize+0x4f8>
 8002f7e:	eddf 0a84 	vldr	s1, [pc, #528]	; 8003190 <strategy_initialize+0x4cc>
 8002f82:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8003194 <strategy_initialize+0x4d0>
 8002f86:	f7fe f8e1 	bl	800114c <bezier_new>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6023      	str	r3, [r4, #0]
    strategy->path[11] = bezier_new(1216.696, 1800.056, 1215.578, 1634.543, 1238.844, 1467.963, 1068.961, 1471.400, 30);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8002f96:	201e      	movs	r0, #30
 8002f98:	eddf 3a89 	vldr	s7, [pc, #548]	; 80031c0 <strategy_initialize+0x4fc>
 8002f9c:	ed9f 3a89 	vldr	s6, [pc, #548]	; 80031c4 <strategy_initialize+0x500>
 8002fa0:	eddf 2a89 	vldr	s5, [pc, #548]	; 80031c8 <strategy_initialize+0x504>
 8002fa4:	ed9f 2a89 	vldr	s4, [pc, #548]	; 80031cc <strategy_initialize+0x508>
 8002fa8:	eddf 1a89 	vldr	s3, [pc, #548]	; 80031d0 <strategy_initialize+0x50c>
 8002fac:	ed9f 1a89 	vldr	s2, [pc, #548]	; 80031d4 <strategy_initialize+0x510>
 8002fb0:	eddf 0a7d 	vldr	s1, [pc, #500]	; 80031a8 <strategy_initialize+0x4e4>
 8002fb4:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80031ac <strategy_initialize+0x4e8>
 8002fb8:	f7fe f8c8 	bl	800114c <bezier_new>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	6023      	str	r3, [r4, #0]

    strategy->directions[0] = FORWARD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
    strategy->directions[1] = FORWARD;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
    strategy->directions[2] = FORWARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
    strategy->directions[3] = FORWARD;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	3303      	adds	r3, #3
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
    strategy->directions[4] = FORWARD;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	3304      	adds	r3, #4
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
    strategy->directions[5] = FORWARD;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	3305      	adds	r3, #5
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
    strategy->directions[6] = FORWARD;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	3306      	adds	r3, #6
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
    strategy->directions[7] = FORWARD;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	3307      	adds	r3, #7
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
    strategy->directions[8] = FORWARD;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	3308      	adds	r3, #8
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
    strategy->directions[9] = FORWARD;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	3309      	adds	r3, #9
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
    strategy->directions[10] = FORWARD;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	330a      	adds	r3, #10
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    strategy->directions[11] = FORWARD;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	330b      	adds	r3, #11
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]

    strategy->speeds[1] = 1000;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	3304      	adds	r3, #4
 800303c:	4a66      	ldr	r2, [pc, #408]	; (80031d8 <strategy_initialize+0x514>)
 800303e:	601a      	str	r2, [r3, #0]
    strategy->speeds[2] = 163;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	3308      	adds	r3, #8
 8003046:	4a65      	ldr	r2, [pc, #404]	; (80031dc <strategy_initialize+0x518>)
 8003048:	601a      	str	r2, [r3, #0]
    strategy->speeds[4] = 870;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	3310      	adds	r3, #16
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <strategy_initialize+0x51c>)
 8003052:	601a      	str	r2, [r3, #0]
    strategy->speeds[6] = 866;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	3318      	adds	r3, #24
 800305a:	4a62      	ldr	r2, [pc, #392]	; (80031e4 <strategy_initialize+0x520>)
 800305c:	601a      	str	r2, [r3, #0]
    strategy->speeds[7] = 636;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	331c      	adds	r3, #28
 8003064:	4a60      	ldr	r2, [pc, #384]	; (80031e8 <strategy_initialize+0x524>)
 8003066:	601a      	str	r2, [r3, #0]

    strategy->onSiteActionsLengths[0] = 1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2201      	movs	r2, #1
 800306e:	601a      	str	r2, [r3, #0]
    strategy->onSiteActions[0] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691c      	ldr	r4, [r3, #16]
 8003074:	2001      	movs	r0, #1
 8003076:	f005 f9c3 	bl	8008400 <malloc>
 800307a:	4603      	mov	r3, r0
 800307c:	6023      	str	r3, [r4, #0]
    strategy->onSiteActions[0][0] = 0xA1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	22a1      	movs	r2, #161	; 0xa1
 8003086:	701a      	strb	r2, [r3, #0]
    strategy->onSiteActionsLengths[3] = 1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	330c      	adds	r3, #12
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]
    strategy->onSiteActions[3] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f103 040c 	add.w	r4, r3, #12
 800309a:	2001      	movs	r0, #1
 800309c:	f005 f9b0 	bl	8008400 <malloc>
 80030a0:	4603      	mov	r3, r0
 80030a2:	6023      	str	r3, [r4, #0]
    strategy->onSiteActions[3][0] = 0xB1;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	330c      	adds	r3, #12
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	e09e      	b.n	80031ec <strategy_initialize+0x528>
 80030ae:	bf00      	nop
 80030b0:	447eaee9 	.word	0x447eaee9
 80030b4:	440f1b02 	.word	0x440f1b02
 80030b8:	4454f937 	.word	0x4454f937
 80030bc:	43dc49ba 	.word	0x43dc49ba
 80030c0:	445c00c5 	.word	0x445c00c5
 80030c4:	43320106 	.word	0x43320106
 80030c8:	445bfb75 	.word	0x445bfb75
 80030cc:	42eff021 	.word	0x42eff021
 80030d0:	44b9a0e5 	.word	0x44b9a0e5
 80030d4:	43ff2be7 	.word	0x43ff2be7
 80030d8:	44ad8f5c 	.word	0x44ad8f5c
 80030dc:	4417675c 	.word	0x4417675c
 80030e0:	44943246 	.word	0x44943246
 80030e4:	44301137 	.word	0x44301137
 80030e8:	44c9da7f 	.word	0x44c9da7f
 80030ec:	43c0c831 	.word	0x43c0c831
 80030f0:	44c42581 	.word	0x44c42581
 80030f4:	43d9d396 	.word	0x43d9d396
 80030f8:	44c5b26f 	.word	0x44c5b26f
 80030fc:	43cf88f6 	.word	0x43cf88f6
 8003100:	441a221d 	.word	0x441a221d
 8003104:	43628b02 	.word	0x43628b02
 8003108:	446407be 	.word	0x446407be
 800310c:	4363b893 	.word	0x4363b893
 8003110:	44b197c7 	.word	0x44b197c7
 8003114:	43398f1b 	.word	0x43398f1b
 8003118:	431c978d 	.word	0x431c978d
 800311c:	435f676d 	.word	0x435f676d
 8003120:	439bd26f 	.word	0x439bd26f
 8003124:	436134fe 	.word	0x436134fe
 8003128:	43a078f6 	.word	0x43a078f6
 800312c:	43615d71 	.word	0x43615d71
 8003130:	4453b44a 	.word	0x4453b44a
 8003134:	43699e77 	.word	0x43699e77
 8003138:	43ffa74c 	.word	0x43ffa74c
 800313c:	435f2c8b 	.word	0x435f2c8b
 8003140:	43ddf666 	.word	0x43ddf666
 8003144:	435fd917 	.word	0x435fd917
 8003148:	44c28160 	.word	0x44c28160
 800314c:	43b51eb8 	.word	0x43b51eb8
 8003150:	44b3ff9e 	.word	0x44b3ff9e
 8003154:	439a647b 	.word	0x439a647b
 8003158:	4493ca77 	.word	0x4493ca77
 800315c:	437410a4 	.word	0x437410a4
 8003160:	44e0fff0 	.word	0x44e0fff0
 8003164:	44294a8f 	.word	0x44294a8f
 8003168:	44e0d2e9 	.word	0x44e0d2e9
 800316c:	4409b8a4 	.word	0x4409b8a4
 8003170:	44d1031b 	.word	0x44d1031b
 8003174:	43cfd8f6 	.word	0x43cfd8f6
 8003178:	44e0fc8b 	.word	0x44e0fc8b
 800317c:	4457c821 	.word	0x4457c821
 8003180:	44e10d06 	.word	0x44e10d06
 8003184:	444a4323 	.word	0x444a4323
 8003188:	44e10e4e 	.word	0x44e10e4e
 800318c:	443e3ff0 	.word	0x443e3ff0
 8003190:	44e0fa14 	.word	0x44e0fa14
 8003194:	4482848b 	.word	0x4482848b
 8003198:	44e0f9a2 	.word	0x44e0f9a2
 800319c:	44776323 	.word	0x44776323
 80031a0:	44e0f702 	.word	0x44e0f702
 80031a4:	4465479e 	.word	0x4465479e
 80031a8:	44e101cb 	.word	0x44e101cb
 80031ac:	44981646 	.word	0x44981646
 80031b0:	44e0f989 	.word	0x44e0f989
 80031b4:	449284ac 	.word	0x449284ac
 80031b8:	44e0f52f 	.word	0x44e0f52f
 80031bc:	4489578d 	.word	0x4489578d
 80031c0:	44b7eccd 	.word	0x44b7eccd
 80031c4:	44859ec1 	.word	0x44859ec1
 80031c8:	44b77ed1 	.word	0x44b77ed1
 80031cc:	449adb02 	.word	0x449adb02
 80031d0:	44cc5160 	.word	0x44cc5160
 80031d4:	4497f27f 	.word	0x4497f27f
 80031d8:	447a0000 	.word	0x447a0000
 80031dc:	43230000 	.word	0x43230000
 80031e0:	44598000 	.word	0x44598000
 80031e4:	44588000 	.word	0x44588000
 80031e8:	441f0000 	.word	0x441f0000
 80031ec:	22b1      	movs	r2, #177	; 0xb1
 80031ee:	701a      	strb	r2, [r3, #0]
    strategy->onSiteActionsLengths[5] = 1;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	3314      	adds	r3, #20
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
    strategy->onSiteActions[5] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f103 0414 	add.w	r4, r3, #20
 8003202:	2001      	movs	r0, #1
 8003204:	f005 f8fc 	bl	8008400 <malloc>
 8003208:	4603      	mov	r3, r0
 800320a:	6023      	str	r3, [r4, #0]
    strategy->onSiteActions[5][0] = 0xB2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	3314      	adds	r3, #20
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	22b2      	movs	r2, #178	; 0xb2
 8003216:	701a      	strb	r2, [r3, #0]
    strategy->onSiteActionsLengths[8] = 1;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	3320      	adds	r3, #32
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]
    strategy->onSiteActions[8] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f103 0420 	add.w	r4, r3, #32
 800322a:	2001      	movs	r0, #1
 800322c:	f005 f8e8 	bl	8008400 <malloc>
 8003230:	4603      	mov	r3, r0
 8003232:	6023      	str	r3, [r4, #0]
    strategy->onSiteActions[8][0] = 0xC1;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	3320      	adds	r3, #32
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	22c1      	movs	r2, #193	; 0xc1
 800323e:	701a      	strb	r2, [r3, #0]
    strategy->onSiteActionsLengths[9] = 1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	3324      	adds	r3, #36	; 0x24
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
    strategy->onSiteActions[9] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8003252:	2001      	movs	r0, #1
 8003254:	f005 f8d4 	bl	8008400 <malloc>
 8003258:	4603      	mov	r3, r0
 800325a:	6023      	str	r3, [r4, #0]
    strategy->onSiteActions[9][0] = 0xC2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	3324      	adds	r3, #36	; 0x24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	22c2      	movs	r2, #194	; 0xc2
 8003266:	701a      	strb	r2, [r3, #0]
    strategy->onSiteActionsLengths[10] = 1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	3328      	adds	r3, #40	; 0x28
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]
    strategy->onSiteActions[10] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800327a:	2001      	movs	r0, #1
 800327c:	f005 f8c0 	bl	8008400 <malloc>
 8003280:	4603      	mov	r3, r0
 8003282:	6023      	str	r3, [r4, #0]
    strategy->onSiteActions[10][0] = 0xC3;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	3328      	adds	r3, #40	; 0x28
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	22c3      	movs	r2, #195	; 0xc3
 800328e:	701a      	strb	r2, [r3, #0]
    strategy->onSiteActionsLengths[11] = 1;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	332c      	adds	r3, #44	; 0x2c
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    strategy->onSiteActions[11] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80032a2:	2001      	movs	r0, #1
 80032a4:	f005 f8ac 	bl	8008400 <malloc>
 80032a8:	4603      	mov	r3, r0
 80032aa:	6023      	str	r3, [r4, #0]
    strategy->onSiteActions[11][0] = 0xC4;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	332c      	adds	r3, #44	; 0x2c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	22c4      	movs	r2, #196	; 0xc4
 80032b6:	701a      	strb	r2, [r3, #0]

    strategy->onMoveActionsLengths[7] = 1;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	331c      	adds	r3, #28
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    strategy->onMoveActions[7] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f103 041c 	add.w	r4, r3, #28
 80032ca:	2001      	movs	r0, #1
 80032cc:	f005 f898 	bl	8008400 <malloc>
 80032d0:	4603      	mov	r3, r0
 80032d2:	6023      	str	r3, [r4, #0]
    strategy->onMoveActions[7][0] = 0xCA;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	331c      	adds	r3, #28
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	22ca      	movs	r2, #202	; 0xca
 80032de:	701a      	strb	r2, [r3, #0]
    strategy->onMoveActionsLengths[11] = 1;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	332c      	adds	r3, #44	; 0x2c
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    strategy->onMoveActions[11] = (uint8_t*) malloc(sizeof(uint8_t) * 1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80032f2:	2001      	movs	r0, #1
 80032f4:	f005 f884 	bl	8008400 <malloc>
 80032f8:	4603      	mov	r3, r0
 80032fa:	6023      	str	r3, [r4, #0]
    strategy->onMoveActions[11][0] = 0xA4;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	332c      	adds	r3, #44	; 0x2c
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	22a4      	movs	r2, #164	; 0xa4
 8003306:	701a      	strb	r2, [r3, #0]

    return strategy;
 8003308:	687b      	ldr	r3, [r7, #4]
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	bf00      	nop

08003314 <switchTeam>:
#include "symetry.h"

void switchTeam(Strategy* strategy) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	robot.team = (robot.team == YELLOW)?PURPLE:YELLOW;
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <switchTeam+0xc8>)
 800331e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <switchTeam+0xc8>)
 8003330:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	for (int i=0; i<strategy->length; i++) {
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e045      	b.n	80033c6 <switchTeam+0xb2>
		Bezier* b = strategy->path[i];
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60bb      	str	r3, [r7, #8]
		bezier_set(
			b,
		    3000 - b->p1.x, b->p1.y,
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	edd3 7a00 	vldr	s15, [r3]
		bezier_set(
 800334e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80033e0 <switchTeam+0xcc>
 8003352:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	edd3 6a01 	vldr	s13, [r3, #4]
			3000 - b->p2.x, b->p2.y,
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	edd3 7a02 	vldr	s15, [r3, #8]
		bezier_set(
 8003362:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 80033e0 <switchTeam+0xcc>
 8003366:	ee36 6a67 	vsub.f32	s12, s12, s15
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	edd3 5a03 	vldr	s11, [r3, #12]
			3000 - b->p3.x, b->p3.y,
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	edd3 7a04 	vldr	s15, [r3, #16]
		bezier_set(
 8003376:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 80033e0 <switchTeam+0xcc>
 800337a:	ee35 5a67 	vsub.f32	s10, s10, s15
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	edd3 4a05 	vldr	s9, [r3, #20]
			3000 - b->p4.x, b->p4.y,
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	edd3 7a06 	vldr	s15, [r3, #24]
		bezier_set(
 800338a:	ed9f 4a15 	vldr	s8, [pc, #84]	; 80033e0 <switchTeam+0xcc>
 800338e:	ee74 7a67 	vsub.f32	s15, s8, s15
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	ed93 4a07 	vldr	s8, [r3, #28]
 8003398:	211e      	movs	r1, #30
 800339a:	eef0 3a44 	vmov.f32	s7, s8
 800339e:	eeb0 3a67 	vmov.f32	s6, s15
 80033a2:	eef0 2a64 	vmov.f32	s5, s9
 80033a6:	eeb0 2a45 	vmov.f32	s4, s10
 80033aa:	eef0 1a65 	vmov.f32	s3, s11
 80033ae:	eeb0 1a46 	vmov.f32	s2, s12
 80033b2:	eef0 0a66 	vmov.f32	s1, s13
 80033b6:	eeb0 0a47 	vmov.f32	s0, s14
 80033ba:	68b8      	ldr	r0, [r7, #8]
 80033bc:	f7fd ff05 	bl	80011ca <bezier_set>
	for (int i=0; i<strategy->length; i++) {
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3301      	adds	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dbb4      	blt.n	800333a <switchTeam+0x26>

			if (strategy->onMoveActions[i][j] == 0xCB)
				strategy->onMoveActions[i][j] = 0xCA;
		}*/
	}
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2000025c 	.word	0x2000025c
 80033e0:	453b8000 	.word	0x453b8000

080033e4 <vector2_new>:
#include "vector2.h"


Vector2 vector2_new(float x, float y) {
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80033ee:	edc7 0a02 	vstr	s1, [r7, #8]
    Vector2 u = { x, y };
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	617b      	str	r3, [r7, #20]
    return u;
 80033fa:	f107 0318 	add.w	r3, r7, #24
 80033fe:	f107 0210 	add.w	r2, r7, #16
 8003402:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003406:	e883 0003 	stmia.w	r3, {r0, r1}
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	ee07 2a10 	vmov	s14, r2
 8003412:	ee07 3a90 	vmov	s15, r3
}
 8003416:	eeb0 0a47 	vmov.f32	s0, s14
 800341a:	eef0 0a67 	vmov.f32	s1, s15
 800341e:	3724      	adds	r7, #36	; 0x24
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <vector2_norm>:
void vector2_display(Vector2 u) {
    printf("{ x: %f, y: %f }\r\n", u.x, u.y);
}


float vector2_norm(Vector2 u) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	eeb0 7a40 	vmov.f32	s14, s0
 8003432:	eef0 7a60 	vmov.f32	s15, s1
 8003436:	ed87 7a00 	vstr	s14, [r7]
 800343a:	edc7 7a01 	vstr	s15, [r7, #4]
    return sqrt(u.x*u.x + u.y*u.y);
 800343e:	ed97 7a00 	vldr	s14, [r7]
 8003442:	edd7 7a00 	vldr	s15, [r7]
 8003446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800344a:	edd7 6a01 	vldr	s13, [r7, #4]
 800344e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345a:	ee17 0a90 	vmov	r0, s15
 800345e:	f7fd f893 	bl	8000588 <__aeabi_f2d>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	ec43 2b10 	vmov	d0, r2, r3
 800346a:	f007 ffbf 	bl	800b3ec <sqrt>
 800346e:	ec53 2b10 	vmov	r2, r3, d0
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fbb7 	bl	8000be8 <__aeabi_d2f>
 800347a:	4603      	mov	r3, r0
 800347c:	ee07 3a90 	vmov	s15, r3
}
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <vector2_angle>:


float vector2_angle(Vector2 u) {
 800348a:	b5b0      	push	{r4, r5, r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	eeb0 7a40 	vmov.f32	s14, s0
 8003494:	eef0 7a60 	vmov.f32	s15, s1
 8003498:	ed87 7a00 	vstr	s14, [r7]
 800349c:	edc7 7a01 	vstr	s15, [r7, #4]
    return atan2(u.y, u.x);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd f870 	bl	8000588 <__aeabi_f2d>
 80034a8:	4604      	mov	r4, r0
 80034aa:	460d      	mov	r5, r1
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd f86a 	bl	8000588 <__aeabi_f2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	ec43 2b11 	vmov	d1, r2, r3
 80034bc:	ec45 4b10 	vmov	d0, r4, r5
 80034c0:	f007 ff56 	bl	800b370 <atan2>
 80034c4:	ec53 2b10 	vmov	r2, r3, d0
 80034c8:	4610      	mov	r0, r2
 80034ca:	4619      	mov	r1, r3
 80034cc:	f7fd fb8c 	bl	8000be8 <__aeabi_d2f>
 80034d0:	4603      	mov	r3, r0
 80034d2:	ee07 3a90 	vmov	s15, r3
}
 80034d6:	eeb0 0a67 	vmov.f32	s0, s15
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bdb0      	pop	{r4, r5, r7, pc}

080034e0 <vector2_dist2>:
    Vector2 diff = { v.x - u.x, v.y - u.y };
    return vector2_norm(diff);
}


float vector2_dist2(Vector2 u, Vector2 v) {
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	eeb0 6a40 	vmov.f32	s12, s0
 80034ea:	eef0 6a60 	vmov.f32	s13, s1
 80034ee:	eeb0 7a41 	vmov.f32	s14, s2
 80034f2:	eef0 7a61 	vmov.f32	s15, s3
 80034f6:	ed87 6a02 	vstr	s12, [r7, #8]
 80034fa:	edc7 6a03 	vstr	s13, [r7, #12]
 80034fe:	ed87 7a00 	vstr	s14, [r7]
 8003502:	edc7 7a01 	vstr	s15, [r7, #4]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 8003506:	ed97 7a00 	vldr	s14, [r7]
 800350a:	edd7 7a02 	vldr	s15, [r7, #8]
 800350e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003512:	edc7 7a04 	vstr	s15, [r7, #16]
 8003516:	ed97 7a01 	vldr	s14, [r7, #4]
 800351a:	edd7 7a03 	vldr	s15, [r7, #12]
 800351e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003522:	edc7 7a05 	vstr	s15, [r7, #20]
    return diff.x*diff.x + diff.y*diff.y;
 8003526:	ed97 7a04 	vldr	s14, [r7, #16]
 800352a:	edd7 7a04 	vldr	s15, [r7, #16]
 800352e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003532:	edd7 6a05 	vldr	s13, [r7, #20]
 8003536:	edd7 7a05 	vldr	s15, [r7, #20]
 800353a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003542:	eeb0 0a67 	vmov.f32	s0, s15
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <vector2_diff>:
    Vector2 sum = { v.x + u.x, v.y + u.y };
    return sum;
}


Vector2 vector2_diff(Vector2 u, Vector2 v) {
 8003550:	b480      	push	{r7}
 8003552:	b08b      	sub	sp, #44	; 0x2c
 8003554:	af00      	add	r7, sp, #0
 8003556:	eeb0 6a40 	vmov.f32	s12, s0
 800355a:	eef0 6a60 	vmov.f32	s13, s1
 800355e:	eeb0 7a41 	vmov.f32	s14, s2
 8003562:	eef0 7a61 	vmov.f32	s15, s3
 8003566:	ed87 6a04 	vstr	s12, [r7, #16]
 800356a:	edc7 6a05 	vstr	s13, [r7, #20]
 800356e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003572:	edc7 7a03 	vstr	s15, [r7, #12]
    Vector2 diff = { u.x - v.x, u.y - v.y };
 8003576:	ed97 7a04 	vldr	s14, [r7, #16]
 800357a:	edd7 7a02 	vldr	s15, [r7, #8]
 800357e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003582:	edc7 7a06 	vstr	s15, [r7, #24]
 8003586:	ed97 7a05 	vldr	s14, [r7, #20]
 800358a:	edd7 7a03 	vldr	s15, [r7, #12]
 800358e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003592:	edc7 7a07 	vstr	s15, [r7, #28]
    return diff;
 8003596:	f107 0320 	add.w	r3, r7, #32
 800359a:	f107 0218 	add.w	r2, r7, #24
 800359e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80035a6:	6a3a      	ldr	r2, [r7, #32]
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	ee07 2a10 	vmov	s14, r2
 80035ae:	ee07 3a90 	vmov	s15, r3
}
 80035b2:	eeb0 0a47 	vmov.f32	s0, s14
 80035b6:	eef0 0a67 	vmov.f32	s1, s15
 80035ba:	372c      	adds	r7, #44	; 0x2c
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <vector2_cross>:
float vector2_dot(Vector2 u, Vector2 v) {
    return u.x * v.x + u.y * v.y;
}


float vector2_cross(Vector2 u, Vector2 v) {
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	eeb0 6a40 	vmov.f32	s12, s0
 80035ce:	eef0 6a60 	vmov.f32	s13, s1
 80035d2:	eeb0 7a41 	vmov.f32	s14, s2
 80035d6:	eef0 7a61 	vmov.f32	s15, s3
 80035da:	ed87 6a02 	vstr	s12, [r7, #8]
 80035de:	edc7 6a03 	vstr	s13, [r7, #12]
 80035e2:	ed87 7a00 	vstr	s14, [r7]
 80035e6:	edc7 7a01 	vstr	s15, [r7, #4]
    return u.x * v.y - u.y * v.x;
 80035ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80035ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035f6:	edd7 6a03 	vldr	s13, [r7, #12]
 80035fa:	edd7 7a00 	vldr	s15, [r7]
 80035fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003602:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	4b48      	ldr	r3, [pc, #288]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a47      	ldr	r2, [pc, #284]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003634:	f043 0304 	orr.w	r3, r3, #4
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b45      	ldr	r3, [pc, #276]	; (8003750 <MX_GPIO_Init+0x13c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <MX_GPIO_Init+0x13c>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a40      	ldr	r2, [pc, #256]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a39      	ldr	r2, [pc, #228]	; (8003750 <MX_GPIO_Init+0x13c>)
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	4b33      	ldr	r3, [pc, #204]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a32      	ldr	r2, [pc, #200]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <MX_GPIO_Init+0x13c>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800369a:	2200      	movs	r2, #0
 800369c:	f640 0107 	movw	r1, #2055	; 0x807
 80036a0:	482c      	ldr	r0, [pc, #176]	; (8003754 <MX_GPIO_Init+0x140>)
 80036a2:	f001 ff1f 	bl	80054e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2120      	movs	r1, #32
 80036aa:	482b      	ldr	r0, [pc, #172]	; (8003758 <MX_GPIO_Init+0x144>)
 80036ac:	f001 ff1a 	bl	80054e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEAM_LED_GPIO_Port, TEAM_LED_Pin, GPIO_PIN_RESET);
 80036b0:	2200      	movs	r2, #0
 80036b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036b6:	4829      	ldr	r0, [pc, #164]	; (800375c <MX_GPIO_Init+0x148>)
 80036b8:	f001 ff14 	bl	80054e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin;
 80036bc:	f640 0307 	movw	r3, #2055	; 0x807
 80036c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	481f      	ldr	r0, [pc, #124]	; (8003754 <MX_GPIO_Init+0x140>)
 80036d6:	f001 fd59 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80036da:	2320      	movs	r3, #32
 80036dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036de:	2301      	movs	r3, #1
 80036e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	4619      	mov	r1, r3
 80036f0:	4819      	ldr	r0, [pc, #100]	; (8003758 <MX_GPIO_Init+0x144>)
 80036f2:	f001 fd4b 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEAM_BUTTON_Pin;
 80036f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003700:	2302      	movs	r3, #2
 8003702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEAM_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	4812      	ldr	r0, [pc, #72]	; (8003754 <MX_GPIO_Init+0x140>)
 800370c:	f001 fd3e 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_Pin;
 8003710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800371a:	2302      	movs	r3, #2
 800371c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4619      	mov	r1, r3
 8003724:	480c      	ldr	r0, [pc, #48]	; (8003758 <MX_GPIO_Init+0x144>)
 8003726:	f001 fd31 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEAM_LED_Pin;
 800372a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800372e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003730:	2301      	movs	r3, #1
 8003732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEAM_LED_GPIO_Port, &GPIO_InitStruct);
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	4619      	mov	r1, r3
 8003742:	4806      	ldr	r0, [pc, #24]	; (800375c <MX_GPIO_Init+0x148>)
 8003744:	f001 fd22 	bl	800518c <HAL_GPIO_Init>

}
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800
 8003754:	40020800 	.word	0x40020800
 8003758:	40020000 	.word	0x40020000
 800375c:	40020400 	.word	0x40020400

08003760 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e00b      	b.n	800378a <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	1c4b      	adds	r3, r1, #1
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800377c:	2201      	movs	r2, #1
 800377e:	4807      	ldr	r0, [pc, #28]	; (800379c <_write+0x3c>)
 8003780:	f003 fe91 	bl	80074a6 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3301      	adds	r3, #1
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	dbef      	blt.n	8003772 <_write+0x12>
	}
	return len;
 8003792:	687b      	ldr	r3, [r7, #4]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200005ec 	.word	0x200005ec

080037a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b090      	sub	sp, #64	; 0x40
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037a6:	f001 fab7 	bl	8004d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037aa:	f000 fa41 	bl	8003c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ae:	f7ff ff31 	bl	8003614 <MX_GPIO_Init>
  MX_TIM1_Init();
 80037b2:	f000 fc29 	bl	8004008 <MX_TIM1_Init>
  MX_TIM8_Init();
 80037b6:	f000 fe27 	bl	8004408 <MX_TIM8_Init>
  MX_TIM11_Init();
 80037ba:	f000 fec5 	bl	8004548 <MX_TIM11_Init>
  MX_TIM3_Init();
 80037be:	f000 fcc9 	bl	8004154 <MX_TIM3_Init>
  MX_TIM7_Init();
 80037c2:	f000 fdeb 	bl	800439c <MX_TIM7_Init>
  MX_TIM2_Init();
 80037c6:	f000 fc77 	bl	80040b8 <MX_TIM2_Init>
  MX_TIM6_Init();
 80037ca:	f000 fdb1 	bl	8004330 <MX_TIM6_Init>
  MX_TIM4_Init();
 80037ce:	f000 fd15 	bl	80041fc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80037d2:	f001 f905 	bl	80049e0 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80037d6:	f000 fd5d 	bl	8004294 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80037da:	f001 f92b 	bl	8004a34 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80037de:	f001 f8ab 	bl	8004938 <MX_UART4_Init>
  MX_UART5_Init();
 80037e2:	f001 f8d3 	bl	800498c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80037e6:	48ba      	ldr	r0, [pc, #744]	; (8003ad0 <main+0x330>)
 80037e8:	f002 fcba 	bl	8006160 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80037ec:	48b9      	ldr	r0, [pc, #740]	; (8003ad4 <main+0x334>)
 80037ee:	f002 fcb7 	bl	8006160 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80037f2:	48b9      	ldr	r0, [pc, #740]	; (8003ad8 <main+0x338>)
 80037f4:	f002 fd1c 	bl	8006230 <HAL_TIM_Base_Start_IT>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing propulsion system...");
 80037f8:	48b8      	ldr	r0, [pc, #736]	; (8003adc <main+0x33c>)
 80037fa:	f005 fb35 	bl	8008e68 <iprintf>
  propulsion_initialize();
 80037fe:	f7fe fcb3 	bl	8002168 <propulsion_initialize>
  propulsion_enableMotors();
 8003802:	f7fe fce9 	bl	80021d8 <propulsion_enableMotors>
  avoidance_initialize();
 8003806:	f7fd fbbb 	bl	8000f80 <avoidance_initialize>
  HAL_Delay(200);
 800380a:	20c8      	movs	r0, #200	; 0xc8
 800380c:	f001 faf6 	bl	8004dfc <HAL_Delay>
  printf(" Done.\r\n");
 8003810:	48b3      	ldr	r0, [pc, #716]	; (8003ae0 <main+0x340>)
 8003812:	f005 fbaf 	bl	8008f74 <puts>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing strategy...");
 8003816:	48b3      	ldr	r0, [pc, #716]	; (8003ae4 <main+0x344>)
 8003818:	f005 fb26 	bl	8008e68 <iprintf>
  Strategy* strategy = strategy_initialize();
 800381c:	f7ff fa52 	bl	8002cc4 <strategy_initialize>
 8003820:	6278      	str	r0, [r7, #36]	; 0x24
  int curveIndex = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
  int onSiteActionIndex = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
  int onMoveActionIndex = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	; 0x34

  robot.waitingForOnSiteAction = false;
 800382e:	4bae      	ldr	r3, [pc, #696]	; (8003ae8 <main+0x348>)
 8003830:	2200      	movs	r2, #0
 8003832:	621a      	str	r2, [r3, #32]
  robot.waitingForOnMoveAction = false;
 8003834:	4bac      	ldr	r3, [pc, #688]	; (8003ae8 <main+0x348>)
 8003836:	2200      	movs	r2, #0
 8003838:	625a      	str	r2, [r3, #36]	; 0x24
  robot.team = YELLOW;
 800383a:	4bab      	ldr	r3, [pc, #684]	; (8003ae8 <main+0x348>)
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  float t = 0;
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	633b      	str	r3, [r7, #48]	; 0x30

  HAL_Delay(200);
 8003848:	20c8      	movs	r0, #200	; 0xc8
 800384a:	f001 fad7 	bl	8004dfc <HAL_Delay>
  printf(" Done.\r\n");
 800384e:	48a4      	ldr	r0, [pc, #656]	; (8003ae0 <main+0x340>)
 8003850:	f005 fb90 	bl	8008f74 <puts>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);


  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing lidar...");
 8003854:	48a5      	ldr	r0, [pc, #660]	; (8003aec <main+0x34c>)
 8003856:	f005 fb07 	bl	8008e68 <iprintf>
  lidar_initialize();
 800385a:	f7fe fa05 	bl	8001c68 <lidar_initialize>
  HAL_Delay(200);
 800385e:	20c8      	movs	r0, #200	; 0xc8
 8003860:	f001 facc 	bl	8004dfc <HAL_Delay>
  printf(" Done.\r\n");
 8003864:	489e      	ldr	r0, [pc, #632]	; (8003ae0 <main+0x340>)
 8003866:	f005 fb85 	bl	8008f74 <puts>

  bool waitingForMatchStart = true;
 800386a:	2301      	movs	r3, #1
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c

  printf("Waiting for start...\r\n");
 800386e:	48a0      	ldr	r0, [pc, #640]	; (8003af0 <main+0x350>)
 8003870:	f005 fb80 	bl	8008f74 <puts>

  bool teamButtonVal = false;
 8003874:	2300      	movs	r3, #0
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28

  while (waitingForMatchStart) {
 8003878:	e02c      	b.n	80038d4 <main+0x134>
	  waitingForMatchStart = HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 800387a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800387e:	489d      	ldr	r0, [pc, #628]	; (8003af4 <main+0x354>)
 8003880:	f001 fe18 	bl	80054b4 <HAL_GPIO_ReadPin>
 8003884:	4603      	mov	r3, r0
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (HAL_GPIO_ReadPin(TEAM_BUTTON_GPIO_Port, TEAM_BUTTON_Pin) && !teamButtonVal) {
 8003888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800388c:	489a      	ldr	r0, [pc, #616]	; (8003af8 <main+0x358>)
 800388e:	f001 fe11 	bl	80054b4 <HAL_GPIO_ReadPin>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <main+0x104>
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <main+0x104>
		  switchTeam(strategy);
 800389e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a0:	f7ff fd38 	bl	8003314 <switchTeam>
	  }

	  HAL_GPIO_WritePin(TEAM_LED_GPIO_Port, TEAM_LED_Pin, robot.team == PURPLE);
 80038a4:	4b90      	ldr	r3, [pc, #576]	; (8003ae8 <main+0x348>)
 80038a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038ba:	4890      	ldr	r0, [pc, #576]	; (8003afc <main+0x35c>)
 80038bc:	f001 fe12 	bl	80054e4 <HAL_GPIO_WritePin>
	  teamButtonVal = HAL_GPIO_ReadPin(TEAM_BUTTON_GPIO_Port, TEAM_BUTTON_Pin);
 80038c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038c4:	488c      	ldr	r0, [pc, #560]	; (8003af8 <main+0x358>)
 80038c6:	f001 fdf5 	bl	80054b4 <HAL_GPIO_ReadPin>
 80038ca:	4603      	mov	r3, r0
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28

	  HAL_Delay(50);
 80038ce:	2032      	movs	r0, #50	; 0x32
 80038d0:	f001 fa94 	bl	8004dfc <HAL_Delay>
  while (waitingForMatchStart) {
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1cf      	bne.n	800387a <main+0xda>
	  //printf("%d\r\n", teamButtonVal);
	  //HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, teamButtonVal);
  }

  printf("Initializing odometry...");
 80038da:	4889      	ldr	r0, [pc, #548]	; (8003b00 <main+0x360>)
 80038dc:	f005 fac4 	bl	8008e68 <iprintf>
  Vector2 start = strategy->path[0]->p1;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f107 0310 	add.w	r3, r7, #16
 80038ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038ee:	e883 0003 	stmia.w	r3, {r0, r1}
  Vector2 startTangent = strategy->path[0]->p2;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	3208      	adds	r2, #8
 80038fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003902:	e883 0003 	stmia.w	r3, {r0, r1}
  float startAngle = vector2_angle(vector2_diff(startTangent, start));
 8003906:	ed97 6a04 	vldr	s12, [r7, #16]
 800390a:	edd7 6a05 	vldr	s13, [r7, #20]
 800390e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003912:	edd7 7a03 	vldr	s15, [r7, #12]
 8003916:	eeb0 1a46 	vmov.f32	s2, s12
 800391a:	eef0 1a66 	vmov.f32	s3, s13
 800391e:	eeb0 0a47 	vmov.f32	s0, s14
 8003922:	eef0 0a67 	vmov.f32	s1, s15
 8003926:	f7ff fe13 	bl	8003550 <vector2_diff>
 800392a:	eeb0 7a40 	vmov.f32	s14, s0
 800392e:	eef0 7a60 	vmov.f32	s15, s1
 8003932:	ed87 7a06 	vstr	s14, [r7, #24]
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
 800393a:	ed97 7a06 	vldr	s14, [r7, #24]
 800393e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003942:	eeb0 0a47 	vmov.f32	s0, s14
 8003946:	eef0 0a67 	vmov.f32	s1, s15
 800394a:	f7ff fd9e 	bl	800348a <vector2_angle>
 800394e:	ed87 0a08 	vstr	s0, [r7, #32]
  odometry_setPosition(start.x, start.y);
 8003952:	edd7 7a04 	vldr	s15, [r7, #16]
 8003956:	ed97 7a05 	vldr	s14, [r7, #20]
 800395a:	eef0 0a47 	vmov.f32	s1, s14
 800395e:	eeb0 0a67 	vmov.f32	s0, s15
 8003962:	f7fe fbdb 	bl	800211c <odometry_setPosition>
  odometry_setAngle(startAngle);
 8003966:	ed97 0a08 	vldr	s0, [r7, #32]
 800396a:	f7fe fbed 	bl	8002148 <odometry_setAngle>
  robot.measuredSpeed = 0;
 800396e:	4b5e      	ldr	r3, [pc, #376]	; (8003ae8 <main+0x348>)
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
  HAL_Delay(200);
 8003976:	20c8      	movs	r0, #200	; 0xc8
 8003978:	f001 fa40 	bl	8004dfc <HAL_Delay>
  printf(" Done.\r\n");
 800397c:	4858      	ldr	r0, [pc, #352]	; (8003ae0 <main+0x340>)
 800397e:	f005 faf9 	bl	8008f74 <puts>

  printf("Go!\r\n");
 8003982:	4860      	ldr	r0, [pc, #384]	; (8003b04 <main+0x364>)
 8003984:	f005 faf6 	bl	8008f74 <puts>

  //odometry_setPosition(0, 0);
  //odometry_setAngle(0);

  HAL_UART_Receive_IT(&huart4, &lidarData, 1);
 8003988:	2201      	movs	r2, #1
 800398a:	495f      	ldr	r1, [pc, #380]	; (8003b08 <main+0x368>)
 800398c:	485f      	ldr	r0, [pc, #380]	; (8003b0c <main+0x36c>)
 800398e:	f003 fe1c 	bl	80075ca <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &armData, 1);
 8003992:	2201      	movs	r2, #1
 8003994:	495e      	ldr	r1, [pc, #376]	; (8003b10 <main+0x370>)
 8003996:	485f      	ldr	r0, [pc, #380]	; (8003b14 <main+0x374>)
 8003998:	f003 fe17 	bl	80075ca <HAL_UART_Receive_IT>
	  }

	  HAL_Delay(100);
  }*/

  while (onSiteActionIndex < strategy->onSiteActionsLengths[0]) {
 800399c:	e026      	b.n	80039ec <main+0x24c>
	  uint8_t action = strategy->onSiteActions[0][onSiteActionIndex];
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	71fb      	strb	r3, [r7, #7]
	  serial_send(&action, 1, 6);
 80039ac:	1dfb      	adds	r3, r7, #7
 80039ae:	2206      	movs	r2, #6
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f8e8 	bl	8002b88 <serial_send>
	  robot.waitingForOnSiteAction = true;
 80039b8:	4b4b      	ldr	r3, [pc, #300]	; (8003ae8 <main+0x348>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	621a      	str	r2, [r3, #32]

	  printf("Waiting for 0xFF...\r\n");
 80039be:	4856      	ldr	r0, [pc, #344]	; (8003b18 <main+0x378>)
 80039c0:	f005 fad8 	bl	8008f74 <puts>
	  printf("%d\r\n", robot.waitingForOnSiteAction);
 80039c4:	4b48      	ldr	r3, [pc, #288]	; (8003ae8 <main+0x348>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4854      	ldr	r0, [pc, #336]	; (8003b1c <main+0x37c>)
 80039cc:	f005 fa4c 	bl	8008e68 <iprintf>
	  while (robot.waitingForOnSiteAction) {}
 80039d0:	bf00      	nop
 80039d2:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <main+0x348>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1fb      	bne.n	80039d2 <main+0x232>
	  printf("%d\r\n", robot.waitingForOnSiteAction);
 80039da:	4b43      	ldr	r3, [pc, #268]	; (8003ae8 <main+0x348>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4619      	mov	r1, r3
 80039e0:	484e      	ldr	r0, [pc, #312]	; (8003b1c <main+0x37c>)
 80039e2:	f005 fa41 	bl	8008e68 <iprintf>
	  onSiteActionIndex++;
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	3301      	adds	r3, #1
 80039ea:	63bb      	str	r3, [r7, #56]	; 0x38
  while (onSiteActionIndex < strategy->onSiteActionsLengths[0]) {
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039f4:	429a      	cmp	r2, r3
 80039f6:	dbd2      	blt.n	800399e <main+0x1fe>
  }

  printf("About to move...\r\n");
 80039f8:	4849      	ldr	r0, [pc, #292]	; (8003b20 <main+0x380>)
 80039fa:	f005 fabb 	bl	8008f74 <puts>

  while (1) {
	  if (onMoveActionIndex < strategy->onMoveActionsLengths[curveIndex]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	da1a      	bge.n	8003a46 <main+0x2a6>
              && !robot.waitingForOnMoveAction
 8003a10:	4b35      	ldr	r3, [pc, #212]	; (8003ae8 <main+0x348>)
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <main+0x2a6>
			  && !robot.waitingForOnSiteAction) {
 8003a18:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <main+0x348>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d112      	bne.n	8003a46 <main+0x2a6>
		  uint8_t action = strategy->onMoveActions[curveIndex][onMoveActionIndex];
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2e:	4413      	add	r3, r2
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	71bb      	strb	r3, [r7, #6]
		  serial_send(&action, 1, 6);
 8003a34:	1dbb      	adds	r3, r7, #6
 8003a36:	2206      	movs	r2, #6
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff f8a4 	bl	8002b88 <serial_send>
		  robot.waitingForOnMoveAction = true;
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <main+0x348>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  avoidance_update(t, strategy->directions[curveIndex]);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a52:	4618      	mov	r0, r3
 8003a54:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003a58:	f7fd faae 	bl	8000fb8 <avoidance_update>

	  if (avoidanceState == PATH_CLEAR && curveIndex < strategy->length) {
 8003a5c:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <main+0x384>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d129      	bne.n	8003ab8 <main+0x318>
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	da24      	bge.n	8003ab8 <main+0x318>
		  t = propulsion_followBezier(
				  strategy->path[curveIndex],
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003a78:	6818      	ldr	r0, [r3, #0]
				  strategy->directions[curveIndex],
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a80:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003a82:	f993 1000 	ldrsb.w	r1, [r3]
				  strategy->speeds[curveIndex],
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003a90:	edd3 7a00 	vldr	s15, [r3]
				  strategy->speeds[curveIndex+1],
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003aa0:	ed93 7a00 	vldr	s14, [r3]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	eef0 0a47 	vmov.f32	s1, s14
 8003aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8003aae:	f7fe ff53 	bl	8002958 <propulsion_followBezier>
 8003ab2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 8003ab6:	e061      	b.n	8003b7c <main+0x3dc>
				  false
		  );
	  } else if (avoidanceState == PATH_OBSTRUCTED) {
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <main+0x384>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d135      	bne.n	8003b2c <main+0x38c>
		  propulsion_setSpeeds(0, 0);
 8003ac0:	eddf 0a19 	vldr	s1, [pc, #100]	; 8003b28 <main+0x388>
 8003ac4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8003b28 <main+0x388>
 8003ac8:	f7fe fba6 	bl	8002218 <propulsion_setSpeeds>
 8003acc:	e056      	b.n	8003b7c <main+0x3dc>
 8003ace:	bf00      	nop
 8003ad0:	20000448 	.word	0x20000448
 8003ad4:	20000370 	.word	0x20000370
 8003ad8:	20000328 	.word	0x20000328
 8003adc:	0800c9f0 	.word	0x0800c9f0
 8003ae0:	0800ca14 	.word	0x0800ca14
 8003ae4:	0800ca1c 	.word	0x0800ca1c
 8003ae8:	2000025c 	.word	0x2000025c
 8003aec:	0800ca38 	.word	0x0800ca38
 8003af0:	0800ca50 	.word	0x0800ca50
 8003af4:	40020000 	.word	0x40020000
 8003af8:	40020800 	.word	0x40020800
 8003afc:	40020400 	.word	0x40020400
 8003b00:	0800ca68 	.word	0x0800ca68
 8003b04:	0800ca84 	.word	0x0800ca84
 8003b08:	20000250 	.word	0x20000250
 8003b0c:	200005a8 	.word	0x200005a8
 8003b10:	20000251 	.word	0x20000251
 8003b14:	20000564 	.word	0x20000564
 8003b18:	0800ca8c 	.word	0x0800ca8c
 8003b1c:	0800caa4 	.word	0x0800caa4
 8003b20:	0800caac 	.word	0x0800caac
 8003b24:	20000258 	.word	0x20000258
 8003b28:	00000000 	.word	0x00000000
	  } else if (avoidanceState == BACKTRACKING) {
 8003b2c:	4b3c      	ldr	r3, [pc, #240]	; (8003c20 <main+0x480>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d123      	bne.n	8003b7c <main+0x3dc>
		  t = propulsion_followBezier(
				  strategy->path[curveIndex],
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003b3e:	6818      	ldr	r0, [r3, #0]
				  strategy->directions[curveIndex],
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b46:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003b48:	f993 1000 	ldrsb.w	r1, [r3]
				  strategy->speeds[curveIndex],
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003b56:	edd3 7a00 	vldr	s15, [r3]
				  strategy->speeds[curveIndex+1],
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b60:	3301      	adds	r3, #1
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8003b66:	ed93 7a00 	vldr	s14, [r3]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	eef0 0a47 	vmov.f32	s1, s14
 8003b70:	eeb0 0a67 	vmov.f32	s0, s15
 8003b74:	f7fe fef0 	bl	8002958 <propulsion_followBezier>
 8003b78:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
				  true
		  );
	  }

	  if (t > 0.99 && !robot.waitingForOnMoveAction) {
 8003b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7e:	f7fc fd03 	bl	8000588 <__aeabi_f2d>
 8003b82:	a325      	add	r3, pc, #148	; (adr r3, 8003c18 <main+0x478>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f7fc ffe6 	bl	8000b58 <__aeabi_dcmpgt>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d035      	beq.n	8003bfe <main+0x45e>
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <main+0x484>)
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d131      	bne.n	8003bfe <main+0x45e>
	      curveIndex = (curveIndex + 1);// % strategy->length;
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	      onSiteActionIndex = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
	      while (onSiteActionIndex < strategy->onSiteActionsLengths[curveIndex]) {
 8003ba4:	e020      	b.n	8003be8 <main+0x448>
	    	  uint8_t action = strategy->onSiteActions[curveIndex][onSiteActionIndex];
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	4413      	add	r3, r2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	717b      	strb	r3, [r7, #5]
	    	  serial_send(&action, 1, 6);
 8003bba:	1d7b      	adds	r3, r7, #5
 8003bbc:	2206      	movs	r2, #6
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe ffe1 	bl	8002b88 <serial_send>
	    	  robot.waitingForOnSiteAction = true;
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <main+0x484>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	621a      	str	r2, [r3, #32]

	    	  while (robot.waitingForOnSiteAction) {
 8003bcc:	e005      	b.n	8003bda <main+0x43a>
	    		  propulsion_setSpeeds(0, 0);
 8003bce:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003c28 <main+0x488>
 8003bd2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003c28 <main+0x488>
 8003bd6:	f7fe fb1f 	bl	8002218 <propulsion_setSpeeds>
	    	  while (robot.waitingForOnSiteAction) {
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <main+0x484>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f5      	bne.n	8003bce <main+0x42e>
	    	  }
	    	  onSiteActionIndex++;
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	3301      	adds	r3, #1
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
	      while (onSiteActionIndex < strategy->onSiteActionsLengths[curveIndex]) {
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	dbd5      	blt.n	8003ba6 <main+0x406>
	      }
	      onMoveActionIndex = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
	  }

	  if (curveIndex == strategy->length) {
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d000      	beq.n	8003c0a <main+0x46a>
	  if (onMoveActionIndex < strategy->onMoveActionsLengths[curveIndex]
 8003c08:	e6f9      	b.n	80039fe <main+0x25e>
		  break;
 8003c0a:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  propulsion_disableMotors();
 8003c0c:	f7fe faf4 	bl	80021f8 <propulsion_disableMotors>
  printf("Finished.\r\n");
 8003c10:	4806      	ldr	r0, [pc, #24]	; (8003c2c <main+0x48c>)
 8003c12:	f005 f9af 	bl	8008f74 <puts>

  while (1) {
 8003c16:	e7fe      	b.n	8003c16 <main+0x476>
 8003c18:	7ae147ae 	.word	0x7ae147ae
 8003c1c:	3fefae14 	.word	0x3fefae14
 8003c20:	20000258 	.word	0x20000258
 8003c24:	2000025c 	.word	0x2000025c
 8003c28:	00000000 	.word	0x00000000
 8003c2c:	0800cac0 	.word	0x0800cac0

08003c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b094      	sub	sp, #80	; 0x50
 8003c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c36:	f107 031c 	add.w	r3, r7, #28
 8003c3a:	2234      	movs	r2, #52	; 0x34
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f004 fbe6 	bl	8008410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c44:	f107 0308 	add.w	r3, r7, #8
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	2300      	movs	r3, #0
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <SystemClock_Config+0xe0>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <SystemClock_Config+0xe0>)
 8003c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c62:	6413      	str	r3, [r2, #64]	; 0x40
 8003c64:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <SystemClock_Config+0xe0>)
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c70:	2300      	movs	r3, #0
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <SystemClock_Config+0xe4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <SystemClock_Config+0xe4>)
 8003c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <SystemClock_Config+0xe4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c90:	2301      	movs	r3, #1
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c94:	2310      	movs	r3, #16
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003ca4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003ca8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003caa:	2302      	movs	r3, #2
 8003cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cb6:	f107 031c 	add.w	r3, r7, #28
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 ff62 	bl	8005b84 <HAL_RCC_OscConfig>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003cc6:	f000 f827 	bl	8003d18 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003cca:	f001 fc3f 	bl	800554c <HAL_PWREx_EnableOverDrive>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003cd4:	f000 f820 	bl	8003d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cd8:	230f      	movs	r3, #15
 8003cda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ce4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	2105      	movs	r1, #5
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 fc78 	bl	80055ec <HAL_RCC_ClockConfig>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003d02:	f000 f809 	bl	8003d18 <Error_Handler>
  }
}
 8003d06:	bf00      	nop
 8003d08:	3750      	adds	r7, #80	; 0x50
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40007000 	.word	0x40007000

08003d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1c:	b672      	cpsid	i
}
 8003d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("A runtime error occurred.\r\n");
 8003d20:	4801      	ldr	r0, [pc, #4]	; (8003d28 <Error_Handler+0x10>)
 8003d22:	f005 f927 	bl	8008f74 <puts>
  while (1) {
 8003d26:	e7fe      	b.n	8003d26 <Error_Handler+0xe>
 8003d28:	0800cacc 	.word	0x0800cacc

08003d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_MspInit+0x4c>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	4a0f      	ldr	r2, [pc, #60]	; (8003d78 <HAL_MspInit+0x4c>)
 8003d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d40:	6453      	str	r3, [r2, #68]	; 0x44
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_MspInit+0x4c>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_MspInit+0x4c>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <HAL_MspInit+0x4c>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_MspInit+0x4c>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800

08003d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d80:	e7fe      	b.n	8003d80 <NMI_Handler+0x4>
	...

08003d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("A hard fault occurred.\r\n");
 8003d88:	4801      	ldr	r0, [pc, #4]	; (8003d90 <HardFault_Handler+0xc>)
 8003d8a:	f005 f8f3 	bl	8008f74 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8e:	e7fe      	b.n	8003d8e <HardFault_Handler+0xa>
 8003d90:	0800cae8 	.word	0x0800cae8

08003d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  printf("A memory management fault occurred.\r\n");
 8003d98:	4801      	ldr	r0, [pc, #4]	; (8003da0 <MemManage_Handler+0xc>)
 8003d9a:	f005 f8eb 	bl	8008f74 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d9e:	e7fe      	b.n	8003d9e <MemManage_Handler+0xa>
 8003da0:	0800cb00 	.word	0x0800cb00

08003da4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <BusFault_Handler+0x4>

08003daa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <UsageFault_Handler+0x4>

08003db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dde:	f000 ffed 	bl	8004dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <TIM2_IRQHandler+0x10>)
 8003dee:	f002 fc57 	bl	80066a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000490 	.word	0x20000490

08003dfc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <TIM4_IRQHandler+0x10>)
 8003e02:	f002 fc4d 	bl	80066a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200002e0 	.word	0x200002e0

08003e10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  //propulsion_updatePosition(0.01);
  lidar_incrementTime(10);
 8003e14:	200a      	movs	r0, #10
 8003e16:	f7fd ffcb 	bl	8001db0 <lidar_incrementTime>
  odometry_updatePosition();
 8003e1a:	f7fe f821 	bl	8001e60 <odometry_updatePosition>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003e1e:	4802      	ldr	r0, [pc, #8]	; (8003e28 <TIM5_IRQHandler+0x18>)
 8003e20:	f002 fc3e 	bl	80066a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000328 	.word	0x20000328

08003e2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <UART4_IRQHandler+0x10>)
 8003e32:	f003 fbfb 	bl	800762c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	200005a8 	.word	0x200005a8

08003e40 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <UART5_IRQHandler+0x10>)
 8003e46:	f003 fbf1 	bl	800762c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000520 	.word	0x20000520

08003e54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <TIM6_DAC_IRQHandler+0x10>)
 8003e5a:	f002 fc21 	bl	80066a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000400 	.word	0x20000400

08003e68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <TIM7_IRQHandler+0x10>)
 8003e6e:	f002 fc17 	bl	80066a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200004d8 	.word	0x200004d8

08003e7c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <USART6_IRQHandler+0x10>)
 8003e82:	f003 fbd3 	bl	800762c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000564 	.word	0x20000564

08003e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
	return 1;
 8003e94:	2301      	movs	r3, #1
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_kill>:

int _kill(int pid, int sig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003eaa:	f004 fa7f 	bl	80083ac <__errno>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2216      	movs	r2, #22
 8003eb2:	601a      	str	r2, [r3, #0]
	return -1;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_exit>:

void _exit (int status)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ffe7 	bl	8003ea0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ed2:	e7fe      	b.n	8003ed2 <_exit+0x12>

08003ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e00a      	b.n	8003efc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ee6:	f3af 8000 	nop.w
 8003eea:	4601      	mov	r1, r0
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	60ba      	str	r2, [r7, #8]
 8003ef2:	b2ca      	uxtb	r2, r1
 8003ef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	dbf0      	blt.n	8003ee6 <_read+0x12>
	}

return len;
 8003f04:	687b      	ldr	r3, [r7, #4]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
	return -1;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f36:	605a      	str	r2, [r3, #4]
	return 0;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <_isatty>:

int _isatty(int file)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
	return 1;
 8003f4e:	2301      	movs	r3, #1
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
	return 0;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <_sbrk+0x5c>)
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <_sbrk+0x60>)
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <_sbrk+0x64>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <_sbrk+0x64>)
 8003f96:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <_sbrk+0x68>)
 8003f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d207      	bcs.n	8003fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fa8:	f004 fa00 	bl	80083ac <__errno>
 8003fac:	4603      	mov	r3, r0
 8003fae:	220c      	movs	r2, #12
 8003fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fb6:	e009      	b.n	8003fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <_sbrk+0x64>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <_sbrk+0x64>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <_sbrk+0x64>)
 8003fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20020000 	.word	0x20020000
 8003fd8:	00000400 	.word	0x00000400
 8003fdc:	200001fc 	.word	0x200001fc
 8003fe0:	20000648 	.word	0x20000648

08003fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <SystemInit+0x20>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <SystemInit+0x20>)
 8003ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	; 0x30
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800400e:	f107 030c 	add.w	r3, r7, #12
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f004 f9fa 	bl	8008410 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <MX_TIM1_Init+0xa8>)
 8004026:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <MX_TIM1_Init+0xac>)
 8004028:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800402a:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <MX_TIM1_Init+0xa8>)
 800402c:	2200      	movs	r2, #0
 800402e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004030:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <MX_TIM1_Init+0xa8>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004036:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <MX_TIM1_Init+0xa8>)
 8004038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800403c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <MX_TIM1_Init+0xa8>)
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <MX_TIM1_Init+0xa8>)
 8004046:	2200      	movs	r2, #0
 8004048:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800404a:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <MX_TIM1_Init+0xa8>)
 800404c:	2200      	movs	r2, #0
 800404e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004050:	2303      	movs	r3, #3
 8004052:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004058:	2301      	movs	r3, #1
 800405a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8004060:	230a      	movs	r3, #10
 8004062:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004064:	2300      	movs	r3, #0
 8004066:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004068:	2301      	movs	r3, #1
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800406c:	2300      	movs	r3, #0
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004074:	f107 030c 	add.w	r3, r7, #12
 8004078:	4619      	mov	r1, r3
 800407a:	480d      	ldr	r0, [pc, #52]	; (80040b0 <MX_TIM1_Init+0xa8>)
 800407c:	f002 fa6a 	bl	8006554 <HAL_TIM_Encoder_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8004086:	f7ff fe47 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800408a:	2300      	movs	r3, #0
 800408c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4806      	ldr	r0, [pc, #24]	; (80040b0 <MX_TIM1_Init+0xa8>)
 8004098:	f003 f8d6 	bl	8007248 <HAL_TIMEx_MasterConfigSynchronization>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80040a2:	f7ff fe39 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80040a6:	bf00      	nop
 80040a8:	3730      	adds	r7, #48	; 0x30
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000448 	.word	0x20000448
 80040b4:	40010000 	.word	0x40010000

080040b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	609a      	str	r2, [r3, #8]
 80040ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040cc:	463b      	mov	r3, r7
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80040d4:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <MX_TIM2_Init+0x98>)
 80040d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 80040dc:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <MX_TIM2_Init+0x98>)
 80040de:	f640 227e 	movw	r2, #2686	; 0xa7e
 80040e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <MX_TIM2_Init+0x98>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <MX_TIM2_Init+0x98>)
 80040ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <MX_TIM2_Init+0x98>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <MX_TIM2_Init+0x98>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80040fe:	4814      	ldr	r0, [pc, #80]	; (8004150 <MX_TIM2_Init+0x98>)
 8004100:	f001 ffde 	bl	80060c0 <HAL_TIM_Base_Init>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800410a:	f7ff fe05 	bl	8003d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800410e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004112:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004114:	f107 0308 	add.w	r3, r7, #8
 8004118:	4619      	mov	r1, r3
 800411a:	480d      	ldr	r0, [pc, #52]	; (8004150 <MX_TIM2_Init+0x98>)
 800411c:	f002 fc8a 	bl	8006a34 <HAL_TIM_ConfigClockSource>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004126:	f7ff fdf7 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004132:	463b      	mov	r3, r7
 8004134:	4619      	mov	r1, r3
 8004136:	4806      	ldr	r0, [pc, #24]	; (8004150 <MX_TIM2_Init+0x98>)
 8004138:	f003 f886 	bl	8007248 <HAL_TIMEx_MasterConfigSynchronization>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004142:	f7ff fde9 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000490 	.word	0x20000490

08004154 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08c      	sub	sp, #48	; 0x30
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800415a:	f107 030c 	add.w	r3, r7, #12
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f004 f954 	bl	8008410 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004170:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <MX_TIM3_Init+0xa0>)
 8004172:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <MX_TIM3_Init+0xa4>)
 8004174:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004176:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <MX_TIM3_Init+0xa0>)
 8004178:	2200      	movs	r2, #0
 800417a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <MX_TIM3_Init+0xa0>)
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <MX_TIM3_Init+0xa0>)
 8004184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004188:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <MX_TIM3_Init+0xa0>)
 800418c:	2200      	movs	r2, #0
 800418e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <MX_TIM3_Init+0xa0>)
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004196:	2303      	movs	r3, #3
 8004198:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800419e:	2301      	movs	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80041aa:	2300      	movs	r3, #0
 80041ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041ae:	2301      	movs	r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80041b2:	2300      	movs	r3, #0
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	4619      	mov	r1, r3
 80041c0:	480c      	ldr	r0, [pc, #48]	; (80041f4 <MX_TIM3_Init+0xa0>)
 80041c2:	f002 f9c7 	bl	8006554 <HAL_TIM_Encoder_Init>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80041cc:	f7ff fda4 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041d0:	2300      	movs	r3, #0
 80041d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4805      	ldr	r0, [pc, #20]	; (80041f4 <MX_TIM3_Init+0xa0>)
 80041de:	f003 f833 	bl	8007248 <HAL_TIMEx_MasterConfigSynchronization>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80041e8:	f7ff fd96 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80041ec:	bf00      	nop
 80041ee:	3730      	adds	r7, #48	; 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000370 	.word	0x20000370
 80041f8:	40000400 	.word	0x40000400

080041fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004202:	f107 0308 	add.w	r3, r7, #8
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004210:	463b      	mov	r3, r7
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004218:	4b1c      	ldr	r3, [pc, #112]	; (800428c <MX_TIM4_Init+0x90>)
 800421a:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <MX_TIM4_Init+0x94>)
 800421c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800421e:	4b1b      	ldr	r3, [pc, #108]	; (800428c <MX_TIM4_Init+0x90>)
 8004220:	2201      	movs	r2, #1
 8004222:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <MX_TIM4_Init+0x90>)
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 800422a:	4b18      	ldr	r3, [pc, #96]	; (800428c <MX_TIM4_Init+0x90>)
 800422c:	225a      	movs	r2, #90	; 0x5a
 800422e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004230:	4b16      	ldr	r3, [pc, #88]	; (800428c <MX_TIM4_Init+0x90>)
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <MX_TIM4_Init+0x90>)
 8004238:	2200      	movs	r2, #0
 800423a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800423c:	4813      	ldr	r0, [pc, #76]	; (800428c <MX_TIM4_Init+0x90>)
 800423e:	f001 ff3f 	bl	80060c0 <HAL_TIM_Base_Init>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8004248:	f7ff fd66 	bl	8003d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800424c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004250:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	4619      	mov	r1, r3
 8004258:	480c      	ldr	r0, [pc, #48]	; (800428c <MX_TIM4_Init+0x90>)
 800425a:	f002 fbeb 	bl	8006a34 <HAL_TIM_ConfigClockSource>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8004264:	f7ff fd58 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004268:	2300      	movs	r3, #0
 800426a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426c:	2300      	movs	r3, #0
 800426e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004270:	463b      	mov	r3, r7
 8004272:	4619      	mov	r1, r3
 8004274:	4805      	ldr	r0, [pc, #20]	; (800428c <MX_TIM4_Init+0x90>)
 8004276:	f002 ffe7 	bl	8007248 <HAL_TIMEx_MasterConfigSynchronization>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8004280:	f7ff fd4a 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004284:	bf00      	nop
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200002e0 	.word	0x200002e0
 8004290:	40000800 	.word	0x40000800

08004294 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800429a:	f107 0308 	add.w	r3, r7, #8
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	609a      	str	r2, [r3, #8]
 80042a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a8:	463b      	mov	r3, r7
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <MX_TIM5_Init+0x90>)
 80042b2:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <MX_TIM5_Init+0x94>)
 80042b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <MX_TIM5_Init+0x90>)
 80042b8:	2209      	movs	r2, #9
 80042ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <MX_TIM5_Init+0x90>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90000;
 80042c2:	4b18      	ldr	r3, [pc, #96]	; (8004324 <MX_TIM5_Init+0x90>)
 80042c4:	4a19      	ldr	r2, [pc, #100]	; (800432c <MX_TIM5_Init+0x98>)
 80042c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <MX_TIM5_Init+0x90>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <MX_TIM5_Init+0x90>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80042d4:	4813      	ldr	r0, [pc, #76]	; (8004324 <MX_TIM5_Init+0x90>)
 80042d6:	f001 fef3 	bl	80060c0 <HAL_TIM_Base_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80042e0:	f7ff fd1a 	bl	8003d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80042ea:	f107 0308 	add.w	r3, r7, #8
 80042ee:	4619      	mov	r1, r3
 80042f0:	480c      	ldr	r0, [pc, #48]	; (8004324 <MX_TIM5_Init+0x90>)
 80042f2:	f002 fb9f 	bl	8006a34 <HAL_TIM_ConfigClockSource>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80042fc:	f7ff fd0c 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004304:	2300      	movs	r3, #0
 8004306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004308:	463b      	mov	r3, r7
 800430a:	4619      	mov	r1, r3
 800430c:	4805      	ldr	r0, [pc, #20]	; (8004324 <MX_TIM5_Init+0x90>)
 800430e:	f002 ff9b 	bl	8007248 <HAL_TIMEx_MasterConfigSynchronization>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8004318:	f7ff fcfe 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800431c:	bf00      	nop
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000328 	.word	0x20000328
 8004328:	40000c00 	.word	0x40000c00
 800432c:	00015f90 	.word	0x00015f90

08004330 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004336:	463b      	mov	r3, r7
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <MX_TIM6_Init+0x64>)
 8004340:	4a15      	ldr	r2, [pc, #84]	; (8004398 <MX_TIM6_Init+0x68>)
 8004342:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <MX_TIM6_Init+0x64>)
 8004346:	f242 3227 	movw	r2, #8999	; 0x2327
 800434a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <MX_TIM6_Init+0x64>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <MX_TIM6_Init+0x64>)
 8004354:	2263      	movs	r2, #99	; 0x63
 8004356:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004358:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <MX_TIM6_Init+0x64>)
 800435a:	2200      	movs	r2, #0
 800435c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800435e:	480d      	ldr	r0, [pc, #52]	; (8004394 <MX_TIM6_Init+0x64>)
 8004360:	f001 feae 	bl	80060c0 <HAL_TIM_Base_Init>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800436a:	f7ff fcd5 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004376:	463b      	mov	r3, r7
 8004378:	4619      	mov	r1, r3
 800437a:	4806      	ldr	r0, [pc, #24]	; (8004394 <MX_TIM6_Init+0x64>)
 800437c:	f002 ff64 	bl	8007248 <HAL_TIMEx_MasterConfigSynchronization>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004386:	f7ff fcc7 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000400 	.word	0x20000400
 8004398:	40001000 	.word	0x40001000

0800439c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a2:	463b      	mov	r3, r7
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <MX_TIM7_Init+0x64>)
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <MX_TIM7_Init+0x68>)
 80043ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <MX_TIM7_Init+0x64>)
 80043b2:	f242 3227 	movw	r2, #8999	; 0x2327
 80043b6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <MX_TIM7_Init+0x64>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <MX_TIM7_Init+0x64>)
 80043c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80043c4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <MX_TIM7_Init+0x64>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043cc:	480c      	ldr	r0, [pc, #48]	; (8004400 <MX_TIM7_Init+0x64>)
 80043ce:	f001 fe77 	bl	80060c0 <HAL_TIM_Base_Init>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80043d8:	f7ff fc9e 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043dc:	2300      	movs	r3, #0
 80043de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80043e4:	463b      	mov	r3, r7
 80043e6:	4619      	mov	r1, r3
 80043e8:	4805      	ldr	r0, [pc, #20]	; (8004400 <MX_TIM7_Init+0x64>)
 80043ea:	f002 ff2d 	bl	8007248 <HAL_TIMEx_MasterConfigSynchronization>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80043f4:	f7ff fc90 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200004d8 	.word	0x200004d8
 8004404:	40001400 	.word	0x40001400

08004408 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b096      	sub	sp, #88	; 0x58
 800440c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800440e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800441c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	609a      	str	r2, [r3, #8]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	611a      	str	r2, [r3, #16]
 8004436:	615a      	str	r2, [r3, #20]
 8004438:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800443a:	1d3b      	adds	r3, r7, #4
 800443c:	2220      	movs	r2, #32
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f003 ffe5 	bl	8008410 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004446:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <MX_TIM8_Init+0x138>)
 8004448:	4a3e      	ldr	r2, [pc, #248]	; (8004544 <MX_TIM8_Init+0x13c>)
 800444a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 800444c:	4b3c      	ldr	r3, [pc, #240]	; (8004540 <MX_TIM8_Init+0x138>)
 800444e:	22b3      	movs	r2, #179	; 0xb3
 8004450:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <MX_TIM8_Init+0x138>)
 8004454:	2200      	movs	r2, #0
 8004456:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <MX_TIM8_Init+0x138>)
 800445a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800445e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004460:	4b37      	ldr	r3, [pc, #220]	; (8004540 <MX_TIM8_Init+0x138>)
 8004462:	2200      	movs	r2, #0
 8004464:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <MX_TIM8_Init+0x138>)
 8004468:	2200      	movs	r2, #0
 800446a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800446c:	4b34      	ldr	r3, [pc, #208]	; (8004540 <MX_TIM8_Init+0x138>)
 800446e:	2200      	movs	r2, #0
 8004470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004472:	4833      	ldr	r0, [pc, #204]	; (8004540 <MX_TIM8_Init+0x138>)
 8004474:	f001 fe24 	bl	80060c0 <HAL_TIM_Base_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800447e:	f7ff fc4b 	bl	8003d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004486:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004488:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800448c:	4619      	mov	r1, r3
 800448e:	482c      	ldr	r0, [pc, #176]	; (8004540 <MX_TIM8_Init+0x138>)
 8004490:	f002 fad0 	bl	8006a34 <HAL_TIM_ConfigClockSource>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800449a:	f7ff fc3d 	bl	8003d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800449e:	4828      	ldr	r0, [pc, #160]	; (8004540 <MX_TIM8_Init+0x138>)
 80044a0:	f001 ff36 	bl	8006310 <HAL_TIM_PWM_Init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80044aa:	f7ff fc35 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044ba:	4619      	mov	r1, r3
 80044bc:	4820      	ldr	r0, [pc, #128]	; (8004540 <MX_TIM8_Init+0x138>)
 80044be:	f002 fec3 	bl	8007248 <HAL_TIMEx_MasterConfigSynchronization>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80044c8:	f7ff fc26 	bl	8003d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044cc:	2360      	movs	r3, #96	; 0x60
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80044d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80044d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044d6:	2300      	movs	r3, #0
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044da:	2300      	movs	r3, #0
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ea:	220c      	movs	r2, #12
 80044ec:	4619      	mov	r1, r3
 80044ee:	4814      	ldr	r0, [pc, #80]	; (8004540 <MX_TIM8_Init+0x138>)
 80044f0:	f002 f9de 	bl	80068b0 <HAL_TIM_PWM_ConfigChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80044fa:	f7ff fc0d 	bl	8003d18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004516:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004518:	2300      	movs	r3, #0
 800451a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800451c:	1d3b      	adds	r3, r7, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4807      	ldr	r0, [pc, #28]	; (8004540 <MX_TIM8_Init+0x138>)
 8004522:	f002 ff0d 	bl	8007340 <HAL_TIMEx_ConfigBreakDeadTime>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800452c:	f7ff fbf4 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004530:	4803      	ldr	r0, [pc, #12]	; (8004540 <MX_TIM8_Init+0x138>)
 8004532:	f000 f99d 	bl	8004870 <HAL_TIM_MspPostInit>

}
 8004536:	bf00      	nop
 8004538:	3758      	adds	r7, #88	; 0x58
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000298 	.word	0x20000298
 8004544:	40010400 	.word	0x40010400

08004548 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	611a      	str	r2, [r3, #16]
 800455c:	615a      	str	r2, [r3, #20]
 800455e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004560:	4b1e      	ldr	r3, [pc, #120]	; (80045dc <MX_TIM11_Init+0x94>)
 8004562:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <MX_TIM11_Init+0x98>)
 8004564:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8004566:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <MX_TIM11_Init+0x94>)
 8004568:	22b3      	movs	r2, #179	; 0xb3
 800456a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <MX_TIM11_Init+0x94>)
 800456e:	2200      	movs	r2, #0
 8004570:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 8004572:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <MX_TIM11_Init+0x94>)
 8004574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004578:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <MX_TIM11_Init+0x94>)
 800457c:	2200      	movs	r2, #0
 800457e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004580:	4b16      	ldr	r3, [pc, #88]	; (80045dc <MX_TIM11_Init+0x94>)
 8004582:	2200      	movs	r2, #0
 8004584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004586:	4815      	ldr	r0, [pc, #84]	; (80045dc <MX_TIM11_Init+0x94>)
 8004588:	f001 fd9a 	bl	80060c0 <HAL_TIM_Base_Init>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004592:	f7ff fbc1 	bl	8003d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004596:	4811      	ldr	r0, [pc, #68]	; (80045dc <MX_TIM11_Init+0x94>)
 8004598:	f001 feba 	bl	8006310 <HAL_TIM_PWM_Init>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80045a2:	f7ff fbb9 	bl	8003d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045a6:	2360      	movs	r3, #96	; 0x60
 80045a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	2200      	movs	r2, #0
 80045ba:	4619      	mov	r1, r3
 80045bc:	4807      	ldr	r0, [pc, #28]	; (80045dc <MX_TIM11_Init+0x94>)
 80045be:	f002 f977 	bl	80068b0 <HAL_TIM_PWM_ConfigChannel>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80045c8:	f7ff fba6 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80045cc:	4803      	ldr	r0, [pc, #12]	; (80045dc <MX_TIM11_Init+0x94>)
 80045ce:	f000 f94f 	bl	8004870 <HAL_TIM_MspPostInit>

}
 80045d2:	bf00      	nop
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200003b8 	.word	0x200003b8
 80045e0:	40014800 	.word	0x40014800

080045e4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	; 0x30
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 031c 	add.w	r3, r7, #28
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a32      	ldr	r2, [pc, #200]	; (80046cc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d12d      	bne.n	8004662 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6453      	str	r3, [r2, #68]	; 0x44
 8004616:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6313      	str	r3, [r2, #48]	; 0x30
 8004632:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = R_ENCODER_A_Pin|R_ENCODER_B_Pin;
 800463e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	2302      	movs	r3, #2
 8004646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464c:	2300      	movs	r3, #0
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004650:	2301      	movs	r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004654:	f107 031c 	add.w	r3, r7, #28
 8004658:	4619      	mov	r1, r3
 800465a:	481e      	ldr	r0, [pc, #120]	; (80046d4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800465c:	f000 fd96 	bl	800518c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004660:	e030      	b.n	80046c4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d12b      	bne.n	80046c4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	6413      	str	r3, [r2, #64]	; 0x40
 800467c:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	4a0f      	ldr	r2, [pc, #60]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6313      	str	r3, [r2, #48]	; 0x30
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_ENCODER_A_Pin|L_ENCODER_B_Pin;
 80046a4:	23c0      	movs	r3, #192	; 0xc0
 80046a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a8:	2302      	movs	r3, #2
 80046aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046b4:	2302      	movs	r3, #2
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b8:	f107 031c 	add.w	r3, r7, #28
 80046bc:	4619      	mov	r1, r3
 80046be:	4805      	ldr	r0, [pc, #20]	; (80046d4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80046c0:	f000 fd64 	bl	800518c <HAL_GPIO_Init>
}
 80046c4:	bf00      	nop
 80046c6:	3730      	adds	r7, #48	; 0x30
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40020000 	.word	0x40020000
 80046d8:	40000400 	.word	0x40000400

080046dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d116      	bne.n	800471c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
 80046f2:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	4a57      	ldr	r2, [pc, #348]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6413      	str	r3, [r2, #64]	; 0x40
 80046fe:	4b55      	ldr	r3, [pc, #340]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	2100      	movs	r1, #0
 800470e:	201c      	movs	r0, #28
 8004710:	f000 fc73 	bl	8004ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004714:	201c      	movs	r0, #28
 8004716:	f000 fc8c 	bl	8005032 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800471a:	e096      	b.n	800484a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a4d      	ldr	r2, [pc, #308]	; (8004858 <HAL_TIM_Base_MspInit+0x17c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d116      	bne.n	8004754 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	4a49      	ldr	r2, [pc, #292]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004730:	f043 0304 	orr.w	r3, r3, #4
 8004734:	6413      	str	r3, [r2, #64]	; 0x40
 8004736:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	623b      	str	r3, [r7, #32]
 8004740:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2100      	movs	r1, #0
 8004746:	201e      	movs	r0, #30
 8004748:	f000 fc57 	bl	8004ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800474c:	201e      	movs	r0, #30
 800474e:	f000 fc70 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 8004752:	e07a      	b.n	800484a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a40      	ldr	r2, [pc, #256]	; (800485c <HAL_TIM_Base_MspInit+0x180>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d116      	bne.n	800478c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a3b      	ldr	r2, [pc, #236]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004768:	f043 0308 	orr.w	r3, r3, #8
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	2100      	movs	r1, #0
 800477e:	2032      	movs	r0, #50	; 0x32
 8004780:	f000 fc3b 	bl	8004ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004784:	2032      	movs	r0, #50	; 0x32
 8004786:	f000 fc54 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 800478a:	e05e      	b.n	800484a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a33      	ldr	r2, [pc, #204]	; (8004860 <HAL_TIM_Base_MspInit+0x184>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d116      	bne.n	80047c4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	4a2d      	ldr	r2, [pc, #180]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 80047a0:	f043 0310 	orr.w	r3, r3, #16
 80047a4:	6413      	str	r3, [r2, #64]	; 0x40
 80047a6:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80047b2:	2200      	movs	r2, #0
 80047b4:	2100      	movs	r1, #0
 80047b6:	2036      	movs	r0, #54	; 0x36
 80047b8:	f000 fc1f 	bl	8004ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047bc:	2036      	movs	r0, #54	; 0x36
 80047be:	f000 fc38 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 80047c2:	e042      	b.n	800484a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM7)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a26      	ldr	r2, [pc, #152]	; (8004864 <HAL_TIM_Base_MspInit+0x188>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d116      	bne.n	80047fc <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 80047d8:	f043 0320 	orr.w	r3, r3, #32
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80047ea:	2200      	movs	r2, #0
 80047ec:	2102      	movs	r1, #2
 80047ee:	2037      	movs	r0, #55	; 0x37
 80047f0:	f000 fc03 	bl	8004ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80047f4:	2037      	movs	r0, #55	; 0x37
 80047f6:	f000 fc1c 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 80047fa:	e026      	b.n	800484a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM8)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_TIM_Base_MspInit+0x18c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10e      	bne.n	8004824 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	4a11      	ldr	r2, [pc, #68]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	6453      	str	r3, [r2, #68]	; 0x44
 8004816:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	693b      	ldr	r3, [r7, #16]
}
 8004822:	e012      	b.n	800484a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM11)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a10      	ldr	r2, [pc, #64]	; (800486c <HAL_TIM_Base_MspInit+0x190>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d10d      	bne.n	800484a <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	4a07      	ldr	r2, [pc, #28]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483c:	6453      	str	r3, [r2, #68]	; 0x44
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_TIM_Base_MspInit+0x178>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
}
 800484a:	bf00      	nop
 800484c:	3728      	adds	r7, #40	; 0x28
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
 8004858:	40000800 	.word	0x40000800
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40001000 	.word	0x40001000
 8004864:	40001400 	.word	0x40001400
 8004868:	40010400 	.word	0x40010400
 800486c:	40014800 	.word	0x40014800

08004870 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a25      	ldr	r2, [pc, #148]	; (8004924 <HAL_TIM_MspPostInit+0xb4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d11f      	bne.n	80048d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	4b24      	ldr	r3, [pc, #144]	; (8004928 <HAL_TIM_MspPostInit+0xb8>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_TIM_MspPostInit+0xb8>)
 800489c:	f043 0304 	orr.w	r3, r3, #4
 80048a0:	6313      	str	r3, [r2, #48]	; 0x30
 80048a2:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_TIM_MspPostInit+0xb8>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b4:	2302      	movs	r3, #2
 80048b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048bc:	2300      	movs	r3, #0
 80048be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80048c0:	2303      	movs	r3, #3
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	4619      	mov	r1, r3
 80048ca:	4818      	ldr	r0, [pc, #96]	; (800492c <HAL_TIM_MspPostInit+0xbc>)
 80048cc:	f000 fc5e 	bl	800518c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80048d0:	e023      	b.n	800491a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a16      	ldr	r2, [pc, #88]	; (8004930 <HAL_TIM_MspPostInit+0xc0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d11e      	bne.n	800491a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	4b11      	ldr	r3, [pc, #68]	; (8004928 <HAL_TIM_MspPostInit+0xb8>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	4a10      	ldr	r2, [pc, #64]	; (8004928 <HAL_TIM_MspPostInit+0xb8>)
 80048e6:	f043 0302 	orr.w	r3, r3, #2
 80048ea:	6313      	str	r3, [r2, #48]	; 0x30
 80048ec:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <HAL_TIM_MspPostInit+0xb8>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fe:	2302      	movs	r3, #2
 8004900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800490a:	2303      	movs	r3, #3
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	4619      	mov	r1, r3
 8004914:	4807      	ldr	r0, [pc, #28]	; (8004934 <HAL_TIM_MspPostInit+0xc4>)
 8004916:	f000 fc39 	bl	800518c <HAL_GPIO_Init>
}
 800491a:	bf00      	nop
 800491c:	3728      	adds	r7, #40	; 0x28
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40010400 	.word	0x40010400
 8004928:	40023800 	.word	0x40023800
 800492c:	40020800 	.word	0x40020800
 8004930:	40014800 	.word	0x40014800
 8004934:	40020400 	.word	0x40020400

08004938 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <MX_UART4_Init+0x4c>)
 800493e:	4a12      	ldr	r2, [pc, #72]	; (8004988 <MX_UART4_Init+0x50>)
 8004940:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <MX_UART4_Init+0x4c>)
 8004944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004948:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <MX_UART4_Init+0x4c>)
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <MX_UART4_Init+0x4c>)
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <MX_UART4_Init+0x4c>)
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <MX_UART4_Init+0x4c>)
 800495e:	220c      	movs	r2, #12
 8004960:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <MX_UART4_Init+0x4c>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <MX_UART4_Init+0x4c>)
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800496e:	4805      	ldr	r0, [pc, #20]	; (8004984 <MX_UART4_Init+0x4c>)
 8004970:	f002 fd4c 	bl	800740c <HAL_UART_Init>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800497a:	f7ff f9cd 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	200005a8 	.word	0x200005a8
 8004988:	40004c00 	.word	0x40004c00

0800498c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <MX_UART5_Init+0x4c>)
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <MX_UART5_Init+0x50>)
 8004994:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <MX_UART5_Init+0x4c>)
 8004998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800499c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <MX_UART5_Init+0x4c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <MX_UART5_Init+0x4c>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <MX_UART5_Init+0x4c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <MX_UART5_Init+0x4c>)
 80049b2:	220c      	movs	r2, #12
 80049b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <MX_UART5_Init+0x4c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <MX_UART5_Init+0x4c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80049c2:	4805      	ldr	r0, [pc, #20]	; (80049d8 <MX_UART5_Init+0x4c>)
 80049c4:	f002 fd22 	bl	800740c <HAL_UART_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80049ce:	f7ff f9a3 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000520 	.word	0x20000520
 80049dc:	40005000 	.word	0x40005000

080049e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 80049e6:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <MX_USART2_UART_Init+0x50>)
 80049e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 80049ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049f2:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a06:	220c      	movs	r2, #12
 8004a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a16:	4805      	ldr	r0, [pc, #20]	; (8004a2c <MX_USART2_UART_Init+0x4c>)
 8004a18:	f002 fcf8 	bl	800740c <HAL_UART_Init>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a22:	f7ff f979 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200005ec 	.word	0x200005ec
 8004a30:	40004400 	.word	0x40004400

08004a34 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004a38:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a3a:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <MX_USART6_UART_Init+0x50>)
 8004a3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a5a:	220c      	movs	r2, #12
 8004a5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004a6a:	4805      	ldr	r0, [pc, #20]	; (8004a80 <MX_USART6_UART_Init+0x4c>)
 8004a6c:	f002 fcce 	bl	800740c <HAL_UART_Init>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004a76:	f7ff f94f 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000564 	.word	0x20000564
 8004a84:	40011400 	.word	0x40011400

08004a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b090      	sub	sp, #64	; 0x40
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a7f      	ldr	r2, [pc, #508]	; (8004ca4 <HAL_UART_MspInit+0x21c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d134      	bne.n	8004b14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aae:	4b7e      	ldr	r3, [pc, #504]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	4a7d      	ldr	r2, [pc, #500]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004ab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aba:	4b7b      	ldr	r3, [pc, #492]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	4b77      	ldr	r3, [pc, #476]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a76      	ldr	r2, [pc, #472]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b74      	ldr	r3, [pc, #464]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aee:	2303      	movs	r3, #3
 8004af0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004af2:	2308      	movs	r3, #8
 8004af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004afa:	4619      	mov	r1, r3
 8004afc:	486b      	ldr	r0, [pc, #428]	; (8004cac <HAL_UART_MspInit+0x224>)
 8004afe:	f000 fb45 	bl	800518c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004b02:	2200      	movs	r2, #0
 8004b04:	2100      	movs	r1, #0
 8004b06:	2034      	movs	r0, #52	; 0x34
 8004b08:	f000 fa77 	bl	8004ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b0c:	2034      	movs	r0, #52	; 0x34
 8004b0e:	f000 fa90 	bl	8005032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004b12:	e0c3      	b.n	8004c9c <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==UART5)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a65      	ldr	r2, [pc, #404]	; (8004cb0 <HAL_UART_MspInit+0x228>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d153      	bne.n	8004bc6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	4b61      	ldr	r3, [pc, #388]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	4a60      	ldr	r2, [pc, #384]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2e:	4b5e      	ldr	r3, [pc, #376]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	4b5a      	ldr	r3, [pc, #360]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a59      	ldr	r2, [pc, #356]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b57      	ldr	r3, [pc, #348]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	4a52      	ldr	r2, [pc, #328]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b60:	f043 0308 	orr.w	r3, r3, #8
 8004b64:	6313      	str	r3, [r2, #48]	; 0x30
 8004b66:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b80:	2303      	movs	r3, #3
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004b84:	2308      	movs	r3, #8
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4849      	ldr	r0, [pc, #292]	; (8004cb4 <HAL_UART_MspInit+0x22c>)
 8004b90:	f000 fafc 	bl	800518c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b94:	2304      	movs	r3, #4
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bac:	4619      	mov	r1, r3
 8004bae:	4842      	ldr	r0, [pc, #264]	; (8004cb8 <HAL_UART_MspInit+0x230>)
 8004bb0:	f000 faec 	bl	800518c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2035      	movs	r0, #53	; 0x35
 8004bba:	f000 fa1e 	bl	8004ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004bbe:	2035      	movs	r0, #53	; 0x35
 8004bc0:	f000 fa37 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 8004bc4:	e06a      	b.n	8004c9c <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==USART2)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a3c      	ldr	r2, [pc, #240]	; (8004cbc <HAL_UART_MspInit+0x234>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d12c      	bne.n	8004c2a <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	4b34      	ldr	r3, [pc, #208]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bde:	6413      	str	r3, [r2, #64]	; 0x40
 8004be0:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	4b2d      	ldr	r3, [pc, #180]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfc:	4b2a      	ldr	r3, [pc, #168]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c08:	230c      	movs	r3, #12
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c14:	2303      	movs	r3, #3
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c18:	2307      	movs	r3, #7
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c20:	4619      	mov	r1, r3
 8004c22:	4822      	ldr	r0, [pc, #136]	; (8004cac <HAL_UART_MspInit+0x224>)
 8004c24:	f000 fab2 	bl	800518c <HAL_GPIO_Init>
}
 8004c28:	e038      	b.n	8004c9c <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==USART6)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a24      	ldr	r2, [pc, #144]	; (8004cc0 <HAL_UART_MspInit+0x238>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d133      	bne.n	8004c9c <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	6453      	str	r3, [r2, #68]	; 0x44
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <HAL_UART_MspInit+0x220>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c6c:	23c0      	movs	r3, #192	; 0xc0
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c70:	2302      	movs	r3, #2
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c84:	4619      	mov	r1, r3
 8004c86:	480b      	ldr	r0, [pc, #44]	; (8004cb4 <HAL_UART_MspInit+0x22c>)
 8004c88:	f000 fa80 	bl	800518c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2100      	movs	r1, #0
 8004c90:	2047      	movs	r0, #71	; 0x47
 8004c92:	f000 f9b2 	bl	8004ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004c96:	2047      	movs	r0, #71	; 0x47
 8004c98:	f000 f9cb 	bl	8005032 <HAL_NVIC_EnableIRQ>
}
 8004c9c:	bf00      	nop
 8004c9e:	3740      	adds	r7, #64	; 0x40
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40004c00 	.word	0x40004c00
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40020000 	.word	0x40020000
 8004cb0:	40005000 	.word	0x40005000
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	40020c00 	.word	0x40020c00
 8004cbc:	40004400 	.word	0x40004400
 8004cc0:	40011400 	.word	0x40011400

08004cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cc8:	480d      	ldr	r0, [pc, #52]	; (8004d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004cca:	490e      	ldr	r1, [pc, #56]	; (8004d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ccc:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cd0:	e002      	b.n	8004cd8 <LoopCopyDataInit>

08004cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cd6:	3304      	adds	r3, #4

08004cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cdc:	d3f9      	bcc.n	8004cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cde:	4a0b      	ldr	r2, [pc, #44]	; (8004d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ce0:	4c0b      	ldr	r4, [pc, #44]	; (8004d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ce4:	e001      	b.n	8004cea <LoopFillZerobss>

08004ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ce8:	3204      	adds	r2, #4

08004cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cec:	d3fb      	bcc.n	8004ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004cee:	f7ff f979 	bl	8003fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cf2:	f003 fb61 	bl	80083b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cf6:	f7fe fd53 	bl	80037a0 <main>
  bx  lr    
 8004cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d04:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004d08:	0800d190 	.word	0x0800d190
  ldr r2, =_sbss
 8004d0c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004d10:	20000644 	.word	0x20000644

08004d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d14:	e7fe      	b.n	8004d14 <ADC_IRQHandler>
	...

08004d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <HAL_Init+0x40>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0d      	ldr	r2, [pc, #52]	; (8004d58 <HAL_Init+0x40>)
 8004d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_Init+0x40>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <HAL_Init+0x40>)
 8004d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_Init+0x40>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a07      	ldr	r2, [pc, #28]	; (8004d58 <HAL_Init+0x40>)
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d40:	2003      	movs	r0, #3
 8004d42:	f000 f94f 	bl	8004fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d46:	2000      	movs	r0, #0
 8004d48:	f000 f808 	bl	8004d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d4c:	f7fe ffee 	bl	8003d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023c00 	.word	0x40023c00

08004d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <HAL_InitTick+0x54>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <HAL_InitTick+0x58>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f967 	bl	800504e <HAL_SYSTICK_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e00e      	b.n	8004da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b0f      	cmp	r3, #15
 8004d8e:	d80a      	bhi.n	8004da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d90:	2200      	movs	r2, #0
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d98:	f000 f92f 	bl	8004ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d9c:	4a06      	ldr	r2, [pc, #24]	; (8004db8 <HAL_InitTick+0x5c>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e000      	b.n	8004da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000000 	.word	0x20000000
 8004db4:	20000008 	.word	0x20000008
 8004db8:	20000004 	.word	0x20000004

08004dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_IncTick+0x20>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_IncTick+0x24>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4413      	add	r3, r2
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <HAL_IncTick+0x24>)
 8004dce:	6013      	str	r3, [r2, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	20000630 	.word	0x20000630

08004de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  return uwTick;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <HAL_GetTick+0x14>)
 8004dea:	681b      	ldr	r3, [r3, #0]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000630 	.word	0x20000630

08004dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e04:	f7ff ffee 	bl	8004de4 <HAL_GetTick>
 8004e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e14:	d005      	beq.n	8004e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <HAL_Delay+0x44>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e22:	bf00      	nop
 8004e24:	f7ff ffde 	bl	8004de4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d8f7      	bhi.n	8004e24 <HAL_Delay+0x28>
  {
  }
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000008 	.word	0x20000008

08004e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <__NVIC_SetPriorityGrouping+0x44>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e60:	4013      	ands	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e76:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <__NVIC_SetPriorityGrouping+0x44>)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	60d3      	str	r3, [r2, #12]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	f003 0307 	and.w	r3, r3, #7
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	db0b      	blt.n	8004ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	f003 021f 	and.w	r2, r3, #31
 8004ec0:	4907      	ldr	r1, [pc, #28]	; (8004ee0 <__NVIC_EnableIRQ+0x38>)
 8004ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2001      	movs	r0, #1
 8004eca:	fa00 f202 	lsl.w	r2, r0, r2
 8004ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	e000e100 	.word	0xe000e100

08004ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	6039      	str	r1, [r7, #0]
 8004eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	db0a      	blt.n	8004f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	490c      	ldr	r1, [pc, #48]	; (8004f30 <__NVIC_SetPriority+0x4c>)
 8004efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f02:	0112      	lsls	r2, r2, #4
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	440b      	add	r3, r1
 8004f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f0c:	e00a      	b.n	8004f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4908      	ldr	r1, [pc, #32]	; (8004f34 <__NVIC_SetPriority+0x50>)
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	3b04      	subs	r3, #4
 8004f1c:	0112      	lsls	r2, r2, #4
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	440b      	add	r3, r1
 8004f22:	761a      	strb	r2, [r3, #24]
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000e100 	.word	0xe000e100
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b089      	sub	sp, #36	; 0x24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f1c3 0307 	rsb	r3, r3, #7
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	bf28      	it	cs
 8004f56:	2304      	movcs	r3, #4
 8004f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d902      	bls.n	8004f68 <NVIC_EncodePriority+0x30>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3b03      	subs	r3, #3
 8004f66:	e000      	b.n	8004f6a <NVIC_EncodePriority+0x32>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43da      	mvns	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	43d9      	mvns	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f90:	4313      	orrs	r3, r2
         );
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	; 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fb0:	d301      	bcc.n	8004fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e00f      	b.n	8004fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fb6:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <SysTick_Config+0x40>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fbe:	210f      	movs	r1, #15
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc4:	f7ff ff8e 	bl	8004ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <SysTick_Config+0x40>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fce:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <SysTick_Config+0x40>)
 8004fd0:	2207      	movs	r2, #7
 8004fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	e000e010 	.word	0xe000e010

08004fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff ff29 	bl	8004e44 <__NVIC_SetPriorityGrouping>
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b086      	sub	sp, #24
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	4603      	mov	r3, r0
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800500c:	f7ff ff3e 	bl	8004e8c <__NVIC_GetPriorityGrouping>
 8005010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	6978      	ldr	r0, [r7, #20]
 8005018:	f7ff ff8e 	bl	8004f38 <NVIC_EncodePriority>
 800501c:	4602      	mov	r2, r0
 800501e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ff5d 	bl	8004ee4 <__NVIC_SetPriority>
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff31 	bl	8004ea8 <__NVIC_EnableIRQ>
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff ffa2 	bl	8004fa0 <SysTick_Config>
 800505c:	4603      	mov	r3, r0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005074:	f7ff feb6 	bl	8004de4 <HAL_GetTick>
 8005078:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d008      	beq.n	8005098 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2280      	movs	r2, #128	; 0x80
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e052      	b.n	800513e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0216 	bic.w	r2, r2, #22
 80050a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <HAL_DMA_Abort+0x62>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0208 	bic.w	r2, r2, #8
 80050d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0201 	bic.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050e8:	e013      	b.n	8005112 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ea:	f7ff fe7b 	bl	8004de4 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d90c      	bls.n	8005112 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2203      	movs	r2, #3
 8005102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e015      	b.n	800513e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e4      	bne.n	80050ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005124:	223f      	movs	r2, #63	; 0x3f
 8005126:	409a      	lsls	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d004      	beq.n	8005164 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2280      	movs	r2, #128	; 0x80
 800515e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e00c      	b.n	800517e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2205      	movs	r2, #5
 8005168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e165      	b.n	8005474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051a8:	2201      	movs	r2, #1
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4013      	ands	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	f040 8154 	bne.w	800546e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d005      	beq.n	80051de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d130      	bne.n	8005240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2203      	movs	r2, #3
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005214:	2201      	movs	r2, #1
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 0201 	and.w	r2, r3, #1
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b03      	cmp	r3, #3
 800524a:	d017      	beq.n	800527c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	2203      	movs	r2, #3
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d123      	bne.n	80052d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	08da      	lsrs	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3208      	adds	r2, #8
 8005290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	220f      	movs	r2, #15
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	08da      	lsrs	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3208      	adds	r2, #8
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	2203      	movs	r2, #3
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0203 	and.w	r2, r3, #3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80ae 	beq.w	800546e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	4b5d      	ldr	r3, [pc, #372]	; (800548c <HAL_GPIO_Init+0x300>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	4a5c      	ldr	r2, [pc, #368]	; (800548c <HAL_GPIO_Init+0x300>)
 800531c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005320:	6453      	str	r3, [r2, #68]	; 0x44
 8005322:	4b5a      	ldr	r3, [pc, #360]	; (800548c <HAL_GPIO_Init+0x300>)
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800532e:	4a58      	ldr	r2, [pc, #352]	; (8005490 <HAL_GPIO_Init+0x304>)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	3302      	adds	r3, #2
 8005336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	220f      	movs	r2, #15
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a4f      	ldr	r2, [pc, #316]	; (8005494 <HAL_GPIO_Init+0x308>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d025      	beq.n	80053a6 <HAL_GPIO_Init+0x21a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a4e      	ldr	r2, [pc, #312]	; (8005498 <HAL_GPIO_Init+0x30c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01f      	beq.n	80053a2 <HAL_GPIO_Init+0x216>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a4d      	ldr	r2, [pc, #308]	; (800549c <HAL_GPIO_Init+0x310>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d019      	beq.n	800539e <HAL_GPIO_Init+0x212>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a4c      	ldr	r2, [pc, #304]	; (80054a0 <HAL_GPIO_Init+0x314>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <HAL_GPIO_Init+0x20e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a4b      	ldr	r2, [pc, #300]	; (80054a4 <HAL_GPIO_Init+0x318>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00d      	beq.n	8005396 <HAL_GPIO_Init+0x20a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a4a      	ldr	r2, [pc, #296]	; (80054a8 <HAL_GPIO_Init+0x31c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <HAL_GPIO_Init+0x206>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a49      	ldr	r2, [pc, #292]	; (80054ac <HAL_GPIO_Init+0x320>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d101      	bne.n	800538e <HAL_GPIO_Init+0x202>
 800538a:	2306      	movs	r3, #6
 800538c:	e00c      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 800538e:	2307      	movs	r3, #7
 8005390:	e00a      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 8005392:	2305      	movs	r3, #5
 8005394:	e008      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 8005396:	2304      	movs	r3, #4
 8005398:	e006      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 800539a:	2303      	movs	r3, #3
 800539c:	e004      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 800539e:	2302      	movs	r3, #2
 80053a0:	e002      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <HAL_GPIO_Init+0x21c>
 80053a6:	2300      	movs	r3, #0
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	f002 0203 	and.w	r2, r2, #3
 80053ae:	0092      	lsls	r2, r2, #2
 80053b0:	4093      	lsls	r3, r2
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053b8:	4935      	ldr	r1, [pc, #212]	; (8005490 <HAL_GPIO_Init+0x304>)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	3302      	adds	r3, #2
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053c6:	4b3a      	ldr	r3, [pc, #232]	; (80054b0 <HAL_GPIO_Init+0x324>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053ea:	4a31      	ldr	r2, [pc, #196]	; (80054b0 <HAL_GPIO_Init+0x324>)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053f0:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_GPIO_Init+0x324>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005414:	4a26      	ldr	r2, [pc, #152]	; (80054b0 <HAL_GPIO_Init+0x324>)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800541a:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <HAL_GPIO_Init+0x324>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	43db      	mvns	r3, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4013      	ands	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_GPIO_Init+0x324>)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <HAL_GPIO_Init+0x324>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	43db      	mvns	r3, r3
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4013      	ands	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005468:	4a11      	ldr	r2, [pc, #68]	; (80054b0 <HAL_GPIO_Init+0x324>)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	f67f ae96 	bls.w	80051a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	3724      	adds	r7, #36	; 0x24
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800
 8005490:	40013800 	.word	0x40013800
 8005494:	40020000 	.word	0x40020000
 8005498:	40020400 	.word	0x40020400
 800549c:	40020800 	.word	0x40020800
 80054a0:	40020c00 	.word	0x40020c00
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40021400 	.word	0x40021400
 80054ac:	40021800 	.word	0x40021800
 80054b0:	40013c00 	.word	0x40013c00

080054b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054cc:	2301      	movs	r3, #1
 80054ce:	73fb      	strb	r3, [r7, #15]
 80054d0:	e001      	b.n	80054d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	807b      	strh	r3, [r7, #2]
 80054f0:	4613      	mov	r3, r2
 80054f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054f4:	787b      	ldrb	r3, [r7, #1]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054fa:	887a      	ldrh	r2, [r7, #2]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005500:	e003      	b.n	800550a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005502:	887b      	ldrh	r3, [r7, #2]
 8005504:	041a      	lsls	r2, r3, #16
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	619a      	str	r2, [r3, #24]
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005528:	887a      	ldrh	r2, [r7, #2]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4013      	ands	r3, r2
 800552e:	041a      	lsls	r2, r3, #16
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	43d9      	mvns	r1, r3
 8005534:	887b      	ldrh	r3, [r7, #2]
 8005536:	400b      	ands	r3, r1
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	619a      	str	r2, [r3, #24]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <HAL_PWREx_EnableOverDrive+0x90>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	4a1f      	ldr	r2, [pc, #124]	; (80055dc <HAL_PWREx_EnableOverDrive+0x90>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_PWREx_EnableOverDrive+0x90>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005572:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005578:	f7ff fc34 	bl	8004de4 <HAL_GetTick>
 800557c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800557e:	e009      	b.n	8005594 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005580:	f7ff fc30 	bl	8004de4 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800558e:	d901      	bls.n	8005594 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e01f      	b.n	80055d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005594:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d1ee      	bne.n	8005580 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055a8:	f7ff fc1c 	bl	8004de4 <HAL_GetTick>
 80055ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055ae:	e009      	b.n	80055c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055b0:	f7ff fc18 	bl	8004de4 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055be:	d901      	bls.n	80055c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e007      	b.n	80055d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055c4:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d0:	d1ee      	bne.n	80055b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40023800 	.word	0x40023800
 80055e0:	420e0040 	.word	0x420e0040
 80055e4:	40007000 	.word	0x40007000
 80055e8:	420e0044 	.word	0x420e0044

080055ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0cc      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005600:	4b68      	ldr	r3, [pc, #416]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d90c      	bls.n	8005628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b65      	ldr	r3, [pc, #404]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005616:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0b8      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d020      	beq.n	8005676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005640:	4b59      	ldr	r3, [pc, #356]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4a58      	ldr	r2, [pc, #352]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800564a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005658:	4b53      	ldr	r3, [pc, #332]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4a52      	ldr	r2, [pc, #328]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005664:	4b50      	ldr	r3, [pc, #320]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	494d      	ldr	r1, [pc, #308]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d044      	beq.n	800570c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d119      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e07f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d003      	beq.n	80056aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d107      	bne.n	80056ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056aa:	4b3f      	ldr	r3, [pc, #252]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e06f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ba:	4b3b      	ldr	r3, [pc, #236]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e067      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ca:	4b37      	ldr	r3, [pc, #220]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 0203 	bic.w	r2, r3, #3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4934      	ldr	r1, [pc, #208]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056dc:	f7ff fb82 	bl	8004de4 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e2:	e00a      	b.n	80056fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e4:	f7ff fb7e 	bl	8004de4 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e04f      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fa:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 020c 	and.w	r2, r3, #12
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	429a      	cmp	r2, r3
 800570a:	d1eb      	bne.n	80056e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d20c      	bcs.n	8005734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571a:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005722:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e032      	b.n	800579a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4916      	ldr	r1, [pc, #88]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	490e      	ldr	r1, [pc, #56]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005772:	f000 f855 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8005776:	4602      	mov	r2, r0
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	490a      	ldr	r1, [pc, #40]	; (80057ac <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	5ccb      	ldrb	r3, [r1, r3]
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <HAL_RCC_ClockConfig+0x1c4>)
 800578c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fae2 	bl	8004d5c <HAL_InitTick>

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40023c00 	.word	0x40023c00
 80057a8:	40023800 	.word	0x40023800
 80057ac:	0800cb28 	.word	0x0800cb28
 80057b0:	20000000 	.word	0x20000000
 80057b4:	20000004 	.word	0x20000004

080057b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057bc:	4b03      	ldr	r3, [pc, #12]	; (80057cc <HAL_RCC_GetHCLKFreq+0x14>)
 80057be:	681b      	ldr	r3, [r3, #0]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	20000000 	.word	0x20000000

080057d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057d4:	f7ff fff0 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	0a9b      	lsrs	r3, r3, #10
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4903      	ldr	r1, [pc, #12]	; (80057f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e6:	5ccb      	ldrb	r3, [r1, r3]
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40023800 	.word	0x40023800
 80057f4:	0800cb38 	.word	0x0800cb38

080057f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057fc:	f7ff ffdc 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	0b5b      	lsrs	r3, r3, #13
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4903      	ldr	r1, [pc, #12]	; (800581c <HAL_RCC_GetPCLK2Freq+0x24>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40023800 	.word	0x40023800
 800581c:	0800cb38 	.word	0x0800cb38

08005820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005824:	b088      	sub	sp, #32
 8005826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800583c:	4bce      	ldr	r3, [pc, #824]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 030c 	and.w	r3, r3, #12
 8005844:	2b0c      	cmp	r3, #12
 8005846:	f200 818d 	bhi.w	8005b64 <HAL_RCC_GetSysClockFreq+0x344>
 800584a:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <HAL_RCC_GetSysClockFreq+0x30>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005885 	.word	0x08005885
 8005854:	08005b65 	.word	0x08005b65
 8005858:	08005b65 	.word	0x08005b65
 800585c:	08005b65 	.word	0x08005b65
 8005860:	0800588b 	.word	0x0800588b
 8005864:	08005b65 	.word	0x08005b65
 8005868:	08005b65 	.word	0x08005b65
 800586c:	08005b65 	.word	0x08005b65
 8005870:	08005891 	.word	0x08005891
 8005874:	08005b65 	.word	0x08005b65
 8005878:	08005b65 	.word	0x08005b65
 800587c:	08005b65 	.word	0x08005b65
 8005880:	08005a05 	.word	0x08005a05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005884:	4bbd      	ldr	r3, [pc, #756]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005886:	61bb      	str	r3, [r7, #24]
       break;
 8005888:	e16f      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800588a:	4bbd      	ldr	r3, [pc, #756]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x360>)
 800588c:	61bb      	str	r3, [r7, #24]
      break;
 800588e:	e16c      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005890:	4bb9      	ldr	r3, [pc, #740]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005898:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800589a:	4bb7      	ldr	r3, [pc, #732]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d053      	beq.n	800594e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a6:	4bb4      	ldr	r3, [pc, #720]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	099b      	lsrs	r3, r3, #6
 80058ac:	461a      	mov	r2, r3
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	ea02 0400 	and.w	r4, r2, r0
 80058be:	603c      	str	r4, [r7, #0]
 80058c0:	400b      	ands	r3, r1
 80058c2:	607b      	str	r3, [r7, #4]
 80058c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058c8:	4620      	mov	r0, r4
 80058ca:	4629      	mov	r1, r5
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	014b      	lsls	r3, r1, #5
 80058d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058da:	0142      	lsls	r2, r0, #5
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	4623      	mov	r3, r4
 80058e2:	1ac0      	subs	r0, r0, r3
 80058e4:	462b      	mov	r3, r5
 80058e6:	eb61 0103 	sbc.w	r1, r1, r3
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	018b      	lsls	r3, r1, #6
 80058f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058f8:	0182      	lsls	r2, r0, #6
 80058fa:	1a12      	subs	r2, r2, r0
 80058fc:	eb63 0301 	sbc.w	r3, r3, r1
 8005900:	f04f 0000 	mov.w	r0, #0
 8005904:	f04f 0100 	mov.w	r1, #0
 8005908:	00d9      	lsls	r1, r3, #3
 800590a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800590e:	00d0      	lsls	r0, r2, #3
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4621      	mov	r1, r4
 8005916:	1852      	adds	r2, r2, r1
 8005918:	4629      	mov	r1, r5
 800591a:	eb43 0101 	adc.w	r1, r3, r1
 800591e:	460b      	mov	r3, r1
 8005920:	f04f 0000 	mov.w	r0, #0
 8005924:	f04f 0100 	mov.w	r1, #0
 8005928:	0259      	lsls	r1, r3, #9
 800592a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800592e:	0250      	lsls	r0, r2, #9
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4610      	mov	r0, r2
 8005936:	4619      	mov	r1, r3
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	461a      	mov	r2, r3
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	f7fb f9a2 	bl	8000c88 <__aeabi_uldivmod>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4613      	mov	r3, r2
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e04c      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800594e:	4b8a      	ldr	r3, [pc, #552]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	099b      	lsrs	r3, r3, #6
 8005954:	461a      	mov	r2, r3
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	ea02 0a00 	and.w	sl, r2, r0
 8005966:	ea03 0b01 	and.w	fp, r3, r1
 800596a:	4650      	mov	r0, sl
 800596c:	4659      	mov	r1, fp
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	014b      	lsls	r3, r1, #5
 8005978:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800597c:	0142      	lsls	r2, r0, #5
 800597e:	4610      	mov	r0, r2
 8005980:	4619      	mov	r1, r3
 8005982:	ebb0 000a 	subs.w	r0, r0, sl
 8005986:	eb61 010b 	sbc.w	r1, r1, fp
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	018b      	lsls	r3, r1, #6
 8005994:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005998:	0182      	lsls	r2, r0, #6
 800599a:	1a12      	subs	r2, r2, r0
 800599c:	eb63 0301 	sbc.w	r3, r3, r1
 80059a0:	f04f 0000 	mov.w	r0, #0
 80059a4:	f04f 0100 	mov.w	r1, #0
 80059a8:	00d9      	lsls	r1, r3, #3
 80059aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059ae:	00d0      	lsls	r0, r2, #3
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	eb12 020a 	adds.w	r2, r2, sl
 80059b8:	eb43 030b 	adc.w	r3, r3, fp
 80059bc:	f04f 0000 	mov.w	r0, #0
 80059c0:	f04f 0100 	mov.w	r1, #0
 80059c4:	0299      	lsls	r1, r3, #10
 80059c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80059ca:	0290      	lsls	r0, r2, #10
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4610      	mov	r0, r2
 80059d2:	4619      	mov	r1, r3
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	f7fb f954 	bl	8000c88 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4613      	mov	r3, r2
 80059e6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059e8:	4b63      	ldr	r3, [pc, #396]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	3301      	adds	r3, #1
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	61bb      	str	r3, [r7, #24]
      break;
 8005a02:	e0b2      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a04:	4b5c      	ldr	r3, [pc, #368]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a0c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a0e:	4b5a      	ldr	r3, [pc, #360]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04d      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a1a:	4b57      	ldr	r3, [pc, #348]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	099b      	lsrs	r3, r3, #6
 8005a20:	461a      	mov	r2, r3
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	ea02 0800 	and.w	r8, r2, r0
 8005a32:	ea03 0901 	and.w	r9, r3, r1
 8005a36:	4640      	mov	r0, r8
 8005a38:	4649      	mov	r1, r9
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	014b      	lsls	r3, r1, #5
 8005a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a48:	0142      	lsls	r2, r0, #5
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	ebb0 0008 	subs.w	r0, r0, r8
 8005a52:	eb61 0109 	sbc.w	r1, r1, r9
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	018b      	lsls	r3, r1, #6
 8005a60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a64:	0182      	lsls	r2, r0, #6
 8005a66:	1a12      	subs	r2, r2, r0
 8005a68:	eb63 0301 	sbc.w	r3, r3, r1
 8005a6c:	f04f 0000 	mov.w	r0, #0
 8005a70:	f04f 0100 	mov.w	r1, #0
 8005a74:	00d9      	lsls	r1, r3, #3
 8005a76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a7a:	00d0      	lsls	r0, r2, #3
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	eb12 0208 	adds.w	r2, r2, r8
 8005a84:	eb43 0309 	adc.w	r3, r3, r9
 8005a88:	f04f 0000 	mov.w	r0, #0
 8005a8c:	f04f 0100 	mov.w	r1, #0
 8005a90:	0259      	lsls	r1, r3, #9
 8005a92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005a96:	0250      	lsls	r0, r2, #9
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	f7fb f8ee 	bl	8000c88 <__aeabi_uldivmod>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	e04a      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab6:	4b30      	ldr	r3, [pc, #192]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	099b      	lsrs	r3, r3, #6
 8005abc:	461a      	mov	r2, r3
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	ea02 0400 	and.w	r4, r2, r0
 8005ace:	ea03 0501 	and.w	r5, r3, r1
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	014b      	lsls	r3, r1, #5
 8005ae0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ae4:	0142      	lsls	r2, r0, #5
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	1b00      	subs	r0, r0, r4
 8005aec:	eb61 0105 	sbc.w	r1, r1, r5
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	018b      	lsls	r3, r1, #6
 8005afa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005afe:	0182      	lsls	r2, r0, #6
 8005b00:	1a12      	subs	r2, r2, r0
 8005b02:	eb63 0301 	sbc.w	r3, r3, r1
 8005b06:	f04f 0000 	mov.w	r0, #0
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	00d9      	lsls	r1, r3, #3
 8005b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b14:	00d0      	lsls	r0, r2, #3
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	1912      	adds	r2, r2, r4
 8005b1c:	eb45 0303 	adc.w	r3, r5, r3
 8005b20:	f04f 0000 	mov.w	r0, #0
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	0299      	lsls	r1, r3, #10
 8005b2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b2e:	0290      	lsls	r0, r2, #10
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4610      	mov	r0, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	f7fb f8a2 	bl	8000c88 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4613      	mov	r3, r2
 8005b4a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	0f1b      	lsrs	r3, r3, #28
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	61bb      	str	r3, [r7, #24]
      break;
 8005b62:	e002      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b66:	61bb      	str	r3, [r7, #24]
      break;
 8005b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b6a:	69bb      	ldr	r3, [r7, #24]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	00f42400 	.word	0x00f42400
 8005b80:	007a1200 	.word	0x007a1200

08005b84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e28d      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8083 	beq.w	8005caa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ba4:	4b94      	ldr	r3, [pc, #592]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 030c 	and.w	r3, r3, #12
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d019      	beq.n	8005be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bb0:	4b91      	ldr	r3, [pc, #580]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d106      	bne.n	8005bca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bbc:	4b8e      	ldr	r3, [pc, #568]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc8:	d00c      	beq.n	8005be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bca:	4b8b      	ldr	r3, [pc, #556]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	d112      	bne.n	8005bfc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bd6:	4b88      	ldr	r3, [pc, #544]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be2:	d10b      	bne.n	8005bfc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be4:	4b84      	ldr	r3, [pc, #528]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d05b      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x124>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d157      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e25a      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d106      	bne.n	8005c14 <HAL_RCC_OscConfig+0x90>
 8005c06:	4b7c      	ldr	r3, [pc, #496]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a7b      	ldr	r2, [pc, #492]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	e01d      	b.n	8005c50 <HAL_RCC_OscConfig+0xcc>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCC_OscConfig+0xb4>
 8005c1e:	4b76      	ldr	r3, [pc, #472]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a75      	ldr	r2, [pc, #468]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	4b73      	ldr	r3, [pc, #460]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a72      	ldr	r2, [pc, #456]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e00b      	b.n	8005c50 <HAL_RCC_OscConfig+0xcc>
 8005c38:	4b6f      	ldr	r3, [pc, #444]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a6e      	ldr	r2, [pc, #440]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	4b6c      	ldr	r3, [pc, #432]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a6b      	ldr	r2, [pc, #428]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d013      	beq.n	8005c80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7ff f8c4 	bl	8004de4 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c60:	f7ff f8c0 	bl	8004de4 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b64      	cmp	r3, #100	; 0x64
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e21f      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c72:	4b61      	ldr	r3, [pc, #388]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f0      	beq.n	8005c60 <HAL_RCC_OscConfig+0xdc>
 8005c7e:	e014      	b.n	8005caa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7ff f8b0 	bl	8004de4 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c88:	f7ff f8ac 	bl	8004de4 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b64      	cmp	r3, #100	; 0x64
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e20b      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c9a:	4b57      	ldr	r3, [pc, #348]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x104>
 8005ca6:	e000      	b.n	8005caa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d06f      	beq.n	8005d96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cb6:	4b50      	ldr	r3, [pc, #320]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d017      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005cc2:	4b4d      	ldr	r3, [pc, #308]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d105      	bne.n	8005cda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005cce:	4b4a      	ldr	r3, [pc, #296]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cda:	4b47      	ldr	r3, [pc, #284]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ce2:	2b0c      	cmp	r3, #12
 8005ce4:	d11c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ce6:	4b44      	ldr	r3, [pc, #272]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d116      	bne.n	8005d20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf2:	4b41      	ldr	r3, [pc, #260]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_RCC_OscConfig+0x186>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d001      	beq.n	8005d0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e1d3      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0a:	4b3b      	ldr	r3, [pc, #236]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4937      	ldr	r1, [pc, #220]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1e:	e03a      	b.n	8005d96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d28:	4b34      	ldr	r3, [pc, #208]	; (8005dfc <HAL_RCC_OscConfig+0x278>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2e:	f7ff f859 	bl	8004de4 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d36:	f7ff f855 	bl	8004de4 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e1b4      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d48:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d54:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4925      	ldr	r1, [pc, #148]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]
 8005d68:	e015      	b.n	8005d96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d6a:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <HAL_RCC_OscConfig+0x278>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7ff f838 	bl	8004de4 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d78:	f7ff f834 	bl	8004de4 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e193      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d036      	beq.n	8005e10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d016      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005daa:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <HAL_RCC_OscConfig+0x27c>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db0:	f7ff f818 	bl	8004de4 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005db8:	f7ff f814 	bl	8004de4 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e173      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <HAL_RCC_OscConfig+0x274>)
 8005dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0x234>
 8005dd6:	e01b      	b.n	8005e10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <HAL_RCC_OscConfig+0x27c>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dde:	f7ff f801 	bl	8004de4 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de4:	e00e      	b.n	8005e04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005de6:	f7fe fffd 	bl	8004de4 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d907      	bls.n	8005e04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e15c      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	42470000 	.word	0x42470000
 8005e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e04:	4b8a      	ldr	r3, [pc, #552]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1ea      	bne.n	8005de6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8097 	beq.w	8005f4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e22:	4b83      	ldr	r3, [pc, #524]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10f      	bne.n	8005e4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	4b7f      	ldr	r3, [pc, #508]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	4a7e      	ldr	r2, [pc, #504]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e3e:	4b7c      	ldr	r3, [pc, #496]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e46:	60bb      	str	r3, [r7, #8]
 8005e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4e:	4b79      	ldr	r3, [pc, #484]	; (8006034 <HAL_RCC_OscConfig+0x4b0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d118      	bne.n	8005e8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5a:	4b76      	ldr	r3, [pc, #472]	; (8006034 <HAL_RCC_OscConfig+0x4b0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a75      	ldr	r2, [pc, #468]	; (8006034 <HAL_RCC_OscConfig+0x4b0>)
 8005e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e66:	f7fe ffbd 	bl	8004de4 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6e:	f7fe ffb9 	bl	8004de4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e118      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e80:	4b6c      	ldr	r3, [pc, #432]	; (8006034 <HAL_RCC_OscConfig+0x4b0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d106      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x31e>
 8005e94:	4b66      	ldr	r3, [pc, #408]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	4a65      	ldr	r2, [pc, #404]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea0:	e01c      	b.n	8005edc <HAL_RCC_OscConfig+0x358>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x340>
 8005eaa:	4b61      	ldr	r3, [pc, #388]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	4a60      	ldr	r2, [pc, #384]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005eb0:	f043 0304 	orr.w	r3, r3, #4
 8005eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb6:	4b5e      	ldr	r3, [pc, #376]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	4a5d      	ldr	r2, [pc, #372]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005ebc:	f043 0301 	orr.w	r3, r3, #1
 8005ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec2:	e00b      	b.n	8005edc <HAL_RCC_OscConfig+0x358>
 8005ec4:	4b5a      	ldr	r3, [pc, #360]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec8:	4a59      	ldr	r2, [pc, #356]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed0:	4b57      	ldr	r3, [pc, #348]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed4:	4a56      	ldr	r2, [pc, #344]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005ed6:	f023 0304 	bic.w	r3, r3, #4
 8005eda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d015      	beq.n	8005f10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fe ff7e 	bl	8004de4 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eea:	e00a      	b.n	8005f02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eec:	f7fe ff7a 	bl	8004de4 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e0d7      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f02:	4b4b      	ldr	r3, [pc, #300]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0ee      	beq.n	8005eec <HAL_RCC_OscConfig+0x368>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f10:	f7fe ff68 	bl	8004de4 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f16:	e00a      	b.n	8005f2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f18:	f7fe ff64 	bl	8004de4 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e0c1      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f2e:	4b40      	ldr	r3, [pc, #256]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ee      	bne.n	8005f18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d105      	bne.n	8005f4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	4a3a      	ldr	r2, [pc, #232]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80ad 	beq.w	80060b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f56:	4b36      	ldr	r3, [pc, #216]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d060      	beq.n	8006024 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d145      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f6a:	4b33      	ldr	r3, [pc, #204]	; (8006038 <HAL_RCC_OscConfig+0x4b4>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fe ff38 	bl	8004de4 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f78:	f7fe ff34 	bl	8004de4 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e093      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8a:	4b29      	ldr	r3, [pc, #164]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	019b      	lsls	r3, r3, #6
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	041b      	lsls	r3, r3, #16
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	061b      	lsls	r3, r3, #24
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	071b      	lsls	r3, r3, #28
 8005fc2:	491b      	ldr	r1, [pc, #108]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc8:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <HAL_RCC_OscConfig+0x4b4>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fe ff09 	bl	8004de4 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd6:	f7fe ff05 	bl	8004de4 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e064      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe8:	4b11      	ldr	r3, [pc, #68]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x452>
 8005ff4:	e05c      	b.n	80060b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <HAL_RCC_OscConfig+0x4b4>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7fe fef2 	bl	8004de4 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006004:	f7fe feee 	bl	8004de4 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e04d      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <HAL_RCC_OscConfig+0x4ac>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x480>
 8006022:	e045      	b.n	80060b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d107      	bne.n	800603c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e040      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
 8006030:	40023800 	.word	0x40023800
 8006034:	40007000 	.word	0x40007000
 8006038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800603c:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <HAL_RCC_OscConfig+0x538>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d030      	beq.n	80060ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006054:	429a      	cmp	r2, r3
 8006056:	d129      	bne.n	80060ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006062:	429a      	cmp	r2, r3
 8006064:	d122      	bne.n	80060ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800606c:	4013      	ands	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006074:	4293      	cmp	r3, r2
 8006076:	d119      	bne.n	80060ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	3b01      	subs	r3, #1
 8006086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006088:	429a      	cmp	r2, r3
 800608a:	d10f      	bne.n	80060ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006098:	429a      	cmp	r2, r3
 800609a:	d107      	bne.n	80060ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d001      	beq.n	80060b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800

080060c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e041      	b.n	8006156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fe faf8 	bl	80046dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f000 fd92 	bl	8006c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	d001      	beq.n	8006178 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e046      	b.n	8006206 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a23      	ldr	r2, [pc, #140]	; (8006214 <HAL_TIM_Base_Start+0xb4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d022      	beq.n	80061d0 <HAL_TIM_Base_Start+0x70>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006192:	d01d      	beq.n	80061d0 <HAL_TIM_Base_Start+0x70>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <HAL_TIM_Base_Start+0xb8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d018      	beq.n	80061d0 <HAL_TIM_Base_Start+0x70>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1e      	ldr	r2, [pc, #120]	; (800621c <HAL_TIM_Base_Start+0xbc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d013      	beq.n	80061d0 <HAL_TIM_Base_Start+0x70>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <HAL_TIM_Base_Start+0xc0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00e      	beq.n	80061d0 <HAL_TIM_Base_Start+0x70>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <HAL_TIM_Base_Start+0xc4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d009      	beq.n	80061d0 <HAL_TIM_Base_Start+0x70>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a19      	ldr	r2, [pc, #100]	; (8006228 <HAL_TIM_Base_Start+0xc8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_TIM_Base_Start+0x70>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a18      	ldr	r2, [pc, #96]	; (800622c <HAL_TIM_Base_Start+0xcc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d111      	bne.n	80061f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d010      	beq.n	8006204 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f2:	e007      	b.n	8006204 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40010000 	.word	0x40010000
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800
 8006220:	40000c00 	.word	0x40000c00
 8006224:	40010400 	.word	0x40010400
 8006228:	40014000 	.word	0x40014000
 800622c:	40001800 	.word	0x40001800

08006230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	d001      	beq.n	8006248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e04e      	b.n	80062e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a23      	ldr	r2, [pc, #140]	; (80062f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d022      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x80>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006272:	d01d      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x80>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1f      	ldr	r2, [pc, #124]	; (80062f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d018      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x80>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <HAL_TIM_Base_Start_IT+0xcc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d013      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x80>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1c      	ldr	r2, [pc, #112]	; (8006300 <HAL_TIM_Base_Start_IT+0xd0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00e      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x80>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1b      	ldr	r2, [pc, #108]	; (8006304 <HAL_TIM_Base_Start_IT+0xd4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d009      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x80>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a19      	ldr	r2, [pc, #100]	; (8006308 <HAL_TIM_Base_Start_IT+0xd8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d004      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x80>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a18      	ldr	r2, [pc, #96]	; (800630c <HAL_TIM_Base_Start_IT+0xdc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d111      	bne.n	80062d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b06      	cmp	r3, #6
 80062c0:	d010      	beq.n	80062e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d2:	e007      	b.n	80062e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40010400 	.word	0x40010400
 8006308:	40014000 	.word	0x40014000
 800630c:	40001800 	.word	0x40001800

08006310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e041      	b.n	80063a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f839 	bl	80063ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f000 fc6a 	bl	8006c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
	...

080063c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <HAL_TIM_PWM_Start+0x24>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e022      	b.n	800642e <HAL_TIM_PWM_Start+0x6a>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d109      	bne.n	8006402 <HAL_TIM_PWM_Start+0x3e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	bf14      	ite	ne
 80063fa:	2301      	movne	r3, #1
 80063fc:	2300      	moveq	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	e015      	b.n	800642e <HAL_TIM_PWM_Start+0x6a>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b08      	cmp	r3, #8
 8006406:	d109      	bne.n	800641c <HAL_TIM_PWM_Start+0x58>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b01      	cmp	r3, #1
 8006412:	bf14      	ite	ne
 8006414:	2301      	movne	r3, #1
 8006416:	2300      	moveq	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	e008      	b.n	800642e <HAL_TIM_PWM_Start+0x6a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	bf14      	ite	ne
 8006428:	2301      	movne	r3, #1
 800642a:	2300      	moveq	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e07c      	b.n	8006530 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_TIM_PWM_Start+0x82>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006444:	e013      	b.n	800646e <HAL_TIM_PWM_Start+0xaa>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b04      	cmp	r3, #4
 800644a:	d104      	bne.n	8006456 <HAL_TIM_PWM_Start+0x92>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006454:	e00b      	b.n	800646e <HAL_TIM_PWM_Start+0xaa>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b08      	cmp	r3, #8
 800645a:	d104      	bne.n	8006466 <HAL_TIM_PWM_Start+0xa2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006464:	e003      	b.n	800646e <HAL_TIM_PWM_Start+0xaa>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2201      	movs	r2, #1
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fec0 	bl	80071fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2d      	ldr	r2, [pc, #180]	; (8006538 <HAL_TIM_PWM_Start+0x174>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <HAL_TIM_PWM_Start+0xcc>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a2c      	ldr	r2, [pc, #176]	; (800653c <HAL_TIM_PWM_Start+0x178>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d101      	bne.n	8006494 <HAL_TIM_PWM_Start+0xd0>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <HAL_TIM_PWM_Start+0xd2>
 8006494:	2300      	movs	r3, #0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_TIM_PWM_Start+0x174>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d022      	beq.n	80064fa <HAL_TIM_PWM_Start+0x136>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064bc:	d01d      	beq.n	80064fa <HAL_TIM_PWM_Start+0x136>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1f      	ldr	r2, [pc, #124]	; (8006540 <HAL_TIM_PWM_Start+0x17c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d018      	beq.n	80064fa <HAL_TIM_PWM_Start+0x136>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <HAL_TIM_PWM_Start+0x180>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_TIM_PWM_Start+0x136>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_TIM_PWM_Start+0x184>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_TIM_PWM_Start+0x136>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a16      	ldr	r2, [pc, #88]	; (800653c <HAL_TIM_PWM_Start+0x178>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_TIM_PWM_Start+0x136>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_TIM_PWM_Start+0x188>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIM_PWM_Start+0x136>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a16      	ldr	r2, [pc, #88]	; (8006550 <HAL_TIM_PWM_Start+0x18c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d111      	bne.n	800651e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b06      	cmp	r3, #6
 800650a:	d010      	beq.n	800652e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651c:	e007      	b.n	800652e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0201 	orr.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40014000 	.word	0x40014000
 8006550:	40001800 	.word	0x40001800

08006554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e097      	b.n	8006698 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fe f831 	bl	80045e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006598:	f023 0307 	bic.w	r3, r3, #7
 800659c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f000 fb3d 	bl	8006c28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d6:	f023 0303 	bic.w	r3, r3, #3
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	4313      	orrs	r3, r2
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065f4:	f023 030c 	bic.w	r3, r3, #12
 80065f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	4313      	orrs	r3, r2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	011a      	lsls	r2, r3, #4
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	031b      	lsls	r3, r3, #12
 8006624:	4313      	orrs	r3, r2
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	4313      	orrs	r3, r2
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d122      	bne.n	80066fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d11b      	bne.n	80066fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0202 	mvn.w	r2, #2
 80066cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa81 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa73 	bl	8006bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa84 	bl	8006bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b04      	cmp	r3, #4
 8006708:	d122      	bne.n	8006750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b04      	cmp	r3, #4
 8006716:	d11b      	bne.n	8006750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0204 	mvn.w	r2, #4
 8006720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2202      	movs	r2, #2
 8006726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa57 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
 800673c:	e005      	b.n	800674a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa49 	bl	8006bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fa5a 	bl	8006bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b08      	cmp	r3, #8
 800675c:	d122      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b08      	cmp	r3, #8
 800676a:	d11b      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0208 	mvn.w	r2, #8
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2204      	movs	r2, #4
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa2d 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa1f 	bl	8006bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa30 	bl	8006bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b10      	cmp	r3, #16
 80067b0:	d122      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0310 	and.w	r3, r3, #16
 80067bc:	2b10      	cmp	r3, #16
 80067be:	d11b      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0210 	mvn.w	r2, #16
 80067c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2208      	movs	r2, #8
 80067ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa03 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
 80067e4:	e005      	b.n	80067f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9f5 	bl	8006bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa06 	bl	8006bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d10e      	bne.n	8006824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d107      	bne.n	8006824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0201 	mvn.w	r2, #1
 800681c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f9cf 	bl	8006bc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	2b80      	cmp	r3, #128	; 0x80
 8006830:	d10e      	bne.n	8006850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d107      	bne.n	8006850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fdd4 	bl	80073f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d10e      	bne.n	800687c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d107      	bne.n	800687c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f9cb 	bl	8006c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b20      	cmp	r3, #32
 8006888:	d10e      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b20      	cmp	r3, #32
 8006896:	d107      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0220 	mvn.w	r2, #32
 80068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fd9e 	bl	80073e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e0ae      	b.n	8006a2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b0c      	cmp	r3, #12
 80068da:	f200 809f 	bhi.w	8006a1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068de:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	08006919 	.word	0x08006919
 80068e8:	08006a1d 	.word	0x08006a1d
 80068ec:	08006a1d 	.word	0x08006a1d
 80068f0:	08006a1d 	.word	0x08006a1d
 80068f4:	08006959 	.word	0x08006959
 80068f8:	08006a1d 	.word	0x08006a1d
 80068fc:	08006a1d 	.word	0x08006a1d
 8006900:	08006a1d 	.word	0x08006a1d
 8006904:	0800699b 	.word	0x0800699b
 8006908:	08006a1d 	.word	0x08006a1d
 800690c:	08006a1d 	.word	0x08006a1d
 8006910:	08006a1d 	.word	0x08006a1d
 8006914:	080069db 	.word	0x080069db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fa22 	bl	8006d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0208 	orr.w	r2, r2, #8
 8006932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0204 	bic.w	r2, r2, #4
 8006942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6999      	ldr	r1, [r3, #24]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	619a      	str	r2, [r3, #24]
      break;
 8006956:	e064      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fa72 	bl	8006e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6999      	ldr	r1, [r3, #24]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	021a      	lsls	r2, r3, #8
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	619a      	str	r2, [r3, #24]
      break;
 8006998:	e043      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fac7 	bl	8006f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0208 	orr.w	r2, r2, #8
 80069b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0204 	bic.w	r2, r2, #4
 80069c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69d9      	ldr	r1, [r3, #28]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	61da      	str	r2, [r3, #28]
      break;
 80069d8:	e023      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fb1b 	bl	800701c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69d9      	ldr	r1, [r3, #28]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	021a      	lsls	r2, r3, #8
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	61da      	str	r2, [r3, #28]
      break;
 8006a1a:	e002      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e0b4      	b.n	8006bba <HAL_TIM_ConfigClockSource+0x186>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a88:	d03e      	beq.n	8006b08 <HAL_TIM_ConfigClockSource+0xd4>
 8006a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8e:	f200 8087 	bhi.w	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a96:	f000 8086 	beq.w	8006ba6 <HAL_TIM_ConfigClockSource+0x172>
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9e:	d87f      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa0:	2b70      	cmp	r3, #112	; 0x70
 8006aa2:	d01a      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0xa6>
 8006aa4:	2b70      	cmp	r3, #112	; 0x70
 8006aa6:	d87b      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa8:	2b60      	cmp	r3, #96	; 0x60
 8006aaa:	d050      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0x11a>
 8006aac:	2b60      	cmp	r3, #96	; 0x60
 8006aae:	d877      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab0:	2b50      	cmp	r3, #80	; 0x50
 8006ab2:	d03c      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0xfa>
 8006ab4:	2b50      	cmp	r3, #80	; 0x50
 8006ab6:	d873      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d058      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x13a>
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d86f      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac0:	2b30      	cmp	r3, #48	; 0x30
 8006ac2:	d064      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x15a>
 8006ac4:	2b30      	cmp	r3, #48	; 0x30
 8006ac6:	d86b      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d060      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x15a>
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d867      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d05c      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x15a>
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d05a      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x15a>
 8006ad8:	e062      	b.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6899      	ldr	r1, [r3, #8]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f000 fb67 	bl	80071bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	609a      	str	r2, [r3, #8]
      break;
 8006b06:	e04f      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6899      	ldr	r1, [r3, #8]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f000 fb50 	bl	80071bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b2a:	609a      	str	r2, [r3, #8]
      break;
 8006b2c:	e03c      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6859      	ldr	r1, [r3, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f000 fac4 	bl	80070c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2150      	movs	r1, #80	; 0x50
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fb1d 	bl	8007186 <TIM_ITRx_SetConfig>
      break;
 8006b4c:	e02c      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	6859      	ldr	r1, [r3, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f000 fae3 	bl	8007126 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2160      	movs	r1, #96	; 0x60
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fb0d 	bl	8007186 <TIM_ITRx_SetConfig>
      break;
 8006b6c:	e01c      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6859      	ldr	r1, [r3, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f000 faa4 	bl	80070c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2140      	movs	r1, #64	; 0x40
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fafd 	bl	8007186 <TIM_ITRx_SetConfig>
      break;
 8006b8c:	e00c      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f000 faf4 	bl	8007186 <TIM_ITRx_SetConfig>
      break;
 8006b9e:	e003      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba4:	e000      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
	...

08006c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a40      	ldr	r2, [pc, #256]	; (8006d3c <TIM_Base_SetConfig+0x114>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c46:	d00f      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a3d      	ldr	r2, [pc, #244]	; (8006d40 <TIM_Base_SetConfig+0x118>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a3c      	ldr	r2, [pc, #240]	; (8006d44 <TIM_Base_SetConfig+0x11c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a3b      	ldr	r2, [pc, #236]	; (8006d48 <TIM_Base_SetConfig+0x120>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a3a      	ldr	r2, [pc, #232]	; (8006d4c <TIM_Base_SetConfig+0x124>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d108      	bne.n	8006c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a2f      	ldr	r2, [pc, #188]	; (8006d3c <TIM_Base_SetConfig+0x114>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d02b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c88:	d027      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a2c      	ldr	r2, [pc, #176]	; (8006d40 <TIM_Base_SetConfig+0x118>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d023      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2b      	ldr	r2, [pc, #172]	; (8006d44 <TIM_Base_SetConfig+0x11c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01f      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a2a      	ldr	r2, [pc, #168]	; (8006d48 <TIM_Base_SetConfig+0x120>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a29      	ldr	r2, [pc, #164]	; (8006d4c <TIM_Base_SetConfig+0x124>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d017      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a28      	ldr	r2, [pc, #160]	; (8006d50 <TIM_Base_SetConfig+0x128>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <TIM_Base_SetConfig+0x12c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00f      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <TIM_Base_SetConfig+0x130>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a25      	ldr	r2, [pc, #148]	; (8006d5c <TIM_Base_SetConfig+0x134>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a24      	ldr	r2, [pc, #144]	; (8006d60 <TIM_Base_SetConfig+0x138>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a23      	ldr	r2, [pc, #140]	; (8006d64 <TIM_Base_SetConfig+0x13c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d108      	bne.n	8006cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <TIM_Base_SetConfig+0x114>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_Base_SetConfig+0xf8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a0c      	ldr	r2, [pc, #48]	; (8006d4c <TIM_Base_SetConfig+0x124>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d103      	bne.n	8006d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]
}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40000800 	.word	0x40000800
 8006d48:	40000c00 	.word	0x40000c00
 8006d4c:	40010400 	.word	0x40010400
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800
 8006d5c:	40001800 	.word	0x40001800
 8006d60:	40001c00 	.word	0x40001c00
 8006d64:	40002000 	.word	0x40002000

08006d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f023 0201 	bic.w	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f023 0302 	bic.w	r3, r3, #2
 8006db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a20      	ldr	r2, [pc, #128]	; (8006e40 <TIM_OC1_SetConfig+0xd8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_OC1_SetConfig+0x64>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a1f      	ldr	r2, [pc, #124]	; (8006e44 <TIM_OC1_SetConfig+0xdc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d10c      	bne.n	8006de6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0308 	bic.w	r3, r3, #8
 8006dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f023 0304 	bic.w	r3, r3, #4
 8006de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <TIM_OC1_SetConfig+0xd8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d003      	beq.n	8006df6 <TIM_OC1_SetConfig+0x8e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a14      	ldr	r2, [pc, #80]	; (8006e44 <TIM_OC1_SetConfig+0xdc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d111      	bne.n	8006e1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	621a      	str	r2, [r3, #32]
}
 8006e34:	bf00      	nop
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40010400 	.word	0x40010400

08006e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0210 	bic.w	r2, r3, #16
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 0320 	bic.w	r3, r3, #32
 8006e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a22      	ldr	r2, [pc, #136]	; (8006f2c <TIM_OC2_SetConfig+0xe4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_OC2_SetConfig+0x68>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a21      	ldr	r2, [pc, #132]	; (8006f30 <TIM_OC2_SetConfig+0xe8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d10d      	bne.n	8006ecc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a17      	ldr	r2, [pc, #92]	; (8006f2c <TIM_OC2_SetConfig+0xe4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC2_SetConfig+0x94>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a16      	ldr	r2, [pc, #88]	; (8006f30 <TIM_OC2_SetConfig+0xe8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d113      	bne.n	8006f04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40010400 	.word	0x40010400

08006f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0303 	bic.w	r3, r3, #3
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	021b      	lsls	r3, r3, #8
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a21      	ldr	r2, [pc, #132]	; (8007014 <TIM_OC3_SetConfig+0xe0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_OC3_SetConfig+0x66>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a20      	ldr	r2, [pc, #128]	; (8007018 <TIM_OC3_SetConfig+0xe4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d10d      	bne.n	8006fb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a16      	ldr	r2, [pc, #88]	; (8007014 <TIM_OC3_SetConfig+0xe0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_OC3_SetConfig+0x92>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a15      	ldr	r2, [pc, #84]	; (8007018 <TIM_OC3_SetConfig+0xe4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d113      	bne.n	8006fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	621a      	str	r2, [r3, #32]
}
 8007008:	bf00      	nop
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	40010000 	.word	0x40010000
 8007018:	40010400 	.word	0x40010400

0800701c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4313      	orrs	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	031b      	lsls	r3, r3, #12
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a12      	ldr	r2, [pc, #72]	; (80070c0 <TIM_OC4_SetConfig+0xa4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_OC4_SetConfig+0x68>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <TIM_OC4_SetConfig+0xa8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d109      	bne.n	8007098 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	019b      	lsls	r3, r3, #6
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40010000 	.word	0x40010000
 80070c4:	40010400 	.word	0x40010400

080070c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	f023 0201 	bic.w	r2, r3, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f023 030a 	bic.w	r3, r3, #10
 8007104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	621a      	str	r2, [r3, #32]
}
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007126:	b480      	push	{r7}
 8007128:	b087      	sub	sp, #28
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f023 0210 	bic.w	r2, r3, #16
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	031b      	lsls	r3, r3, #12
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f043 0307 	orr.w	r3, r3, #7
 80071a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	609a      	str	r2, [r3, #8]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	021a      	lsls	r2, r3, #8
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	431a      	orrs	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	609a      	str	r2, [r3, #8]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f003 031f 	and.w	r3, r3, #31
 800720e:	2201      	movs	r2, #1
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6a1a      	ldr	r2, [r3, #32]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	43db      	mvns	r3, r3
 800721e:	401a      	ands	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1a      	ldr	r2, [r3, #32]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	fa01 f303 	lsl.w	r3, r1, r3
 8007234:	431a      	orrs	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
	...

08007248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800725c:	2302      	movs	r3, #2
 800725e:	e05a      	b.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a21      	ldr	r2, [pc, #132]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d022      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ac:	d01d      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1d      	ldr	r2, [pc, #116]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d018      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a1b      	ldr	r2, [pc, #108]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1a      	ldr	r2, [pc, #104]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00e      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a18      	ldr	r2, [pc, #96]	; (8007334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d009      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a15      	ldr	r2, [pc, #84]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d10c      	bne.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	40010000 	.word	0x40010000
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800
 8007330:	40000c00 	.word	0x40000c00
 8007334:	40010400 	.word	0x40010400
 8007338:	40014000 	.word	0x40014000
 800733c:	40001800 	.word	0x40001800

08007340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007354:	2b01      	cmp	r3, #1
 8007356:	d101      	bne.n	800735c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007358:	2302      	movs	r3, #2
 800735a:	e03d      	b.n	80073d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4313      	orrs	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e03f      	b.n	800749e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fd fb28 	bl	8004a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2224      	movs	r2, #36	; 0x24
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800744e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fddb 	bl	800800c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695a      	ldr	r2, [r3, #20]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b08a      	sub	sp, #40	; 0x28
 80074aa:	af02      	add	r7, sp, #8
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	d17c      	bne.n	80075c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_UART_Transmit+0x2c>
 80074cc:	88fb      	ldrh	r3, [r7, #6]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e075      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_UART_Transmit+0x3e>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e06e      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2221      	movs	r2, #33	; 0x21
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074fa:	f7fd fc73 	bl	8004de4 <HAL_GetTick>
 80074fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	88fa      	ldrh	r2, [r7, #6]
 8007504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	88fa      	ldrh	r2, [r7, #6]
 800750a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007514:	d108      	bne.n	8007528 <HAL_UART_Transmit+0x82>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	e003      	b.n	8007530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007538:	e02a      	b.n	8007590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fb1f 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e036      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	3302      	adds	r3, #2
 800756e:	61bb      	str	r3, [r7, #24]
 8007570:	e007      	b.n	8007582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	781a      	ldrb	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	3301      	adds	r3, #1
 8007580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1cf      	bne.n	800753a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2140      	movs	r1, #64	; 0x40
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 faef 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e006      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d11d      	bne.n	8007620 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_UART_Receive_IT+0x26>
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e016      	b.n	8007622 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_UART_Receive_IT+0x38>
 80075fe:	2302      	movs	r3, #2
 8007600:	e00f      	b.n	8007622 <HAL_UART_Receive_IT+0x58>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	461a      	mov	r2, r3
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fb24 	bl	8007c64 <UART_Start_Receive_IT>
 800761c:	4603      	mov	r3, r0
 800761e:	e000      	b.n	8007622 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b0ba      	sub	sp, #232	; 0xe8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007652:	2300      	movs	r3, #0
 8007654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007658:	2300      	movs	r3, #0
 800765a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800765e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800766a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10f      	bne.n	8007692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <HAL_UART_IRQHandler+0x66>
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fc03 	bl	8007e96 <UART_Receive_IT>
      return;
 8007690:	e256      	b.n	8007b40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80de 	beq.w	8007858 <HAL_UART_IRQHandler+0x22c>
 800769c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d106      	bne.n	80076b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 80d1 	beq.w	8007858 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <HAL_UART_IRQHandler+0xae>
 80076c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	f043 0201 	orr.w	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00b      	beq.n	80076fe <HAL_UART_IRQHandler+0xd2>
 80076e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f043 0202 	orr.w	r2, r3, #2
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00b      	beq.n	8007722 <HAL_UART_IRQHandler+0xf6>
 800770a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f043 0204 	orr.w	r2, r3, #4
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d011      	beq.n	8007752 <HAL_UART_IRQHandler+0x126>
 800772e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b00      	cmp	r3, #0
 8007738:	d105      	bne.n	8007746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800773a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f043 0208 	orr.w	r2, r3, #8
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 81ed 	beq.w	8007b36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_UART_IRQHandler+0x14e>
 8007768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fb8e 	bl	8007e96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007784:	2b40      	cmp	r3, #64	; 0x40
 8007786:	bf0c      	ite	eq
 8007788:	2301      	moveq	r3, #1
 800778a:	2300      	movne	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d103      	bne.n	80077a6 <HAL_UART_IRQHandler+0x17a>
 800779e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d04f      	beq.n	8007846 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa96 	bl	8007cd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d141      	bne.n	800783e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3314      	adds	r3, #20
 80077c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3314      	adds	r3, #20
 80077e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1d9      	bne.n	80077ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	2b00      	cmp	r3, #0
 800780c:	d013      	beq.n	8007836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	4a7d      	ldr	r2, [pc, #500]	; (8007a08 <HAL_UART_IRQHandler+0x3dc>)
 8007814:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	4618      	mov	r0, r3
 800781c:	f7fd fc93 	bl	8005146 <HAL_DMA_Abort_IT>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d016      	beq.n	8007854 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007834:	e00e      	b.n	8007854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f990 	bl	8007b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783c:	e00a      	b.n	8007854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f98c 	bl	8007b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007844:	e006      	b.n	8007854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f988 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007852:	e170      	b.n	8007b36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	bf00      	nop
    return;
 8007856:	e16e      	b.n	8007b36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	2b01      	cmp	r3, #1
 800785e:	f040 814a 	bne.w	8007af6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8143 	beq.w	8007af6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 813c 	beq.w	8007af6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60bb      	str	r3, [r7, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	f040 80b4 	bne.w	8007a0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8140 	beq.w	8007b3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078c2:	429a      	cmp	r2, r3
 80078c4:	f080 8139 	bcs.w	8007b3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078da:	f000 8088 	beq.w	80079ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	330c      	adds	r3, #12
 80078e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	330c      	adds	r3, #12
 8007906:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800790a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800790e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1d9      	bne.n	80078de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3314      	adds	r3, #20
 8007930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800793a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800793c:	f023 0301 	bic.w	r3, r3, #1
 8007940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3314      	adds	r3, #20
 800794a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800794e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e1      	bne.n	800792a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3314      	adds	r3, #20
 800796c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800797c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3314      	adds	r3, #20
 8007986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800798a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800798c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e3      	bne.n	8007966 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	330c      	adds	r3, #12
 80079b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079be:	f023 0310 	bic.w	r3, r3, #16
 80079c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80079d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e3      	bne.n	80079ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fd fb3c 	bl	8005066 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f8b6 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a04:	e099      	b.n	8007b3a <HAL_UART_IRQHandler+0x50e>
 8007a06:	bf00      	nop
 8007a08:	08007d9f 	.word	0x08007d9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 808b 	beq.w	8007b3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8086 	beq.w	8007b3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a56:	647a      	str	r2, [r7, #68]	; 0x44
 8007a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e3      	bne.n	8007a32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3314      	adds	r3, #20
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	623b      	str	r3, [r7, #32]
   return(result);
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3314      	adds	r3, #20
 8007a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e3      	bne.n	8007a6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	330c      	adds	r3, #12
 8007ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0310 	bic.w	r3, r3, #16
 8007ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	330c      	adds	r3, #12
 8007ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ad4:	61fa      	str	r2, [r7, #28]
 8007ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	69b9      	ldr	r1, [r7, #24]
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e3      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f83e 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007af4:	e023      	b.n	8007b3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_UART_IRQHandler+0x4ea>
 8007b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f959 	bl	8007dc6 <UART_Transmit_IT>
    return;
 8007b14:	e014      	b.n	8007b40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00e      	beq.n	8007b40 <HAL_UART_IRQHandler+0x514>
 8007b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d008      	beq.n	8007b40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f999 	bl	8007e66 <UART_EndTransmit_IT>
    return;
 8007b34:	e004      	b.n	8007b40 <HAL_UART_IRQHandler+0x514>
    return;
 8007b36:	bf00      	nop
 8007b38:	e002      	b.n	8007b40 <HAL_UART_IRQHandler+0x514>
      return;
 8007b3a:	bf00      	nop
 8007b3c:	e000      	b.n	8007b40 <HAL_UART_IRQHandler+0x514>
      return;
 8007b3e:	bf00      	nop
  }
}
 8007b40:	37e8      	adds	r7, #232	; 0xe8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop

08007b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b090      	sub	sp, #64	; 0x40
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	4613      	mov	r3, r2
 8007b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b98:	e050      	b.n	8007c3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba0:	d04c      	beq.n	8007c3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ba8:	f7fd f91c 	bl	8004de4 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d241      	bcs.n	8007c3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	330c      	adds	r3, #12
 8007bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bd8:	637a      	str	r2, [r7, #52]	; 0x34
 8007bda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007be0:	e841 2300 	strex	r3, r2, [r1]
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e5      	bne.n	8007bb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3314      	adds	r3, #20
 8007bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3314      	adds	r3, #20
 8007c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c0c:	623a      	str	r2, [r7, #32]
 8007c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	69f9      	ldr	r1, [r7, #28]
 8007c12:	6a3a      	ldr	r2, [r7, #32]
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e5      	bne.n	8007bec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e00f      	b.n	8007c5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4013      	ands	r3, r2
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2301      	moveq	r3, #1
 8007c4e:	2300      	movne	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d09f      	beq.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3740      	adds	r7, #64	; 0x40
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	88fa      	ldrh	r2, [r7, #6]
 8007c7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	88fa      	ldrh	r2, [r7, #6]
 8007c82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2222      	movs	r2, #34	; 0x22
 8007c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ca8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0201 	orr.w	r2, r2, #1
 8007cb8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0220 	orr.w	r2, r2, #32
 8007cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b095      	sub	sp, #84	; 0x54
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d00:	643a      	str	r2, [r7, #64]	; 0x40
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e5      	bne.n	8007ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3314      	adds	r3, #20
 8007d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e5      	bne.n	8007d14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d119      	bne.n	8007d84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	330c      	adds	r3, #12
 8007d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f023 0310 	bic.w	r3, r3, #16
 8007d66:	647b      	str	r3, [r7, #68]	; 0x44
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d70:	61ba      	str	r2, [r7, #24]
 8007d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6979      	ldr	r1, [r7, #20]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e5      	bne.n	8007d50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d92:	bf00      	nop
 8007d94:	3754      	adds	r7, #84	; 0x54
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff fecf 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b21      	cmp	r3, #33	; 0x21
 8007dd8:	d13e      	bne.n	8007e58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de2:	d114      	bne.n	8007e0e <UART_Transmit_IT+0x48>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d110      	bne.n	8007e0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	1c9a      	adds	r2, r3, #2
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	621a      	str	r2, [r3, #32]
 8007e0c:	e008      	b.n	8007e20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	1c59      	adds	r1, r3, #1
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6211      	str	r1, [r2, #32]
 8007e18:	781a      	ldrb	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10f      	bne.n	8007e54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff fe5e 	bl	8007b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b08c      	sub	sp, #48	; 0x30
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b22      	cmp	r3, #34	; 0x22
 8007ea8:	f040 80ab 	bne.w	8008002 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb4:	d117      	bne.n	8007ee6 <UART_Receive_IT+0x50>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d113      	bne.n	8007ee6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	1c9a      	adds	r2, r3, #2
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8007ee4:	e026      	b.n	8007f34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef8:	d007      	beq.n	8007f0a <UART_Receive_IT+0x74>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <UART_Receive_IT+0x82>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	e008      	b.n	8007f2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	4619      	mov	r1, r3
 8007f42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d15a      	bne.n	8007ffe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0220 	bic.w	r2, r2, #32
 8007f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695a      	ldr	r2, [r3, #20]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d135      	bne.n	8007ff4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	330c      	adds	r3, #12
 8007f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f023 0310 	bic.w	r3, r3, #16
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	330c      	adds	r3, #12
 8007fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fae:	623a      	str	r2, [r7, #32]
 8007fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	69f9      	ldr	r1, [r7, #28]
 8007fb4:	6a3a      	ldr	r2, [r7, #32]
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e5      	bne.n	8007f8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b10      	cmp	r3, #16
 8007fce:	d10a      	bne.n	8007fe6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff fdbf 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
 8007ff2:	e002      	b.n	8007ffa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7fa fe19 	bl	8002c2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e002      	b.n	8008004 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e000      	b.n	8008004 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008002:	2302      	movs	r3, #2
  }
}
 8008004:	4618      	mov	r0, r3
 8008006:	3730      	adds	r7, #48	; 0x30
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	b09f      	sub	sp, #124	; 0x7c
 8008012:	af00      	add	r7, sp, #0
 8008014:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008022:	68d9      	ldr	r1, [r3, #12]
 8008024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	ea40 0301 	orr.w	r3, r0, r1
 800802c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800802e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	431a      	orrs	r2, r3
 8008038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	431a      	orrs	r2, r3
 800803e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	4313      	orrs	r3, r2
 8008044:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008050:	f021 010c 	bic.w	r1, r1, #12
 8008054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800805a:	430b      	orrs	r3, r1
 800805c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800805e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806a:	6999      	ldr	r1, [r3, #24]
 800806c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	ea40 0301 	orr.w	r3, r0, r1
 8008074:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4bc5      	ldr	r3, [pc, #788]	; (8008390 <UART_SetConfig+0x384>)
 800807c:	429a      	cmp	r2, r3
 800807e:	d004      	beq.n	800808a <UART_SetConfig+0x7e>
 8008080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4bc3      	ldr	r3, [pc, #780]	; (8008394 <UART_SetConfig+0x388>)
 8008086:	429a      	cmp	r2, r3
 8008088:	d103      	bne.n	8008092 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800808a:	f7fd fbb5 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 800808e:	6778      	str	r0, [r7, #116]	; 0x74
 8008090:	e002      	b.n	8008098 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008092:	f7fd fb9d 	bl	80057d0 <HAL_RCC_GetPCLK1Freq>
 8008096:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a0:	f040 80b6 	bne.w	8008210 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a6:	461c      	mov	r4, r3
 80080a8:	f04f 0500 	mov.w	r5, #0
 80080ac:	4622      	mov	r2, r4
 80080ae:	462b      	mov	r3, r5
 80080b0:	1891      	adds	r1, r2, r2
 80080b2:	6439      	str	r1, [r7, #64]	; 0x40
 80080b4:	415b      	adcs	r3, r3
 80080b6:	647b      	str	r3, [r7, #68]	; 0x44
 80080b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080bc:	1912      	adds	r2, r2, r4
 80080be:	eb45 0303 	adc.w	r3, r5, r3
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f04f 0100 	mov.w	r1, #0
 80080ca:	00d9      	lsls	r1, r3, #3
 80080cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080d0:	00d0      	lsls	r0, r2, #3
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	1911      	adds	r1, r2, r4
 80080d8:	6639      	str	r1, [r7, #96]	; 0x60
 80080da:	416b      	adcs	r3, r5
 80080dc:	667b      	str	r3, [r7, #100]	; 0x64
 80080de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	1891      	adds	r1, r2, r2
 80080ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80080ec:	415b      	adcs	r3, r3
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80080f8:	f7f8 fdc6 	bl	8000c88 <__aeabi_uldivmod>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4ba5      	ldr	r3, [pc, #660]	; (8008398 <UART_SetConfig+0x38c>)
 8008102:	fba3 2302 	umull	r2, r3, r3, r2
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	011e      	lsls	r6, r3, #4
 800810a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800810c:	461c      	mov	r4, r3
 800810e:	f04f 0500 	mov.w	r5, #0
 8008112:	4622      	mov	r2, r4
 8008114:	462b      	mov	r3, r5
 8008116:	1891      	adds	r1, r2, r2
 8008118:	6339      	str	r1, [r7, #48]	; 0x30
 800811a:	415b      	adcs	r3, r3
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
 800811e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008122:	1912      	adds	r2, r2, r4
 8008124:	eb45 0303 	adc.w	r3, r5, r3
 8008128:	f04f 0000 	mov.w	r0, #0
 800812c:	f04f 0100 	mov.w	r1, #0
 8008130:	00d9      	lsls	r1, r3, #3
 8008132:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008136:	00d0      	lsls	r0, r2, #3
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	1911      	adds	r1, r2, r4
 800813e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008140:	416b      	adcs	r3, r5
 8008142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	461a      	mov	r2, r3
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	1891      	adds	r1, r2, r2
 8008150:	62b9      	str	r1, [r7, #40]	; 0x28
 8008152:	415b      	adcs	r3, r3
 8008154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800815a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800815e:	f7f8 fd93 	bl	8000c88 <__aeabi_uldivmod>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4b8c      	ldr	r3, [pc, #560]	; (8008398 <UART_SetConfig+0x38c>)
 8008168:	fba3 1302 	umull	r1, r3, r3, r2
 800816c:	095b      	lsrs	r3, r3, #5
 800816e:	2164      	movs	r1, #100	; 0x64
 8008170:	fb01 f303 	mul.w	r3, r1, r3
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	3332      	adds	r3, #50	; 0x32
 800817a:	4a87      	ldr	r2, [pc, #540]	; (8008398 <UART_SetConfig+0x38c>)
 800817c:	fba2 2303 	umull	r2, r3, r2, r3
 8008180:	095b      	lsrs	r3, r3, #5
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008188:	441e      	add	r6, r3
 800818a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800818c:	4618      	mov	r0, r3
 800818e:	f04f 0100 	mov.w	r1, #0
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	1894      	adds	r4, r2, r2
 8008198:	623c      	str	r4, [r7, #32]
 800819a:	415b      	adcs	r3, r3
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
 800819e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081a2:	1812      	adds	r2, r2, r0
 80081a4:	eb41 0303 	adc.w	r3, r1, r3
 80081a8:	f04f 0400 	mov.w	r4, #0
 80081ac:	f04f 0500 	mov.w	r5, #0
 80081b0:	00dd      	lsls	r5, r3, #3
 80081b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081b6:	00d4      	lsls	r4, r2, #3
 80081b8:	4622      	mov	r2, r4
 80081ba:	462b      	mov	r3, r5
 80081bc:	1814      	adds	r4, r2, r0
 80081be:	653c      	str	r4, [r7, #80]	; 0x50
 80081c0:	414b      	adcs	r3, r1
 80081c2:	657b      	str	r3, [r7, #84]	; 0x54
 80081c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	461a      	mov	r2, r3
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	1891      	adds	r1, r2, r2
 80081d0:	61b9      	str	r1, [r7, #24]
 80081d2:	415b      	adcs	r3, r3
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80081de:	f7f8 fd53 	bl	8000c88 <__aeabi_uldivmod>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4b6c      	ldr	r3, [pc, #432]	; (8008398 <UART_SetConfig+0x38c>)
 80081e8:	fba3 1302 	umull	r1, r3, r3, r2
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	2164      	movs	r1, #100	; 0x64
 80081f0:	fb01 f303 	mul.w	r3, r1, r3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	3332      	adds	r3, #50	; 0x32
 80081fa:	4a67      	ldr	r2, [pc, #412]	; (8008398 <UART_SetConfig+0x38c>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	095b      	lsrs	r3, r3, #5
 8008202:	f003 0207 	and.w	r2, r3, #7
 8008206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4432      	add	r2, r6
 800820c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800820e:	e0b9      	b.n	8008384 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008212:	461c      	mov	r4, r3
 8008214:	f04f 0500 	mov.w	r5, #0
 8008218:	4622      	mov	r2, r4
 800821a:	462b      	mov	r3, r5
 800821c:	1891      	adds	r1, r2, r2
 800821e:	6139      	str	r1, [r7, #16]
 8008220:	415b      	adcs	r3, r3
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008228:	1912      	adds	r2, r2, r4
 800822a:	eb45 0303 	adc.w	r3, r5, r3
 800822e:	f04f 0000 	mov.w	r0, #0
 8008232:	f04f 0100 	mov.w	r1, #0
 8008236:	00d9      	lsls	r1, r3, #3
 8008238:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800823c:	00d0      	lsls	r0, r2, #3
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	eb12 0804 	adds.w	r8, r2, r4
 8008246:	eb43 0905 	adc.w	r9, r3, r5
 800824a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	4618      	mov	r0, r3
 8008250:	f04f 0100 	mov.w	r1, #0
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	008b      	lsls	r3, r1, #2
 800825e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008262:	0082      	lsls	r2, r0, #2
 8008264:	4640      	mov	r0, r8
 8008266:	4649      	mov	r1, r9
 8008268:	f7f8 fd0e 	bl	8000c88 <__aeabi_uldivmod>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4b49      	ldr	r3, [pc, #292]	; (8008398 <UART_SetConfig+0x38c>)
 8008272:	fba3 2302 	umull	r2, r3, r3, r2
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	011e      	lsls	r6, r3, #4
 800827a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800827c:	4618      	mov	r0, r3
 800827e:	f04f 0100 	mov.w	r1, #0
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	1894      	adds	r4, r2, r2
 8008288:	60bc      	str	r4, [r7, #8]
 800828a:	415b      	adcs	r3, r3
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008292:	1812      	adds	r2, r2, r0
 8008294:	eb41 0303 	adc.w	r3, r1, r3
 8008298:	f04f 0400 	mov.w	r4, #0
 800829c:	f04f 0500 	mov.w	r5, #0
 80082a0:	00dd      	lsls	r5, r3, #3
 80082a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082a6:	00d4      	lsls	r4, r2, #3
 80082a8:	4622      	mov	r2, r4
 80082aa:	462b      	mov	r3, r5
 80082ac:	1814      	adds	r4, r2, r0
 80082ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80082b0:	414b      	adcs	r3, r1
 80082b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f04f 0100 	mov.w	r1, #0
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	008b      	lsls	r3, r1, #2
 80082c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082cc:	0082      	lsls	r2, r0, #2
 80082ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80082d2:	f7f8 fcd9 	bl	8000c88 <__aeabi_uldivmod>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4b2f      	ldr	r3, [pc, #188]	; (8008398 <UART_SetConfig+0x38c>)
 80082dc:	fba3 1302 	umull	r1, r3, r3, r2
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	2164      	movs	r1, #100	; 0x64
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	3332      	adds	r3, #50	; 0x32
 80082ee:	4a2a      	ldr	r2, [pc, #168]	; (8008398 <UART_SetConfig+0x38c>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082fa:	441e      	add	r6, r3
 80082fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082fe:	4618      	mov	r0, r3
 8008300:	f04f 0100 	mov.w	r1, #0
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	1894      	adds	r4, r2, r2
 800830a:	603c      	str	r4, [r7, #0]
 800830c:	415b      	adcs	r3, r3
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008314:	1812      	adds	r2, r2, r0
 8008316:	eb41 0303 	adc.w	r3, r1, r3
 800831a:	f04f 0400 	mov.w	r4, #0
 800831e:	f04f 0500 	mov.w	r5, #0
 8008322:	00dd      	lsls	r5, r3, #3
 8008324:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008328:	00d4      	lsls	r4, r2, #3
 800832a:	4622      	mov	r2, r4
 800832c:	462b      	mov	r3, r5
 800832e:	eb12 0a00 	adds.w	sl, r2, r0
 8008332:	eb43 0b01 	adc.w	fp, r3, r1
 8008336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	4618      	mov	r0, r3
 800833c:	f04f 0100 	mov.w	r1, #0
 8008340:	f04f 0200 	mov.w	r2, #0
 8008344:	f04f 0300 	mov.w	r3, #0
 8008348:	008b      	lsls	r3, r1, #2
 800834a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800834e:	0082      	lsls	r2, r0, #2
 8008350:	4650      	mov	r0, sl
 8008352:	4659      	mov	r1, fp
 8008354:	f7f8 fc98 	bl	8000c88 <__aeabi_uldivmod>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4b0e      	ldr	r3, [pc, #56]	; (8008398 <UART_SetConfig+0x38c>)
 800835e:	fba3 1302 	umull	r1, r3, r3, r2
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	2164      	movs	r1, #100	; 0x64
 8008366:	fb01 f303 	mul.w	r3, r1, r3
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	3332      	adds	r3, #50	; 0x32
 8008370:	4a09      	ldr	r2, [pc, #36]	; (8008398 <UART_SetConfig+0x38c>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	095b      	lsrs	r3, r3, #5
 8008378:	f003 020f 	and.w	r2, r3, #15
 800837c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4432      	add	r2, r6
 8008382:	609a      	str	r2, [r3, #8]
}
 8008384:	bf00      	nop
 8008386:	377c      	adds	r7, #124	; 0x7c
 8008388:	46bd      	mov	sp, r7
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	bf00      	nop
 8008390:	40011000 	.word	0x40011000
 8008394:	40011400 	.word	0x40011400
 8008398:	51eb851f 	.word	0x51eb851f

0800839c <calloc>:
 800839c:	4b02      	ldr	r3, [pc, #8]	; (80083a8 <calloc+0xc>)
 800839e:	460a      	mov	r2, r1
 80083a0:	4601      	mov	r1, r0
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	f000 b83c 	b.w	8008420 <_calloc_r>
 80083a8:	2000000c 	.word	0x2000000c

080083ac <__errno>:
 80083ac:	4b01      	ldr	r3, [pc, #4]	; (80083b4 <__errno+0x8>)
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	2000000c 	.word	0x2000000c

080083b8 <__libc_init_array>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	4d0d      	ldr	r5, [pc, #52]	; (80083f0 <__libc_init_array+0x38>)
 80083bc:	4c0d      	ldr	r4, [pc, #52]	; (80083f4 <__libc_init_array+0x3c>)
 80083be:	1b64      	subs	r4, r4, r5
 80083c0:	10a4      	asrs	r4, r4, #2
 80083c2:	2600      	movs	r6, #0
 80083c4:	42a6      	cmp	r6, r4
 80083c6:	d109      	bne.n	80083dc <__libc_init_array+0x24>
 80083c8:	4d0b      	ldr	r5, [pc, #44]	; (80083f8 <__libc_init_array+0x40>)
 80083ca:	4c0c      	ldr	r4, [pc, #48]	; (80083fc <__libc_init_array+0x44>)
 80083cc:	f004 faae 	bl	800c92c <_init>
 80083d0:	1b64      	subs	r4, r4, r5
 80083d2:	10a4      	asrs	r4, r4, #2
 80083d4:	2600      	movs	r6, #0
 80083d6:	42a6      	cmp	r6, r4
 80083d8:	d105      	bne.n	80083e6 <__libc_init_array+0x2e>
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e0:	4798      	blx	r3
 80083e2:	3601      	adds	r6, #1
 80083e4:	e7ee      	b.n	80083c4 <__libc_init_array+0xc>
 80083e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ea:	4798      	blx	r3
 80083ec:	3601      	adds	r6, #1
 80083ee:	e7f2      	b.n	80083d6 <__libc_init_array+0x1e>
 80083f0:	0800d188 	.word	0x0800d188
 80083f4:	0800d188 	.word	0x0800d188
 80083f8:	0800d188 	.word	0x0800d188
 80083fc:	0800d18c 	.word	0x0800d18c

08008400 <malloc>:
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <malloc+0xc>)
 8008402:	4601      	mov	r1, r0
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	f000 b86b 	b.w	80084e0 <_malloc_r>
 800840a:	bf00      	nop
 800840c:	2000000c 	.word	0x2000000c

08008410 <memset>:
 8008410:	4402      	add	r2, r0
 8008412:	4603      	mov	r3, r0
 8008414:	4293      	cmp	r3, r2
 8008416:	d100      	bne.n	800841a <memset+0xa>
 8008418:	4770      	bx	lr
 800841a:	f803 1b01 	strb.w	r1, [r3], #1
 800841e:	e7f9      	b.n	8008414 <memset+0x4>

08008420 <_calloc_r>:
 8008420:	b513      	push	{r0, r1, r4, lr}
 8008422:	434a      	muls	r2, r1
 8008424:	4611      	mov	r1, r2
 8008426:	9201      	str	r2, [sp, #4]
 8008428:	f000 f85a 	bl	80084e0 <_malloc_r>
 800842c:	4604      	mov	r4, r0
 800842e:	b118      	cbz	r0, 8008438 <_calloc_r+0x18>
 8008430:	9a01      	ldr	r2, [sp, #4]
 8008432:	2100      	movs	r1, #0
 8008434:	f7ff ffec 	bl	8008410 <memset>
 8008438:	4620      	mov	r0, r4
 800843a:	b002      	add	sp, #8
 800843c:	bd10      	pop	{r4, pc}
	...

08008440 <_free_r>:
 8008440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008442:	2900      	cmp	r1, #0
 8008444:	d048      	beq.n	80084d8 <_free_r+0x98>
 8008446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844a:	9001      	str	r0, [sp, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f1a1 0404 	sub.w	r4, r1, #4
 8008452:	bfb8      	it	lt
 8008454:	18e4      	addlt	r4, r4, r3
 8008456:	f001 ff11 	bl	800a27c <__malloc_lock>
 800845a:	4a20      	ldr	r2, [pc, #128]	; (80084dc <_free_r+0x9c>)
 800845c:	9801      	ldr	r0, [sp, #4]
 800845e:	6813      	ldr	r3, [r2, #0]
 8008460:	4615      	mov	r5, r2
 8008462:	b933      	cbnz	r3, 8008472 <_free_r+0x32>
 8008464:	6063      	str	r3, [r4, #4]
 8008466:	6014      	str	r4, [r2, #0]
 8008468:	b003      	add	sp, #12
 800846a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800846e:	f001 bf0b 	b.w	800a288 <__malloc_unlock>
 8008472:	42a3      	cmp	r3, r4
 8008474:	d90b      	bls.n	800848e <_free_r+0x4e>
 8008476:	6821      	ldr	r1, [r4, #0]
 8008478:	1862      	adds	r2, r4, r1
 800847a:	4293      	cmp	r3, r2
 800847c:	bf04      	itt	eq
 800847e:	681a      	ldreq	r2, [r3, #0]
 8008480:	685b      	ldreq	r3, [r3, #4]
 8008482:	6063      	str	r3, [r4, #4]
 8008484:	bf04      	itt	eq
 8008486:	1852      	addeq	r2, r2, r1
 8008488:	6022      	streq	r2, [r4, #0]
 800848a:	602c      	str	r4, [r5, #0]
 800848c:	e7ec      	b.n	8008468 <_free_r+0x28>
 800848e:	461a      	mov	r2, r3
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	b10b      	cbz	r3, 8008498 <_free_r+0x58>
 8008494:	42a3      	cmp	r3, r4
 8008496:	d9fa      	bls.n	800848e <_free_r+0x4e>
 8008498:	6811      	ldr	r1, [r2, #0]
 800849a:	1855      	adds	r5, r2, r1
 800849c:	42a5      	cmp	r5, r4
 800849e:	d10b      	bne.n	80084b8 <_free_r+0x78>
 80084a0:	6824      	ldr	r4, [r4, #0]
 80084a2:	4421      	add	r1, r4
 80084a4:	1854      	adds	r4, r2, r1
 80084a6:	42a3      	cmp	r3, r4
 80084a8:	6011      	str	r1, [r2, #0]
 80084aa:	d1dd      	bne.n	8008468 <_free_r+0x28>
 80084ac:	681c      	ldr	r4, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	6053      	str	r3, [r2, #4]
 80084b2:	4421      	add	r1, r4
 80084b4:	6011      	str	r1, [r2, #0]
 80084b6:	e7d7      	b.n	8008468 <_free_r+0x28>
 80084b8:	d902      	bls.n	80084c0 <_free_r+0x80>
 80084ba:	230c      	movs	r3, #12
 80084bc:	6003      	str	r3, [r0, #0]
 80084be:	e7d3      	b.n	8008468 <_free_r+0x28>
 80084c0:	6825      	ldr	r5, [r4, #0]
 80084c2:	1961      	adds	r1, r4, r5
 80084c4:	428b      	cmp	r3, r1
 80084c6:	bf04      	itt	eq
 80084c8:	6819      	ldreq	r1, [r3, #0]
 80084ca:	685b      	ldreq	r3, [r3, #4]
 80084cc:	6063      	str	r3, [r4, #4]
 80084ce:	bf04      	itt	eq
 80084d0:	1949      	addeq	r1, r1, r5
 80084d2:	6021      	streq	r1, [r4, #0]
 80084d4:	6054      	str	r4, [r2, #4]
 80084d6:	e7c7      	b.n	8008468 <_free_r+0x28>
 80084d8:	b003      	add	sp, #12
 80084da:	bd30      	pop	{r4, r5, pc}
 80084dc:	20000200 	.word	0x20000200

080084e0 <_malloc_r>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	1ccd      	adds	r5, r1, #3
 80084e4:	f025 0503 	bic.w	r5, r5, #3
 80084e8:	3508      	adds	r5, #8
 80084ea:	2d0c      	cmp	r5, #12
 80084ec:	bf38      	it	cc
 80084ee:	250c      	movcc	r5, #12
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	4606      	mov	r6, r0
 80084f4:	db01      	blt.n	80084fa <_malloc_r+0x1a>
 80084f6:	42a9      	cmp	r1, r5
 80084f8:	d903      	bls.n	8008502 <_malloc_r+0x22>
 80084fa:	230c      	movs	r3, #12
 80084fc:	6033      	str	r3, [r6, #0]
 80084fe:	2000      	movs	r0, #0
 8008500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008502:	f001 febb 	bl	800a27c <__malloc_lock>
 8008506:	4921      	ldr	r1, [pc, #132]	; (800858c <_malloc_r+0xac>)
 8008508:	680a      	ldr	r2, [r1, #0]
 800850a:	4614      	mov	r4, r2
 800850c:	b99c      	cbnz	r4, 8008536 <_malloc_r+0x56>
 800850e:	4f20      	ldr	r7, [pc, #128]	; (8008590 <_malloc_r+0xb0>)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	b923      	cbnz	r3, 800851e <_malloc_r+0x3e>
 8008514:	4621      	mov	r1, r4
 8008516:	4630      	mov	r0, r6
 8008518:	f000 fd34 	bl	8008f84 <_sbrk_r>
 800851c:	6038      	str	r0, [r7, #0]
 800851e:	4629      	mov	r1, r5
 8008520:	4630      	mov	r0, r6
 8008522:	f000 fd2f 	bl	8008f84 <_sbrk_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d123      	bne.n	8008572 <_malloc_r+0x92>
 800852a:	230c      	movs	r3, #12
 800852c:	6033      	str	r3, [r6, #0]
 800852e:	4630      	mov	r0, r6
 8008530:	f001 feaa 	bl	800a288 <__malloc_unlock>
 8008534:	e7e3      	b.n	80084fe <_malloc_r+0x1e>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	1b5b      	subs	r3, r3, r5
 800853a:	d417      	bmi.n	800856c <_malloc_r+0x8c>
 800853c:	2b0b      	cmp	r3, #11
 800853e:	d903      	bls.n	8008548 <_malloc_r+0x68>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	441c      	add	r4, r3
 8008544:	6025      	str	r5, [r4, #0]
 8008546:	e004      	b.n	8008552 <_malloc_r+0x72>
 8008548:	6863      	ldr	r3, [r4, #4]
 800854a:	42a2      	cmp	r2, r4
 800854c:	bf0c      	ite	eq
 800854e:	600b      	streq	r3, [r1, #0]
 8008550:	6053      	strne	r3, [r2, #4]
 8008552:	4630      	mov	r0, r6
 8008554:	f001 fe98 	bl	800a288 <__malloc_unlock>
 8008558:	f104 000b 	add.w	r0, r4, #11
 800855c:	1d23      	adds	r3, r4, #4
 800855e:	f020 0007 	bic.w	r0, r0, #7
 8008562:	1ac2      	subs	r2, r0, r3
 8008564:	d0cc      	beq.n	8008500 <_malloc_r+0x20>
 8008566:	1a1b      	subs	r3, r3, r0
 8008568:	50a3      	str	r3, [r4, r2]
 800856a:	e7c9      	b.n	8008500 <_malloc_r+0x20>
 800856c:	4622      	mov	r2, r4
 800856e:	6864      	ldr	r4, [r4, #4]
 8008570:	e7cc      	b.n	800850c <_malloc_r+0x2c>
 8008572:	1cc4      	adds	r4, r0, #3
 8008574:	f024 0403 	bic.w	r4, r4, #3
 8008578:	42a0      	cmp	r0, r4
 800857a:	d0e3      	beq.n	8008544 <_malloc_r+0x64>
 800857c:	1a21      	subs	r1, r4, r0
 800857e:	4630      	mov	r0, r6
 8008580:	f000 fd00 	bl	8008f84 <_sbrk_r>
 8008584:	3001      	adds	r0, #1
 8008586:	d1dd      	bne.n	8008544 <_malloc_r+0x64>
 8008588:	e7cf      	b.n	800852a <_malloc_r+0x4a>
 800858a:	bf00      	nop
 800858c:	20000200 	.word	0x20000200
 8008590:	20000204 	.word	0x20000204

08008594 <__cvt>:
 8008594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	ec55 4b10 	vmov	r4, r5, d0
 800859c:	2d00      	cmp	r5, #0
 800859e:	460e      	mov	r6, r1
 80085a0:	4619      	mov	r1, r3
 80085a2:	462b      	mov	r3, r5
 80085a4:	bfbb      	ittet	lt
 80085a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085aa:	461d      	movlt	r5, r3
 80085ac:	2300      	movge	r3, #0
 80085ae:	232d      	movlt	r3, #45	; 0x2d
 80085b0:	700b      	strb	r3, [r1, #0]
 80085b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085b8:	4691      	mov	r9, r2
 80085ba:	f023 0820 	bic.w	r8, r3, #32
 80085be:	bfbc      	itt	lt
 80085c0:	4622      	movlt	r2, r4
 80085c2:	4614      	movlt	r4, r2
 80085c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085c8:	d005      	beq.n	80085d6 <__cvt+0x42>
 80085ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085ce:	d100      	bne.n	80085d2 <__cvt+0x3e>
 80085d0:	3601      	adds	r6, #1
 80085d2:	2102      	movs	r1, #2
 80085d4:	e000      	b.n	80085d8 <__cvt+0x44>
 80085d6:	2103      	movs	r1, #3
 80085d8:	ab03      	add	r3, sp, #12
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	ab02      	add	r3, sp, #8
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	ec45 4b10 	vmov	d0, r4, r5
 80085e4:	4653      	mov	r3, sl
 80085e6:	4632      	mov	r2, r6
 80085e8:	f000 fe2a 	bl	8009240 <_dtoa_r>
 80085ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085f0:	4607      	mov	r7, r0
 80085f2:	d102      	bne.n	80085fa <__cvt+0x66>
 80085f4:	f019 0f01 	tst.w	r9, #1
 80085f8:	d022      	beq.n	8008640 <__cvt+0xac>
 80085fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085fe:	eb07 0906 	add.w	r9, r7, r6
 8008602:	d110      	bne.n	8008626 <__cvt+0x92>
 8008604:	783b      	ldrb	r3, [r7, #0]
 8008606:	2b30      	cmp	r3, #48	; 0x30
 8008608:	d10a      	bne.n	8008620 <__cvt+0x8c>
 800860a:	2200      	movs	r2, #0
 800860c:	2300      	movs	r3, #0
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f8 fa79 	bl	8000b08 <__aeabi_dcmpeq>
 8008616:	b918      	cbnz	r0, 8008620 <__cvt+0x8c>
 8008618:	f1c6 0601 	rsb	r6, r6, #1
 800861c:	f8ca 6000 	str.w	r6, [sl]
 8008620:	f8da 3000 	ldr.w	r3, [sl]
 8008624:	4499      	add	r9, r3
 8008626:	2200      	movs	r2, #0
 8008628:	2300      	movs	r3, #0
 800862a:	4620      	mov	r0, r4
 800862c:	4629      	mov	r1, r5
 800862e:	f7f8 fa6b 	bl	8000b08 <__aeabi_dcmpeq>
 8008632:	b108      	cbz	r0, 8008638 <__cvt+0xa4>
 8008634:	f8cd 900c 	str.w	r9, [sp, #12]
 8008638:	2230      	movs	r2, #48	; 0x30
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	454b      	cmp	r3, r9
 800863e:	d307      	bcc.n	8008650 <__cvt+0xbc>
 8008640:	9b03      	ldr	r3, [sp, #12]
 8008642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008644:	1bdb      	subs	r3, r3, r7
 8008646:	4638      	mov	r0, r7
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	b004      	add	sp, #16
 800864c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008650:	1c59      	adds	r1, r3, #1
 8008652:	9103      	str	r1, [sp, #12]
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	e7f0      	b.n	800863a <__cvt+0xa6>

08008658 <__exponent>:
 8008658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800865a:	4603      	mov	r3, r0
 800865c:	2900      	cmp	r1, #0
 800865e:	bfb8      	it	lt
 8008660:	4249      	neglt	r1, r1
 8008662:	f803 2b02 	strb.w	r2, [r3], #2
 8008666:	bfb4      	ite	lt
 8008668:	222d      	movlt	r2, #45	; 0x2d
 800866a:	222b      	movge	r2, #43	; 0x2b
 800866c:	2909      	cmp	r1, #9
 800866e:	7042      	strb	r2, [r0, #1]
 8008670:	dd2a      	ble.n	80086c8 <__exponent+0x70>
 8008672:	f10d 0407 	add.w	r4, sp, #7
 8008676:	46a4      	mov	ip, r4
 8008678:	270a      	movs	r7, #10
 800867a:	46a6      	mov	lr, r4
 800867c:	460a      	mov	r2, r1
 800867e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008682:	fb07 1516 	mls	r5, r7, r6, r1
 8008686:	3530      	adds	r5, #48	; 0x30
 8008688:	2a63      	cmp	r2, #99	; 0x63
 800868a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800868e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008692:	4631      	mov	r1, r6
 8008694:	dcf1      	bgt.n	800867a <__exponent+0x22>
 8008696:	3130      	adds	r1, #48	; 0x30
 8008698:	f1ae 0502 	sub.w	r5, lr, #2
 800869c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80086a0:	1c44      	adds	r4, r0, #1
 80086a2:	4629      	mov	r1, r5
 80086a4:	4561      	cmp	r1, ip
 80086a6:	d30a      	bcc.n	80086be <__exponent+0x66>
 80086a8:	f10d 0209 	add.w	r2, sp, #9
 80086ac:	eba2 020e 	sub.w	r2, r2, lr
 80086b0:	4565      	cmp	r5, ip
 80086b2:	bf88      	it	hi
 80086b4:	2200      	movhi	r2, #0
 80086b6:	4413      	add	r3, r2
 80086b8:	1a18      	subs	r0, r3, r0
 80086ba:	b003      	add	sp, #12
 80086bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086c6:	e7ed      	b.n	80086a4 <__exponent+0x4c>
 80086c8:	2330      	movs	r3, #48	; 0x30
 80086ca:	3130      	adds	r1, #48	; 0x30
 80086cc:	7083      	strb	r3, [r0, #2]
 80086ce:	70c1      	strb	r1, [r0, #3]
 80086d0:	1d03      	adds	r3, r0, #4
 80086d2:	e7f1      	b.n	80086b8 <__exponent+0x60>

080086d4 <_printf_float>:
 80086d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d8:	ed2d 8b02 	vpush	{d8}
 80086dc:	b08d      	sub	sp, #52	; 0x34
 80086de:	460c      	mov	r4, r1
 80086e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086e4:	4616      	mov	r6, r2
 80086e6:	461f      	mov	r7, r3
 80086e8:	4605      	mov	r5, r0
 80086ea:	f001 fd4d 	bl	800a188 <_localeconv_r>
 80086ee:	f8d0 a000 	ldr.w	sl, [r0]
 80086f2:	4650      	mov	r0, sl
 80086f4:	f7f7 fd8c 	bl	8000210 <strlen>
 80086f8:	2300      	movs	r3, #0
 80086fa:	930a      	str	r3, [sp, #40]	; 0x28
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	9305      	str	r3, [sp, #20]
 8008700:	f8d8 3000 	ldr.w	r3, [r8]
 8008704:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008708:	3307      	adds	r3, #7
 800870a:	f023 0307 	bic.w	r3, r3, #7
 800870e:	f103 0208 	add.w	r2, r3, #8
 8008712:	f8c8 2000 	str.w	r2, [r8]
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800871e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008726:	9307      	str	r3, [sp, #28]
 8008728:	f8cd 8018 	str.w	r8, [sp, #24]
 800872c:	ee08 0a10 	vmov	s16, r0
 8008730:	4b9f      	ldr	r3, [pc, #636]	; (80089b0 <_printf_float+0x2dc>)
 8008732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800873a:	f7f8 fa17 	bl	8000b6c <__aeabi_dcmpun>
 800873e:	bb88      	cbnz	r0, 80087a4 <_printf_float+0xd0>
 8008740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008744:	4b9a      	ldr	r3, [pc, #616]	; (80089b0 <_printf_float+0x2dc>)
 8008746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800874a:	f7f8 f9f1 	bl	8000b30 <__aeabi_dcmple>
 800874e:	bb48      	cbnz	r0, 80087a4 <_printf_float+0xd0>
 8008750:	2200      	movs	r2, #0
 8008752:	2300      	movs	r3, #0
 8008754:	4640      	mov	r0, r8
 8008756:	4649      	mov	r1, r9
 8008758:	f7f8 f9e0 	bl	8000b1c <__aeabi_dcmplt>
 800875c:	b110      	cbz	r0, 8008764 <_printf_float+0x90>
 800875e:	232d      	movs	r3, #45	; 0x2d
 8008760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008764:	4b93      	ldr	r3, [pc, #588]	; (80089b4 <_printf_float+0x2e0>)
 8008766:	4894      	ldr	r0, [pc, #592]	; (80089b8 <_printf_float+0x2e4>)
 8008768:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800876c:	bf94      	ite	ls
 800876e:	4698      	movls	r8, r3
 8008770:	4680      	movhi	r8, r0
 8008772:	2303      	movs	r3, #3
 8008774:	6123      	str	r3, [r4, #16]
 8008776:	9b05      	ldr	r3, [sp, #20]
 8008778:	f023 0204 	bic.w	r2, r3, #4
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	f04f 0900 	mov.w	r9, #0
 8008782:	9700      	str	r7, [sp, #0]
 8008784:	4633      	mov	r3, r6
 8008786:	aa0b      	add	r2, sp, #44	; 0x2c
 8008788:	4621      	mov	r1, r4
 800878a:	4628      	mov	r0, r5
 800878c:	f000 f9d8 	bl	8008b40 <_printf_common>
 8008790:	3001      	adds	r0, #1
 8008792:	f040 8090 	bne.w	80088b6 <_printf_float+0x1e2>
 8008796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800879a:	b00d      	add	sp, #52	; 0x34
 800879c:	ecbd 8b02 	vpop	{d8}
 80087a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a4:	4642      	mov	r2, r8
 80087a6:	464b      	mov	r3, r9
 80087a8:	4640      	mov	r0, r8
 80087aa:	4649      	mov	r1, r9
 80087ac:	f7f8 f9de 	bl	8000b6c <__aeabi_dcmpun>
 80087b0:	b140      	cbz	r0, 80087c4 <_printf_float+0xf0>
 80087b2:	464b      	mov	r3, r9
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfbc      	itt	lt
 80087b8:	232d      	movlt	r3, #45	; 0x2d
 80087ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087be:	487f      	ldr	r0, [pc, #508]	; (80089bc <_printf_float+0x2e8>)
 80087c0:	4b7f      	ldr	r3, [pc, #508]	; (80089c0 <_printf_float+0x2ec>)
 80087c2:	e7d1      	b.n	8008768 <_printf_float+0x94>
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087ca:	9206      	str	r2, [sp, #24]
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	d13f      	bne.n	8008850 <_printf_float+0x17c>
 80087d0:	2306      	movs	r3, #6
 80087d2:	6063      	str	r3, [r4, #4]
 80087d4:	9b05      	ldr	r3, [sp, #20]
 80087d6:	6861      	ldr	r1, [r4, #4]
 80087d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087dc:	2300      	movs	r3, #0
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	ab0a      	add	r3, sp, #40	; 0x28
 80087e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087e6:	ab09      	add	r3, sp, #36	; 0x24
 80087e8:	ec49 8b10 	vmov	d0, r8, r9
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	6022      	str	r2, [r4, #0]
 80087f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087f4:	4628      	mov	r0, r5
 80087f6:	f7ff fecd 	bl	8008594 <__cvt>
 80087fa:	9b06      	ldr	r3, [sp, #24]
 80087fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087fe:	2b47      	cmp	r3, #71	; 0x47
 8008800:	4680      	mov	r8, r0
 8008802:	d108      	bne.n	8008816 <_printf_float+0x142>
 8008804:	1cc8      	adds	r0, r1, #3
 8008806:	db02      	blt.n	800880e <_printf_float+0x13a>
 8008808:	6863      	ldr	r3, [r4, #4]
 800880a:	4299      	cmp	r1, r3
 800880c:	dd41      	ble.n	8008892 <_printf_float+0x1be>
 800880e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008812:	fa5f fb8b 	uxtb.w	fp, fp
 8008816:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800881a:	d820      	bhi.n	800885e <_printf_float+0x18a>
 800881c:	3901      	subs	r1, #1
 800881e:	465a      	mov	r2, fp
 8008820:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008824:	9109      	str	r1, [sp, #36]	; 0x24
 8008826:	f7ff ff17 	bl	8008658 <__exponent>
 800882a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800882c:	1813      	adds	r3, r2, r0
 800882e:	2a01      	cmp	r2, #1
 8008830:	4681      	mov	r9, r0
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	dc02      	bgt.n	800883c <_printf_float+0x168>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	07d2      	lsls	r2, r2, #31
 800883a:	d501      	bpl.n	8008840 <_printf_float+0x16c>
 800883c:	3301      	adds	r3, #1
 800883e:	6123      	str	r3, [r4, #16]
 8008840:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008844:	2b00      	cmp	r3, #0
 8008846:	d09c      	beq.n	8008782 <_printf_float+0xae>
 8008848:	232d      	movs	r3, #45	; 0x2d
 800884a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884e:	e798      	b.n	8008782 <_printf_float+0xae>
 8008850:	9a06      	ldr	r2, [sp, #24]
 8008852:	2a47      	cmp	r2, #71	; 0x47
 8008854:	d1be      	bne.n	80087d4 <_printf_float+0x100>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1bc      	bne.n	80087d4 <_printf_float+0x100>
 800885a:	2301      	movs	r3, #1
 800885c:	e7b9      	b.n	80087d2 <_printf_float+0xfe>
 800885e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008862:	d118      	bne.n	8008896 <_printf_float+0x1c2>
 8008864:	2900      	cmp	r1, #0
 8008866:	6863      	ldr	r3, [r4, #4]
 8008868:	dd0b      	ble.n	8008882 <_printf_float+0x1ae>
 800886a:	6121      	str	r1, [r4, #16]
 800886c:	b913      	cbnz	r3, 8008874 <_printf_float+0x1a0>
 800886e:	6822      	ldr	r2, [r4, #0]
 8008870:	07d0      	lsls	r0, r2, #31
 8008872:	d502      	bpl.n	800887a <_printf_float+0x1a6>
 8008874:	3301      	adds	r3, #1
 8008876:	440b      	add	r3, r1
 8008878:	6123      	str	r3, [r4, #16]
 800887a:	65a1      	str	r1, [r4, #88]	; 0x58
 800887c:	f04f 0900 	mov.w	r9, #0
 8008880:	e7de      	b.n	8008840 <_printf_float+0x16c>
 8008882:	b913      	cbnz	r3, 800888a <_printf_float+0x1b6>
 8008884:	6822      	ldr	r2, [r4, #0]
 8008886:	07d2      	lsls	r2, r2, #31
 8008888:	d501      	bpl.n	800888e <_printf_float+0x1ba>
 800888a:	3302      	adds	r3, #2
 800888c:	e7f4      	b.n	8008878 <_printf_float+0x1a4>
 800888e:	2301      	movs	r3, #1
 8008890:	e7f2      	b.n	8008878 <_printf_float+0x1a4>
 8008892:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008898:	4299      	cmp	r1, r3
 800889a:	db05      	blt.n	80088a8 <_printf_float+0x1d4>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	6121      	str	r1, [r4, #16]
 80088a0:	07d8      	lsls	r0, r3, #31
 80088a2:	d5ea      	bpl.n	800887a <_printf_float+0x1a6>
 80088a4:	1c4b      	adds	r3, r1, #1
 80088a6:	e7e7      	b.n	8008878 <_printf_float+0x1a4>
 80088a8:	2900      	cmp	r1, #0
 80088aa:	bfd4      	ite	le
 80088ac:	f1c1 0202 	rsble	r2, r1, #2
 80088b0:	2201      	movgt	r2, #1
 80088b2:	4413      	add	r3, r2
 80088b4:	e7e0      	b.n	8008878 <_printf_float+0x1a4>
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	055a      	lsls	r2, r3, #21
 80088ba:	d407      	bmi.n	80088cc <_printf_float+0x1f8>
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	4642      	mov	r2, r8
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	d12c      	bne.n	8008924 <_printf_float+0x250>
 80088ca:	e764      	b.n	8008796 <_printf_float+0xc2>
 80088cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088d0:	f240 80e0 	bls.w	8008a94 <_printf_float+0x3c0>
 80088d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088d8:	2200      	movs	r2, #0
 80088da:	2300      	movs	r3, #0
 80088dc:	f7f8 f914 	bl	8000b08 <__aeabi_dcmpeq>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d034      	beq.n	800894e <_printf_float+0x27a>
 80088e4:	4a37      	ldr	r2, [pc, #220]	; (80089c4 <_printf_float+0x2f0>)
 80088e6:	2301      	movs	r3, #1
 80088e8:	4631      	mov	r1, r6
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	f43f af51 	beq.w	8008796 <_printf_float+0xc2>
 80088f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088f8:	429a      	cmp	r2, r3
 80088fa:	db02      	blt.n	8008902 <_printf_float+0x22e>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	07d8      	lsls	r0, r3, #31
 8008900:	d510      	bpl.n	8008924 <_printf_float+0x250>
 8008902:	ee18 3a10 	vmov	r3, s16
 8008906:	4652      	mov	r2, sl
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f43f af41 	beq.w	8008796 <_printf_float+0xc2>
 8008914:	f04f 0800 	mov.w	r8, #0
 8008918:	f104 091a 	add.w	r9, r4, #26
 800891c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891e:	3b01      	subs	r3, #1
 8008920:	4543      	cmp	r3, r8
 8008922:	dc09      	bgt.n	8008938 <_printf_float+0x264>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	079b      	lsls	r3, r3, #30
 8008928:	f100 8105 	bmi.w	8008b36 <_printf_float+0x462>
 800892c:	68e0      	ldr	r0, [r4, #12]
 800892e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008930:	4298      	cmp	r0, r3
 8008932:	bfb8      	it	lt
 8008934:	4618      	movlt	r0, r3
 8008936:	e730      	b.n	800879a <_printf_float+0xc6>
 8008938:	2301      	movs	r3, #1
 800893a:	464a      	mov	r2, r9
 800893c:	4631      	mov	r1, r6
 800893e:	4628      	mov	r0, r5
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f af27 	beq.w	8008796 <_printf_float+0xc2>
 8008948:	f108 0801 	add.w	r8, r8, #1
 800894c:	e7e6      	b.n	800891c <_printf_float+0x248>
 800894e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008950:	2b00      	cmp	r3, #0
 8008952:	dc39      	bgt.n	80089c8 <_printf_float+0x2f4>
 8008954:	4a1b      	ldr	r2, [pc, #108]	; (80089c4 <_printf_float+0x2f0>)
 8008956:	2301      	movs	r3, #1
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	f43f af19 	beq.w	8008796 <_printf_float+0xc2>
 8008964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008968:	4313      	orrs	r3, r2
 800896a:	d102      	bne.n	8008972 <_printf_float+0x29e>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	07d9      	lsls	r1, r3, #31
 8008970:	d5d8      	bpl.n	8008924 <_printf_float+0x250>
 8008972:	ee18 3a10 	vmov	r3, s16
 8008976:	4652      	mov	r2, sl
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	47b8      	blx	r7
 800897e:	3001      	adds	r0, #1
 8008980:	f43f af09 	beq.w	8008796 <_printf_float+0xc2>
 8008984:	f04f 0900 	mov.w	r9, #0
 8008988:	f104 0a1a 	add.w	sl, r4, #26
 800898c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898e:	425b      	negs	r3, r3
 8008990:	454b      	cmp	r3, r9
 8008992:	dc01      	bgt.n	8008998 <_printf_float+0x2c4>
 8008994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008996:	e792      	b.n	80088be <_printf_float+0x1ea>
 8008998:	2301      	movs	r3, #1
 800899a:	4652      	mov	r2, sl
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	f43f aef7 	beq.w	8008796 <_printf_float+0xc2>
 80089a8:	f109 0901 	add.w	r9, r9, #1
 80089ac:	e7ee      	b.n	800898c <_printf_float+0x2b8>
 80089ae:	bf00      	nop
 80089b0:	7fefffff 	.word	0x7fefffff
 80089b4:	0800cb44 	.word	0x0800cb44
 80089b8:	0800cb48 	.word	0x0800cb48
 80089bc:	0800cb50 	.word	0x0800cb50
 80089c0:	0800cb4c 	.word	0x0800cb4c
 80089c4:	0800cb54 	.word	0x0800cb54
 80089c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089cc:	429a      	cmp	r2, r3
 80089ce:	bfa8      	it	ge
 80089d0:	461a      	movge	r2, r3
 80089d2:	2a00      	cmp	r2, #0
 80089d4:	4691      	mov	r9, r2
 80089d6:	dc37      	bgt.n	8008a48 <_printf_float+0x374>
 80089d8:	f04f 0b00 	mov.w	fp, #0
 80089dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089e0:	f104 021a 	add.w	r2, r4, #26
 80089e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089e6:	9305      	str	r3, [sp, #20]
 80089e8:	eba3 0309 	sub.w	r3, r3, r9
 80089ec:	455b      	cmp	r3, fp
 80089ee:	dc33      	bgt.n	8008a58 <_printf_float+0x384>
 80089f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089f4:	429a      	cmp	r2, r3
 80089f6:	db3b      	blt.n	8008a70 <_printf_float+0x39c>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	07da      	lsls	r2, r3, #31
 80089fc:	d438      	bmi.n	8008a70 <_printf_float+0x39c>
 80089fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a00:	9b05      	ldr	r3, [sp, #20]
 8008a02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	eba2 0901 	sub.w	r9, r2, r1
 8008a0a:	4599      	cmp	r9, r3
 8008a0c:	bfa8      	it	ge
 8008a0e:	4699      	movge	r9, r3
 8008a10:	f1b9 0f00 	cmp.w	r9, #0
 8008a14:	dc35      	bgt.n	8008a82 <_printf_float+0x3ae>
 8008a16:	f04f 0800 	mov.w	r8, #0
 8008a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a1e:	f104 0a1a 	add.w	sl, r4, #26
 8008a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	eba3 0309 	sub.w	r3, r3, r9
 8008a2c:	4543      	cmp	r3, r8
 8008a2e:	f77f af79 	ble.w	8008924 <_printf_float+0x250>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4652      	mov	r2, sl
 8008a36:	4631      	mov	r1, r6
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b8      	blx	r7
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f43f aeaa 	beq.w	8008796 <_printf_float+0xc2>
 8008a42:	f108 0801 	add.w	r8, r8, #1
 8008a46:	e7ec      	b.n	8008a22 <_printf_float+0x34e>
 8008a48:	4613      	mov	r3, r2
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	d1c0      	bne.n	80089d8 <_printf_float+0x304>
 8008a56:	e69e      	b.n	8008796 <_printf_float+0xc2>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	9205      	str	r2, [sp, #20]
 8008a60:	47b8      	blx	r7
 8008a62:	3001      	adds	r0, #1
 8008a64:	f43f ae97 	beq.w	8008796 <_printf_float+0xc2>
 8008a68:	9a05      	ldr	r2, [sp, #20]
 8008a6a:	f10b 0b01 	add.w	fp, fp, #1
 8008a6e:	e7b9      	b.n	80089e4 <_printf_float+0x310>
 8008a70:	ee18 3a10 	vmov	r3, s16
 8008a74:	4652      	mov	r2, sl
 8008a76:	4631      	mov	r1, r6
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b8      	blx	r7
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d1be      	bne.n	80089fe <_printf_float+0x32a>
 8008a80:	e689      	b.n	8008796 <_printf_float+0xc2>
 8008a82:	9a05      	ldr	r2, [sp, #20]
 8008a84:	464b      	mov	r3, r9
 8008a86:	4442      	add	r2, r8
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b8      	blx	r7
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d1c1      	bne.n	8008a16 <_printf_float+0x342>
 8008a92:	e680      	b.n	8008796 <_printf_float+0xc2>
 8008a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a96:	2a01      	cmp	r2, #1
 8008a98:	dc01      	bgt.n	8008a9e <_printf_float+0x3ca>
 8008a9a:	07db      	lsls	r3, r3, #31
 8008a9c:	d538      	bpl.n	8008b10 <_printf_float+0x43c>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4642      	mov	r2, r8
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b8      	blx	r7
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	f43f ae74 	beq.w	8008796 <_printf_float+0xc2>
 8008aae:	ee18 3a10 	vmov	r3, s16
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f ae6b 	beq.w	8008796 <_printf_float+0xc2>
 8008ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f7f8 f81e 	bl	8000b08 <__aeabi_dcmpeq>
 8008acc:	b9d8      	cbnz	r0, 8008b06 <_printf_float+0x432>
 8008ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad0:	f108 0201 	add.w	r2, r8, #1
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b8      	blx	r7
 8008adc:	3001      	adds	r0, #1
 8008ade:	d10e      	bne.n	8008afe <_printf_float+0x42a>
 8008ae0:	e659      	b.n	8008796 <_printf_float+0xc2>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4652      	mov	r2, sl
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4628      	mov	r0, r5
 8008aea:	47b8      	blx	r7
 8008aec:	3001      	adds	r0, #1
 8008aee:	f43f ae52 	beq.w	8008796 <_printf_float+0xc2>
 8008af2:	f108 0801 	add.w	r8, r8, #1
 8008af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af8:	3b01      	subs	r3, #1
 8008afa:	4543      	cmp	r3, r8
 8008afc:	dcf1      	bgt.n	8008ae2 <_printf_float+0x40e>
 8008afe:	464b      	mov	r3, r9
 8008b00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b04:	e6dc      	b.n	80088c0 <_printf_float+0x1ec>
 8008b06:	f04f 0800 	mov.w	r8, #0
 8008b0a:	f104 0a1a 	add.w	sl, r4, #26
 8008b0e:	e7f2      	b.n	8008af6 <_printf_float+0x422>
 8008b10:	2301      	movs	r3, #1
 8008b12:	4642      	mov	r2, r8
 8008b14:	e7df      	b.n	8008ad6 <_printf_float+0x402>
 8008b16:	2301      	movs	r3, #1
 8008b18:	464a      	mov	r2, r9
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b8      	blx	r7
 8008b20:	3001      	adds	r0, #1
 8008b22:	f43f ae38 	beq.w	8008796 <_printf_float+0xc2>
 8008b26:	f108 0801 	add.w	r8, r8, #1
 8008b2a:	68e3      	ldr	r3, [r4, #12]
 8008b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b2e:	1a5b      	subs	r3, r3, r1
 8008b30:	4543      	cmp	r3, r8
 8008b32:	dcf0      	bgt.n	8008b16 <_printf_float+0x442>
 8008b34:	e6fa      	b.n	800892c <_printf_float+0x258>
 8008b36:	f04f 0800 	mov.w	r8, #0
 8008b3a:	f104 0919 	add.w	r9, r4, #25
 8008b3e:	e7f4      	b.n	8008b2a <_printf_float+0x456>

08008b40 <_printf_common>:
 8008b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	4616      	mov	r6, r2
 8008b46:	4699      	mov	r9, r3
 8008b48:	688a      	ldr	r2, [r1, #8]
 8008b4a:	690b      	ldr	r3, [r1, #16]
 8008b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	bfb8      	it	lt
 8008b54:	4613      	movlt	r3, r2
 8008b56:	6033      	str	r3, [r6, #0]
 8008b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	b10a      	cbz	r2, 8008b66 <_printf_common+0x26>
 8008b62:	3301      	adds	r3, #1
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	0699      	lsls	r1, r3, #26
 8008b6a:	bf42      	ittt	mi
 8008b6c:	6833      	ldrmi	r3, [r6, #0]
 8008b6e:	3302      	addmi	r3, #2
 8008b70:	6033      	strmi	r3, [r6, #0]
 8008b72:	6825      	ldr	r5, [r4, #0]
 8008b74:	f015 0506 	ands.w	r5, r5, #6
 8008b78:	d106      	bne.n	8008b88 <_printf_common+0x48>
 8008b7a:	f104 0a19 	add.w	sl, r4, #25
 8008b7e:	68e3      	ldr	r3, [r4, #12]
 8008b80:	6832      	ldr	r2, [r6, #0]
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	42ab      	cmp	r3, r5
 8008b86:	dc26      	bgt.n	8008bd6 <_printf_common+0x96>
 8008b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b8c:	1e13      	subs	r3, r2, #0
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	bf18      	it	ne
 8008b92:	2301      	movne	r3, #1
 8008b94:	0692      	lsls	r2, r2, #26
 8008b96:	d42b      	bmi.n	8008bf0 <_printf_common+0xb0>
 8008b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	47c0      	blx	r8
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d01e      	beq.n	8008be4 <_printf_common+0xa4>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	68e5      	ldr	r5, [r4, #12]
 8008baa:	6832      	ldr	r2, [r6, #0]
 8008bac:	f003 0306 	and.w	r3, r3, #6
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	bf08      	it	eq
 8008bb4:	1aad      	subeq	r5, r5, r2
 8008bb6:	68a3      	ldr	r3, [r4, #8]
 8008bb8:	6922      	ldr	r2, [r4, #16]
 8008bba:	bf0c      	ite	eq
 8008bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc0:	2500      	movne	r5, #0
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	bfc4      	itt	gt
 8008bc6:	1a9b      	subgt	r3, r3, r2
 8008bc8:	18ed      	addgt	r5, r5, r3
 8008bca:	2600      	movs	r6, #0
 8008bcc:	341a      	adds	r4, #26
 8008bce:	42b5      	cmp	r5, r6
 8008bd0:	d11a      	bne.n	8008c08 <_printf_common+0xc8>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	e008      	b.n	8008be8 <_printf_common+0xa8>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4652      	mov	r2, sl
 8008bda:	4649      	mov	r1, r9
 8008bdc:	4638      	mov	r0, r7
 8008bde:	47c0      	blx	r8
 8008be0:	3001      	adds	r0, #1
 8008be2:	d103      	bne.n	8008bec <_printf_common+0xac>
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bec:	3501      	adds	r5, #1
 8008bee:	e7c6      	b.n	8008b7e <_printf_common+0x3e>
 8008bf0:	18e1      	adds	r1, r4, r3
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	2030      	movs	r0, #48	; 0x30
 8008bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bfa:	4422      	add	r2, r4
 8008bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c04:	3302      	adds	r3, #2
 8008c06:	e7c7      	b.n	8008b98 <_printf_common+0x58>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c0      	blx	r8
 8008c12:	3001      	adds	r0, #1
 8008c14:	d0e6      	beq.n	8008be4 <_printf_common+0xa4>
 8008c16:	3601      	adds	r6, #1
 8008c18:	e7d9      	b.n	8008bce <_printf_common+0x8e>
	...

08008c1c <_printf_i>:
 8008c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c20:	460c      	mov	r4, r1
 8008c22:	4691      	mov	r9, r2
 8008c24:	7e27      	ldrb	r7, [r4, #24]
 8008c26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c28:	2f78      	cmp	r7, #120	; 0x78
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	469a      	mov	sl, r3
 8008c2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c32:	d807      	bhi.n	8008c44 <_printf_i+0x28>
 8008c34:	2f62      	cmp	r7, #98	; 0x62
 8008c36:	d80a      	bhi.n	8008c4e <_printf_i+0x32>
 8008c38:	2f00      	cmp	r7, #0
 8008c3a:	f000 80d8 	beq.w	8008dee <_printf_i+0x1d2>
 8008c3e:	2f58      	cmp	r7, #88	; 0x58
 8008c40:	f000 80a3 	beq.w	8008d8a <_printf_i+0x16e>
 8008c44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c4c:	e03a      	b.n	8008cc4 <_printf_i+0xa8>
 8008c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c52:	2b15      	cmp	r3, #21
 8008c54:	d8f6      	bhi.n	8008c44 <_printf_i+0x28>
 8008c56:	a001      	add	r0, pc, #4	; (adr r0, 8008c5c <_printf_i+0x40>)
 8008c58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c5c:	08008cb5 	.word	0x08008cb5
 8008c60:	08008cc9 	.word	0x08008cc9
 8008c64:	08008c45 	.word	0x08008c45
 8008c68:	08008c45 	.word	0x08008c45
 8008c6c:	08008c45 	.word	0x08008c45
 8008c70:	08008c45 	.word	0x08008c45
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008c45 	.word	0x08008c45
 8008c7c:	08008c45 	.word	0x08008c45
 8008c80:	08008c45 	.word	0x08008c45
 8008c84:	08008c45 	.word	0x08008c45
 8008c88:	08008dd5 	.word	0x08008dd5
 8008c8c:	08008cf9 	.word	0x08008cf9
 8008c90:	08008db7 	.word	0x08008db7
 8008c94:	08008c45 	.word	0x08008c45
 8008c98:	08008c45 	.word	0x08008c45
 8008c9c:	08008df7 	.word	0x08008df7
 8008ca0:	08008c45 	.word	0x08008c45
 8008ca4:	08008cf9 	.word	0x08008cf9
 8008ca8:	08008c45 	.word	0x08008c45
 8008cac:	08008c45 	.word	0x08008c45
 8008cb0:	08008dbf 	.word	0x08008dbf
 8008cb4:	680b      	ldr	r3, [r1, #0]
 8008cb6:	1d1a      	adds	r2, r3, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	600a      	str	r2, [r1, #0]
 8008cbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e0a3      	b.n	8008e10 <_printf_i+0x1f4>
 8008cc8:	6825      	ldr	r5, [r4, #0]
 8008cca:	6808      	ldr	r0, [r1, #0]
 8008ccc:	062e      	lsls	r6, r5, #24
 8008cce:	f100 0304 	add.w	r3, r0, #4
 8008cd2:	d50a      	bpl.n	8008cea <_printf_i+0xce>
 8008cd4:	6805      	ldr	r5, [r0, #0]
 8008cd6:	600b      	str	r3, [r1, #0]
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	da03      	bge.n	8008ce4 <_printf_i+0xc8>
 8008cdc:	232d      	movs	r3, #45	; 0x2d
 8008cde:	426d      	negs	r5, r5
 8008ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce4:	485e      	ldr	r0, [pc, #376]	; (8008e60 <_printf_i+0x244>)
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	e019      	b.n	8008d1e <_printf_i+0x102>
 8008cea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008cee:	6805      	ldr	r5, [r0, #0]
 8008cf0:	600b      	str	r3, [r1, #0]
 8008cf2:	bf18      	it	ne
 8008cf4:	b22d      	sxthne	r5, r5
 8008cf6:	e7ef      	b.n	8008cd8 <_printf_i+0xbc>
 8008cf8:	680b      	ldr	r3, [r1, #0]
 8008cfa:	6825      	ldr	r5, [r4, #0]
 8008cfc:	1d18      	adds	r0, r3, #4
 8008cfe:	6008      	str	r0, [r1, #0]
 8008d00:	0628      	lsls	r0, r5, #24
 8008d02:	d501      	bpl.n	8008d08 <_printf_i+0xec>
 8008d04:	681d      	ldr	r5, [r3, #0]
 8008d06:	e002      	b.n	8008d0e <_printf_i+0xf2>
 8008d08:	0669      	lsls	r1, r5, #25
 8008d0a:	d5fb      	bpl.n	8008d04 <_printf_i+0xe8>
 8008d0c:	881d      	ldrh	r5, [r3, #0]
 8008d0e:	4854      	ldr	r0, [pc, #336]	; (8008e60 <_printf_i+0x244>)
 8008d10:	2f6f      	cmp	r7, #111	; 0x6f
 8008d12:	bf0c      	ite	eq
 8008d14:	2308      	moveq	r3, #8
 8008d16:	230a      	movne	r3, #10
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d1e:	6866      	ldr	r6, [r4, #4]
 8008d20:	60a6      	str	r6, [r4, #8]
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	bfa2      	ittt	ge
 8008d26:	6821      	ldrge	r1, [r4, #0]
 8008d28:	f021 0104 	bicge.w	r1, r1, #4
 8008d2c:	6021      	strge	r1, [r4, #0]
 8008d2e:	b90d      	cbnz	r5, 8008d34 <_printf_i+0x118>
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	d04d      	beq.n	8008dd0 <_printf_i+0x1b4>
 8008d34:	4616      	mov	r6, r2
 8008d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d3e:	5dc7      	ldrb	r7, [r0, r7]
 8008d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d44:	462f      	mov	r7, r5
 8008d46:	42bb      	cmp	r3, r7
 8008d48:	460d      	mov	r5, r1
 8008d4a:	d9f4      	bls.n	8008d36 <_printf_i+0x11a>
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d10b      	bne.n	8008d68 <_printf_i+0x14c>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	07df      	lsls	r7, r3, #31
 8008d54:	d508      	bpl.n	8008d68 <_printf_i+0x14c>
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	6861      	ldr	r1, [r4, #4]
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	bfde      	ittt	le
 8008d5e:	2330      	movle	r3, #48	; 0x30
 8008d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d64:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008d68:	1b92      	subs	r2, r2, r6
 8008d6a:	6122      	str	r2, [r4, #16]
 8008d6c:	f8cd a000 	str.w	sl, [sp]
 8008d70:	464b      	mov	r3, r9
 8008d72:	aa03      	add	r2, sp, #12
 8008d74:	4621      	mov	r1, r4
 8008d76:	4640      	mov	r0, r8
 8008d78:	f7ff fee2 	bl	8008b40 <_printf_common>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d14c      	bne.n	8008e1a <_printf_i+0x1fe>
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d84:	b004      	add	sp, #16
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	4835      	ldr	r0, [pc, #212]	; (8008e60 <_printf_i+0x244>)
 8008d8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	680e      	ldr	r6, [r1, #0]
 8008d94:	061f      	lsls	r7, r3, #24
 8008d96:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d9a:	600e      	str	r6, [r1, #0]
 8008d9c:	d514      	bpl.n	8008dc8 <_printf_i+0x1ac>
 8008d9e:	07d9      	lsls	r1, r3, #31
 8008da0:	bf44      	itt	mi
 8008da2:	f043 0320 	orrmi.w	r3, r3, #32
 8008da6:	6023      	strmi	r3, [r4, #0]
 8008da8:	b91d      	cbnz	r5, 8008db2 <_printf_i+0x196>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f023 0320 	bic.w	r3, r3, #32
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	2310      	movs	r3, #16
 8008db4:	e7b0      	b.n	8008d18 <_printf_i+0xfc>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	f043 0320 	orr.w	r3, r3, #32
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	2378      	movs	r3, #120	; 0x78
 8008dc0:	4828      	ldr	r0, [pc, #160]	; (8008e64 <_printf_i+0x248>)
 8008dc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dc6:	e7e3      	b.n	8008d90 <_printf_i+0x174>
 8008dc8:	065e      	lsls	r6, r3, #25
 8008dca:	bf48      	it	mi
 8008dcc:	b2ad      	uxthmi	r5, r5
 8008dce:	e7e6      	b.n	8008d9e <_printf_i+0x182>
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	e7bb      	b.n	8008d4c <_printf_i+0x130>
 8008dd4:	680b      	ldr	r3, [r1, #0]
 8008dd6:	6826      	ldr	r6, [r4, #0]
 8008dd8:	6960      	ldr	r0, [r4, #20]
 8008dda:	1d1d      	adds	r5, r3, #4
 8008ddc:	600d      	str	r5, [r1, #0]
 8008dde:	0635      	lsls	r5, r6, #24
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	d501      	bpl.n	8008de8 <_printf_i+0x1cc>
 8008de4:	6018      	str	r0, [r3, #0]
 8008de6:	e002      	b.n	8008dee <_printf_i+0x1d2>
 8008de8:	0671      	lsls	r1, r6, #25
 8008dea:	d5fb      	bpl.n	8008de4 <_printf_i+0x1c8>
 8008dec:	8018      	strh	r0, [r3, #0]
 8008dee:	2300      	movs	r3, #0
 8008df0:	6123      	str	r3, [r4, #16]
 8008df2:	4616      	mov	r6, r2
 8008df4:	e7ba      	b.n	8008d6c <_printf_i+0x150>
 8008df6:	680b      	ldr	r3, [r1, #0]
 8008df8:	1d1a      	adds	r2, r3, #4
 8008dfa:	600a      	str	r2, [r1, #0]
 8008dfc:	681e      	ldr	r6, [r3, #0]
 8008dfe:	6862      	ldr	r2, [r4, #4]
 8008e00:	2100      	movs	r1, #0
 8008e02:	4630      	mov	r0, r6
 8008e04:	f7f7 fa0c 	bl	8000220 <memchr>
 8008e08:	b108      	cbz	r0, 8008e0e <_printf_i+0x1f2>
 8008e0a:	1b80      	subs	r0, r0, r6
 8008e0c:	6060      	str	r0, [r4, #4]
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	2300      	movs	r3, #0
 8008e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e18:	e7a8      	b.n	8008d6c <_printf_i+0x150>
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	4649      	mov	r1, r9
 8008e20:	4640      	mov	r0, r8
 8008e22:	47d0      	blx	sl
 8008e24:	3001      	adds	r0, #1
 8008e26:	d0ab      	beq.n	8008d80 <_printf_i+0x164>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	079b      	lsls	r3, r3, #30
 8008e2c:	d413      	bmi.n	8008e56 <_printf_i+0x23a>
 8008e2e:	68e0      	ldr	r0, [r4, #12]
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	4298      	cmp	r0, r3
 8008e34:	bfb8      	it	lt
 8008e36:	4618      	movlt	r0, r3
 8008e38:	e7a4      	b.n	8008d84 <_printf_i+0x168>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4640      	mov	r0, r8
 8008e42:	47d0      	blx	sl
 8008e44:	3001      	adds	r0, #1
 8008e46:	d09b      	beq.n	8008d80 <_printf_i+0x164>
 8008e48:	3501      	adds	r5, #1
 8008e4a:	68e3      	ldr	r3, [r4, #12]
 8008e4c:	9903      	ldr	r1, [sp, #12]
 8008e4e:	1a5b      	subs	r3, r3, r1
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	dcf2      	bgt.n	8008e3a <_printf_i+0x21e>
 8008e54:	e7eb      	b.n	8008e2e <_printf_i+0x212>
 8008e56:	2500      	movs	r5, #0
 8008e58:	f104 0619 	add.w	r6, r4, #25
 8008e5c:	e7f5      	b.n	8008e4a <_printf_i+0x22e>
 8008e5e:	bf00      	nop
 8008e60:	0800cb56 	.word	0x0800cb56
 8008e64:	0800cb67 	.word	0x0800cb67

08008e68 <iprintf>:
 8008e68:	b40f      	push	{r0, r1, r2, r3}
 8008e6a:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <iprintf+0x2c>)
 8008e6c:	b513      	push	{r0, r1, r4, lr}
 8008e6e:	681c      	ldr	r4, [r3, #0]
 8008e70:	b124      	cbz	r4, 8008e7c <iprintf+0x14>
 8008e72:	69a3      	ldr	r3, [r4, #24]
 8008e74:	b913      	cbnz	r3, 8008e7c <iprintf+0x14>
 8008e76:	4620      	mov	r0, r4
 8008e78:	f001 f8e8 	bl	800a04c <__sinit>
 8008e7c:	ab05      	add	r3, sp, #20
 8008e7e:	9a04      	ldr	r2, [sp, #16]
 8008e80:	68a1      	ldr	r1, [r4, #8]
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	4620      	mov	r0, r4
 8008e86:	f001 fdad 	bl	800a9e4 <_vfiprintf_r>
 8008e8a:	b002      	add	sp, #8
 8008e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e90:	b004      	add	sp, #16
 8008e92:	4770      	bx	lr
 8008e94:	2000000c 	.word	0x2000000c

08008e98 <_puts_r>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	460e      	mov	r6, r1
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	b118      	cbz	r0, 8008ea8 <_puts_r+0x10>
 8008ea0:	6983      	ldr	r3, [r0, #24]
 8008ea2:	b90b      	cbnz	r3, 8008ea8 <_puts_r+0x10>
 8008ea4:	f001 f8d2 	bl	800a04c <__sinit>
 8008ea8:	69ab      	ldr	r3, [r5, #24]
 8008eaa:	68ac      	ldr	r4, [r5, #8]
 8008eac:	b913      	cbnz	r3, 8008eb4 <_puts_r+0x1c>
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f001 f8cc 	bl	800a04c <__sinit>
 8008eb4:	4b2c      	ldr	r3, [pc, #176]	; (8008f68 <_puts_r+0xd0>)
 8008eb6:	429c      	cmp	r4, r3
 8008eb8:	d120      	bne.n	8008efc <_puts_r+0x64>
 8008eba:	686c      	ldr	r4, [r5, #4]
 8008ebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ebe:	07db      	lsls	r3, r3, #31
 8008ec0:	d405      	bmi.n	8008ece <_puts_r+0x36>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	0598      	lsls	r0, r3, #22
 8008ec6:	d402      	bmi.n	8008ece <_puts_r+0x36>
 8008ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eca:	f001 f962 	bl	800a192 <__retarget_lock_acquire_recursive>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	0719      	lsls	r1, r3, #28
 8008ed2:	d51d      	bpl.n	8008f10 <_puts_r+0x78>
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	b1db      	cbz	r3, 8008f10 <_puts_r+0x78>
 8008ed8:	3e01      	subs	r6, #1
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	bb39      	cbnz	r1, 8008f36 <_puts_r+0x9e>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	da38      	bge.n	8008f5c <_puts_r+0xc4>
 8008eea:	4622      	mov	r2, r4
 8008eec:	210a      	movs	r1, #10
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f858 	bl	8008fa4 <__swbuf_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d011      	beq.n	8008f1c <_puts_r+0x84>
 8008ef8:	250a      	movs	r5, #10
 8008efa:	e011      	b.n	8008f20 <_puts_r+0x88>
 8008efc:	4b1b      	ldr	r3, [pc, #108]	; (8008f6c <_puts_r+0xd4>)
 8008efe:	429c      	cmp	r4, r3
 8008f00:	d101      	bne.n	8008f06 <_puts_r+0x6e>
 8008f02:	68ac      	ldr	r4, [r5, #8]
 8008f04:	e7da      	b.n	8008ebc <_puts_r+0x24>
 8008f06:	4b1a      	ldr	r3, [pc, #104]	; (8008f70 <_puts_r+0xd8>)
 8008f08:	429c      	cmp	r4, r3
 8008f0a:	bf08      	it	eq
 8008f0c:	68ec      	ldreq	r4, [r5, #12]
 8008f0e:	e7d5      	b.n	8008ebc <_puts_r+0x24>
 8008f10:	4621      	mov	r1, r4
 8008f12:	4628      	mov	r0, r5
 8008f14:	f000 f898 	bl	8009048 <__swsetup_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0dd      	beq.n	8008ed8 <_puts_r+0x40>
 8008f1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f22:	07da      	lsls	r2, r3, #31
 8008f24:	d405      	bmi.n	8008f32 <_puts_r+0x9a>
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	059b      	lsls	r3, r3, #22
 8008f2a:	d402      	bmi.n	8008f32 <_puts_r+0x9a>
 8008f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f2e:	f001 f931 	bl	800a194 <__retarget_lock_release_recursive>
 8008f32:	4628      	mov	r0, r5
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da04      	bge.n	8008f44 <_puts_r+0xac>
 8008f3a:	69a2      	ldr	r2, [r4, #24]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	dc06      	bgt.n	8008f4e <_puts_r+0xb6>
 8008f40:	290a      	cmp	r1, #10
 8008f42:	d004      	beq.n	8008f4e <_puts_r+0xb6>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	6022      	str	r2, [r4, #0]
 8008f4a:	7019      	strb	r1, [r3, #0]
 8008f4c:	e7c5      	b.n	8008eda <_puts_r+0x42>
 8008f4e:	4622      	mov	r2, r4
 8008f50:	4628      	mov	r0, r5
 8008f52:	f000 f827 	bl	8008fa4 <__swbuf_r>
 8008f56:	3001      	adds	r0, #1
 8008f58:	d1bf      	bne.n	8008eda <_puts_r+0x42>
 8008f5a:	e7df      	b.n	8008f1c <_puts_r+0x84>
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	250a      	movs	r5, #10
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	6022      	str	r2, [r4, #0]
 8008f64:	701d      	strb	r5, [r3, #0]
 8008f66:	e7db      	b.n	8008f20 <_puts_r+0x88>
 8008f68:	0800cc2c 	.word	0x0800cc2c
 8008f6c:	0800cc4c 	.word	0x0800cc4c
 8008f70:	0800cc0c 	.word	0x0800cc0c

08008f74 <puts>:
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <puts+0xc>)
 8008f76:	4601      	mov	r1, r0
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f7ff bf8d 	b.w	8008e98 <_puts_r>
 8008f7e:	bf00      	nop
 8008f80:	2000000c 	.word	0x2000000c

08008f84 <_sbrk_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d06      	ldr	r5, [pc, #24]	; (8008fa0 <_sbrk_r+0x1c>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	602b      	str	r3, [r5, #0]
 8008f90:	f7fa fff2 	bl	8003f78 <_sbrk>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_sbrk_r+0x1a>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_sbrk_r+0x1a>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	20000640 	.word	0x20000640

08008fa4 <__swbuf_r>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	460e      	mov	r6, r1
 8008fa8:	4614      	mov	r4, r2
 8008faa:	4605      	mov	r5, r0
 8008fac:	b118      	cbz	r0, 8008fb6 <__swbuf_r+0x12>
 8008fae:	6983      	ldr	r3, [r0, #24]
 8008fb0:	b90b      	cbnz	r3, 8008fb6 <__swbuf_r+0x12>
 8008fb2:	f001 f84b 	bl	800a04c <__sinit>
 8008fb6:	4b21      	ldr	r3, [pc, #132]	; (800903c <__swbuf_r+0x98>)
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	d12b      	bne.n	8009014 <__swbuf_r+0x70>
 8008fbc:	686c      	ldr	r4, [r5, #4]
 8008fbe:	69a3      	ldr	r3, [r4, #24]
 8008fc0:	60a3      	str	r3, [r4, #8]
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	071a      	lsls	r2, r3, #28
 8008fc6:	d52f      	bpl.n	8009028 <__swbuf_r+0x84>
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	b36b      	cbz	r3, 8009028 <__swbuf_r+0x84>
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	1ac0      	subs	r0, r0, r3
 8008fd2:	6963      	ldr	r3, [r4, #20]
 8008fd4:	b2f6      	uxtb	r6, r6
 8008fd6:	4283      	cmp	r3, r0
 8008fd8:	4637      	mov	r7, r6
 8008fda:	dc04      	bgt.n	8008fe6 <__swbuf_r+0x42>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 ffa0 	bl	8009f24 <_fflush_r>
 8008fe4:	bb30      	cbnz	r0, 8009034 <__swbuf_r+0x90>
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	60a3      	str	r3, [r4, #8]
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	6022      	str	r2, [r4, #0]
 8008ff2:	701e      	strb	r6, [r3, #0]
 8008ff4:	6963      	ldr	r3, [r4, #20]
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	4283      	cmp	r3, r0
 8008ffa:	d004      	beq.n	8009006 <__swbuf_r+0x62>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	07db      	lsls	r3, r3, #31
 8009000:	d506      	bpl.n	8009010 <__swbuf_r+0x6c>
 8009002:	2e0a      	cmp	r6, #10
 8009004:	d104      	bne.n	8009010 <__swbuf_r+0x6c>
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f000 ff8b 	bl	8009f24 <_fflush_r>
 800900e:	b988      	cbnz	r0, 8009034 <__swbuf_r+0x90>
 8009010:	4638      	mov	r0, r7
 8009012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009014:	4b0a      	ldr	r3, [pc, #40]	; (8009040 <__swbuf_r+0x9c>)
 8009016:	429c      	cmp	r4, r3
 8009018:	d101      	bne.n	800901e <__swbuf_r+0x7a>
 800901a:	68ac      	ldr	r4, [r5, #8]
 800901c:	e7cf      	b.n	8008fbe <__swbuf_r+0x1a>
 800901e:	4b09      	ldr	r3, [pc, #36]	; (8009044 <__swbuf_r+0xa0>)
 8009020:	429c      	cmp	r4, r3
 8009022:	bf08      	it	eq
 8009024:	68ec      	ldreq	r4, [r5, #12]
 8009026:	e7ca      	b.n	8008fbe <__swbuf_r+0x1a>
 8009028:	4621      	mov	r1, r4
 800902a:	4628      	mov	r0, r5
 800902c:	f000 f80c 	bl	8009048 <__swsetup_r>
 8009030:	2800      	cmp	r0, #0
 8009032:	d0cb      	beq.n	8008fcc <__swbuf_r+0x28>
 8009034:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009038:	e7ea      	b.n	8009010 <__swbuf_r+0x6c>
 800903a:	bf00      	nop
 800903c:	0800cc2c 	.word	0x0800cc2c
 8009040:	0800cc4c 	.word	0x0800cc4c
 8009044:	0800cc0c 	.word	0x0800cc0c

08009048 <__swsetup_r>:
 8009048:	4b32      	ldr	r3, [pc, #200]	; (8009114 <__swsetup_r+0xcc>)
 800904a:	b570      	push	{r4, r5, r6, lr}
 800904c:	681d      	ldr	r5, [r3, #0]
 800904e:	4606      	mov	r6, r0
 8009050:	460c      	mov	r4, r1
 8009052:	b125      	cbz	r5, 800905e <__swsetup_r+0x16>
 8009054:	69ab      	ldr	r3, [r5, #24]
 8009056:	b913      	cbnz	r3, 800905e <__swsetup_r+0x16>
 8009058:	4628      	mov	r0, r5
 800905a:	f000 fff7 	bl	800a04c <__sinit>
 800905e:	4b2e      	ldr	r3, [pc, #184]	; (8009118 <__swsetup_r+0xd0>)
 8009060:	429c      	cmp	r4, r3
 8009062:	d10f      	bne.n	8009084 <__swsetup_r+0x3c>
 8009064:	686c      	ldr	r4, [r5, #4]
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800906c:	0719      	lsls	r1, r3, #28
 800906e:	d42c      	bmi.n	80090ca <__swsetup_r+0x82>
 8009070:	06dd      	lsls	r5, r3, #27
 8009072:	d411      	bmi.n	8009098 <__swsetup_r+0x50>
 8009074:	2309      	movs	r3, #9
 8009076:	6033      	str	r3, [r6, #0]
 8009078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009082:	e03e      	b.n	8009102 <__swsetup_r+0xba>
 8009084:	4b25      	ldr	r3, [pc, #148]	; (800911c <__swsetup_r+0xd4>)
 8009086:	429c      	cmp	r4, r3
 8009088:	d101      	bne.n	800908e <__swsetup_r+0x46>
 800908a:	68ac      	ldr	r4, [r5, #8]
 800908c:	e7eb      	b.n	8009066 <__swsetup_r+0x1e>
 800908e:	4b24      	ldr	r3, [pc, #144]	; (8009120 <__swsetup_r+0xd8>)
 8009090:	429c      	cmp	r4, r3
 8009092:	bf08      	it	eq
 8009094:	68ec      	ldreq	r4, [r5, #12]
 8009096:	e7e6      	b.n	8009066 <__swsetup_r+0x1e>
 8009098:	0758      	lsls	r0, r3, #29
 800909a:	d512      	bpl.n	80090c2 <__swsetup_r+0x7a>
 800909c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800909e:	b141      	cbz	r1, 80090b2 <__swsetup_r+0x6a>
 80090a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a4:	4299      	cmp	r1, r3
 80090a6:	d002      	beq.n	80090ae <__swsetup_r+0x66>
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff f9c9 	bl	8008440 <_free_r>
 80090ae:	2300      	movs	r3, #0
 80090b0:	6363      	str	r3, [r4, #52]	; 0x34
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090b8:	81a3      	strh	r3, [r4, #12]
 80090ba:	2300      	movs	r3, #0
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f043 0308 	orr.w	r3, r3, #8
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	b94b      	cbnz	r3, 80090e2 <__swsetup_r+0x9a>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d8:	d003      	beq.n	80090e2 <__swsetup_r+0x9a>
 80090da:	4621      	mov	r1, r4
 80090dc:	4630      	mov	r0, r6
 80090de:	f001 f87f 	bl	800a1e0 <__smakebuf_r>
 80090e2:	89a0      	ldrh	r0, [r4, #12]
 80090e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090e8:	f010 0301 	ands.w	r3, r0, #1
 80090ec:	d00a      	beq.n	8009104 <__swsetup_r+0xbc>
 80090ee:	2300      	movs	r3, #0
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	6963      	ldr	r3, [r4, #20]
 80090f4:	425b      	negs	r3, r3
 80090f6:	61a3      	str	r3, [r4, #24]
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	b943      	cbnz	r3, 800910e <__swsetup_r+0xc6>
 80090fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009100:	d1ba      	bne.n	8009078 <__swsetup_r+0x30>
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	0781      	lsls	r1, r0, #30
 8009106:	bf58      	it	pl
 8009108:	6963      	ldrpl	r3, [r4, #20]
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	e7f4      	b.n	80090f8 <__swsetup_r+0xb0>
 800910e:	2000      	movs	r0, #0
 8009110:	e7f7      	b.n	8009102 <__swsetup_r+0xba>
 8009112:	bf00      	nop
 8009114:	2000000c 	.word	0x2000000c
 8009118:	0800cc2c 	.word	0x0800cc2c
 800911c:	0800cc4c 	.word	0x0800cc4c
 8009120:	0800cc0c 	.word	0x0800cc0c

08009124 <quorem>:
 8009124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	6903      	ldr	r3, [r0, #16]
 800912a:	690c      	ldr	r4, [r1, #16]
 800912c:	42a3      	cmp	r3, r4
 800912e:	4607      	mov	r7, r0
 8009130:	f2c0 8081 	blt.w	8009236 <quorem+0x112>
 8009134:	3c01      	subs	r4, #1
 8009136:	f101 0814 	add.w	r8, r1, #20
 800913a:	f100 0514 	add.w	r5, r0, #20
 800913e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800914c:	3301      	adds	r3, #1
 800914e:	429a      	cmp	r2, r3
 8009150:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009158:	fbb2 f6f3 	udiv	r6, r2, r3
 800915c:	d331      	bcc.n	80091c2 <quorem+0x9e>
 800915e:	f04f 0e00 	mov.w	lr, #0
 8009162:	4640      	mov	r0, r8
 8009164:	46ac      	mov	ip, r5
 8009166:	46f2      	mov	sl, lr
 8009168:	f850 2b04 	ldr.w	r2, [r0], #4
 800916c:	b293      	uxth	r3, r2
 800916e:	fb06 e303 	mla	r3, r6, r3, lr
 8009172:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009176:	b29b      	uxth	r3, r3
 8009178:	ebaa 0303 	sub.w	r3, sl, r3
 800917c:	0c12      	lsrs	r2, r2, #16
 800917e:	f8dc a000 	ldr.w	sl, [ip]
 8009182:	fb06 e202 	mla	r2, r6, r2, lr
 8009186:	fa13 f38a 	uxtah	r3, r3, sl
 800918a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800918e:	fa1f fa82 	uxth.w	sl, r2
 8009192:	f8dc 2000 	ldr.w	r2, [ip]
 8009196:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800919a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800919e:	b29b      	uxth	r3, r3
 80091a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091a4:	4581      	cmp	r9, r0
 80091a6:	f84c 3b04 	str.w	r3, [ip], #4
 80091aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80091ae:	d2db      	bcs.n	8009168 <quorem+0x44>
 80091b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80091b4:	b92b      	cbnz	r3, 80091c2 <quorem+0x9e>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	3b04      	subs	r3, #4
 80091ba:	429d      	cmp	r5, r3
 80091bc:	461a      	mov	r2, r3
 80091be:	d32e      	bcc.n	800921e <quorem+0xfa>
 80091c0:	613c      	str	r4, [r7, #16]
 80091c2:	4638      	mov	r0, r7
 80091c4:	f001 fae4 	bl	800a790 <__mcmp>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	db24      	blt.n	8009216 <quorem+0xf2>
 80091cc:	3601      	adds	r6, #1
 80091ce:	4628      	mov	r0, r5
 80091d0:	f04f 0c00 	mov.w	ip, #0
 80091d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80091d8:	f8d0 e000 	ldr.w	lr, [r0]
 80091dc:	b293      	uxth	r3, r2
 80091de:	ebac 0303 	sub.w	r3, ip, r3
 80091e2:	0c12      	lsrs	r2, r2, #16
 80091e4:	fa13 f38e 	uxtah	r3, r3, lr
 80091e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80091ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091f6:	45c1      	cmp	r9, r8
 80091f8:	f840 3b04 	str.w	r3, [r0], #4
 80091fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009200:	d2e8      	bcs.n	80091d4 <quorem+0xb0>
 8009202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800920a:	b922      	cbnz	r2, 8009216 <quorem+0xf2>
 800920c:	3b04      	subs	r3, #4
 800920e:	429d      	cmp	r5, r3
 8009210:	461a      	mov	r2, r3
 8009212:	d30a      	bcc.n	800922a <quorem+0x106>
 8009214:	613c      	str	r4, [r7, #16]
 8009216:	4630      	mov	r0, r6
 8009218:	b003      	add	sp, #12
 800921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921e:	6812      	ldr	r2, [r2, #0]
 8009220:	3b04      	subs	r3, #4
 8009222:	2a00      	cmp	r2, #0
 8009224:	d1cc      	bne.n	80091c0 <quorem+0x9c>
 8009226:	3c01      	subs	r4, #1
 8009228:	e7c7      	b.n	80091ba <quorem+0x96>
 800922a:	6812      	ldr	r2, [r2, #0]
 800922c:	3b04      	subs	r3, #4
 800922e:	2a00      	cmp	r2, #0
 8009230:	d1f0      	bne.n	8009214 <quorem+0xf0>
 8009232:	3c01      	subs	r4, #1
 8009234:	e7eb      	b.n	800920e <quorem+0xea>
 8009236:	2000      	movs	r0, #0
 8009238:	e7ee      	b.n	8009218 <quorem+0xf4>
 800923a:	0000      	movs	r0, r0
 800923c:	0000      	movs	r0, r0
	...

08009240 <_dtoa_r>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	ed2d 8b02 	vpush	{d8}
 8009248:	ec57 6b10 	vmov	r6, r7, d0
 800924c:	b095      	sub	sp, #84	; 0x54
 800924e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009250:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009254:	9105      	str	r1, [sp, #20]
 8009256:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800925a:	4604      	mov	r4, r0
 800925c:	9209      	str	r2, [sp, #36]	; 0x24
 800925e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009260:	b975      	cbnz	r5, 8009280 <_dtoa_r+0x40>
 8009262:	2010      	movs	r0, #16
 8009264:	f7ff f8cc 	bl	8008400 <malloc>
 8009268:	4602      	mov	r2, r0
 800926a:	6260      	str	r0, [r4, #36]	; 0x24
 800926c:	b920      	cbnz	r0, 8009278 <_dtoa_r+0x38>
 800926e:	4bb2      	ldr	r3, [pc, #712]	; (8009538 <_dtoa_r+0x2f8>)
 8009270:	21ea      	movs	r1, #234	; 0xea
 8009272:	48b2      	ldr	r0, [pc, #712]	; (800953c <_dtoa_r+0x2fc>)
 8009274:	f001 fd3c 	bl	800acf0 <__assert_func>
 8009278:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800927c:	6005      	str	r5, [r0, #0]
 800927e:	60c5      	str	r5, [r0, #12]
 8009280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009282:	6819      	ldr	r1, [r3, #0]
 8009284:	b151      	cbz	r1, 800929c <_dtoa_r+0x5c>
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	604a      	str	r2, [r1, #4]
 800928a:	2301      	movs	r3, #1
 800928c:	4093      	lsls	r3, r2
 800928e:	608b      	str	r3, [r1, #8]
 8009290:	4620      	mov	r0, r4
 8009292:	f001 f83f 	bl	800a314 <_Bfree>
 8009296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009298:	2200      	movs	r2, #0
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	1e3b      	subs	r3, r7, #0
 800929e:	bfb9      	ittee	lt
 80092a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092a4:	9303      	strlt	r3, [sp, #12]
 80092a6:	2300      	movge	r3, #0
 80092a8:	f8c8 3000 	strge.w	r3, [r8]
 80092ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80092b0:	4ba3      	ldr	r3, [pc, #652]	; (8009540 <_dtoa_r+0x300>)
 80092b2:	bfbc      	itt	lt
 80092b4:	2201      	movlt	r2, #1
 80092b6:	f8c8 2000 	strlt.w	r2, [r8]
 80092ba:	ea33 0309 	bics.w	r3, r3, r9
 80092be:	d11b      	bne.n	80092f8 <_dtoa_r+0xb8>
 80092c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092cc:	4333      	orrs	r3, r6
 80092ce:	f000 857a 	beq.w	8009dc6 <_dtoa_r+0xb86>
 80092d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092d4:	b963      	cbnz	r3, 80092f0 <_dtoa_r+0xb0>
 80092d6:	4b9b      	ldr	r3, [pc, #620]	; (8009544 <_dtoa_r+0x304>)
 80092d8:	e024      	b.n	8009324 <_dtoa_r+0xe4>
 80092da:	4b9b      	ldr	r3, [pc, #620]	; (8009548 <_dtoa_r+0x308>)
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	3308      	adds	r3, #8
 80092e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	9800      	ldr	r0, [sp, #0]
 80092e6:	b015      	add	sp, #84	; 0x54
 80092e8:	ecbd 8b02 	vpop	{d8}
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	4b94      	ldr	r3, [pc, #592]	; (8009544 <_dtoa_r+0x304>)
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	3303      	adds	r3, #3
 80092f6:	e7f3      	b.n	80092e0 <_dtoa_r+0xa0>
 80092f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092fc:	2200      	movs	r2, #0
 80092fe:	ec51 0b17 	vmov	r0, r1, d7
 8009302:	2300      	movs	r3, #0
 8009304:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009308:	f7f7 fbfe 	bl	8000b08 <__aeabi_dcmpeq>
 800930c:	4680      	mov	r8, r0
 800930e:	b158      	cbz	r0, 8009328 <_dtoa_r+0xe8>
 8009310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009312:	2301      	movs	r3, #1
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 8551 	beq.w	8009dc0 <_dtoa_r+0xb80>
 800931e:	488b      	ldr	r0, [pc, #556]	; (800954c <_dtoa_r+0x30c>)
 8009320:	6018      	str	r0, [r3, #0]
 8009322:	1e43      	subs	r3, r0, #1
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	e7dd      	b.n	80092e4 <_dtoa_r+0xa4>
 8009328:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800932c:	aa12      	add	r2, sp, #72	; 0x48
 800932e:	a913      	add	r1, sp, #76	; 0x4c
 8009330:	4620      	mov	r0, r4
 8009332:	f001 fad1 	bl	800a8d8 <__d2b>
 8009336:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800933a:	4683      	mov	fp, r0
 800933c:	2d00      	cmp	r5, #0
 800933e:	d07c      	beq.n	800943a <_dtoa_r+0x1fa>
 8009340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009342:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800934a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800934e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009352:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800935a:	4b7d      	ldr	r3, [pc, #500]	; (8009550 <_dtoa_r+0x310>)
 800935c:	2200      	movs	r2, #0
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f6 ffb1 	bl	80002c8 <__aeabi_dsub>
 8009366:	a36e      	add	r3, pc, #440	; (adr r3, 8009520 <_dtoa_r+0x2e0>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f7f7 f964 	bl	8000638 <__aeabi_dmul>
 8009370:	a36d      	add	r3, pc, #436	; (adr r3, 8009528 <_dtoa_r+0x2e8>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7f6 ffa9 	bl	80002cc <__adddf3>
 800937a:	4606      	mov	r6, r0
 800937c:	4628      	mov	r0, r5
 800937e:	460f      	mov	r7, r1
 8009380:	f7f7 f8f0 	bl	8000564 <__aeabi_i2d>
 8009384:	a36a      	add	r3, pc, #424	; (adr r3, 8009530 <_dtoa_r+0x2f0>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f7 f955 	bl	8000638 <__aeabi_dmul>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	4630      	mov	r0, r6
 8009394:	4639      	mov	r1, r7
 8009396:	f7f6 ff99 	bl	80002cc <__adddf3>
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	f7f7 fbfb 	bl	8000b98 <__aeabi_d2iz>
 80093a2:	2200      	movs	r2, #0
 80093a4:	4682      	mov	sl, r0
 80093a6:	2300      	movs	r3, #0
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fbb6 	bl	8000b1c <__aeabi_dcmplt>
 80093b0:	b148      	cbz	r0, 80093c6 <_dtoa_r+0x186>
 80093b2:	4650      	mov	r0, sl
 80093b4:	f7f7 f8d6 	bl	8000564 <__aeabi_i2d>
 80093b8:	4632      	mov	r2, r6
 80093ba:	463b      	mov	r3, r7
 80093bc:	f7f7 fba4 	bl	8000b08 <__aeabi_dcmpeq>
 80093c0:	b908      	cbnz	r0, 80093c6 <_dtoa_r+0x186>
 80093c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80093c6:	f1ba 0f16 	cmp.w	sl, #22
 80093ca:	d854      	bhi.n	8009476 <_dtoa_r+0x236>
 80093cc:	4b61      	ldr	r3, [pc, #388]	; (8009554 <_dtoa_r+0x314>)
 80093ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093da:	f7f7 fb9f 	bl	8000b1c <__aeabi_dcmplt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	d04b      	beq.n	800947a <_dtoa_r+0x23a>
 80093e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80093e6:	2300      	movs	r3, #0
 80093e8:	930e      	str	r3, [sp, #56]	; 0x38
 80093ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093ec:	1b5d      	subs	r5, r3, r5
 80093ee:	1e6b      	subs	r3, r5, #1
 80093f0:	9304      	str	r3, [sp, #16]
 80093f2:	bf43      	ittte	mi
 80093f4:	2300      	movmi	r3, #0
 80093f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80093fa:	9304      	strmi	r3, [sp, #16]
 80093fc:	f04f 0800 	movpl.w	r8, #0
 8009400:	f1ba 0f00 	cmp.w	sl, #0
 8009404:	db3b      	blt.n	800947e <_dtoa_r+0x23e>
 8009406:	9b04      	ldr	r3, [sp, #16]
 8009408:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800940c:	4453      	add	r3, sl
 800940e:	9304      	str	r3, [sp, #16]
 8009410:	2300      	movs	r3, #0
 8009412:	9306      	str	r3, [sp, #24]
 8009414:	9b05      	ldr	r3, [sp, #20]
 8009416:	2b09      	cmp	r3, #9
 8009418:	d869      	bhi.n	80094ee <_dtoa_r+0x2ae>
 800941a:	2b05      	cmp	r3, #5
 800941c:	bfc4      	itt	gt
 800941e:	3b04      	subgt	r3, #4
 8009420:	9305      	strgt	r3, [sp, #20]
 8009422:	9b05      	ldr	r3, [sp, #20]
 8009424:	f1a3 0302 	sub.w	r3, r3, #2
 8009428:	bfcc      	ite	gt
 800942a:	2500      	movgt	r5, #0
 800942c:	2501      	movle	r5, #1
 800942e:	2b03      	cmp	r3, #3
 8009430:	d869      	bhi.n	8009506 <_dtoa_r+0x2c6>
 8009432:	e8df f003 	tbb	[pc, r3]
 8009436:	4e2c      	.short	0x4e2c
 8009438:	5a4c      	.short	0x5a4c
 800943a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800943e:	441d      	add	r5, r3
 8009440:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009444:	2b20      	cmp	r3, #32
 8009446:	bfc1      	itttt	gt
 8009448:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800944c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009450:	fa09 f303 	lslgt.w	r3, r9, r3
 8009454:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009458:	bfda      	itte	le
 800945a:	f1c3 0320 	rsble	r3, r3, #32
 800945e:	fa06 f003 	lslle.w	r0, r6, r3
 8009462:	4318      	orrgt	r0, r3
 8009464:	f7f7 f86e 	bl	8000544 <__aeabi_ui2d>
 8009468:	2301      	movs	r3, #1
 800946a:	4606      	mov	r6, r0
 800946c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009470:	3d01      	subs	r5, #1
 8009472:	9310      	str	r3, [sp, #64]	; 0x40
 8009474:	e771      	b.n	800935a <_dtoa_r+0x11a>
 8009476:	2301      	movs	r3, #1
 8009478:	e7b6      	b.n	80093e8 <_dtoa_r+0x1a8>
 800947a:	900e      	str	r0, [sp, #56]	; 0x38
 800947c:	e7b5      	b.n	80093ea <_dtoa_r+0x1aa>
 800947e:	f1ca 0300 	rsb	r3, sl, #0
 8009482:	9306      	str	r3, [sp, #24]
 8009484:	2300      	movs	r3, #0
 8009486:	eba8 080a 	sub.w	r8, r8, sl
 800948a:	930d      	str	r3, [sp, #52]	; 0x34
 800948c:	e7c2      	b.n	8009414 <_dtoa_r+0x1d4>
 800948e:	2300      	movs	r3, #0
 8009490:	9308      	str	r3, [sp, #32]
 8009492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	dc39      	bgt.n	800950c <_dtoa_r+0x2cc>
 8009498:	f04f 0901 	mov.w	r9, #1
 800949c:	f8cd 9004 	str.w	r9, [sp, #4]
 80094a0:	464b      	mov	r3, r9
 80094a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80094a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094a8:	2200      	movs	r2, #0
 80094aa:	6042      	str	r2, [r0, #4]
 80094ac:	2204      	movs	r2, #4
 80094ae:	f102 0614 	add.w	r6, r2, #20
 80094b2:	429e      	cmp	r6, r3
 80094b4:	6841      	ldr	r1, [r0, #4]
 80094b6:	d92f      	bls.n	8009518 <_dtoa_r+0x2d8>
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 feeb 	bl	800a294 <_Balloc>
 80094be:	9000      	str	r0, [sp, #0]
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d14b      	bne.n	800955c <_dtoa_r+0x31c>
 80094c4:	4b24      	ldr	r3, [pc, #144]	; (8009558 <_dtoa_r+0x318>)
 80094c6:	4602      	mov	r2, r0
 80094c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094cc:	e6d1      	b.n	8009272 <_dtoa_r+0x32>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e7de      	b.n	8009490 <_dtoa_r+0x250>
 80094d2:	2300      	movs	r3, #0
 80094d4:	9308      	str	r3, [sp, #32]
 80094d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d8:	eb0a 0903 	add.w	r9, sl, r3
 80094dc:	f109 0301 	add.w	r3, r9, #1
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	bfb8      	it	lt
 80094e6:	2301      	movlt	r3, #1
 80094e8:	e7dd      	b.n	80094a6 <_dtoa_r+0x266>
 80094ea:	2301      	movs	r3, #1
 80094ec:	e7f2      	b.n	80094d4 <_dtoa_r+0x294>
 80094ee:	2501      	movs	r5, #1
 80094f0:	2300      	movs	r3, #0
 80094f2:	9305      	str	r3, [sp, #20]
 80094f4:	9508      	str	r5, [sp, #32]
 80094f6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009500:	2312      	movs	r3, #18
 8009502:	9209      	str	r2, [sp, #36]	; 0x24
 8009504:	e7cf      	b.n	80094a6 <_dtoa_r+0x266>
 8009506:	2301      	movs	r3, #1
 8009508:	9308      	str	r3, [sp, #32]
 800950a:	e7f4      	b.n	80094f6 <_dtoa_r+0x2b6>
 800950c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009510:	f8cd 9004 	str.w	r9, [sp, #4]
 8009514:	464b      	mov	r3, r9
 8009516:	e7c6      	b.n	80094a6 <_dtoa_r+0x266>
 8009518:	3101      	adds	r1, #1
 800951a:	6041      	str	r1, [r0, #4]
 800951c:	0052      	lsls	r2, r2, #1
 800951e:	e7c6      	b.n	80094ae <_dtoa_r+0x26e>
 8009520:	636f4361 	.word	0x636f4361
 8009524:	3fd287a7 	.word	0x3fd287a7
 8009528:	8b60c8b3 	.word	0x8b60c8b3
 800952c:	3fc68a28 	.word	0x3fc68a28
 8009530:	509f79fb 	.word	0x509f79fb
 8009534:	3fd34413 	.word	0x3fd34413
 8009538:	0800cb85 	.word	0x0800cb85
 800953c:	0800cb9c 	.word	0x0800cb9c
 8009540:	7ff00000 	.word	0x7ff00000
 8009544:	0800cb81 	.word	0x0800cb81
 8009548:	0800cb78 	.word	0x0800cb78
 800954c:	0800cb55 	.word	0x0800cb55
 8009550:	3ff80000 	.word	0x3ff80000
 8009554:	0800ccf8 	.word	0x0800ccf8
 8009558:	0800cbfb 	.word	0x0800cbfb
 800955c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800955e:	9a00      	ldr	r2, [sp, #0]
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	2b0e      	cmp	r3, #14
 8009566:	f200 80ad 	bhi.w	80096c4 <_dtoa_r+0x484>
 800956a:	2d00      	cmp	r5, #0
 800956c:	f000 80aa 	beq.w	80096c4 <_dtoa_r+0x484>
 8009570:	f1ba 0f00 	cmp.w	sl, #0
 8009574:	dd36      	ble.n	80095e4 <_dtoa_r+0x3a4>
 8009576:	4ac3      	ldr	r2, [pc, #780]	; (8009884 <_dtoa_r+0x644>)
 8009578:	f00a 030f 	and.w	r3, sl, #15
 800957c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009580:	ed93 7b00 	vldr	d7, [r3]
 8009584:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009588:	ea4f 172a 	mov.w	r7, sl, asr #4
 800958c:	eeb0 8a47 	vmov.f32	s16, s14
 8009590:	eef0 8a67 	vmov.f32	s17, s15
 8009594:	d016      	beq.n	80095c4 <_dtoa_r+0x384>
 8009596:	4bbc      	ldr	r3, [pc, #752]	; (8009888 <_dtoa_r+0x648>)
 8009598:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800959c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095a0:	f7f7 f974 	bl	800088c <__aeabi_ddiv>
 80095a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a8:	f007 070f 	and.w	r7, r7, #15
 80095ac:	2503      	movs	r5, #3
 80095ae:	4eb6      	ldr	r6, [pc, #728]	; (8009888 <_dtoa_r+0x648>)
 80095b0:	b957      	cbnz	r7, 80095c8 <_dtoa_r+0x388>
 80095b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b6:	ec53 2b18 	vmov	r2, r3, d8
 80095ba:	f7f7 f967 	bl	800088c <__aeabi_ddiv>
 80095be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095c2:	e029      	b.n	8009618 <_dtoa_r+0x3d8>
 80095c4:	2502      	movs	r5, #2
 80095c6:	e7f2      	b.n	80095ae <_dtoa_r+0x36e>
 80095c8:	07f9      	lsls	r1, r7, #31
 80095ca:	d508      	bpl.n	80095de <_dtoa_r+0x39e>
 80095cc:	ec51 0b18 	vmov	r0, r1, d8
 80095d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095d4:	f7f7 f830 	bl	8000638 <__aeabi_dmul>
 80095d8:	ec41 0b18 	vmov	d8, r0, r1
 80095dc:	3501      	adds	r5, #1
 80095de:	107f      	asrs	r7, r7, #1
 80095e0:	3608      	adds	r6, #8
 80095e2:	e7e5      	b.n	80095b0 <_dtoa_r+0x370>
 80095e4:	f000 80a6 	beq.w	8009734 <_dtoa_r+0x4f4>
 80095e8:	f1ca 0600 	rsb	r6, sl, #0
 80095ec:	4ba5      	ldr	r3, [pc, #660]	; (8009884 <_dtoa_r+0x644>)
 80095ee:	4fa6      	ldr	r7, [pc, #664]	; (8009888 <_dtoa_r+0x648>)
 80095f0:	f006 020f 	and.w	r2, r6, #15
 80095f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009600:	f7f7 f81a 	bl	8000638 <__aeabi_dmul>
 8009604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009608:	1136      	asrs	r6, r6, #4
 800960a:	2300      	movs	r3, #0
 800960c:	2502      	movs	r5, #2
 800960e:	2e00      	cmp	r6, #0
 8009610:	f040 8085 	bne.w	800971e <_dtoa_r+0x4de>
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1d2      	bne.n	80095be <_dtoa_r+0x37e>
 8009618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 808c 	beq.w	8009738 <_dtoa_r+0x4f8>
 8009620:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009624:	4b99      	ldr	r3, [pc, #612]	; (800988c <_dtoa_r+0x64c>)
 8009626:	2200      	movs	r2, #0
 8009628:	4630      	mov	r0, r6
 800962a:	4639      	mov	r1, r7
 800962c:	f7f7 fa76 	bl	8000b1c <__aeabi_dcmplt>
 8009630:	2800      	cmp	r0, #0
 8009632:	f000 8081 	beq.w	8009738 <_dtoa_r+0x4f8>
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d07d      	beq.n	8009738 <_dtoa_r+0x4f8>
 800963c:	f1b9 0f00 	cmp.w	r9, #0
 8009640:	dd3c      	ble.n	80096bc <_dtoa_r+0x47c>
 8009642:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	2200      	movs	r2, #0
 800964a:	4b91      	ldr	r3, [pc, #580]	; (8009890 <_dtoa_r+0x650>)
 800964c:	4630      	mov	r0, r6
 800964e:	4639      	mov	r1, r7
 8009650:	f7f6 fff2 	bl	8000638 <__aeabi_dmul>
 8009654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009658:	3501      	adds	r5, #1
 800965a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800965e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009662:	4628      	mov	r0, r5
 8009664:	f7f6 ff7e 	bl	8000564 <__aeabi_i2d>
 8009668:	4632      	mov	r2, r6
 800966a:	463b      	mov	r3, r7
 800966c:	f7f6 ffe4 	bl	8000638 <__aeabi_dmul>
 8009670:	4b88      	ldr	r3, [pc, #544]	; (8009894 <_dtoa_r+0x654>)
 8009672:	2200      	movs	r2, #0
 8009674:	f7f6 fe2a 	bl	80002cc <__adddf3>
 8009678:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800967c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009680:	9303      	str	r3, [sp, #12]
 8009682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009684:	2b00      	cmp	r3, #0
 8009686:	d15c      	bne.n	8009742 <_dtoa_r+0x502>
 8009688:	4b83      	ldr	r3, [pc, #524]	; (8009898 <_dtoa_r+0x658>)
 800968a:	2200      	movs	r2, #0
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f6 fe1a 	bl	80002c8 <__aeabi_dsub>
 8009694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009698:	4606      	mov	r6, r0
 800969a:	460f      	mov	r7, r1
 800969c:	f7f7 fa5c 	bl	8000b58 <__aeabi_dcmpgt>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f040 8296 	bne.w	8009bd2 <_dtoa_r+0x992>
 80096a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80096aa:	4630      	mov	r0, r6
 80096ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096b0:	4639      	mov	r1, r7
 80096b2:	f7f7 fa33 	bl	8000b1c <__aeabi_dcmplt>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f040 8288 	bne.w	8009bcc <_dtoa_r+0x98c>
 80096bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f2c0 8158 	blt.w	800997c <_dtoa_r+0x73c>
 80096cc:	f1ba 0f0e 	cmp.w	sl, #14
 80096d0:	f300 8154 	bgt.w	800997c <_dtoa_r+0x73c>
 80096d4:	4b6b      	ldr	r3, [pc, #428]	; (8009884 <_dtoa_r+0x644>)
 80096d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f280 80e3 	bge.w	80098ac <_dtoa_r+0x66c>
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f300 80df 	bgt.w	80098ac <_dtoa_r+0x66c>
 80096ee:	f040 826d 	bne.w	8009bcc <_dtoa_r+0x98c>
 80096f2:	4b69      	ldr	r3, [pc, #420]	; (8009898 <_dtoa_r+0x658>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	4640      	mov	r0, r8
 80096f8:	4649      	mov	r1, r9
 80096fa:	f7f6 ff9d 	bl	8000638 <__aeabi_dmul>
 80096fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009702:	f7f7 fa1f 	bl	8000b44 <__aeabi_dcmpge>
 8009706:	9e01      	ldr	r6, [sp, #4]
 8009708:	4637      	mov	r7, r6
 800970a:	2800      	cmp	r0, #0
 800970c:	f040 8243 	bne.w	8009b96 <_dtoa_r+0x956>
 8009710:	9d00      	ldr	r5, [sp, #0]
 8009712:	2331      	movs	r3, #49	; 0x31
 8009714:	f805 3b01 	strb.w	r3, [r5], #1
 8009718:	f10a 0a01 	add.w	sl, sl, #1
 800971c:	e23f      	b.n	8009b9e <_dtoa_r+0x95e>
 800971e:	07f2      	lsls	r2, r6, #31
 8009720:	d505      	bpl.n	800972e <_dtoa_r+0x4ee>
 8009722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009726:	f7f6 ff87 	bl	8000638 <__aeabi_dmul>
 800972a:	3501      	adds	r5, #1
 800972c:	2301      	movs	r3, #1
 800972e:	1076      	asrs	r6, r6, #1
 8009730:	3708      	adds	r7, #8
 8009732:	e76c      	b.n	800960e <_dtoa_r+0x3ce>
 8009734:	2502      	movs	r5, #2
 8009736:	e76f      	b.n	8009618 <_dtoa_r+0x3d8>
 8009738:	9b01      	ldr	r3, [sp, #4]
 800973a:	f8cd a01c 	str.w	sl, [sp, #28]
 800973e:	930c      	str	r3, [sp, #48]	; 0x30
 8009740:	e78d      	b.n	800965e <_dtoa_r+0x41e>
 8009742:	9900      	ldr	r1, [sp, #0]
 8009744:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009748:	4b4e      	ldr	r3, [pc, #312]	; (8009884 <_dtoa_r+0x644>)
 800974a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800974e:	4401      	add	r1, r0
 8009750:	9102      	str	r1, [sp, #8]
 8009752:	9908      	ldr	r1, [sp, #32]
 8009754:	eeb0 8a47 	vmov.f32	s16, s14
 8009758:	eef0 8a67 	vmov.f32	s17, s15
 800975c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009760:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009764:	2900      	cmp	r1, #0
 8009766:	d045      	beq.n	80097f4 <_dtoa_r+0x5b4>
 8009768:	494c      	ldr	r1, [pc, #304]	; (800989c <_dtoa_r+0x65c>)
 800976a:	2000      	movs	r0, #0
 800976c:	f7f7 f88e 	bl	800088c <__aeabi_ddiv>
 8009770:	ec53 2b18 	vmov	r2, r3, d8
 8009774:	f7f6 fda8 	bl	80002c8 <__aeabi_dsub>
 8009778:	9d00      	ldr	r5, [sp, #0]
 800977a:	ec41 0b18 	vmov	d8, r0, r1
 800977e:	4639      	mov	r1, r7
 8009780:	4630      	mov	r0, r6
 8009782:	f7f7 fa09 	bl	8000b98 <__aeabi_d2iz>
 8009786:	900c      	str	r0, [sp, #48]	; 0x30
 8009788:	f7f6 feec 	bl	8000564 <__aeabi_i2d>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4630      	mov	r0, r6
 8009792:	4639      	mov	r1, r7
 8009794:	f7f6 fd98 	bl	80002c8 <__aeabi_dsub>
 8009798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800979a:	3330      	adds	r3, #48	; 0x30
 800979c:	f805 3b01 	strb.w	r3, [r5], #1
 80097a0:	ec53 2b18 	vmov	r2, r3, d8
 80097a4:	4606      	mov	r6, r0
 80097a6:	460f      	mov	r7, r1
 80097a8:	f7f7 f9b8 	bl	8000b1c <__aeabi_dcmplt>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d165      	bne.n	800987c <_dtoa_r+0x63c>
 80097b0:	4632      	mov	r2, r6
 80097b2:	463b      	mov	r3, r7
 80097b4:	4935      	ldr	r1, [pc, #212]	; (800988c <_dtoa_r+0x64c>)
 80097b6:	2000      	movs	r0, #0
 80097b8:	f7f6 fd86 	bl	80002c8 <__aeabi_dsub>
 80097bc:	ec53 2b18 	vmov	r2, r3, d8
 80097c0:	f7f7 f9ac 	bl	8000b1c <__aeabi_dcmplt>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f040 80b9 	bne.w	800993c <_dtoa_r+0x6fc>
 80097ca:	9b02      	ldr	r3, [sp, #8]
 80097cc:	429d      	cmp	r5, r3
 80097ce:	f43f af75 	beq.w	80096bc <_dtoa_r+0x47c>
 80097d2:	4b2f      	ldr	r3, [pc, #188]	; (8009890 <_dtoa_r+0x650>)
 80097d4:	ec51 0b18 	vmov	r0, r1, d8
 80097d8:	2200      	movs	r2, #0
 80097da:	f7f6 ff2d 	bl	8000638 <__aeabi_dmul>
 80097de:	4b2c      	ldr	r3, [pc, #176]	; (8009890 <_dtoa_r+0x650>)
 80097e0:	ec41 0b18 	vmov	d8, r0, r1
 80097e4:	2200      	movs	r2, #0
 80097e6:	4630      	mov	r0, r6
 80097e8:	4639      	mov	r1, r7
 80097ea:	f7f6 ff25 	bl	8000638 <__aeabi_dmul>
 80097ee:	4606      	mov	r6, r0
 80097f0:	460f      	mov	r7, r1
 80097f2:	e7c4      	b.n	800977e <_dtoa_r+0x53e>
 80097f4:	ec51 0b17 	vmov	r0, r1, d7
 80097f8:	f7f6 ff1e 	bl	8000638 <__aeabi_dmul>
 80097fc:	9b02      	ldr	r3, [sp, #8]
 80097fe:	9d00      	ldr	r5, [sp, #0]
 8009800:	930c      	str	r3, [sp, #48]	; 0x30
 8009802:	ec41 0b18 	vmov	d8, r0, r1
 8009806:	4639      	mov	r1, r7
 8009808:	4630      	mov	r0, r6
 800980a:	f7f7 f9c5 	bl	8000b98 <__aeabi_d2iz>
 800980e:	9011      	str	r0, [sp, #68]	; 0x44
 8009810:	f7f6 fea8 	bl	8000564 <__aeabi_i2d>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	f7f6 fd54 	bl	80002c8 <__aeabi_dsub>
 8009820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009822:	3330      	adds	r3, #48	; 0x30
 8009824:	f805 3b01 	strb.w	r3, [r5], #1
 8009828:	9b02      	ldr	r3, [sp, #8]
 800982a:	429d      	cmp	r5, r3
 800982c:	4606      	mov	r6, r0
 800982e:	460f      	mov	r7, r1
 8009830:	f04f 0200 	mov.w	r2, #0
 8009834:	d134      	bne.n	80098a0 <_dtoa_r+0x660>
 8009836:	4b19      	ldr	r3, [pc, #100]	; (800989c <_dtoa_r+0x65c>)
 8009838:	ec51 0b18 	vmov	r0, r1, d8
 800983c:	f7f6 fd46 	bl	80002cc <__adddf3>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4630      	mov	r0, r6
 8009846:	4639      	mov	r1, r7
 8009848:	f7f7 f986 	bl	8000b58 <__aeabi_dcmpgt>
 800984c:	2800      	cmp	r0, #0
 800984e:	d175      	bne.n	800993c <_dtoa_r+0x6fc>
 8009850:	ec53 2b18 	vmov	r2, r3, d8
 8009854:	4911      	ldr	r1, [pc, #68]	; (800989c <_dtoa_r+0x65c>)
 8009856:	2000      	movs	r0, #0
 8009858:	f7f6 fd36 	bl	80002c8 <__aeabi_dsub>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4630      	mov	r0, r6
 8009862:	4639      	mov	r1, r7
 8009864:	f7f7 f95a 	bl	8000b1c <__aeabi_dcmplt>
 8009868:	2800      	cmp	r0, #0
 800986a:	f43f af27 	beq.w	80096bc <_dtoa_r+0x47c>
 800986e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009870:	1e6b      	subs	r3, r5, #1
 8009872:	930c      	str	r3, [sp, #48]	; 0x30
 8009874:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009878:	2b30      	cmp	r3, #48	; 0x30
 800987a:	d0f8      	beq.n	800986e <_dtoa_r+0x62e>
 800987c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009880:	e04a      	b.n	8009918 <_dtoa_r+0x6d8>
 8009882:	bf00      	nop
 8009884:	0800ccf8 	.word	0x0800ccf8
 8009888:	0800ccd0 	.word	0x0800ccd0
 800988c:	3ff00000 	.word	0x3ff00000
 8009890:	40240000 	.word	0x40240000
 8009894:	401c0000 	.word	0x401c0000
 8009898:	40140000 	.word	0x40140000
 800989c:	3fe00000 	.word	0x3fe00000
 80098a0:	4baf      	ldr	r3, [pc, #700]	; (8009b60 <_dtoa_r+0x920>)
 80098a2:	f7f6 fec9 	bl	8000638 <__aeabi_dmul>
 80098a6:	4606      	mov	r6, r0
 80098a8:	460f      	mov	r7, r1
 80098aa:	e7ac      	b.n	8009806 <_dtoa_r+0x5c6>
 80098ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098b0:	9d00      	ldr	r5, [sp, #0]
 80098b2:	4642      	mov	r2, r8
 80098b4:	464b      	mov	r3, r9
 80098b6:	4630      	mov	r0, r6
 80098b8:	4639      	mov	r1, r7
 80098ba:	f7f6 ffe7 	bl	800088c <__aeabi_ddiv>
 80098be:	f7f7 f96b 	bl	8000b98 <__aeabi_d2iz>
 80098c2:	9002      	str	r0, [sp, #8]
 80098c4:	f7f6 fe4e 	bl	8000564 <__aeabi_i2d>
 80098c8:	4642      	mov	r2, r8
 80098ca:	464b      	mov	r3, r9
 80098cc:	f7f6 feb4 	bl	8000638 <__aeabi_dmul>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4630      	mov	r0, r6
 80098d6:	4639      	mov	r1, r7
 80098d8:	f7f6 fcf6 	bl	80002c8 <__aeabi_dsub>
 80098dc:	9e02      	ldr	r6, [sp, #8]
 80098de:	9f01      	ldr	r7, [sp, #4]
 80098e0:	3630      	adds	r6, #48	; 0x30
 80098e2:	f805 6b01 	strb.w	r6, [r5], #1
 80098e6:	9e00      	ldr	r6, [sp, #0]
 80098e8:	1bae      	subs	r6, r5, r6
 80098ea:	42b7      	cmp	r7, r6
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	d137      	bne.n	8009962 <_dtoa_r+0x722>
 80098f2:	f7f6 fceb 	bl	80002cc <__adddf3>
 80098f6:	4642      	mov	r2, r8
 80098f8:	464b      	mov	r3, r9
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	f7f7 f92b 	bl	8000b58 <__aeabi_dcmpgt>
 8009902:	b9c8      	cbnz	r0, 8009938 <_dtoa_r+0x6f8>
 8009904:	4642      	mov	r2, r8
 8009906:	464b      	mov	r3, r9
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f7 f8fc 	bl	8000b08 <__aeabi_dcmpeq>
 8009910:	b110      	cbz	r0, 8009918 <_dtoa_r+0x6d8>
 8009912:	9b02      	ldr	r3, [sp, #8]
 8009914:	07d9      	lsls	r1, r3, #31
 8009916:	d40f      	bmi.n	8009938 <_dtoa_r+0x6f8>
 8009918:	4620      	mov	r0, r4
 800991a:	4659      	mov	r1, fp
 800991c:	f000 fcfa 	bl	800a314 <_Bfree>
 8009920:	2300      	movs	r3, #0
 8009922:	702b      	strb	r3, [r5, #0]
 8009924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009926:	f10a 0001 	add.w	r0, sl, #1
 800992a:	6018      	str	r0, [r3, #0]
 800992c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800992e:	2b00      	cmp	r3, #0
 8009930:	f43f acd8 	beq.w	80092e4 <_dtoa_r+0xa4>
 8009934:	601d      	str	r5, [r3, #0]
 8009936:	e4d5      	b.n	80092e4 <_dtoa_r+0xa4>
 8009938:	f8cd a01c 	str.w	sl, [sp, #28]
 800993c:	462b      	mov	r3, r5
 800993e:	461d      	mov	r5, r3
 8009940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009944:	2a39      	cmp	r2, #57	; 0x39
 8009946:	d108      	bne.n	800995a <_dtoa_r+0x71a>
 8009948:	9a00      	ldr	r2, [sp, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d1f7      	bne.n	800993e <_dtoa_r+0x6fe>
 800994e:	9a07      	ldr	r2, [sp, #28]
 8009950:	9900      	ldr	r1, [sp, #0]
 8009952:	3201      	adds	r2, #1
 8009954:	9207      	str	r2, [sp, #28]
 8009956:	2230      	movs	r2, #48	; 0x30
 8009958:	700a      	strb	r2, [r1, #0]
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	3201      	adds	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	e78c      	b.n	800987c <_dtoa_r+0x63c>
 8009962:	4b7f      	ldr	r3, [pc, #508]	; (8009b60 <_dtoa_r+0x920>)
 8009964:	2200      	movs	r2, #0
 8009966:	f7f6 fe67 	bl	8000638 <__aeabi_dmul>
 800996a:	2200      	movs	r2, #0
 800996c:	2300      	movs	r3, #0
 800996e:	4606      	mov	r6, r0
 8009970:	460f      	mov	r7, r1
 8009972:	f7f7 f8c9 	bl	8000b08 <__aeabi_dcmpeq>
 8009976:	2800      	cmp	r0, #0
 8009978:	d09b      	beq.n	80098b2 <_dtoa_r+0x672>
 800997a:	e7cd      	b.n	8009918 <_dtoa_r+0x6d8>
 800997c:	9a08      	ldr	r2, [sp, #32]
 800997e:	2a00      	cmp	r2, #0
 8009980:	f000 80c4 	beq.w	8009b0c <_dtoa_r+0x8cc>
 8009984:	9a05      	ldr	r2, [sp, #20]
 8009986:	2a01      	cmp	r2, #1
 8009988:	f300 80a8 	bgt.w	8009adc <_dtoa_r+0x89c>
 800998c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800998e:	2a00      	cmp	r2, #0
 8009990:	f000 80a0 	beq.w	8009ad4 <_dtoa_r+0x894>
 8009994:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009998:	9e06      	ldr	r6, [sp, #24]
 800999a:	4645      	mov	r5, r8
 800999c:	9a04      	ldr	r2, [sp, #16]
 800999e:	2101      	movs	r1, #1
 80099a0:	441a      	add	r2, r3
 80099a2:	4620      	mov	r0, r4
 80099a4:	4498      	add	r8, r3
 80099a6:	9204      	str	r2, [sp, #16]
 80099a8:	f000 fd70 	bl	800a48c <__i2b>
 80099ac:	4607      	mov	r7, r0
 80099ae:	2d00      	cmp	r5, #0
 80099b0:	dd0b      	ble.n	80099ca <_dtoa_r+0x78a>
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dd08      	ble.n	80099ca <_dtoa_r+0x78a>
 80099b8:	42ab      	cmp	r3, r5
 80099ba:	9a04      	ldr	r2, [sp, #16]
 80099bc:	bfa8      	it	ge
 80099be:	462b      	movge	r3, r5
 80099c0:	eba8 0803 	sub.w	r8, r8, r3
 80099c4:	1aed      	subs	r5, r5, r3
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	9304      	str	r3, [sp, #16]
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	b1fb      	cbz	r3, 8009a0e <_dtoa_r+0x7ce>
 80099ce:	9b08      	ldr	r3, [sp, #32]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 809f 	beq.w	8009b14 <_dtoa_r+0x8d4>
 80099d6:	2e00      	cmp	r6, #0
 80099d8:	dd11      	ble.n	80099fe <_dtoa_r+0x7be>
 80099da:	4639      	mov	r1, r7
 80099dc:	4632      	mov	r2, r6
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 fe10 	bl	800a604 <__pow5mult>
 80099e4:	465a      	mov	r2, fp
 80099e6:	4601      	mov	r1, r0
 80099e8:	4607      	mov	r7, r0
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 fd64 	bl	800a4b8 <__multiply>
 80099f0:	4659      	mov	r1, fp
 80099f2:	9007      	str	r0, [sp, #28]
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 fc8d 	bl	800a314 <_Bfree>
 80099fa:	9b07      	ldr	r3, [sp, #28]
 80099fc:	469b      	mov	fp, r3
 80099fe:	9b06      	ldr	r3, [sp, #24]
 8009a00:	1b9a      	subs	r2, r3, r6
 8009a02:	d004      	beq.n	8009a0e <_dtoa_r+0x7ce>
 8009a04:	4659      	mov	r1, fp
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 fdfc 	bl	800a604 <__pow5mult>
 8009a0c:	4683      	mov	fp, r0
 8009a0e:	2101      	movs	r1, #1
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fd3b 	bl	800a48c <__i2b>
 8009a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	dd7c      	ble.n	8009b18 <_dtoa_r+0x8d8>
 8009a1e:	461a      	mov	r2, r3
 8009a20:	4601      	mov	r1, r0
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 fdee 	bl	800a604 <__pow5mult>
 8009a28:	9b05      	ldr	r3, [sp, #20]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	dd76      	ble.n	8009b1e <_dtoa_r+0x8de>
 8009a30:	2300      	movs	r3, #0
 8009a32:	9306      	str	r3, [sp, #24]
 8009a34:	6933      	ldr	r3, [r6, #16]
 8009a36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a3a:	6918      	ldr	r0, [r3, #16]
 8009a3c:	f000 fcd6 	bl	800a3ec <__hi0bits>
 8009a40:	f1c0 0020 	rsb	r0, r0, #32
 8009a44:	9b04      	ldr	r3, [sp, #16]
 8009a46:	4418      	add	r0, r3
 8009a48:	f010 001f 	ands.w	r0, r0, #31
 8009a4c:	f000 8086 	beq.w	8009b5c <_dtoa_r+0x91c>
 8009a50:	f1c0 0320 	rsb	r3, r0, #32
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	dd7f      	ble.n	8009b58 <_dtoa_r+0x918>
 8009a58:	f1c0 001c 	rsb	r0, r0, #28
 8009a5c:	9b04      	ldr	r3, [sp, #16]
 8009a5e:	4403      	add	r3, r0
 8009a60:	4480      	add	r8, r0
 8009a62:	4405      	add	r5, r0
 8009a64:	9304      	str	r3, [sp, #16]
 8009a66:	f1b8 0f00 	cmp.w	r8, #0
 8009a6a:	dd05      	ble.n	8009a78 <_dtoa_r+0x838>
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	4642      	mov	r2, r8
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fe21 	bl	800a6b8 <__lshift>
 8009a76:	4683      	mov	fp, r0
 8009a78:	9b04      	ldr	r3, [sp, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	dd05      	ble.n	8009a8a <_dtoa_r+0x84a>
 8009a7e:	4631      	mov	r1, r6
 8009a80:	461a      	mov	r2, r3
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fe18 	bl	800a6b8 <__lshift>
 8009a88:	4606      	mov	r6, r0
 8009a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d069      	beq.n	8009b64 <_dtoa_r+0x924>
 8009a90:	4631      	mov	r1, r6
 8009a92:	4658      	mov	r0, fp
 8009a94:	f000 fe7c 	bl	800a790 <__mcmp>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	da63      	bge.n	8009b64 <_dtoa_r+0x924>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4659      	mov	r1, fp
 8009aa0:	220a      	movs	r2, #10
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fc58 	bl	800a358 <__multadd>
 8009aa8:	9b08      	ldr	r3, [sp, #32]
 8009aaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009aae:	4683      	mov	fp, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 818f 	beq.w	8009dd4 <_dtoa_r+0xb94>
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	2300      	movs	r3, #0
 8009aba:	220a      	movs	r2, #10
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 fc4b 	bl	800a358 <__multadd>
 8009ac2:	f1b9 0f00 	cmp.w	r9, #0
 8009ac6:	4607      	mov	r7, r0
 8009ac8:	f300 808e 	bgt.w	8009be8 <_dtoa_r+0x9a8>
 8009acc:	9b05      	ldr	r3, [sp, #20]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	dc50      	bgt.n	8009b74 <_dtoa_r+0x934>
 8009ad2:	e089      	b.n	8009be8 <_dtoa_r+0x9a8>
 8009ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ada:	e75d      	b.n	8009998 <_dtoa_r+0x758>
 8009adc:	9b01      	ldr	r3, [sp, #4]
 8009ade:	1e5e      	subs	r6, r3, #1
 8009ae0:	9b06      	ldr	r3, [sp, #24]
 8009ae2:	42b3      	cmp	r3, r6
 8009ae4:	bfbf      	itttt	lt
 8009ae6:	9b06      	ldrlt	r3, [sp, #24]
 8009ae8:	9606      	strlt	r6, [sp, #24]
 8009aea:	1af2      	sublt	r2, r6, r3
 8009aec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009aee:	bfb6      	itet	lt
 8009af0:	189b      	addlt	r3, r3, r2
 8009af2:	1b9e      	subge	r6, r3, r6
 8009af4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	bfb8      	it	lt
 8009afa:	2600      	movlt	r6, #0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bfb5      	itete	lt
 8009b00:	eba8 0503 	sublt.w	r5, r8, r3
 8009b04:	9b01      	ldrge	r3, [sp, #4]
 8009b06:	2300      	movlt	r3, #0
 8009b08:	4645      	movge	r5, r8
 8009b0a:	e747      	b.n	800999c <_dtoa_r+0x75c>
 8009b0c:	9e06      	ldr	r6, [sp, #24]
 8009b0e:	9f08      	ldr	r7, [sp, #32]
 8009b10:	4645      	mov	r5, r8
 8009b12:	e74c      	b.n	80099ae <_dtoa_r+0x76e>
 8009b14:	9a06      	ldr	r2, [sp, #24]
 8009b16:	e775      	b.n	8009a04 <_dtoa_r+0x7c4>
 8009b18:	9b05      	ldr	r3, [sp, #20]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	dc18      	bgt.n	8009b50 <_dtoa_r+0x910>
 8009b1e:	9b02      	ldr	r3, [sp, #8]
 8009b20:	b9b3      	cbnz	r3, 8009b50 <_dtoa_r+0x910>
 8009b22:	9b03      	ldr	r3, [sp, #12]
 8009b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b28:	b9a3      	cbnz	r3, 8009b54 <_dtoa_r+0x914>
 8009b2a:	9b03      	ldr	r3, [sp, #12]
 8009b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b30:	0d1b      	lsrs	r3, r3, #20
 8009b32:	051b      	lsls	r3, r3, #20
 8009b34:	b12b      	cbz	r3, 8009b42 <_dtoa_r+0x902>
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	f108 0801 	add.w	r8, r8, #1
 8009b40:	2301      	movs	r3, #1
 8009b42:	9306      	str	r3, [sp, #24]
 8009b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f47f af74 	bne.w	8009a34 <_dtoa_r+0x7f4>
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	e779      	b.n	8009a44 <_dtoa_r+0x804>
 8009b50:	2300      	movs	r3, #0
 8009b52:	e7f6      	b.n	8009b42 <_dtoa_r+0x902>
 8009b54:	9b02      	ldr	r3, [sp, #8]
 8009b56:	e7f4      	b.n	8009b42 <_dtoa_r+0x902>
 8009b58:	d085      	beq.n	8009a66 <_dtoa_r+0x826>
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	301c      	adds	r0, #28
 8009b5e:	e77d      	b.n	8009a5c <_dtoa_r+0x81c>
 8009b60:	40240000 	.word	0x40240000
 8009b64:	9b01      	ldr	r3, [sp, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dc38      	bgt.n	8009bdc <_dtoa_r+0x99c>
 8009b6a:	9b05      	ldr	r3, [sp, #20]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	dd35      	ble.n	8009bdc <_dtoa_r+0x99c>
 8009b70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	d10d      	bne.n	8009b96 <_dtoa_r+0x956>
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	464b      	mov	r3, r9
 8009b7e:	2205      	movs	r2, #5
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 fbe9 	bl	800a358 <__multadd>
 8009b86:	4601      	mov	r1, r0
 8009b88:	4606      	mov	r6, r0
 8009b8a:	4658      	mov	r0, fp
 8009b8c:	f000 fe00 	bl	800a790 <__mcmp>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	f73f adbd 	bgt.w	8009710 <_dtoa_r+0x4d0>
 8009b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b98:	9d00      	ldr	r5, [sp, #0]
 8009b9a:	ea6f 0a03 	mvn.w	sl, r3
 8009b9e:	f04f 0800 	mov.w	r8, #0
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f000 fbb5 	bl	800a314 <_Bfree>
 8009baa:	2f00      	cmp	r7, #0
 8009bac:	f43f aeb4 	beq.w	8009918 <_dtoa_r+0x6d8>
 8009bb0:	f1b8 0f00 	cmp.w	r8, #0
 8009bb4:	d005      	beq.n	8009bc2 <_dtoa_r+0x982>
 8009bb6:	45b8      	cmp	r8, r7
 8009bb8:	d003      	beq.n	8009bc2 <_dtoa_r+0x982>
 8009bba:	4641      	mov	r1, r8
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 fba9 	bl	800a314 <_Bfree>
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f000 fba5 	bl	800a314 <_Bfree>
 8009bca:	e6a5      	b.n	8009918 <_dtoa_r+0x6d8>
 8009bcc:	2600      	movs	r6, #0
 8009bce:	4637      	mov	r7, r6
 8009bd0:	e7e1      	b.n	8009b96 <_dtoa_r+0x956>
 8009bd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009bd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009bd8:	4637      	mov	r7, r6
 8009bda:	e599      	b.n	8009710 <_dtoa_r+0x4d0>
 8009bdc:	9b08      	ldr	r3, [sp, #32]
 8009bde:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 80fd 	beq.w	8009de2 <_dtoa_r+0xba2>
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	dd05      	ble.n	8009bf8 <_dtoa_r+0x9b8>
 8009bec:	4639      	mov	r1, r7
 8009bee:	462a      	mov	r2, r5
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 fd61 	bl	800a6b8 <__lshift>
 8009bf6:	4607      	mov	r7, r0
 8009bf8:	9b06      	ldr	r3, [sp, #24]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d05c      	beq.n	8009cb8 <_dtoa_r+0xa78>
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fb47 	bl	800a294 <_Balloc>
 8009c06:	4605      	mov	r5, r0
 8009c08:	b928      	cbnz	r0, 8009c16 <_dtoa_r+0x9d6>
 8009c0a:	4b80      	ldr	r3, [pc, #512]	; (8009e0c <_dtoa_r+0xbcc>)
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c12:	f7ff bb2e 	b.w	8009272 <_dtoa_r+0x32>
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	3202      	adds	r2, #2
 8009c1a:	0092      	lsls	r2, r2, #2
 8009c1c:	f107 010c 	add.w	r1, r7, #12
 8009c20:	300c      	adds	r0, #12
 8009c22:	f000 fb1d 	bl	800a260 <memcpy>
 8009c26:	2201      	movs	r2, #1
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 fd44 	bl	800a6b8 <__lshift>
 8009c30:	9b00      	ldr	r3, [sp, #0]
 8009c32:	3301      	adds	r3, #1
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	9b00      	ldr	r3, [sp, #0]
 8009c38:	444b      	add	r3, r9
 8009c3a:	9307      	str	r3, [sp, #28]
 8009c3c:	9b02      	ldr	r3, [sp, #8]
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	46b8      	mov	r8, r7
 8009c44:	9306      	str	r3, [sp, #24]
 8009c46:	4607      	mov	r7, r0
 8009c48:	9b01      	ldr	r3, [sp, #4]
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	4658      	mov	r0, fp
 8009c50:	9302      	str	r3, [sp, #8]
 8009c52:	f7ff fa67 	bl	8009124 <quorem>
 8009c56:	4603      	mov	r3, r0
 8009c58:	3330      	adds	r3, #48	; 0x30
 8009c5a:	9004      	str	r0, [sp, #16]
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	4658      	mov	r0, fp
 8009c60:	9308      	str	r3, [sp, #32]
 8009c62:	f000 fd95 	bl	800a790 <__mcmp>
 8009c66:	463a      	mov	r2, r7
 8009c68:	4681      	mov	r9, r0
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f000 fdab 	bl	800a7c8 <__mdiff>
 8009c72:	68c2      	ldr	r2, [r0, #12]
 8009c74:	9b08      	ldr	r3, [sp, #32]
 8009c76:	4605      	mov	r5, r0
 8009c78:	bb02      	cbnz	r2, 8009cbc <_dtoa_r+0xa7c>
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	f000 fd87 	bl	800a790 <__mcmp>
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	4602      	mov	r2, r0
 8009c86:	4629      	mov	r1, r5
 8009c88:	4620      	mov	r0, r4
 8009c8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009c8e:	f000 fb41 	bl	800a314 <_Bfree>
 8009c92:	9b05      	ldr	r3, [sp, #20]
 8009c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c96:	9d01      	ldr	r5, [sp, #4]
 8009c98:	ea43 0102 	orr.w	r1, r3, r2
 8009c9c:	9b06      	ldr	r3, [sp, #24]
 8009c9e:	430b      	orrs	r3, r1
 8009ca0:	9b08      	ldr	r3, [sp, #32]
 8009ca2:	d10d      	bne.n	8009cc0 <_dtoa_r+0xa80>
 8009ca4:	2b39      	cmp	r3, #57	; 0x39
 8009ca6:	d029      	beq.n	8009cfc <_dtoa_r+0xabc>
 8009ca8:	f1b9 0f00 	cmp.w	r9, #0
 8009cac:	dd01      	ble.n	8009cb2 <_dtoa_r+0xa72>
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	3331      	adds	r3, #49	; 0x31
 8009cb2:	9a02      	ldr	r2, [sp, #8]
 8009cb4:	7013      	strb	r3, [r2, #0]
 8009cb6:	e774      	b.n	8009ba2 <_dtoa_r+0x962>
 8009cb8:	4638      	mov	r0, r7
 8009cba:	e7b9      	b.n	8009c30 <_dtoa_r+0x9f0>
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	e7e2      	b.n	8009c86 <_dtoa_r+0xa46>
 8009cc0:	f1b9 0f00 	cmp.w	r9, #0
 8009cc4:	db06      	blt.n	8009cd4 <_dtoa_r+0xa94>
 8009cc6:	9905      	ldr	r1, [sp, #20]
 8009cc8:	ea41 0909 	orr.w	r9, r1, r9
 8009ccc:	9906      	ldr	r1, [sp, #24]
 8009cce:	ea59 0101 	orrs.w	r1, r9, r1
 8009cd2:	d120      	bne.n	8009d16 <_dtoa_r+0xad6>
 8009cd4:	2a00      	cmp	r2, #0
 8009cd6:	ddec      	ble.n	8009cb2 <_dtoa_r+0xa72>
 8009cd8:	4659      	mov	r1, fp
 8009cda:	2201      	movs	r2, #1
 8009cdc:	4620      	mov	r0, r4
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	f000 fcea 	bl	800a6b8 <__lshift>
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4683      	mov	fp, r0
 8009ce8:	f000 fd52 	bl	800a790 <__mcmp>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	9b01      	ldr	r3, [sp, #4]
 8009cf0:	dc02      	bgt.n	8009cf8 <_dtoa_r+0xab8>
 8009cf2:	d1de      	bne.n	8009cb2 <_dtoa_r+0xa72>
 8009cf4:	07da      	lsls	r2, r3, #31
 8009cf6:	d5dc      	bpl.n	8009cb2 <_dtoa_r+0xa72>
 8009cf8:	2b39      	cmp	r3, #57	; 0x39
 8009cfa:	d1d8      	bne.n	8009cae <_dtoa_r+0xa6e>
 8009cfc:	9a02      	ldr	r2, [sp, #8]
 8009cfe:	2339      	movs	r3, #57	; 0x39
 8009d00:	7013      	strb	r3, [r2, #0]
 8009d02:	462b      	mov	r3, r5
 8009d04:	461d      	mov	r5, r3
 8009d06:	3b01      	subs	r3, #1
 8009d08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d0c:	2a39      	cmp	r2, #57	; 0x39
 8009d0e:	d050      	beq.n	8009db2 <_dtoa_r+0xb72>
 8009d10:	3201      	adds	r2, #1
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	e745      	b.n	8009ba2 <_dtoa_r+0x962>
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	dd03      	ble.n	8009d22 <_dtoa_r+0xae2>
 8009d1a:	2b39      	cmp	r3, #57	; 0x39
 8009d1c:	d0ee      	beq.n	8009cfc <_dtoa_r+0xabc>
 8009d1e:	3301      	adds	r3, #1
 8009d20:	e7c7      	b.n	8009cb2 <_dtoa_r+0xa72>
 8009d22:	9a01      	ldr	r2, [sp, #4]
 8009d24:	9907      	ldr	r1, [sp, #28]
 8009d26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d2a:	428a      	cmp	r2, r1
 8009d2c:	d02a      	beq.n	8009d84 <_dtoa_r+0xb44>
 8009d2e:	4659      	mov	r1, fp
 8009d30:	2300      	movs	r3, #0
 8009d32:	220a      	movs	r2, #10
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 fb0f 	bl	800a358 <__multadd>
 8009d3a:	45b8      	cmp	r8, r7
 8009d3c:	4683      	mov	fp, r0
 8009d3e:	f04f 0300 	mov.w	r3, #0
 8009d42:	f04f 020a 	mov.w	r2, #10
 8009d46:	4641      	mov	r1, r8
 8009d48:	4620      	mov	r0, r4
 8009d4a:	d107      	bne.n	8009d5c <_dtoa_r+0xb1c>
 8009d4c:	f000 fb04 	bl	800a358 <__multadd>
 8009d50:	4680      	mov	r8, r0
 8009d52:	4607      	mov	r7, r0
 8009d54:	9b01      	ldr	r3, [sp, #4]
 8009d56:	3301      	adds	r3, #1
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	e775      	b.n	8009c48 <_dtoa_r+0xa08>
 8009d5c:	f000 fafc 	bl	800a358 <__multadd>
 8009d60:	4639      	mov	r1, r7
 8009d62:	4680      	mov	r8, r0
 8009d64:	2300      	movs	r3, #0
 8009d66:	220a      	movs	r2, #10
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f000 faf5 	bl	800a358 <__multadd>
 8009d6e:	4607      	mov	r7, r0
 8009d70:	e7f0      	b.n	8009d54 <_dtoa_r+0xb14>
 8009d72:	f1b9 0f00 	cmp.w	r9, #0
 8009d76:	9a00      	ldr	r2, [sp, #0]
 8009d78:	bfcc      	ite	gt
 8009d7a:	464d      	movgt	r5, r9
 8009d7c:	2501      	movle	r5, #1
 8009d7e:	4415      	add	r5, r2
 8009d80:	f04f 0800 	mov.w	r8, #0
 8009d84:	4659      	mov	r1, fp
 8009d86:	2201      	movs	r2, #1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	f000 fc94 	bl	800a6b8 <__lshift>
 8009d90:	4631      	mov	r1, r6
 8009d92:	4683      	mov	fp, r0
 8009d94:	f000 fcfc 	bl	800a790 <__mcmp>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	dcb2      	bgt.n	8009d02 <_dtoa_r+0xac2>
 8009d9c:	d102      	bne.n	8009da4 <_dtoa_r+0xb64>
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	07db      	lsls	r3, r3, #31
 8009da2:	d4ae      	bmi.n	8009d02 <_dtoa_r+0xac2>
 8009da4:	462b      	mov	r3, r5
 8009da6:	461d      	mov	r5, r3
 8009da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dac:	2a30      	cmp	r2, #48	; 0x30
 8009dae:	d0fa      	beq.n	8009da6 <_dtoa_r+0xb66>
 8009db0:	e6f7      	b.n	8009ba2 <_dtoa_r+0x962>
 8009db2:	9a00      	ldr	r2, [sp, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d1a5      	bne.n	8009d04 <_dtoa_r+0xac4>
 8009db8:	f10a 0a01 	add.w	sl, sl, #1
 8009dbc:	2331      	movs	r3, #49	; 0x31
 8009dbe:	e779      	b.n	8009cb4 <_dtoa_r+0xa74>
 8009dc0:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <_dtoa_r+0xbd0>)
 8009dc2:	f7ff baaf 	b.w	8009324 <_dtoa_r+0xe4>
 8009dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f47f aa86 	bne.w	80092da <_dtoa_r+0x9a>
 8009dce:	4b11      	ldr	r3, [pc, #68]	; (8009e14 <_dtoa_r+0xbd4>)
 8009dd0:	f7ff baa8 	b.w	8009324 <_dtoa_r+0xe4>
 8009dd4:	f1b9 0f00 	cmp.w	r9, #0
 8009dd8:	dc03      	bgt.n	8009de2 <_dtoa_r+0xba2>
 8009dda:	9b05      	ldr	r3, [sp, #20]
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	f73f aec9 	bgt.w	8009b74 <_dtoa_r+0x934>
 8009de2:	9d00      	ldr	r5, [sp, #0]
 8009de4:	4631      	mov	r1, r6
 8009de6:	4658      	mov	r0, fp
 8009de8:	f7ff f99c 	bl	8009124 <quorem>
 8009dec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009df0:	f805 3b01 	strb.w	r3, [r5], #1
 8009df4:	9a00      	ldr	r2, [sp, #0]
 8009df6:	1aaa      	subs	r2, r5, r2
 8009df8:	4591      	cmp	r9, r2
 8009dfa:	ddba      	ble.n	8009d72 <_dtoa_r+0xb32>
 8009dfc:	4659      	mov	r1, fp
 8009dfe:	2300      	movs	r3, #0
 8009e00:	220a      	movs	r2, #10
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 faa8 	bl	800a358 <__multadd>
 8009e08:	4683      	mov	fp, r0
 8009e0a:	e7eb      	b.n	8009de4 <_dtoa_r+0xba4>
 8009e0c:	0800cbfb 	.word	0x0800cbfb
 8009e10:	0800cb54 	.word	0x0800cb54
 8009e14:	0800cb78 	.word	0x0800cb78

08009e18 <__sflush_r>:
 8009e18:	898a      	ldrh	r2, [r1, #12]
 8009e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	4605      	mov	r5, r0
 8009e20:	0710      	lsls	r0, r2, #28
 8009e22:	460c      	mov	r4, r1
 8009e24:	d458      	bmi.n	8009ed8 <__sflush_r+0xc0>
 8009e26:	684b      	ldr	r3, [r1, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dc05      	bgt.n	8009e38 <__sflush_r+0x20>
 8009e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dc02      	bgt.n	8009e38 <__sflush_r+0x20>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e3a:	2e00      	cmp	r6, #0
 8009e3c:	d0f9      	beq.n	8009e32 <__sflush_r+0x1a>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e44:	682f      	ldr	r7, [r5, #0]
 8009e46:	602b      	str	r3, [r5, #0]
 8009e48:	d032      	beq.n	8009eb0 <__sflush_r+0x98>
 8009e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	075a      	lsls	r2, r3, #29
 8009e50:	d505      	bpl.n	8009e5e <__sflush_r+0x46>
 8009e52:	6863      	ldr	r3, [r4, #4]
 8009e54:	1ac0      	subs	r0, r0, r3
 8009e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e58:	b10b      	cbz	r3, 8009e5e <__sflush_r+0x46>
 8009e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e5c:	1ac0      	subs	r0, r0, r3
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4602      	mov	r2, r0
 8009e62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e64:	6a21      	ldr	r1, [r4, #32]
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b0      	blx	r6
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	d106      	bne.n	8009e7e <__sflush_r+0x66>
 8009e70:	6829      	ldr	r1, [r5, #0]
 8009e72:	291d      	cmp	r1, #29
 8009e74:	d82c      	bhi.n	8009ed0 <__sflush_r+0xb8>
 8009e76:	4a2a      	ldr	r2, [pc, #168]	; (8009f20 <__sflush_r+0x108>)
 8009e78:	40ca      	lsrs	r2, r1
 8009e7a:	07d6      	lsls	r6, r2, #31
 8009e7c:	d528      	bpl.n	8009ed0 <__sflush_r+0xb8>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	6062      	str	r2, [r4, #4]
 8009e82:	04d9      	lsls	r1, r3, #19
 8009e84:	6922      	ldr	r2, [r4, #16]
 8009e86:	6022      	str	r2, [r4, #0]
 8009e88:	d504      	bpl.n	8009e94 <__sflush_r+0x7c>
 8009e8a:	1c42      	adds	r2, r0, #1
 8009e8c:	d101      	bne.n	8009e92 <__sflush_r+0x7a>
 8009e8e:	682b      	ldr	r3, [r5, #0]
 8009e90:	b903      	cbnz	r3, 8009e94 <__sflush_r+0x7c>
 8009e92:	6560      	str	r0, [r4, #84]	; 0x54
 8009e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e96:	602f      	str	r7, [r5, #0]
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	d0ca      	beq.n	8009e32 <__sflush_r+0x1a>
 8009e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	d002      	beq.n	8009eaa <__sflush_r+0x92>
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f7fe facb 	bl	8008440 <_free_r>
 8009eaa:	2000      	movs	r0, #0
 8009eac:	6360      	str	r0, [r4, #52]	; 0x34
 8009eae:	e7c1      	b.n	8009e34 <__sflush_r+0x1c>
 8009eb0:	6a21      	ldr	r1, [r4, #32]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b0      	blx	r6
 8009eb8:	1c41      	adds	r1, r0, #1
 8009eba:	d1c7      	bne.n	8009e4c <__sflush_r+0x34>
 8009ebc:	682b      	ldr	r3, [r5, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0c4      	beq.n	8009e4c <__sflush_r+0x34>
 8009ec2:	2b1d      	cmp	r3, #29
 8009ec4:	d001      	beq.n	8009eca <__sflush_r+0xb2>
 8009ec6:	2b16      	cmp	r3, #22
 8009ec8:	d101      	bne.n	8009ece <__sflush_r+0xb6>
 8009eca:	602f      	str	r7, [r5, #0]
 8009ecc:	e7b1      	b.n	8009e32 <__sflush_r+0x1a>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	e7ad      	b.n	8009e34 <__sflush_r+0x1c>
 8009ed8:	690f      	ldr	r7, [r1, #16]
 8009eda:	2f00      	cmp	r7, #0
 8009edc:	d0a9      	beq.n	8009e32 <__sflush_r+0x1a>
 8009ede:	0793      	lsls	r3, r2, #30
 8009ee0:	680e      	ldr	r6, [r1, #0]
 8009ee2:	bf08      	it	eq
 8009ee4:	694b      	ldreq	r3, [r1, #20]
 8009ee6:	600f      	str	r7, [r1, #0]
 8009ee8:	bf18      	it	ne
 8009eea:	2300      	movne	r3, #0
 8009eec:	eba6 0807 	sub.w	r8, r6, r7
 8009ef0:	608b      	str	r3, [r1, #8]
 8009ef2:	f1b8 0f00 	cmp.w	r8, #0
 8009ef6:	dd9c      	ble.n	8009e32 <__sflush_r+0x1a>
 8009ef8:	6a21      	ldr	r1, [r4, #32]
 8009efa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009efc:	4643      	mov	r3, r8
 8009efe:	463a      	mov	r2, r7
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b0      	blx	r6
 8009f04:	2800      	cmp	r0, #0
 8009f06:	dc06      	bgt.n	8009f16 <__sflush_r+0xfe>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f0e:	81a3      	strh	r3, [r4, #12]
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f14:	e78e      	b.n	8009e34 <__sflush_r+0x1c>
 8009f16:	4407      	add	r7, r0
 8009f18:	eba8 0800 	sub.w	r8, r8, r0
 8009f1c:	e7e9      	b.n	8009ef2 <__sflush_r+0xda>
 8009f1e:	bf00      	nop
 8009f20:	20400001 	.word	0x20400001

08009f24 <_fflush_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	690b      	ldr	r3, [r1, #16]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	b913      	cbnz	r3, 8009f34 <_fflush_r+0x10>
 8009f2e:	2500      	movs	r5, #0
 8009f30:	4628      	mov	r0, r5
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	b118      	cbz	r0, 8009f3e <_fflush_r+0x1a>
 8009f36:	6983      	ldr	r3, [r0, #24]
 8009f38:	b90b      	cbnz	r3, 8009f3e <_fflush_r+0x1a>
 8009f3a:	f000 f887 	bl	800a04c <__sinit>
 8009f3e:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <_fflush_r+0x6c>)
 8009f40:	429c      	cmp	r4, r3
 8009f42:	d11b      	bne.n	8009f7c <_fflush_r+0x58>
 8009f44:	686c      	ldr	r4, [r5, #4]
 8009f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0ef      	beq.n	8009f2e <_fflush_r+0xa>
 8009f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f50:	07d0      	lsls	r0, r2, #31
 8009f52:	d404      	bmi.n	8009f5e <_fflush_r+0x3a>
 8009f54:	0599      	lsls	r1, r3, #22
 8009f56:	d402      	bmi.n	8009f5e <_fflush_r+0x3a>
 8009f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f5a:	f000 f91a 	bl	800a192 <__retarget_lock_acquire_recursive>
 8009f5e:	4628      	mov	r0, r5
 8009f60:	4621      	mov	r1, r4
 8009f62:	f7ff ff59 	bl	8009e18 <__sflush_r>
 8009f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f68:	07da      	lsls	r2, r3, #31
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	d4e0      	bmi.n	8009f30 <_fflush_r+0xc>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	059b      	lsls	r3, r3, #22
 8009f72:	d4dd      	bmi.n	8009f30 <_fflush_r+0xc>
 8009f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f76:	f000 f90d 	bl	800a194 <__retarget_lock_release_recursive>
 8009f7a:	e7d9      	b.n	8009f30 <_fflush_r+0xc>
 8009f7c:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <_fflush_r+0x70>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d101      	bne.n	8009f86 <_fflush_r+0x62>
 8009f82:	68ac      	ldr	r4, [r5, #8]
 8009f84:	e7df      	b.n	8009f46 <_fflush_r+0x22>
 8009f86:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <_fflush_r+0x74>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	bf08      	it	eq
 8009f8c:	68ec      	ldreq	r4, [r5, #12]
 8009f8e:	e7da      	b.n	8009f46 <_fflush_r+0x22>
 8009f90:	0800cc2c 	.word	0x0800cc2c
 8009f94:	0800cc4c 	.word	0x0800cc4c
 8009f98:	0800cc0c 	.word	0x0800cc0c

08009f9c <std>:
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009faa:	6083      	str	r3, [r0, #8]
 8009fac:	8181      	strh	r1, [r0, #12]
 8009fae:	6643      	str	r3, [r0, #100]	; 0x64
 8009fb0:	81c2      	strh	r2, [r0, #14]
 8009fb2:	6183      	str	r3, [r0, #24]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	305c      	adds	r0, #92	; 0x5c
 8009fba:	f7fe fa29 	bl	8008410 <memset>
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <std+0x38>)
 8009fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8009fc2:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <std+0x3c>)
 8009fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fc6:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <std+0x40>)
 8009fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fca:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <std+0x44>)
 8009fcc:	6224      	str	r4, [r4, #32]
 8009fce:	6323      	str	r3, [r4, #48]	; 0x30
 8009fd0:	bd10      	pop	{r4, pc}
 8009fd2:	bf00      	nop
 8009fd4:	0800ac45 	.word	0x0800ac45
 8009fd8:	0800ac67 	.word	0x0800ac67
 8009fdc:	0800ac9f 	.word	0x0800ac9f
 8009fe0:	0800acc3 	.word	0x0800acc3

08009fe4 <_cleanup_r>:
 8009fe4:	4901      	ldr	r1, [pc, #4]	; (8009fec <_cleanup_r+0x8>)
 8009fe6:	f000 b8af 	b.w	800a148 <_fwalk_reent>
 8009fea:	bf00      	nop
 8009fec:	08009f25 	.word	0x08009f25

08009ff0 <__sfmoreglue>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	1e4a      	subs	r2, r1, #1
 8009ff4:	2568      	movs	r5, #104	; 0x68
 8009ff6:	4355      	muls	r5, r2
 8009ff8:	460e      	mov	r6, r1
 8009ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ffe:	f7fe fa6f 	bl	80084e0 <_malloc_r>
 800a002:	4604      	mov	r4, r0
 800a004:	b140      	cbz	r0, 800a018 <__sfmoreglue+0x28>
 800a006:	2100      	movs	r1, #0
 800a008:	e9c0 1600 	strd	r1, r6, [r0]
 800a00c:	300c      	adds	r0, #12
 800a00e:	60a0      	str	r0, [r4, #8]
 800a010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a014:	f7fe f9fc 	bl	8008410 <memset>
 800a018:	4620      	mov	r0, r4
 800a01a:	bd70      	pop	{r4, r5, r6, pc}

0800a01c <__sfp_lock_acquire>:
 800a01c:	4801      	ldr	r0, [pc, #4]	; (800a024 <__sfp_lock_acquire+0x8>)
 800a01e:	f000 b8b8 	b.w	800a192 <__retarget_lock_acquire_recursive>
 800a022:	bf00      	nop
 800a024:	2000063c 	.word	0x2000063c

0800a028 <__sfp_lock_release>:
 800a028:	4801      	ldr	r0, [pc, #4]	; (800a030 <__sfp_lock_release+0x8>)
 800a02a:	f000 b8b3 	b.w	800a194 <__retarget_lock_release_recursive>
 800a02e:	bf00      	nop
 800a030:	2000063c 	.word	0x2000063c

0800a034 <__sinit_lock_acquire>:
 800a034:	4801      	ldr	r0, [pc, #4]	; (800a03c <__sinit_lock_acquire+0x8>)
 800a036:	f000 b8ac 	b.w	800a192 <__retarget_lock_acquire_recursive>
 800a03a:	bf00      	nop
 800a03c:	20000637 	.word	0x20000637

0800a040 <__sinit_lock_release>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__sinit_lock_release+0x8>)
 800a042:	f000 b8a7 	b.w	800a194 <__retarget_lock_release_recursive>
 800a046:	bf00      	nop
 800a048:	20000637 	.word	0x20000637

0800a04c <__sinit>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4604      	mov	r4, r0
 800a050:	f7ff fff0 	bl	800a034 <__sinit_lock_acquire>
 800a054:	69a3      	ldr	r3, [r4, #24]
 800a056:	b11b      	cbz	r3, 800a060 <__sinit+0x14>
 800a058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a05c:	f7ff bff0 	b.w	800a040 <__sinit_lock_release>
 800a060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a064:	6523      	str	r3, [r4, #80]	; 0x50
 800a066:	4b13      	ldr	r3, [pc, #76]	; (800a0b4 <__sinit+0x68>)
 800a068:	4a13      	ldr	r2, [pc, #76]	; (800a0b8 <__sinit+0x6c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a06e:	42a3      	cmp	r3, r4
 800a070:	bf04      	itt	eq
 800a072:	2301      	moveq	r3, #1
 800a074:	61a3      	streq	r3, [r4, #24]
 800a076:	4620      	mov	r0, r4
 800a078:	f000 f820 	bl	800a0bc <__sfp>
 800a07c:	6060      	str	r0, [r4, #4]
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 f81c 	bl	800a0bc <__sfp>
 800a084:	60a0      	str	r0, [r4, #8]
 800a086:	4620      	mov	r0, r4
 800a088:	f000 f818 	bl	800a0bc <__sfp>
 800a08c:	2200      	movs	r2, #0
 800a08e:	60e0      	str	r0, [r4, #12]
 800a090:	2104      	movs	r1, #4
 800a092:	6860      	ldr	r0, [r4, #4]
 800a094:	f7ff ff82 	bl	8009f9c <std>
 800a098:	68a0      	ldr	r0, [r4, #8]
 800a09a:	2201      	movs	r2, #1
 800a09c:	2109      	movs	r1, #9
 800a09e:	f7ff ff7d 	bl	8009f9c <std>
 800a0a2:	68e0      	ldr	r0, [r4, #12]
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	2112      	movs	r1, #18
 800a0a8:	f7ff ff78 	bl	8009f9c <std>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	61a3      	str	r3, [r4, #24]
 800a0b0:	e7d2      	b.n	800a058 <__sinit+0xc>
 800a0b2:	bf00      	nop
 800a0b4:	0800cb40 	.word	0x0800cb40
 800a0b8:	08009fe5 	.word	0x08009fe5

0800a0bc <__sfp>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	4607      	mov	r7, r0
 800a0c0:	f7ff ffac 	bl	800a01c <__sfp_lock_acquire>
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <__sfp+0x84>)
 800a0c6:	681e      	ldr	r6, [r3, #0]
 800a0c8:	69b3      	ldr	r3, [r6, #24]
 800a0ca:	b913      	cbnz	r3, 800a0d2 <__sfp+0x16>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f7ff ffbd 	bl	800a04c <__sinit>
 800a0d2:	3648      	adds	r6, #72	; 0x48
 800a0d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	d503      	bpl.n	800a0e4 <__sfp+0x28>
 800a0dc:	6833      	ldr	r3, [r6, #0]
 800a0de:	b30b      	cbz	r3, 800a124 <__sfp+0x68>
 800a0e0:	6836      	ldr	r6, [r6, #0]
 800a0e2:	e7f7      	b.n	800a0d4 <__sfp+0x18>
 800a0e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0e8:	b9d5      	cbnz	r5, 800a120 <__sfp+0x64>
 800a0ea:	4b16      	ldr	r3, [pc, #88]	; (800a144 <__sfp+0x88>)
 800a0ec:	60e3      	str	r3, [r4, #12]
 800a0ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a0f4:	f000 f84c 	bl	800a190 <__retarget_lock_init_recursive>
 800a0f8:	f7ff ff96 	bl	800a028 <__sfp_lock_release>
 800a0fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a104:	6025      	str	r5, [r4, #0]
 800a106:	61a5      	str	r5, [r4, #24]
 800a108:	2208      	movs	r2, #8
 800a10a:	4629      	mov	r1, r5
 800a10c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a110:	f7fe f97e 	bl	8008410 <memset>
 800a114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a11c:	4620      	mov	r0, r4
 800a11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a120:	3468      	adds	r4, #104	; 0x68
 800a122:	e7d9      	b.n	800a0d8 <__sfp+0x1c>
 800a124:	2104      	movs	r1, #4
 800a126:	4638      	mov	r0, r7
 800a128:	f7ff ff62 	bl	8009ff0 <__sfmoreglue>
 800a12c:	4604      	mov	r4, r0
 800a12e:	6030      	str	r0, [r6, #0]
 800a130:	2800      	cmp	r0, #0
 800a132:	d1d5      	bne.n	800a0e0 <__sfp+0x24>
 800a134:	f7ff ff78 	bl	800a028 <__sfp_lock_release>
 800a138:	230c      	movs	r3, #12
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	e7ee      	b.n	800a11c <__sfp+0x60>
 800a13e:	bf00      	nop
 800a140:	0800cb40 	.word	0x0800cb40
 800a144:	ffff0001 	.word	0xffff0001

0800a148 <_fwalk_reent>:
 800a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14c:	4606      	mov	r6, r0
 800a14e:	4688      	mov	r8, r1
 800a150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a154:	2700      	movs	r7, #0
 800a156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a15a:	f1b9 0901 	subs.w	r9, r9, #1
 800a15e:	d505      	bpl.n	800a16c <_fwalk_reent+0x24>
 800a160:	6824      	ldr	r4, [r4, #0]
 800a162:	2c00      	cmp	r4, #0
 800a164:	d1f7      	bne.n	800a156 <_fwalk_reent+0xe>
 800a166:	4638      	mov	r0, r7
 800a168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16c:	89ab      	ldrh	r3, [r5, #12]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d907      	bls.n	800a182 <_fwalk_reent+0x3a>
 800a172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a176:	3301      	adds	r3, #1
 800a178:	d003      	beq.n	800a182 <_fwalk_reent+0x3a>
 800a17a:	4629      	mov	r1, r5
 800a17c:	4630      	mov	r0, r6
 800a17e:	47c0      	blx	r8
 800a180:	4307      	orrs	r7, r0
 800a182:	3568      	adds	r5, #104	; 0x68
 800a184:	e7e9      	b.n	800a15a <_fwalk_reent+0x12>
	...

0800a188 <_localeconv_r>:
 800a188:	4800      	ldr	r0, [pc, #0]	; (800a18c <_localeconv_r+0x4>)
 800a18a:	4770      	bx	lr
 800a18c:	20000160 	.word	0x20000160

0800a190 <__retarget_lock_init_recursive>:
 800a190:	4770      	bx	lr

0800a192 <__retarget_lock_acquire_recursive>:
 800a192:	4770      	bx	lr

0800a194 <__retarget_lock_release_recursive>:
 800a194:	4770      	bx	lr

0800a196 <__swhatbuf_r>:
 800a196:	b570      	push	{r4, r5, r6, lr}
 800a198:	460e      	mov	r6, r1
 800a19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	b096      	sub	sp, #88	; 0x58
 800a1a2:	4614      	mov	r4, r2
 800a1a4:	461d      	mov	r5, r3
 800a1a6:	da07      	bge.n	800a1b8 <__swhatbuf_r+0x22>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	602b      	str	r3, [r5, #0]
 800a1ac:	89b3      	ldrh	r3, [r6, #12]
 800a1ae:	061a      	lsls	r2, r3, #24
 800a1b0:	d410      	bmi.n	800a1d4 <__swhatbuf_r+0x3e>
 800a1b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b6:	e00e      	b.n	800a1d6 <__swhatbuf_r+0x40>
 800a1b8:	466a      	mov	r2, sp
 800a1ba:	f000 fdd9 	bl	800ad70 <_fstat_r>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	dbf2      	blt.n	800a1a8 <__swhatbuf_r+0x12>
 800a1c2:	9a01      	ldr	r2, [sp, #4]
 800a1c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1cc:	425a      	negs	r2, r3
 800a1ce:	415a      	adcs	r2, r3
 800a1d0:	602a      	str	r2, [r5, #0]
 800a1d2:	e7ee      	b.n	800a1b2 <__swhatbuf_r+0x1c>
 800a1d4:	2340      	movs	r3, #64	; 0x40
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	b016      	add	sp, #88	; 0x58
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1e0 <__smakebuf_r>:
 800a1e0:	898b      	ldrh	r3, [r1, #12]
 800a1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1e4:	079d      	lsls	r5, r3, #30
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	d507      	bpl.n	800a1fc <__smakebuf_r+0x1c>
 800a1ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	6123      	str	r3, [r4, #16]
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	6163      	str	r3, [r4, #20]
 800a1f8:	b002      	add	sp, #8
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
 800a1fc:	ab01      	add	r3, sp, #4
 800a1fe:	466a      	mov	r2, sp
 800a200:	f7ff ffc9 	bl	800a196 <__swhatbuf_r>
 800a204:	9900      	ldr	r1, [sp, #0]
 800a206:	4605      	mov	r5, r0
 800a208:	4630      	mov	r0, r6
 800a20a:	f7fe f969 	bl	80084e0 <_malloc_r>
 800a20e:	b948      	cbnz	r0, 800a224 <__smakebuf_r+0x44>
 800a210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a214:	059a      	lsls	r2, r3, #22
 800a216:	d4ef      	bmi.n	800a1f8 <__smakebuf_r+0x18>
 800a218:	f023 0303 	bic.w	r3, r3, #3
 800a21c:	f043 0302 	orr.w	r3, r3, #2
 800a220:	81a3      	strh	r3, [r4, #12]
 800a222:	e7e3      	b.n	800a1ec <__smakebuf_r+0xc>
 800a224:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <__smakebuf_r+0x7c>)
 800a226:	62b3      	str	r3, [r6, #40]	; 0x28
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	6020      	str	r0, [r4, #0]
 800a22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a230:	81a3      	strh	r3, [r4, #12]
 800a232:	9b00      	ldr	r3, [sp, #0]
 800a234:	6163      	str	r3, [r4, #20]
 800a236:	9b01      	ldr	r3, [sp, #4]
 800a238:	6120      	str	r0, [r4, #16]
 800a23a:	b15b      	cbz	r3, 800a254 <__smakebuf_r+0x74>
 800a23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a240:	4630      	mov	r0, r6
 800a242:	f000 fda7 	bl	800ad94 <_isatty_r>
 800a246:	b128      	cbz	r0, 800a254 <__smakebuf_r+0x74>
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	f043 0301 	orr.w	r3, r3, #1
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	89a0      	ldrh	r0, [r4, #12]
 800a256:	4305      	orrs	r5, r0
 800a258:	81a5      	strh	r5, [r4, #12]
 800a25a:	e7cd      	b.n	800a1f8 <__smakebuf_r+0x18>
 800a25c:	08009fe5 	.word	0x08009fe5

0800a260 <memcpy>:
 800a260:	440a      	add	r2, r1
 800a262:	4291      	cmp	r1, r2
 800a264:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a268:	d100      	bne.n	800a26c <memcpy+0xc>
 800a26a:	4770      	bx	lr
 800a26c:	b510      	push	{r4, lr}
 800a26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a272:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a276:	4291      	cmp	r1, r2
 800a278:	d1f9      	bne.n	800a26e <memcpy+0xe>
 800a27a:	bd10      	pop	{r4, pc}

0800a27c <__malloc_lock>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__malloc_lock+0x8>)
 800a27e:	f7ff bf88 	b.w	800a192 <__retarget_lock_acquire_recursive>
 800a282:	bf00      	nop
 800a284:	20000638 	.word	0x20000638

0800a288 <__malloc_unlock>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__malloc_unlock+0x8>)
 800a28a:	f7ff bf83 	b.w	800a194 <__retarget_lock_release_recursive>
 800a28e:	bf00      	nop
 800a290:	20000638 	.word	0x20000638

0800a294 <_Balloc>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a298:	4604      	mov	r4, r0
 800a29a:	460d      	mov	r5, r1
 800a29c:	b976      	cbnz	r6, 800a2bc <_Balloc+0x28>
 800a29e:	2010      	movs	r0, #16
 800a2a0:	f7fe f8ae 	bl	8008400 <malloc>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	6260      	str	r0, [r4, #36]	; 0x24
 800a2a8:	b920      	cbnz	r0, 800a2b4 <_Balloc+0x20>
 800a2aa:	4b18      	ldr	r3, [pc, #96]	; (800a30c <_Balloc+0x78>)
 800a2ac:	4818      	ldr	r0, [pc, #96]	; (800a310 <_Balloc+0x7c>)
 800a2ae:	2166      	movs	r1, #102	; 0x66
 800a2b0:	f000 fd1e 	bl	800acf0 <__assert_func>
 800a2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2b8:	6006      	str	r6, [r0, #0]
 800a2ba:	60c6      	str	r6, [r0, #12]
 800a2bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2be:	68f3      	ldr	r3, [r6, #12]
 800a2c0:	b183      	cbz	r3, 800a2e4 <_Balloc+0x50>
 800a2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ca:	b9b8      	cbnz	r0, 800a2fc <_Balloc+0x68>
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	fa01 f605 	lsl.w	r6, r1, r5
 800a2d2:	1d72      	adds	r2, r6, #5
 800a2d4:	0092      	lsls	r2, r2, #2
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f7fe f8a2 	bl	8008420 <_calloc_r>
 800a2dc:	b160      	cbz	r0, 800a2f8 <_Balloc+0x64>
 800a2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2e2:	e00e      	b.n	800a302 <_Balloc+0x6e>
 800a2e4:	2221      	movs	r2, #33	; 0x21
 800a2e6:	2104      	movs	r1, #4
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f7fe f899 	bl	8008420 <_calloc_r>
 800a2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f0:	60f0      	str	r0, [r6, #12]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e4      	bne.n	800a2c2 <_Balloc+0x2e>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	6802      	ldr	r2, [r0, #0]
 800a2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a302:	2300      	movs	r3, #0
 800a304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a308:	e7f7      	b.n	800a2fa <_Balloc+0x66>
 800a30a:	bf00      	nop
 800a30c:	0800cb85 	.word	0x0800cb85
 800a310:	0800cc6c 	.word	0x0800cc6c

0800a314 <_Bfree>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a318:	4605      	mov	r5, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	b976      	cbnz	r6, 800a33c <_Bfree+0x28>
 800a31e:	2010      	movs	r0, #16
 800a320:	f7fe f86e 	bl	8008400 <malloc>
 800a324:	4602      	mov	r2, r0
 800a326:	6268      	str	r0, [r5, #36]	; 0x24
 800a328:	b920      	cbnz	r0, 800a334 <_Bfree+0x20>
 800a32a:	4b09      	ldr	r3, [pc, #36]	; (800a350 <_Bfree+0x3c>)
 800a32c:	4809      	ldr	r0, [pc, #36]	; (800a354 <_Bfree+0x40>)
 800a32e:	218a      	movs	r1, #138	; 0x8a
 800a330:	f000 fcde 	bl	800acf0 <__assert_func>
 800a334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a338:	6006      	str	r6, [r0, #0]
 800a33a:	60c6      	str	r6, [r0, #12]
 800a33c:	b13c      	cbz	r4, 800a34e <_Bfree+0x3a>
 800a33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a340:	6862      	ldr	r2, [r4, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a348:	6021      	str	r1, [r4, #0]
 800a34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	0800cb85 	.word	0x0800cb85
 800a354:	0800cc6c 	.word	0x0800cc6c

0800a358 <__multadd>:
 800a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	690e      	ldr	r6, [r1, #16]
 800a35e:	4607      	mov	r7, r0
 800a360:	4698      	mov	r8, r3
 800a362:	460c      	mov	r4, r1
 800a364:	f101 0014 	add.w	r0, r1, #20
 800a368:	2300      	movs	r3, #0
 800a36a:	6805      	ldr	r5, [r0, #0]
 800a36c:	b2a9      	uxth	r1, r5
 800a36e:	fb02 8101 	mla	r1, r2, r1, r8
 800a372:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a376:	0c2d      	lsrs	r5, r5, #16
 800a378:	fb02 c505 	mla	r5, r2, r5, ip
 800a37c:	b289      	uxth	r1, r1
 800a37e:	3301      	adds	r3, #1
 800a380:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a384:	429e      	cmp	r6, r3
 800a386:	f840 1b04 	str.w	r1, [r0], #4
 800a38a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a38e:	dcec      	bgt.n	800a36a <__multadd+0x12>
 800a390:	f1b8 0f00 	cmp.w	r8, #0
 800a394:	d022      	beq.n	800a3dc <__multadd+0x84>
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	42b3      	cmp	r3, r6
 800a39a:	dc19      	bgt.n	800a3d0 <__multadd+0x78>
 800a39c:	6861      	ldr	r1, [r4, #4]
 800a39e:	4638      	mov	r0, r7
 800a3a0:	3101      	adds	r1, #1
 800a3a2:	f7ff ff77 	bl	800a294 <_Balloc>
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	b928      	cbnz	r0, 800a3b6 <__multadd+0x5e>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <__multadd+0x8c>)
 800a3ae:	480e      	ldr	r0, [pc, #56]	; (800a3e8 <__multadd+0x90>)
 800a3b0:	21b5      	movs	r1, #181	; 0xb5
 800a3b2:	f000 fc9d 	bl	800acf0 <__assert_func>
 800a3b6:	6922      	ldr	r2, [r4, #16]
 800a3b8:	3202      	adds	r2, #2
 800a3ba:	f104 010c 	add.w	r1, r4, #12
 800a3be:	0092      	lsls	r2, r2, #2
 800a3c0:	300c      	adds	r0, #12
 800a3c2:	f7ff ff4d 	bl	800a260 <memcpy>
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	f7ff ffa3 	bl	800a314 <_Bfree>
 800a3ce:	462c      	mov	r4, r5
 800a3d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	f8c3 8014 	str.w	r8, [r3, #20]
 800a3da:	6126      	str	r6, [r4, #16]
 800a3dc:	4620      	mov	r0, r4
 800a3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0800cbfb 	.word	0x0800cbfb
 800a3e8:	0800cc6c 	.word	0x0800cc6c

0800a3ec <__hi0bits>:
 800a3ec:	0c03      	lsrs	r3, r0, #16
 800a3ee:	041b      	lsls	r3, r3, #16
 800a3f0:	b9d3      	cbnz	r3, 800a428 <__hi0bits+0x3c>
 800a3f2:	0400      	lsls	r0, r0, #16
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3fa:	bf04      	itt	eq
 800a3fc:	0200      	lsleq	r0, r0, #8
 800a3fe:	3308      	addeq	r3, #8
 800a400:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a404:	bf04      	itt	eq
 800a406:	0100      	lsleq	r0, r0, #4
 800a408:	3304      	addeq	r3, #4
 800a40a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a40e:	bf04      	itt	eq
 800a410:	0080      	lsleq	r0, r0, #2
 800a412:	3302      	addeq	r3, #2
 800a414:	2800      	cmp	r0, #0
 800a416:	db05      	blt.n	800a424 <__hi0bits+0x38>
 800a418:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a41c:	f103 0301 	add.w	r3, r3, #1
 800a420:	bf08      	it	eq
 800a422:	2320      	moveq	r3, #32
 800a424:	4618      	mov	r0, r3
 800a426:	4770      	bx	lr
 800a428:	2300      	movs	r3, #0
 800a42a:	e7e4      	b.n	800a3f6 <__hi0bits+0xa>

0800a42c <__lo0bits>:
 800a42c:	6803      	ldr	r3, [r0, #0]
 800a42e:	f013 0207 	ands.w	r2, r3, #7
 800a432:	4601      	mov	r1, r0
 800a434:	d00b      	beq.n	800a44e <__lo0bits+0x22>
 800a436:	07da      	lsls	r2, r3, #31
 800a438:	d424      	bmi.n	800a484 <__lo0bits+0x58>
 800a43a:	0798      	lsls	r0, r3, #30
 800a43c:	bf49      	itett	mi
 800a43e:	085b      	lsrmi	r3, r3, #1
 800a440:	089b      	lsrpl	r3, r3, #2
 800a442:	2001      	movmi	r0, #1
 800a444:	600b      	strmi	r3, [r1, #0]
 800a446:	bf5c      	itt	pl
 800a448:	600b      	strpl	r3, [r1, #0]
 800a44a:	2002      	movpl	r0, #2
 800a44c:	4770      	bx	lr
 800a44e:	b298      	uxth	r0, r3
 800a450:	b9b0      	cbnz	r0, 800a480 <__lo0bits+0x54>
 800a452:	0c1b      	lsrs	r3, r3, #16
 800a454:	2010      	movs	r0, #16
 800a456:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a45a:	bf04      	itt	eq
 800a45c:	0a1b      	lsreq	r3, r3, #8
 800a45e:	3008      	addeq	r0, #8
 800a460:	071a      	lsls	r2, r3, #28
 800a462:	bf04      	itt	eq
 800a464:	091b      	lsreq	r3, r3, #4
 800a466:	3004      	addeq	r0, #4
 800a468:	079a      	lsls	r2, r3, #30
 800a46a:	bf04      	itt	eq
 800a46c:	089b      	lsreq	r3, r3, #2
 800a46e:	3002      	addeq	r0, #2
 800a470:	07da      	lsls	r2, r3, #31
 800a472:	d403      	bmi.n	800a47c <__lo0bits+0x50>
 800a474:	085b      	lsrs	r3, r3, #1
 800a476:	f100 0001 	add.w	r0, r0, #1
 800a47a:	d005      	beq.n	800a488 <__lo0bits+0x5c>
 800a47c:	600b      	str	r3, [r1, #0]
 800a47e:	4770      	bx	lr
 800a480:	4610      	mov	r0, r2
 800a482:	e7e8      	b.n	800a456 <__lo0bits+0x2a>
 800a484:	2000      	movs	r0, #0
 800a486:	4770      	bx	lr
 800a488:	2020      	movs	r0, #32
 800a48a:	4770      	bx	lr

0800a48c <__i2b>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	460c      	mov	r4, r1
 800a490:	2101      	movs	r1, #1
 800a492:	f7ff feff 	bl	800a294 <_Balloc>
 800a496:	4602      	mov	r2, r0
 800a498:	b928      	cbnz	r0, 800a4a6 <__i2b+0x1a>
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <__i2b+0x24>)
 800a49c:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <__i2b+0x28>)
 800a49e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4a2:	f000 fc25 	bl	800acf0 <__assert_func>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	6144      	str	r4, [r0, #20]
 800a4aa:	6103      	str	r3, [r0, #16]
 800a4ac:	bd10      	pop	{r4, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800cbfb 	.word	0x0800cbfb
 800a4b4:	0800cc6c 	.word	0x0800cc6c

0800a4b8 <__multiply>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4614      	mov	r4, r2
 800a4be:	690a      	ldr	r2, [r1, #16]
 800a4c0:	6923      	ldr	r3, [r4, #16]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	bfb8      	it	lt
 800a4c6:	460b      	movlt	r3, r1
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	bfbc      	itt	lt
 800a4cc:	4625      	movlt	r5, r4
 800a4ce:	461c      	movlt	r4, r3
 800a4d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a4d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a4d8:	68ab      	ldr	r3, [r5, #8]
 800a4da:	6869      	ldr	r1, [r5, #4]
 800a4dc:	eb0a 0709 	add.w	r7, sl, r9
 800a4e0:	42bb      	cmp	r3, r7
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	bfb8      	it	lt
 800a4e6:	3101      	addlt	r1, #1
 800a4e8:	f7ff fed4 	bl	800a294 <_Balloc>
 800a4ec:	b930      	cbnz	r0, 800a4fc <__multiply+0x44>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	4b42      	ldr	r3, [pc, #264]	; (800a5fc <__multiply+0x144>)
 800a4f2:	4843      	ldr	r0, [pc, #268]	; (800a600 <__multiply+0x148>)
 800a4f4:	f240 115d 	movw	r1, #349	; 0x15d
 800a4f8:	f000 fbfa 	bl	800acf0 <__assert_func>
 800a4fc:	f100 0614 	add.w	r6, r0, #20
 800a500:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a504:	4633      	mov	r3, r6
 800a506:	2200      	movs	r2, #0
 800a508:	4543      	cmp	r3, r8
 800a50a:	d31e      	bcc.n	800a54a <__multiply+0x92>
 800a50c:	f105 0c14 	add.w	ip, r5, #20
 800a510:	f104 0314 	add.w	r3, r4, #20
 800a514:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a518:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a51c:	9202      	str	r2, [sp, #8]
 800a51e:	ebac 0205 	sub.w	r2, ip, r5
 800a522:	3a15      	subs	r2, #21
 800a524:	f022 0203 	bic.w	r2, r2, #3
 800a528:	3204      	adds	r2, #4
 800a52a:	f105 0115 	add.w	r1, r5, #21
 800a52e:	458c      	cmp	ip, r1
 800a530:	bf38      	it	cc
 800a532:	2204      	movcc	r2, #4
 800a534:	9201      	str	r2, [sp, #4]
 800a536:	9a02      	ldr	r2, [sp, #8]
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d808      	bhi.n	800a550 <__multiply+0x98>
 800a53e:	2f00      	cmp	r7, #0
 800a540:	dc55      	bgt.n	800a5ee <__multiply+0x136>
 800a542:	6107      	str	r7, [r0, #16]
 800a544:	b005      	add	sp, #20
 800a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	f843 2b04 	str.w	r2, [r3], #4
 800a54e:	e7db      	b.n	800a508 <__multiply+0x50>
 800a550:	f8b3 a000 	ldrh.w	sl, [r3]
 800a554:	f1ba 0f00 	cmp.w	sl, #0
 800a558:	d020      	beq.n	800a59c <__multiply+0xe4>
 800a55a:	f105 0e14 	add.w	lr, r5, #20
 800a55e:	46b1      	mov	r9, r6
 800a560:	2200      	movs	r2, #0
 800a562:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a566:	f8d9 b000 	ldr.w	fp, [r9]
 800a56a:	b2a1      	uxth	r1, r4
 800a56c:	fa1f fb8b 	uxth.w	fp, fp
 800a570:	fb0a b101 	mla	r1, sl, r1, fp
 800a574:	4411      	add	r1, r2
 800a576:	f8d9 2000 	ldr.w	r2, [r9]
 800a57a:	0c24      	lsrs	r4, r4, #16
 800a57c:	0c12      	lsrs	r2, r2, #16
 800a57e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a582:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a586:	b289      	uxth	r1, r1
 800a588:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a58c:	45f4      	cmp	ip, lr
 800a58e:	f849 1b04 	str.w	r1, [r9], #4
 800a592:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a596:	d8e4      	bhi.n	800a562 <__multiply+0xaa>
 800a598:	9901      	ldr	r1, [sp, #4]
 800a59a:	5072      	str	r2, [r6, r1]
 800a59c:	9a03      	ldr	r2, [sp, #12]
 800a59e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	f1b9 0f00 	cmp.w	r9, #0
 800a5a8:	d01f      	beq.n	800a5ea <__multiply+0x132>
 800a5aa:	6834      	ldr	r4, [r6, #0]
 800a5ac:	f105 0114 	add.w	r1, r5, #20
 800a5b0:	46b6      	mov	lr, r6
 800a5b2:	f04f 0a00 	mov.w	sl, #0
 800a5b6:	880a      	ldrh	r2, [r1, #0]
 800a5b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a5bc:	fb09 b202 	mla	r2, r9, r2, fp
 800a5c0:	4492      	add	sl, r2
 800a5c2:	b2a4      	uxth	r4, r4
 800a5c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a5c8:	f84e 4b04 	str.w	r4, [lr], #4
 800a5cc:	f851 4b04 	ldr.w	r4, [r1], #4
 800a5d0:	f8be 2000 	ldrh.w	r2, [lr]
 800a5d4:	0c24      	lsrs	r4, r4, #16
 800a5d6:	fb09 2404 	mla	r4, r9, r4, r2
 800a5da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a5de:	458c      	cmp	ip, r1
 800a5e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5e4:	d8e7      	bhi.n	800a5b6 <__multiply+0xfe>
 800a5e6:	9a01      	ldr	r2, [sp, #4]
 800a5e8:	50b4      	str	r4, [r6, r2]
 800a5ea:	3604      	adds	r6, #4
 800a5ec:	e7a3      	b.n	800a536 <__multiply+0x7e>
 800a5ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1a5      	bne.n	800a542 <__multiply+0x8a>
 800a5f6:	3f01      	subs	r7, #1
 800a5f8:	e7a1      	b.n	800a53e <__multiply+0x86>
 800a5fa:	bf00      	nop
 800a5fc:	0800cbfb 	.word	0x0800cbfb
 800a600:	0800cc6c 	.word	0x0800cc6c

0800a604 <__pow5mult>:
 800a604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a608:	4615      	mov	r5, r2
 800a60a:	f012 0203 	ands.w	r2, r2, #3
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	d007      	beq.n	800a624 <__pow5mult+0x20>
 800a614:	4c25      	ldr	r4, [pc, #148]	; (800a6ac <__pow5mult+0xa8>)
 800a616:	3a01      	subs	r2, #1
 800a618:	2300      	movs	r3, #0
 800a61a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a61e:	f7ff fe9b 	bl	800a358 <__multadd>
 800a622:	4607      	mov	r7, r0
 800a624:	10ad      	asrs	r5, r5, #2
 800a626:	d03d      	beq.n	800a6a4 <__pow5mult+0xa0>
 800a628:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a62a:	b97c      	cbnz	r4, 800a64c <__pow5mult+0x48>
 800a62c:	2010      	movs	r0, #16
 800a62e:	f7fd fee7 	bl	8008400 <malloc>
 800a632:	4602      	mov	r2, r0
 800a634:	6270      	str	r0, [r6, #36]	; 0x24
 800a636:	b928      	cbnz	r0, 800a644 <__pow5mult+0x40>
 800a638:	4b1d      	ldr	r3, [pc, #116]	; (800a6b0 <__pow5mult+0xac>)
 800a63a:	481e      	ldr	r0, [pc, #120]	; (800a6b4 <__pow5mult+0xb0>)
 800a63c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a640:	f000 fb56 	bl	800acf0 <__assert_func>
 800a644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a648:	6004      	str	r4, [r0, #0]
 800a64a:	60c4      	str	r4, [r0, #12]
 800a64c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a654:	b94c      	cbnz	r4, 800a66a <__pow5mult+0x66>
 800a656:	f240 2171 	movw	r1, #625	; 0x271
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ff16 	bl	800a48c <__i2b>
 800a660:	2300      	movs	r3, #0
 800a662:	f8c8 0008 	str.w	r0, [r8, #8]
 800a666:	4604      	mov	r4, r0
 800a668:	6003      	str	r3, [r0, #0]
 800a66a:	f04f 0900 	mov.w	r9, #0
 800a66e:	07eb      	lsls	r3, r5, #31
 800a670:	d50a      	bpl.n	800a688 <__pow5mult+0x84>
 800a672:	4639      	mov	r1, r7
 800a674:	4622      	mov	r2, r4
 800a676:	4630      	mov	r0, r6
 800a678:	f7ff ff1e 	bl	800a4b8 <__multiply>
 800a67c:	4639      	mov	r1, r7
 800a67e:	4680      	mov	r8, r0
 800a680:	4630      	mov	r0, r6
 800a682:	f7ff fe47 	bl	800a314 <_Bfree>
 800a686:	4647      	mov	r7, r8
 800a688:	106d      	asrs	r5, r5, #1
 800a68a:	d00b      	beq.n	800a6a4 <__pow5mult+0xa0>
 800a68c:	6820      	ldr	r0, [r4, #0]
 800a68e:	b938      	cbnz	r0, 800a6a0 <__pow5mult+0x9c>
 800a690:	4622      	mov	r2, r4
 800a692:	4621      	mov	r1, r4
 800a694:	4630      	mov	r0, r6
 800a696:	f7ff ff0f 	bl	800a4b8 <__multiply>
 800a69a:	6020      	str	r0, [r4, #0]
 800a69c:	f8c0 9000 	str.w	r9, [r0]
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	e7e4      	b.n	800a66e <__pow5mult+0x6a>
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800cdc0 	.word	0x0800cdc0
 800a6b0:	0800cb85 	.word	0x0800cb85
 800a6b4:	0800cc6c 	.word	0x0800cc6c

0800a6b8 <__lshift>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	460c      	mov	r4, r1
 800a6be:	6849      	ldr	r1, [r1, #4]
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	4691      	mov	r9, r2
 800a6cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6d0:	f108 0601 	add.w	r6, r8, #1
 800a6d4:	42b3      	cmp	r3, r6
 800a6d6:	db0b      	blt.n	800a6f0 <__lshift+0x38>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f7ff fddb 	bl	800a294 <_Balloc>
 800a6de:	4605      	mov	r5, r0
 800a6e0:	b948      	cbnz	r0, 800a6f6 <__lshift+0x3e>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	4b28      	ldr	r3, [pc, #160]	; (800a788 <__lshift+0xd0>)
 800a6e6:	4829      	ldr	r0, [pc, #164]	; (800a78c <__lshift+0xd4>)
 800a6e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6ec:	f000 fb00 	bl	800acf0 <__assert_func>
 800a6f0:	3101      	adds	r1, #1
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	e7ee      	b.n	800a6d4 <__lshift+0x1c>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f100 0114 	add.w	r1, r0, #20
 800a6fc:	f100 0210 	add.w	r2, r0, #16
 800a700:	4618      	mov	r0, r3
 800a702:	4553      	cmp	r3, sl
 800a704:	db33      	blt.n	800a76e <__lshift+0xb6>
 800a706:	6920      	ldr	r0, [r4, #16]
 800a708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a70c:	f104 0314 	add.w	r3, r4, #20
 800a710:	f019 091f 	ands.w	r9, r9, #31
 800a714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a718:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a71c:	d02b      	beq.n	800a776 <__lshift+0xbe>
 800a71e:	f1c9 0e20 	rsb	lr, r9, #32
 800a722:	468a      	mov	sl, r1
 800a724:	2200      	movs	r2, #0
 800a726:	6818      	ldr	r0, [r3, #0]
 800a728:	fa00 f009 	lsl.w	r0, r0, r9
 800a72c:	4302      	orrs	r2, r0
 800a72e:	f84a 2b04 	str.w	r2, [sl], #4
 800a732:	f853 2b04 	ldr.w	r2, [r3], #4
 800a736:	459c      	cmp	ip, r3
 800a738:	fa22 f20e 	lsr.w	r2, r2, lr
 800a73c:	d8f3      	bhi.n	800a726 <__lshift+0x6e>
 800a73e:	ebac 0304 	sub.w	r3, ip, r4
 800a742:	3b15      	subs	r3, #21
 800a744:	f023 0303 	bic.w	r3, r3, #3
 800a748:	3304      	adds	r3, #4
 800a74a:	f104 0015 	add.w	r0, r4, #21
 800a74e:	4584      	cmp	ip, r0
 800a750:	bf38      	it	cc
 800a752:	2304      	movcc	r3, #4
 800a754:	50ca      	str	r2, [r1, r3]
 800a756:	b10a      	cbz	r2, 800a75c <__lshift+0xa4>
 800a758:	f108 0602 	add.w	r6, r8, #2
 800a75c:	3e01      	subs	r6, #1
 800a75e:	4638      	mov	r0, r7
 800a760:	612e      	str	r6, [r5, #16]
 800a762:	4621      	mov	r1, r4
 800a764:	f7ff fdd6 	bl	800a314 <_Bfree>
 800a768:	4628      	mov	r0, r5
 800a76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a772:	3301      	adds	r3, #1
 800a774:	e7c5      	b.n	800a702 <__lshift+0x4a>
 800a776:	3904      	subs	r1, #4
 800a778:	f853 2b04 	ldr.w	r2, [r3], #4
 800a77c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a780:	459c      	cmp	ip, r3
 800a782:	d8f9      	bhi.n	800a778 <__lshift+0xc0>
 800a784:	e7ea      	b.n	800a75c <__lshift+0xa4>
 800a786:	bf00      	nop
 800a788:	0800cbfb 	.word	0x0800cbfb
 800a78c:	0800cc6c 	.word	0x0800cc6c

0800a790 <__mcmp>:
 800a790:	b530      	push	{r4, r5, lr}
 800a792:	6902      	ldr	r2, [r0, #16]
 800a794:	690c      	ldr	r4, [r1, #16]
 800a796:	1b12      	subs	r2, r2, r4
 800a798:	d10e      	bne.n	800a7b8 <__mcmp+0x28>
 800a79a:	f100 0314 	add.w	r3, r0, #20
 800a79e:	3114      	adds	r1, #20
 800a7a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7b0:	42a5      	cmp	r5, r4
 800a7b2:	d003      	beq.n	800a7bc <__mcmp+0x2c>
 800a7b4:	d305      	bcc.n	800a7c2 <__mcmp+0x32>
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	bd30      	pop	{r4, r5, pc}
 800a7bc:	4283      	cmp	r3, r0
 800a7be:	d3f3      	bcc.n	800a7a8 <__mcmp+0x18>
 800a7c0:	e7fa      	b.n	800a7b8 <__mcmp+0x28>
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7c6:	e7f7      	b.n	800a7b8 <__mcmp+0x28>

0800a7c8 <__mdiff>:
 800a7c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	460c      	mov	r4, r1
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	4617      	mov	r7, r2
 800a7d6:	f7ff ffdb 	bl	800a790 <__mcmp>
 800a7da:	1e05      	subs	r5, r0, #0
 800a7dc:	d110      	bne.n	800a800 <__mdiff+0x38>
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff fd57 	bl	800a294 <_Balloc>
 800a7e6:	b930      	cbnz	r0, 800a7f6 <__mdiff+0x2e>
 800a7e8:	4b39      	ldr	r3, [pc, #228]	; (800a8d0 <__mdiff+0x108>)
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	f240 2132 	movw	r1, #562	; 0x232
 800a7f0:	4838      	ldr	r0, [pc, #224]	; (800a8d4 <__mdiff+0x10c>)
 800a7f2:	f000 fa7d 	bl	800acf0 <__assert_func>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	bfa4      	itt	ge
 800a802:	463b      	movge	r3, r7
 800a804:	4627      	movge	r7, r4
 800a806:	4630      	mov	r0, r6
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	bfa6      	itte	ge
 800a80c:	461c      	movge	r4, r3
 800a80e:	2500      	movge	r5, #0
 800a810:	2501      	movlt	r5, #1
 800a812:	f7ff fd3f 	bl	800a294 <_Balloc>
 800a816:	b920      	cbnz	r0, 800a822 <__mdiff+0x5a>
 800a818:	4b2d      	ldr	r3, [pc, #180]	; (800a8d0 <__mdiff+0x108>)
 800a81a:	4602      	mov	r2, r0
 800a81c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a820:	e7e6      	b.n	800a7f0 <__mdiff+0x28>
 800a822:	693e      	ldr	r6, [r7, #16]
 800a824:	60c5      	str	r5, [r0, #12]
 800a826:	6925      	ldr	r5, [r4, #16]
 800a828:	f107 0114 	add.w	r1, r7, #20
 800a82c:	f104 0914 	add.w	r9, r4, #20
 800a830:	f100 0e14 	add.w	lr, r0, #20
 800a834:	f107 0210 	add.w	r2, r7, #16
 800a838:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a83c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a840:	46f2      	mov	sl, lr
 800a842:	2700      	movs	r7, #0
 800a844:	f859 3b04 	ldr.w	r3, [r9], #4
 800a848:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a84c:	fa1f f883 	uxth.w	r8, r3
 800a850:	fa17 f78b 	uxtah	r7, r7, fp
 800a854:	0c1b      	lsrs	r3, r3, #16
 800a856:	eba7 0808 	sub.w	r8, r7, r8
 800a85a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a85e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a862:	fa1f f888 	uxth.w	r8, r8
 800a866:	141f      	asrs	r7, r3, #16
 800a868:	454d      	cmp	r5, r9
 800a86a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a86e:	f84a 3b04 	str.w	r3, [sl], #4
 800a872:	d8e7      	bhi.n	800a844 <__mdiff+0x7c>
 800a874:	1b2b      	subs	r3, r5, r4
 800a876:	3b15      	subs	r3, #21
 800a878:	f023 0303 	bic.w	r3, r3, #3
 800a87c:	3304      	adds	r3, #4
 800a87e:	3415      	adds	r4, #21
 800a880:	42a5      	cmp	r5, r4
 800a882:	bf38      	it	cc
 800a884:	2304      	movcc	r3, #4
 800a886:	4419      	add	r1, r3
 800a888:	4473      	add	r3, lr
 800a88a:	469e      	mov	lr, r3
 800a88c:	460d      	mov	r5, r1
 800a88e:	4565      	cmp	r5, ip
 800a890:	d30e      	bcc.n	800a8b0 <__mdiff+0xe8>
 800a892:	f10c 0203 	add.w	r2, ip, #3
 800a896:	1a52      	subs	r2, r2, r1
 800a898:	f022 0203 	bic.w	r2, r2, #3
 800a89c:	3903      	subs	r1, #3
 800a89e:	458c      	cmp	ip, r1
 800a8a0:	bf38      	it	cc
 800a8a2:	2200      	movcc	r2, #0
 800a8a4:	441a      	add	r2, r3
 800a8a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8aa:	b17b      	cbz	r3, 800a8cc <__mdiff+0x104>
 800a8ac:	6106      	str	r6, [r0, #16]
 800a8ae:	e7a5      	b.n	800a7fc <__mdiff+0x34>
 800a8b0:	f855 8b04 	ldr.w	r8, [r5], #4
 800a8b4:	fa17 f488 	uxtah	r4, r7, r8
 800a8b8:	1422      	asrs	r2, r4, #16
 800a8ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a8be:	b2a4      	uxth	r4, r4
 800a8c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a8c4:	f84e 4b04 	str.w	r4, [lr], #4
 800a8c8:	1417      	asrs	r7, r2, #16
 800a8ca:	e7e0      	b.n	800a88e <__mdiff+0xc6>
 800a8cc:	3e01      	subs	r6, #1
 800a8ce:	e7ea      	b.n	800a8a6 <__mdiff+0xde>
 800a8d0:	0800cbfb 	.word	0x0800cbfb
 800a8d4:	0800cc6c 	.word	0x0800cc6c

0800a8d8 <__d2b>:
 800a8d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8dc:	4689      	mov	r9, r1
 800a8de:	2101      	movs	r1, #1
 800a8e0:	ec57 6b10 	vmov	r6, r7, d0
 800a8e4:	4690      	mov	r8, r2
 800a8e6:	f7ff fcd5 	bl	800a294 <_Balloc>
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	b930      	cbnz	r0, 800a8fc <__d2b+0x24>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	4b25      	ldr	r3, [pc, #148]	; (800a988 <__d2b+0xb0>)
 800a8f2:	4826      	ldr	r0, [pc, #152]	; (800a98c <__d2b+0xb4>)
 800a8f4:	f240 310a 	movw	r1, #778	; 0x30a
 800a8f8:	f000 f9fa 	bl	800acf0 <__assert_func>
 800a8fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a904:	bb35      	cbnz	r5, 800a954 <__d2b+0x7c>
 800a906:	2e00      	cmp	r6, #0
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	d028      	beq.n	800a95e <__d2b+0x86>
 800a90c:	4668      	mov	r0, sp
 800a90e:	9600      	str	r6, [sp, #0]
 800a910:	f7ff fd8c 	bl	800a42c <__lo0bits>
 800a914:	9900      	ldr	r1, [sp, #0]
 800a916:	b300      	cbz	r0, 800a95a <__d2b+0x82>
 800a918:	9a01      	ldr	r2, [sp, #4]
 800a91a:	f1c0 0320 	rsb	r3, r0, #32
 800a91e:	fa02 f303 	lsl.w	r3, r2, r3
 800a922:	430b      	orrs	r3, r1
 800a924:	40c2      	lsrs	r2, r0
 800a926:	6163      	str	r3, [r4, #20]
 800a928:	9201      	str	r2, [sp, #4]
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	61a3      	str	r3, [r4, #24]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bf14      	ite	ne
 800a932:	2202      	movne	r2, #2
 800a934:	2201      	moveq	r2, #1
 800a936:	6122      	str	r2, [r4, #16]
 800a938:	b1d5      	cbz	r5, 800a970 <__d2b+0x98>
 800a93a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a93e:	4405      	add	r5, r0
 800a940:	f8c9 5000 	str.w	r5, [r9]
 800a944:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a948:	f8c8 0000 	str.w	r0, [r8]
 800a94c:	4620      	mov	r0, r4
 800a94e:	b003      	add	sp, #12
 800a950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a958:	e7d5      	b.n	800a906 <__d2b+0x2e>
 800a95a:	6161      	str	r1, [r4, #20]
 800a95c:	e7e5      	b.n	800a92a <__d2b+0x52>
 800a95e:	a801      	add	r0, sp, #4
 800a960:	f7ff fd64 	bl	800a42c <__lo0bits>
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	6163      	str	r3, [r4, #20]
 800a968:	2201      	movs	r2, #1
 800a96a:	6122      	str	r2, [r4, #16]
 800a96c:	3020      	adds	r0, #32
 800a96e:	e7e3      	b.n	800a938 <__d2b+0x60>
 800a970:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a974:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a978:	f8c9 0000 	str.w	r0, [r9]
 800a97c:	6918      	ldr	r0, [r3, #16]
 800a97e:	f7ff fd35 	bl	800a3ec <__hi0bits>
 800a982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a986:	e7df      	b.n	800a948 <__d2b+0x70>
 800a988:	0800cbfb 	.word	0x0800cbfb
 800a98c:	0800cc6c 	.word	0x0800cc6c

0800a990 <__sfputc_r>:
 800a990:	6893      	ldr	r3, [r2, #8]
 800a992:	3b01      	subs	r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	b410      	push	{r4}
 800a998:	6093      	str	r3, [r2, #8]
 800a99a:	da08      	bge.n	800a9ae <__sfputc_r+0x1e>
 800a99c:	6994      	ldr	r4, [r2, #24]
 800a99e:	42a3      	cmp	r3, r4
 800a9a0:	db01      	blt.n	800a9a6 <__sfputc_r+0x16>
 800a9a2:	290a      	cmp	r1, #10
 800a9a4:	d103      	bne.n	800a9ae <__sfputc_r+0x1e>
 800a9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9aa:	f7fe bafb 	b.w	8008fa4 <__swbuf_r>
 800a9ae:	6813      	ldr	r3, [r2, #0]
 800a9b0:	1c58      	adds	r0, r3, #1
 800a9b2:	6010      	str	r0, [r2, #0]
 800a9b4:	7019      	strb	r1, [r3, #0]
 800a9b6:	4608      	mov	r0, r1
 800a9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <__sfputs_r>:
 800a9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	460f      	mov	r7, r1
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	18d5      	adds	r5, r2, r3
 800a9c8:	42ac      	cmp	r4, r5
 800a9ca:	d101      	bne.n	800a9d0 <__sfputs_r+0x12>
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	e007      	b.n	800a9e0 <__sfputs_r+0x22>
 800a9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d4:	463a      	mov	r2, r7
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f7ff ffda 	bl	800a990 <__sfputc_r>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d1f3      	bne.n	800a9c8 <__sfputs_r+0xa>
 800a9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9e4 <_vfiprintf_r>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	b09d      	sub	sp, #116	; 0x74
 800a9ec:	4614      	mov	r4, r2
 800a9ee:	4698      	mov	r8, r3
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	b118      	cbz	r0, 800a9fc <_vfiprintf_r+0x18>
 800a9f4:	6983      	ldr	r3, [r0, #24]
 800a9f6:	b90b      	cbnz	r3, 800a9fc <_vfiprintf_r+0x18>
 800a9f8:	f7ff fb28 	bl	800a04c <__sinit>
 800a9fc:	4b89      	ldr	r3, [pc, #548]	; (800ac24 <_vfiprintf_r+0x240>)
 800a9fe:	429d      	cmp	r5, r3
 800aa00:	d11b      	bne.n	800aa3a <_vfiprintf_r+0x56>
 800aa02:	6875      	ldr	r5, [r6, #4]
 800aa04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa06:	07d9      	lsls	r1, r3, #31
 800aa08:	d405      	bmi.n	800aa16 <_vfiprintf_r+0x32>
 800aa0a:	89ab      	ldrh	r3, [r5, #12]
 800aa0c:	059a      	lsls	r2, r3, #22
 800aa0e:	d402      	bmi.n	800aa16 <_vfiprintf_r+0x32>
 800aa10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa12:	f7ff fbbe 	bl	800a192 <__retarget_lock_acquire_recursive>
 800aa16:	89ab      	ldrh	r3, [r5, #12]
 800aa18:	071b      	lsls	r3, r3, #28
 800aa1a:	d501      	bpl.n	800aa20 <_vfiprintf_r+0x3c>
 800aa1c:	692b      	ldr	r3, [r5, #16]
 800aa1e:	b9eb      	cbnz	r3, 800aa5c <_vfiprintf_r+0x78>
 800aa20:	4629      	mov	r1, r5
 800aa22:	4630      	mov	r0, r6
 800aa24:	f7fe fb10 	bl	8009048 <__swsetup_r>
 800aa28:	b1c0      	cbz	r0, 800aa5c <_vfiprintf_r+0x78>
 800aa2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa2c:	07dc      	lsls	r4, r3, #31
 800aa2e:	d50e      	bpl.n	800aa4e <_vfiprintf_r+0x6a>
 800aa30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa34:	b01d      	add	sp, #116	; 0x74
 800aa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3a:	4b7b      	ldr	r3, [pc, #492]	; (800ac28 <_vfiprintf_r+0x244>)
 800aa3c:	429d      	cmp	r5, r3
 800aa3e:	d101      	bne.n	800aa44 <_vfiprintf_r+0x60>
 800aa40:	68b5      	ldr	r5, [r6, #8]
 800aa42:	e7df      	b.n	800aa04 <_vfiprintf_r+0x20>
 800aa44:	4b79      	ldr	r3, [pc, #484]	; (800ac2c <_vfiprintf_r+0x248>)
 800aa46:	429d      	cmp	r5, r3
 800aa48:	bf08      	it	eq
 800aa4a:	68f5      	ldreq	r5, [r6, #12]
 800aa4c:	e7da      	b.n	800aa04 <_vfiprintf_r+0x20>
 800aa4e:	89ab      	ldrh	r3, [r5, #12]
 800aa50:	0598      	lsls	r0, r3, #22
 800aa52:	d4ed      	bmi.n	800aa30 <_vfiprintf_r+0x4c>
 800aa54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa56:	f7ff fb9d 	bl	800a194 <__retarget_lock_release_recursive>
 800aa5a:	e7e9      	b.n	800aa30 <_vfiprintf_r+0x4c>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa60:	2320      	movs	r3, #32
 800aa62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa66:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa6a:	2330      	movs	r3, #48	; 0x30
 800aa6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac30 <_vfiprintf_r+0x24c>
 800aa70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa74:	f04f 0901 	mov.w	r9, #1
 800aa78:	4623      	mov	r3, r4
 800aa7a:	469a      	mov	sl, r3
 800aa7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa80:	b10a      	cbz	r2, 800aa86 <_vfiprintf_r+0xa2>
 800aa82:	2a25      	cmp	r2, #37	; 0x25
 800aa84:	d1f9      	bne.n	800aa7a <_vfiprintf_r+0x96>
 800aa86:	ebba 0b04 	subs.w	fp, sl, r4
 800aa8a:	d00b      	beq.n	800aaa4 <_vfiprintf_r+0xc0>
 800aa8c:	465b      	mov	r3, fp
 800aa8e:	4622      	mov	r2, r4
 800aa90:	4629      	mov	r1, r5
 800aa92:	4630      	mov	r0, r6
 800aa94:	f7ff ff93 	bl	800a9be <__sfputs_r>
 800aa98:	3001      	adds	r0, #1
 800aa9a:	f000 80aa 	beq.w	800abf2 <_vfiprintf_r+0x20e>
 800aa9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaa0:	445a      	add	r2, fp
 800aaa2:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa4:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 80a2 	beq.w	800abf2 <_vfiprintf_r+0x20e>
 800aaae:	2300      	movs	r3, #0
 800aab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aab8:	f10a 0a01 	add.w	sl, sl, #1
 800aabc:	9304      	str	r3, [sp, #16]
 800aabe:	9307      	str	r3, [sp, #28]
 800aac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aac4:	931a      	str	r3, [sp, #104]	; 0x68
 800aac6:	4654      	mov	r4, sl
 800aac8:	2205      	movs	r2, #5
 800aaca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aace:	4858      	ldr	r0, [pc, #352]	; (800ac30 <_vfiprintf_r+0x24c>)
 800aad0:	f7f5 fba6 	bl	8000220 <memchr>
 800aad4:	9a04      	ldr	r2, [sp, #16]
 800aad6:	b9d8      	cbnz	r0, 800ab10 <_vfiprintf_r+0x12c>
 800aad8:	06d1      	lsls	r1, r2, #27
 800aada:	bf44      	itt	mi
 800aadc:	2320      	movmi	r3, #32
 800aade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae2:	0713      	lsls	r3, r2, #28
 800aae4:	bf44      	itt	mi
 800aae6:	232b      	movmi	r3, #43	; 0x2b
 800aae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaec:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf0:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf2:	d015      	beq.n	800ab20 <_vfiprintf_r+0x13c>
 800aaf4:	9a07      	ldr	r2, [sp, #28]
 800aaf6:	4654      	mov	r4, sl
 800aaf8:	2000      	movs	r0, #0
 800aafa:	f04f 0c0a 	mov.w	ip, #10
 800aafe:	4621      	mov	r1, r4
 800ab00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab04:	3b30      	subs	r3, #48	; 0x30
 800ab06:	2b09      	cmp	r3, #9
 800ab08:	d94e      	bls.n	800aba8 <_vfiprintf_r+0x1c4>
 800ab0a:	b1b0      	cbz	r0, 800ab3a <_vfiprintf_r+0x156>
 800ab0c:	9207      	str	r2, [sp, #28]
 800ab0e:	e014      	b.n	800ab3a <_vfiprintf_r+0x156>
 800ab10:	eba0 0308 	sub.w	r3, r0, r8
 800ab14:	fa09 f303 	lsl.w	r3, r9, r3
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	9304      	str	r3, [sp, #16]
 800ab1c:	46a2      	mov	sl, r4
 800ab1e:	e7d2      	b.n	800aac6 <_vfiprintf_r+0xe2>
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	1d19      	adds	r1, r3, #4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	9103      	str	r1, [sp, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	bfbb      	ittet	lt
 800ab2c:	425b      	neglt	r3, r3
 800ab2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab32:	9307      	strge	r3, [sp, #28]
 800ab34:	9307      	strlt	r3, [sp, #28]
 800ab36:	bfb8      	it	lt
 800ab38:	9204      	strlt	r2, [sp, #16]
 800ab3a:	7823      	ldrb	r3, [r4, #0]
 800ab3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab3e:	d10c      	bne.n	800ab5a <_vfiprintf_r+0x176>
 800ab40:	7863      	ldrb	r3, [r4, #1]
 800ab42:	2b2a      	cmp	r3, #42	; 0x2a
 800ab44:	d135      	bne.n	800abb2 <_vfiprintf_r+0x1ce>
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	1d1a      	adds	r2, r3, #4
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	9203      	str	r2, [sp, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	bfb8      	it	lt
 800ab52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab56:	3402      	adds	r4, #2
 800ab58:	9305      	str	r3, [sp, #20]
 800ab5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac40 <_vfiprintf_r+0x25c>
 800ab5e:	7821      	ldrb	r1, [r4, #0]
 800ab60:	2203      	movs	r2, #3
 800ab62:	4650      	mov	r0, sl
 800ab64:	f7f5 fb5c 	bl	8000220 <memchr>
 800ab68:	b140      	cbz	r0, 800ab7c <_vfiprintf_r+0x198>
 800ab6a:	2340      	movs	r3, #64	; 0x40
 800ab6c:	eba0 000a 	sub.w	r0, r0, sl
 800ab70:	fa03 f000 	lsl.w	r0, r3, r0
 800ab74:	9b04      	ldr	r3, [sp, #16]
 800ab76:	4303      	orrs	r3, r0
 800ab78:	3401      	adds	r4, #1
 800ab7a:	9304      	str	r3, [sp, #16]
 800ab7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab80:	482c      	ldr	r0, [pc, #176]	; (800ac34 <_vfiprintf_r+0x250>)
 800ab82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab86:	2206      	movs	r2, #6
 800ab88:	f7f5 fb4a 	bl	8000220 <memchr>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d03f      	beq.n	800ac10 <_vfiprintf_r+0x22c>
 800ab90:	4b29      	ldr	r3, [pc, #164]	; (800ac38 <_vfiprintf_r+0x254>)
 800ab92:	bb1b      	cbnz	r3, 800abdc <_vfiprintf_r+0x1f8>
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	3307      	adds	r3, #7
 800ab98:	f023 0307 	bic.w	r3, r3, #7
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	9303      	str	r3, [sp, #12]
 800aba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba2:	443b      	add	r3, r7
 800aba4:	9309      	str	r3, [sp, #36]	; 0x24
 800aba6:	e767      	b.n	800aa78 <_vfiprintf_r+0x94>
 800aba8:	fb0c 3202 	mla	r2, ip, r2, r3
 800abac:	460c      	mov	r4, r1
 800abae:	2001      	movs	r0, #1
 800abb0:	e7a5      	b.n	800aafe <_vfiprintf_r+0x11a>
 800abb2:	2300      	movs	r3, #0
 800abb4:	3401      	adds	r4, #1
 800abb6:	9305      	str	r3, [sp, #20]
 800abb8:	4619      	mov	r1, r3
 800abba:	f04f 0c0a 	mov.w	ip, #10
 800abbe:	4620      	mov	r0, r4
 800abc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abc4:	3a30      	subs	r2, #48	; 0x30
 800abc6:	2a09      	cmp	r2, #9
 800abc8:	d903      	bls.n	800abd2 <_vfiprintf_r+0x1ee>
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d0c5      	beq.n	800ab5a <_vfiprintf_r+0x176>
 800abce:	9105      	str	r1, [sp, #20]
 800abd0:	e7c3      	b.n	800ab5a <_vfiprintf_r+0x176>
 800abd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800abd6:	4604      	mov	r4, r0
 800abd8:	2301      	movs	r3, #1
 800abda:	e7f0      	b.n	800abbe <_vfiprintf_r+0x1da>
 800abdc:	ab03      	add	r3, sp, #12
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	462a      	mov	r2, r5
 800abe2:	4b16      	ldr	r3, [pc, #88]	; (800ac3c <_vfiprintf_r+0x258>)
 800abe4:	a904      	add	r1, sp, #16
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7fd fd74 	bl	80086d4 <_printf_float>
 800abec:	4607      	mov	r7, r0
 800abee:	1c78      	adds	r0, r7, #1
 800abf0:	d1d6      	bne.n	800aba0 <_vfiprintf_r+0x1bc>
 800abf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abf4:	07d9      	lsls	r1, r3, #31
 800abf6:	d405      	bmi.n	800ac04 <_vfiprintf_r+0x220>
 800abf8:	89ab      	ldrh	r3, [r5, #12]
 800abfa:	059a      	lsls	r2, r3, #22
 800abfc:	d402      	bmi.n	800ac04 <_vfiprintf_r+0x220>
 800abfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac00:	f7ff fac8 	bl	800a194 <__retarget_lock_release_recursive>
 800ac04:	89ab      	ldrh	r3, [r5, #12]
 800ac06:	065b      	lsls	r3, r3, #25
 800ac08:	f53f af12 	bmi.w	800aa30 <_vfiprintf_r+0x4c>
 800ac0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac0e:	e711      	b.n	800aa34 <_vfiprintf_r+0x50>
 800ac10:	ab03      	add	r3, sp, #12
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	462a      	mov	r2, r5
 800ac16:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <_vfiprintf_r+0x258>)
 800ac18:	a904      	add	r1, sp, #16
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f7fd fffe 	bl	8008c1c <_printf_i>
 800ac20:	e7e4      	b.n	800abec <_vfiprintf_r+0x208>
 800ac22:	bf00      	nop
 800ac24:	0800cc2c 	.word	0x0800cc2c
 800ac28:	0800cc4c 	.word	0x0800cc4c
 800ac2c:	0800cc0c 	.word	0x0800cc0c
 800ac30:	0800cdcc 	.word	0x0800cdcc
 800ac34:	0800cdd6 	.word	0x0800cdd6
 800ac38:	080086d5 	.word	0x080086d5
 800ac3c:	0800a9bf 	.word	0x0800a9bf
 800ac40:	0800cdd2 	.word	0x0800cdd2

0800ac44 <__sread>:
 800ac44:	b510      	push	{r4, lr}
 800ac46:	460c      	mov	r4, r1
 800ac48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4c:	f000 f8d6 	bl	800adfc <_read_r>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	bfab      	itete	ge
 800ac54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac56:	89a3      	ldrhlt	r3, [r4, #12]
 800ac58:	181b      	addge	r3, r3, r0
 800ac5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac5e:	bfac      	ite	ge
 800ac60:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac62:	81a3      	strhlt	r3, [r4, #12]
 800ac64:	bd10      	pop	{r4, pc}

0800ac66 <__swrite>:
 800ac66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6a:	461f      	mov	r7, r3
 800ac6c:	898b      	ldrh	r3, [r1, #12]
 800ac6e:	05db      	lsls	r3, r3, #23
 800ac70:	4605      	mov	r5, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	4616      	mov	r6, r2
 800ac76:	d505      	bpl.n	800ac84 <__swrite+0x1e>
 800ac78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f000 f898 	bl	800adb4 <_lseek_r>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	4632      	mov	r2, r6
 800ac92:	463b      	mov	r3, r7
 800ac94:	4628      	mov	r0, r5
 800ac96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9a:	f000 b817 	b.w	800accc <_write_r>

0800ac9e <__sseek>:
 800ac9e:	b510      	push	{r4, lr}
 800aca0:	460c      	mov	r4, r1
 800aca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca6:	f000 f885 	bl	800adb4 <_lseek_r>
 800acaa:	1c43      	adds	r3, r0, #1
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	bf15      	itete	ne
 800acb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800acb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acba:	81a3      	strheq	r3, [r4, #12]
 800acbc:	bf18      	it	ne
 800acbe:	81a3      	strhne	r3, [r4, #12]
 800acc0:	bd10      	pop	{r4, pc}

0800acc2 <__sclose>:
 800acc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc6:	f000 b831 	b.w	800ad2c <_close_r>
	...

0800accc <_write_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	; (800acec <_write_r+0x20>)
 800acd0:	4604      	mov	r4, r0
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7f8 fd40 	bl	8003760 <_write>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_write_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_write_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000640 	.word	0x20000640

0800acf0 <__assert_func>:
 800acf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acf2:	4614      	mov	r4, r2
 800acf4:	461a      	mov	r2, r3
 800acf6:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <__assert_func+0x2c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4605      	mov	r5, r0
 800acfc:	68d8      	ldr	r0, [r3, #12]
 800acfe:	b14c      	cbz	r4, 800ad14 <__assert_func+0x24>
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <__assert_func+0x30>)
 800ad02:	9100      	str	r1, [sp, #0]
 800ad04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad08:	4906      	ldr	r1, [pc, #24]	; (800ad24 <__assert_func+0x34>)
 800ad0a:	462b      	mov	r3, r5
 800ad0c:	f000 f81e 	bl	800ad4c <fiprintf>
 800ad10:	f000 f893 	bl	800ae3a <abort>
 800ad14:	4b04      	ldr	r3, [pc, #16]	; (800ad28 <__assert_func+0x38>)
 800ad16:	461c      	mov	r4, r3
 800ad18:	e7f3      	b.n	800ad02 <__assert_func+0x12>
 800ad1a:	bf00      	nop
 800ad1c:	2000000c 	.word	0x2000000c
 800ad20:	0800cddd 	.word	0x0800cddd
 800ad24:	0800cdea 	.word	0x0800cdea
 800ad28:	0800ce18 	.word	0x0800ce18

0800ad2c <_close_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4d06      	ldr	r5, [pc, #24]	; (800ad48 <_close_r+0x1c>)
 800ad30:	2300      	movs	r3, #0
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	602b      	str	r3, [r5, #0]
 800ad38:	f7f9 f8e9 	bl	8003f0e <_close>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_close_r+0x1a>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_close_r+0x1a>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	20000640 	.word	0x20000640

0800ad4c <fiprintf>:
 800ad4c:	b40e      	push	{r1, r2, r3}
 800ad4e:	b503      	push	{r0, r1, lr}
 800ad50:	4601      	mov	r1, r0
 800ad52:	ab03      	add	r3, sp, #12
 800ad54:	4805      	ldr	r0, [pc, #20]	; (800ad6c <fiprintf+0x20>)
 800ad56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad5a:	6800      	ldr	r0, [r0, #0]
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	f7ff fe41 	bl	800a9e4 <_vfiprintf_r>
 800ad62:	b002      	add	sp, #8
 800ad64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad68:	b003      	add	sp, #12
 800ad6a:	4770      	bx	lr
 800ad6c:	2000000c 	.word	0x2000000c

0800ad70 <_fstat_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	; (800ad90 <_fstat_r+0x20>)
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	4608      	mov	r0, r1
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	602b      	str	r3, [r5, #0]
 800ad7e:	f7f9 f8d2 	bl	8003f26 <_fstat>
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	d102      	bne.n	800ad8c <_fstat_r+0x1c>
 800ad86:	682b      	ldr	r3, [r5, #0]
 800ad88:	b103      	cbz	r3, 800ad8c <_fstat_r+0x1c>
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	bd38      	pop	{r3, r4, r5, pc}
 800ad8e:	bf00      	nop
 800ad90:	20000640 	.word	0x20000640

0800ad94 <_isatty_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d06      	ldr	r5, [pc, #24]	; (800adb0 <_isatty_r+0x1c>)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	602b      	str	r3, [r5, #0]
 800ada0:	f7f9 f8d1 	bl	8003f46 <_isatty>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_isatty_r+0x1a>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_isatty_r+0x1a>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	20000640 	.word	0x20000640

0800adb4 <_lseek_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d07      	ldr	r5, [pc, #28]	; (800add4 <_lseek_r+0x20>)
 800adb8:	4604      	mov	r4, r0
 800adba:	4608      	mov	r0, r1
 800adbc:	4611      	mov	r1, r2
 800adbe:	2200      	movs	r2, #0
 800adc0:	602a      	str	r2, [r5, #0]
 800adc2:	461a      	mov	r2, r3
 800adc4:	f7f9 f8ca 	bl	8003f5c <_lseek>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d102      	bne.n	800add2 <_lseek_r+0x1e>
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	b103      	cbz	r3, 800add2 <_lseek_r+0x1e>
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	20000640 	.word	0x20000640

0800add8 <__ascii_mbtowc>:
 800add8:	b082      	sub	sp, #8
 800adda:	b901      	cbnz	r1, 800adde <__ascii_mbtowc+0x6>
 800addc:	a901      	add	r1, sp, #4
 800adde:	b142      	cbz	r2, 800adf2 <__ascii_mbtowc+0x1a>
 800ade0:	b14b      	cbz	r3, 800adf6 <__ascii_mbtowc+0x1e>
 800ade2:	7813      	ldrb	r3, [r2, #0]
 800ade4:	600b      	str	r3, [r1, #0]
 800ade6:	7812      	ldrb	r2, [r2, #0]
 800ade8:	1e10      	subs	r0, r2, #0
 800adea:	bf18      	it	ne
 800adec:	2001      	movne	r0, #1
 800adee:	b002      	add	sp, #8
 800adf0:	4770      	bx	lr
 800adf2:	4610      	mov	r0, r2
 800adf4:	e7fb      	b.n	800adee <__ascii_mbtowc+0x16>
 800adf6:	f06f 0001 	mvn.w	r0, #1
 800adfa:	e7f8      	b.n	800adee <__ascii_mbtowc+0x16>

0800adfc <_read_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d07      	ldr	r5, [pc, #28]	; (800ae1c <_read_r+0x20>)
 800ae00:	4604      	mov	r4, r0
 800ae02:	4608      	mov	r0, r1
 800ae04:	4611      	mov	r1, r2
 800ae06:	2200      	movs	r2, #0
 800ae08:	602a      	str	r2, [r5, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f7f9 f862 	bl	8003ed4 <_read>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_read_r+0x1e>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_read_r+0x1e>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20000640 	.word	0x20000640

0800ae20 <__ascii_wctomb>:
 800ae20:	b149      	cbz	r1, 800ae36 <__ascii_wctomb+0x16>
 800ae22:	2aff      	cmp	r2, #255	; 0xff
 800ae24:	bf85      	ittet	hi
 800ae26:	238a      	movhi	r3, #138	; 0x8a
 800ae28:	6003      	strhi	r3, [r0, #0]
 800ae2a:	700a      	strbls	r2, [r1, #0]
 800ae2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ae30:	bf98      	it	ls
 800ae32:	2001      	movls	r0, #1
 800ae34:	4770      	bx	lr
 800ae36:	4608      	mov	r0, r1
 800ae38:	4770      	bx	lr

0800ae3a <abort>:
 800ae3a:	b508      	push	{r3, lr}
 800ae3c:	2006      	movs	r0, #6
 800ae3e:	f000 f82b 	bl	800ae98 <raise>
 800ae42:	2001      	movs	r0, #1
 800ae44:	f7f9 f83c 	bl	8003ec0 <_exit>

0800ae48 <_raise_r>:
 800ae48:	291f      	cmp	r1, #31
 800ae4a:	b538      	push	{r3, r4, r5, lr}
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	460d      	mov	r5, r1
 800ae50:	d904      	bls.n	800ae5c <_raise_r+0x14>
 800ae52:	2316      	movs	r3, #22
 800ae54:	6003      	str	r3, [r0, #0]
 800ae56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae5e:	b112      	cbz	r2, 800ae66 <_raise_r+0x1e>
 800ae60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae64:	b94b      	cbnz	r3, 800ae7a <_raise_r+0x32>
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 f830 	bl	800aecc <_getpid_r>
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	4601      	mov	r1, r0
 800ae70:	4620      	mov	r0, r4
 800ae72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae76:	f000 b817 	b.w	800aea8 <_kill_r>
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d00a      	beq.n	800ae94 <_raise_r+0x4c>
 800ae7e:	1c59      	adds	r1, r3, #1
 800ae80:	d103      	bne.n	800ae8a <_raise_r+0x42>
 800ae82:	2316      	movs	r3, #22
 800ae84:	6003      	str	r3, [r0, #0]
 800ae86:	2001      	movs	r0, #1
 800ae88:	e7e7      	b.n	800ae5a <_raise_r+0x12>
 800ae8a:	2400      	movs	r4, #0
 800ae8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae90:	4628      	mov	r0, r5
 800ae92:	4798      	blx	r3
 800ae94:	2000      	movs	r0, #0
 800ae96:	e7e0      	b.n	800ae5a <_raise_r+0x12>

0800ae98 <raise>:
 800ae98:	4b02      	ldr	r3, [pc, #8]	; (800aea4 <raise+0xc>)
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	f7ff bfd3 	b.w	800ae48 <_raise_r>
 800aea2:	bf00      	nop
 800aea4:	2000000c 	.word	0x2000000c

0800aea8 <_kill_r>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	4d07      	ldr	r5, [pc, #28]	; (800aec8 <_kill_r+0x20>)
 800aeac:	2300      	movs	r3, #0
 800aeae:	4604      	mov	r4, r0
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	602b      	str	r3, [r5, #0]
 800aeb6:	f7f8 fff3 	bl	8003ea0 <_kill>
 800aeba:	1c43      	adds	r3, r0, #1
 800aebc:	d102      	bne.n	800aec4 <_kill_r+0x1c>
 800aebe:	682b      	ldr	r3, [r5, #0]
 800aec0:	b103      	cbz	r3, 800aec4 <_kill_r+0x1c>
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	bd38      	pop	{r3, r4, r5, pc}
 800aec6:	bf00      	nop
 800aec8:	20000640 	.word	0x20000640

0800aecc <_getpid_r>:
 800aecc:	f7f8 bfe0 	b.w	8003e90 <_getpid>

0800aed0 <atan>:
 800aed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	ec55 4b10 	vmov	r4, r5, d0
 800aed8:	4bc3      	ldr	r3, [pc, #780]	; (800b1e8 <atan+0x318>)
 800aeda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aede:	429e      	cmp	r6, r3
 800aee0:	46ab      	mov	fp, r5
 800aee2:	dd18      	ble.n	800af16 <atan+0x46>
 800aee4:	4bc1      	ldr	r3, [pc, #772]	; (800b1ec <atan+0x31c>)
 800aee6:	429e      	cmp	r6, r3
 800aee8:	dc01      	bgt.n	800aeee <atan+0x1e>
 800aeea:	d109      	bne.n	800af00 <atan+0x30>
 800aeec:	b144      	cbz	r4, 800af00 <atan+0x30>
 800aeee:	4622      	mov	r2, r4
 800aef0:	462b      	mov	r3, r5
 800aef2:	4620      	mov	r0, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	f7f5 f9e9 	bl	80002cc <__adddf3>
 800aefa:	4604      	mov	r4, r0
 800aefc:	460d      	mov	r5, r1
 800aefe:	e006      	b.n	800af0e <atan+0x3e>
 800af00:	f1bb 0f00 	cmp.w	fp, #0
 800af04:	f300 8131 	bgt.w	800b16a <atan+0x29a>
 800af08:	a59b      	add	r5, pc, #620	; (adr r5, 800b178 <atan+0x2a8>)
 800af0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af0e:	ec45 4b10 	vmov	d0, r4, r5
 800af12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	4bb6      	ldr	r3, [pc, #728]	; (800b1f0 <atan+0x320>)
 800af18:	429e      	cmp	r6, r3
 800af1a:	dc14      	bgt.n	800af46 <atan+0x76>
 800af1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800af20:	429e      	cmp	r6, r3
 800af22:	dc0d      	bgt.n	800af40 <atan+0x70>
 800af24:	a396      	add	r3, pc, #600	; (adr r3, 800b180 <atan+0x2b0>)
 800af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2a:	ee10 0a10 	vmov	r0, s0
 800af2e:	4629      	mov	r1, r5
 800af30:	f7f5 f9cc 	bl	80002cc <__adddf3>
 800af34:	4baf      	ldr	r3, [pc, #700]	; (800b1f4 <atan+0x324>)
 800af36:	2200      	movs	r2, #0
 800af38:	f7f5 fe0e 	bl	8000b58 <__aeabi_dcmpgt>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d1e6      	bne.n	800af0e <atan+0x3e>
 800af40:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800af44:	e02b      	b.n	800af9e <atan+0xce>
 800af46:	f000 f9b3 	bl	800b2b0 <fabs>
 800af4a:	4bab      	ldr	r3, [pc, #684]	; (800b1f8 <atan+0x328>)
 800af4c:	429e      	cmp	r6, r3
 800af4e:	ec55 4b10 	vmov	r4, r5, d0
 800af52:	f300 80bf 	bgt.w	800b0d4 <atan+0x204>
 800af56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800af5a:	429e      	cmp	r6, r3
 800af5c:	f300 80a0 	bgt.w	800b0a0 <atan+0x1d0>
 800af60:	ee10 2a10 	vmov	r2, s0
 800af64:	ee10 0a10 	vmov	r0, s0
 800af68:	462b      	mov	r3, r5
 800af6a:	4629      	mov	r1, r5
 800af6c:	f7f5 f9ae 	bl	80002cc <__adddf3>
 800af70:	4ba0      	ldr	r3, [pc, #640]	; (800b1f4 <atan+0x324>)
 800af72:	2200      	movs	r2, #0
 800af74:	f7f5 f9a8 	bl	80002c8 <__aeabi_dsub>
 800af78:	2200      	movs	r2, #0
 800af7a:	4606      	mov	r6, r0
 800af7c:	460f      	mov	r7, r1
 800af7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af82:	4620      	mov	r0, r4
 800af84:	4629      	mov	r1, r5
 800af86:	f7f5 f9a1 	bl	80002cc <__adddf3>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4630      	mov	r0, r6
 800af90:	4639      	mov	r1, r7
 800af92:	f7f5 fc7b 	bl	800088c <__aeabi_ddiv>
 800af96:	f04f 0a00 	mov.w	sl, #0
 800af9a:	4604      	mov	r4, r0
 800af9c:	460d      	mov	r5, r1
 800af9e:	4622      	mov	r2, r4
 800afa0:	462b      	mov	r3, r5
 800afa2:	4620      	mov	r0, r4
 800afa4:	4629      	mov	r1, r5
 800afa6:	f7f5 fb47 	bl	8000638 <__aeabi_dmul>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4680      	mov	r8, r0
 800afb0:	4689      	mov	r9, r1
 800afb2:	f7f5 fb41 	bl	8000638 <__aeabi_dmul>
 800afb6:	a374      	add	r3, pc, #464	; (adr r3, 800b188 <atan+0x2b8>)
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	f7f5 fb3a 	bl	8000638 <__aeabi_dmul>
 800afc4:	a372      	add	r3, pc, #456	; (adr r3, 800b190 <atan+0x2c0>)
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	f7f5 f97f 	bl	80002cc <__adddf3>
 800afce:	4632      	mov	r2, r6
 800afd0:	463b      	mov	r3, r7
 800afd2:	f7f5 fb31 	bl	8000638 <__aeabi_dmul>
 800afd6:	a370      	add	r3, pc, #448	; (adr r3, 800b198 <atan+0x2c8>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 f976 	bl	80002cc <__adddf3>
 800afe0:	4632      	mov	r2, r6
 800afe2:	463b      	mov	r3, r7
 800afe4:	f7f5 fb28 	bl	8000638 <__aeabi_dmul>
 800afe8:	a36d      	add	r3, pc, #436	; (adr r3, 800b1a0 <atan+0x2d0>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f7f5 f96d 	bl	80002cc <__adddf3>
 800aff2:	4632      	mov	r2, r6
 800aff4:	463b      	mov	r3, r7
 800aff6:	f7f5 fb1f 	bl	8000638 <__aeabi_dmul>
 800affa:	a36b      	add	r3, pc, #428	; (adr r3, 800b1a8 <atan+0x2d8>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f7f5 f964 	bl	80002cc <__adddf3>
 800b004:	4632      	mov	r2, r6
 800b006:	463b      	mov	r3, r7
 800b008:	f7f5 fb16 	bl	8000638 <__aeabi_dmul>
 800b00c:	a368      	add	r3, pc, #416	; (adr r3, 800b1b0 <atan+0x2e0>)
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	f7f5 f95b 	bl	80002cc <__adddf3>
 800b016:	4642      	mov	r2, r8
 800b018:	464b      	mov	r3, r9
 800b01a:	f7f5 fb0d 	bl	8000638 <__aeabi_dmul>
 800b01e:	a366      	add	r3, pc, #408	; (adr r3, 800b1b8 <atan+0x2e8>)
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	4680      	mov	r8, r0
 800b026:	4689      	mov	r9, r1
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	f7f5 fb04 	bl	8000638 <__aeabi_dmul>
 800b030:	a363      	add	r3, pc, #396	; (adr r3, 800b1c0 <atan+0x2f0>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f7f5 f947 	bl	80002c8 <__aeabi_dsub>
 800b03a:	4632      	mov	r2, r6
 800b03c:	463b      	mov	r3, r7
 800b03e:	f7f5 fafb 	bl	8000638 <__aeabi_dmul>
 800b042:	a361      	add	r3, pc, #388	; (adr r3, 800b1c8 <atan+0x2f8>)
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	f7f5 f93e 	bl	80002c8 <__aeabi_dsub>
 800b04c:	4632      	mov	r2, r6
 800b04e:	463b      	mov	r3, r7
 800b050:	f7f5 faf2 	bl	8000638 <__aeabi_dmul>
 800b054:	a35e      	add	r3, pc, #376	; (adr r3, 800b1d0 <atan+0x300>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	f7f5 f935 	bl	80002c8 <__aeabi_dsub>
 800b05e:	4632      	mov	r2, r6
 800b060:	463b      	mov	r3, r7
 800b062:	f7f5 fae9 	bl	8000638 <__aeabi_dmul>
 800b066:	a35c      	add	r3, pc, #368	; (adr r3, 800b1d8 <atan+0x308>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f7f5 f92c 	bl	80002c8 <__aeabi_dsub>
 800b070:	4632      	mov	r2, r6
 800b072:	463b      	mov	r3, r7
 800b074:	f7f5 fae0 	bl	8000638 <__aeabi_dmul>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4640      	mov	r0, r8
 800b07e:	4649      	mov	r1, r9
 800b080:	f7f5 f924 	bl	80002cc <__adddf3>
 800b084:	4622      	mov	r2, r4
 800b086:	462b      	mov	r3, r5
 800b088:	f7f5 fad6 	bl	8000638 <__aeabi_dmul>
 800b08c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	d14b      	bne.n	800b12e <atan+0x25e>
 800b096:	4620      	mov	r0, r4
 800b098:	4629      	mov	r1, r5
 800b09a:	f7f5 f915 	bl	80002c8 <__aeabi_dsub>
 800b09e:	e72c      	b.n	800aefa <atan+0x2a>
 800b0a0:	ee10 0a10 	vmov	r0, s0
 800b0a4:	4b53      	ldr	r3, [pc, #332]	; (800b1f4 <atan+0x324>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	f7f5 f90d 	bl	80002c8 <__aeabi_dsub>
 800b0ae:	4b51      	ldr	r3, [pc, #324]	; (800b1f4 <atan+0x324>)
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	460f      	mov	r7, r1
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	f7f5 f907 	bl	80002cc <__adddf3>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	f7f5 fbe1 	bl	800088c <__aeabi_ddiv>
 800b0ca:	f04f 0a01 	mov.w	sl, #1
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	460d      	mov	r5, r1
 800b0d2:	e764      	b.n	800af9e <atan+0xce>
 800b0d4:	4b49      	ldr	r3, [pc, #292]	; (800b1fc <atan+0x32c>)
 800b0d6:	429e      	cmp	r6, r3
 800b0d8:	da1d      	bge.n	800b116 <atan+0x246>
 800b0da:	ee10 0a10 	vmov	r0, s0
 800b0de:	4b48      	ldr	r3, [pc, #288]	; (800b200 <atan+0x330>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	f7f5 f8f0 	bl	80002c8 <__aeabi_dsub>
 800b0e8:	4b45      	ldr	r3, [pc, #276]	; (800b200 <atan+0x330>)
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	f7f5 faa0 	bl	8000638 <__aeabi_dmul>
 800b0f8:	4b3e      	ldr	r3, [pc, #248]	; (800b1f4 <atan+0x324>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f7f5 f8e6 	bl	80002cc <__adddf3>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4630      	mov	r0, r6
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 fbc0 	bl	800088c <__aeabi_ddiv>
 800b10c:	f04f 0a02 	mov.w	sl, #2
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	e743      	b.n	800af9e <atan+0xce>
 800b116:	462b      	mov	r3, r5
 800b118:	ee10 2a10 	vmov	r2, s0
 800b11c:	4939      	ldr	r1, [pc, #228]	; (800b204 <atan+0x334>)
 800b11e:	2000      	movs	r0, #0
 800b120:	f7f5 fbb4 	bl	800088c <__aeabi_ddiv>
 800b124:	f04f 0a03 	mov.w	sl, #3
 800b128:	4604      	mov	r4, r0
 800b12a:	460d      	mov	r5, r1
 800b12c:	e737      	b.n	800af9e <atan+0xce>
 800b12e:	4b36      	ldr	r3, [pc, #216]	; (800b208 <atan+0x338>)
 800b130:	4e36      	ldr	r6, [pc, #216]	; (800b20c <atan+0x33c>)
 800b132:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b136:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b13a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b13e:	f7f5 f8c3 	bl	80002c8 <__aeabi_dsub>
 800b142:	4622      	mov	r2, r4
 800b144:	462b      	mov	r3, r5
 800b146:	f7f5 f8bf 	bl	80002c8 <__aeabi_dsub>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b152:	f7f5 f8b9 	bl	80002c8 <__aeabi_dsub>
 800b156:	f1bb 0f00 	cmp.w	fp, #0
 800b15a:	4604      	mov	r4, r0
 800b15c:	460d      	mov	r5, r1
 800b15e:	f6bf aed6 	bge.w	800af0e <atan+0x3e>
 800b162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b166:	461d      	mov	r5, r3
 800b168:	e6d1      	b.n	800af0e <atan+0x3e>
 800b16a:	a51d      	add	r5, pc, #116	; (adr r5, 800b1e0 <atan+0x310>)
 800b16c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b170:	e6cd      	b.n	800af0e <atan+0x3e>
 800b172:	bf00      	nop
 800b174:	f3af 8000 	nop.w
 800b178:	54442d18 	.word	0x54442d18
 800b17c:	bff921fb 	.word	0xbff921fb
 800b180:	8800759c 	.word	0x8800759c
 800b184:	7e37e43c 	.word	0x7e37e43c
 800b188:	e322da11 	.word	0xe322da11
 800b18c:	3f90ad3a 	.word	0x3f90ad3a
 800b190:	24760deb 	.word	0x24760deb
 800b194:	3fa97b4b 	.word	0x3fa97b4b
 800b198:	a0d03d51 	.word	0xa0d03d51
 800b19c:	3fb10d66 	.word	0x3fb10d66
 800b1a0:	c54c206e 	.word	0xc54c206e
 800b1a4:	3fb745cd 	.word	0x3fb745cd
 800b1a8:	920083ff 	.word	0x920083ff
 800b1ac:	3fc24924 	.word	0x3fc24924
 800b1b0:	5555550d 	.word	0x5555550d
 800b1b4:	3fd55555 	.word	0x3fd55555
 800b1b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b1bc:	bfa2b444 	.word	0xbfa2b444
 800b1c0:	52defd9a 	.word	0x52defd9a
 800b1c4:	3fadde2d 	.word	0x3fadde2d
 800b1c8:	af749a6d 	.word	0xaf749a6d
 800b1cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b1d0:	fe231671 	.word	0xfe231671
 800b1d4:	3fbc71c6 	.word	0x3fbc71c6
 800b1d8:	9998ebc4 	.word	0x9998ebc4
 800b1dc:	3fc99999 	.word	0x3fc99999
 800b1e0:	54442d18 	.word	0x54442d18
 800b1e4:	3ff921fb 	.word	0x3ff921fb
 800b1e8:	440fffff 	.word	0x440fffff
 800b1ec:	7ff00000 	.word	0x7ff00000
 800b1f0:	3fdbffff 	.word	0x3fdbffff
 800b1f4:	3ff00000 	.word	0x3ff00000
 800b1f8:	3ff2ffff 	.word	0x3ff2ffff
 800b1fc:	40038000 	.word	0x40038000
 800b200:	3ff80000 	.word	0x3ff80000
 800b204:	bff00000 	.word	0xbff00000
 800b208:	0800cf48 	.word	0x0800cf48
 800b20c:	0800cf28 	.word	0x0800cf28

0800b210 <cos>:
 800b210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b212:	ec53 2b10 	vmov	r2, r3, d0
 800b216:	4824      	ldr	r0, [pc, #144]	; (800b2a8 <cos+0x98>)
 800b218:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b21c:	4281      	cmp	r1, r0
 800b21e:	dc06      	bgt.n	800b22e <cos+0x1e>
 800b220:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b2a0 <cos+0x90>
 800b224:	f000 fdb4 	bl	800bd90 <__kernel_cos>
 800b228:	ec51 0b10 	vmov	r0, r1, d0
 800b22c:	e007      	b.n	800b23e <cos+0x2e>
 800b22e:	481f      	ldr	r0, [pc, #124]	; (800b2ac <cos+0x9c>)
 800b230:	4281      	cmp	r1, r0
 800b232:	dd09      	ble.n	800b248 <cos+0x38>
 800b234:	ee10 0a10 	vmov	r0, s0
 800b238:	4619      	mov	r1, r3
 800b23a:	f7f5 f845 	bl	80002c8 <__aeabi_dsub>
 800b23e:	ec41 0b10 	vmov	d0, r0, r1
 800b242:	b005      	add	sp, #20
 800b244:	f85d fb04 	ldr.w	pc, [sp], #4
 800b248:	4668      	mov	r0, sp
 800b24a:	f000 fae1 	bl	800b810 <__ieee754_rem_pio2>
 800b24e:	f000 0003 	and.w	r0, r0, #3
 800b252:	2801      	cmp	r0, #1
 800b254:	d007      	beq.n	800b266 <cos+0x56>
 800b256:	2802      	cmp	r0, #2
 800b258:	d012      	beq.n	800b280 <cos+0x70>
 800b25a:	b9c0      	cbnz	r0, 800b28e <cos+0x7e>
 800b25c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b260:	ed9d 0b00 	vldr	d0, [sp]
 800b264:	e7de      	b.n	800b224 <cos+0x14>
 800b266:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b26a:	ed9d 0b00 	vldr	d0, [sp]
 800b26e:	f001 f997 	bl	800c5a0 <__kernel_sin>
 800b272:	ec53 2b10 	vmov	r2, r3, d0
 800b276:	ee10 0a10 	vmov	r0, s0
 800b27a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b27e:	e7de      	b.n	800b23e <cos+0x2e>
 800b280:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b284:	ed9d 0b00 	vldr	d0, [sp]
 800b288:	f000 fd82 	bl	800bd90 <__kernel_cos>
 800b28c:	e7f1      	b.n	800b272 <cos+0x62>
 800b28e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b292:	ed9d 0b00 	vldr	d0, [sp]
 800b296:	2001      	movs	r0, #1
 800b298:	f001 f982 	bl	800c5a0 <__kernel_sin>
 800b29c:	e7c4      	b.n	800b228 <cos+0x18>
 800b29e:	bf00      	nop
	...
 800b2a8:	3fe921fb 	.word	0x3fe921fb
 800b2ac:	7fefffff 	.word	0x7fefffff

0800b2b0 <fabs>:
 800b2b0:	ec51 0b10 	vmov	r0, r1, d0
 800b2b4:	ee10 2a10 	vmov	r2, s0
 800b2b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b2bc:	ec43 2b10 	vmov	d0, r2, r3
 800b2c0:	4770      	bx	lr
 800b2c2:	0000      	movs	r0, r0
 800b2c4:	0000      	movs	r0, r0
	...

0800b2c8 <sin>:
 800b2c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2ca:	ec53 2b10 	vmov	r2, r3, d0
 800b2ce:	4826      	ldr	r0, [pc, #152]	; (800b368 <sin+0xa0>)
 800b2d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b2d4:	4281      	cmp	r1, r0
 800b2d6:	dc07      	bgt.n	800b2e8 <sin+0x20>
 800b2d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b360 <sin+0x98>
 800b2dc:	2000      	movs	r0, #0
 800b2de:	f001 f95f 	bl	800c5a0 <__kernel_sin>
 800b2e2:	ec51 0b10 	vmov	r0, r1, d0
 800b2e6:	e007      	b.n	800b2f8 <sin+0x30>
 800b2e8:	4820      	ldr	r0, [pc, #128]	; (800b36c <sin+0xa4>)
 800b2ea:	4281      	cmp	r1, r0
 800b2ec:	dd09      	ble.n	800b302 <sin+0x3a>
 800b2ee:	ee10 0a10 	vmov	r0, s0
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	f7f4 ffe8 	bl	80002c8 <__aeabi_dsub>
 800b2f8:	ec41 0b10 	vmov	d0, r0, r1
 800b2fc:	b005      	add	sp, #20
 800b2fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800b302:	4668      	mov	r0, sp
 800b304:	f000 fa84 	bl	800b810 <__ieee754_rem_pio2>
 800b308:	f000 0003 	and.w	r0, r0, #3
 800b30c:	2801      	cmp	r0, #1
 800b30e:	d008      	beq.n	800b322 <sin+0x5a>
 800b310:	2802      	cmp	r0, #2
 800b312:	d00d      	beq.n	800b330 <sin+0x68>
 800b314:	b9d0      	cbnz	r0, 800b34c <sin+0x84>
 800b316:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b31a:	ed9d 0b00 	vldr	d0, [sp]
 800b31e:	2001      	movs	r0, #1
 800b320:	e7dd      	b.n	800b2de <sin+0x16>
 800b322:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b326:	ed9d 0b00 	vldr	d0, [sp]
 800b32a:	f000 fd31 	bl	800bd90 <__kernel_cos>
 800b32e:	e7d8      	b.n	800b2e2 <sin+0x1a>
 800b330:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b334:	ed9d 0b00 	vldr	d0, [sp]
 800b338:	2001      	movs	r0, #1
 800b33a:	f001 f931 	bl	800c5a0 <__kernel_sin>
 800b33e:	ec53 2b10 	vmov	r2, r3, d0
 800b342:	ee10 0a10 	vmov	r0, s0
 800b346:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b34a:	e7d5      	b.n	800b2f8 <sin+0x30>
 800b34c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b350:	ed9d 0b00 	vldr	d0, [sp]
 800b354:	f000 fd1c 	bl	800bd90 <__kernel_cos>
 800b358:	e7f1      	b.n	800b33e <sin+0x76>
 800b35a:	bf00      	nop
 800b35c:	f3af 8000 	nop.w
	...
 800b368:	3fe921fb 	.word	0x3fe921fb
 800b36c:	7fefffff 	.word	0x7fefffff

0800b370 <atan2>:
 800b370:	f000 b872 	b.w	800b458 <__ieee754_atan2>

0800b374 <fmod>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	ed2d 8b02 	vpush	{d8}
 800b37a:	ec57 6b10 	vmov	r6, r7, d0
 800b37e:	ec55 4b11 	vmov	r4, r5, d1
 800b382:	f000 f933 	bl	800b5ec <__ieee754_fmod>
 800b386:	4b18      	ldr	r3, [pc, #96]	; (800b3e8 <fmod+0x74>)
 800b388:	eeb0 8a40 	vmov.f32	s16, s0
 800b38c:	eef0 8a60 	vmov.f32	s17, s1
 800b390:	f993 3000 	ldrsb.w	r3, [r3]
 800b394:	3301      	adds	r3, #1
 800b396:	d020      	beq.n	800b3da <fmod+0x66>
 800b398:	4622      	mov	r2, r4
 800b39a:	462b      	mov	r3, r5
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f5 fbe4 	bl	8000b6c <__aeabi_dcmpun>
 800b3a4:	b9c8      	cbnz	r0, 800b3da <fmod+0x66>
 800b3a6:	4632      	mov	r2, r6
 800b3a8:	463b      	mov	r3, r7
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	f7f5 fbdd 	bl	8000b6c <__aeabi_dcmpun>
 800b3b2:	b990      	cbnz	r0, 800b3da <fmod+0x66>
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	f7f5 fba4 	bl	8000b08 <__aeabi_dcmpeq>
 800b3c0:	b158      	cbz	r0, 800b3da <fmod+0x66>
 800b3c2:	f7fc fff3 	bl	80083ac <__errno>
 800b3c6:	2321      	movs	r3, #33	; 0x21
 800b3c8:	6003      	str	r3, [r0, #0]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f7f5 fa5b 	bl	800088c <__aeabi_ddiv>
 800b3d6:	ec41 0b18 	vmov	d8, r0, r1
 800b3da:	eeb0 0a48 	vmov.f32	s0, s16
 800b3de:	eef0 0a68 	vmov.f32	s1, s17
 800b3e2:	ecbd 8b02 	vpop	{d8}
 800b3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e8:	200001dc 	.word	0x200001dc

0800b3ec <sqrt>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	ed2d 8b02 	vpush	{d8}
 800b3f2:	ec55 4b10 	vmov	r4, r5, d0
 800b3f6:	f000 fc15 	bl	800bc24 <__ieee754_sqrt>
 800b3fa:	4b15      	ldr	r3, [pc, #84]	; (800b450 <sqrt+0x64>)
 800b3fc:	eeb0 8a40 	vmov.f32	s16, s0
 800b400:	eef0 8a60 	vmov.f32	s17, s1
 800b404:	f993 3000 	ldrsb.w	r3, [r3]
 800b408:	3301      	adds	r3, #1
 800b40a:	d019      	beq.n	800b440 <sqrt+0x54>
 800b40c:	4622      	mov	r2, r4
 800b40e:	462b      	mov	r3, r5
 800b410:	4620      	mov	r0, r4
 800b412:	4629      	mov	r1, r5
 800b414:	f7f5 fbaa 	bl	8000b6c <__aeabi_dcmpun>
 800b418:	b990      	cbnz	r0, 800b440 <sqrt+0x54>
 800b41a:	2200      	movs	r2, #0
 800b41c:	2300      	movs	r3, #0
 800b41e:	4620      	mov	r0, r4
 800b420:	4629      	mov	r1, r5
 800b422:	f7f5 fb7b 	bl	8000b1c <__aeabi_dcmplt>
 800b426:	b158      	cbz	r0, 800b440 <sqrt+0x54>
 800b428:	f7fc ffc0 	bl	80083ac <__errno>
 800b42c:	2321      	movs	r3, #33	; 0x21
 800b42e:	6003      	str	r3, [r0, #0]
 800b430:	2200      	movs	r2, #0
 800b432:	2300      	movs	r3, #0
 800b434:	4610      	mov	r0, r2
 800b436:	4619      	mov	r1, r3
 800b438:	f7f5 fa28 	bl	800088c <__aeabi_ddiv>
 800b43c:	ec41 0b18 	vmov	d8, r0, r1
 800b440:	eeb0 0a48 	vmov.f32	s0, s16
 800b444:	eef0 0a68 	vmov.f32	s1, s17
 800b448:	ecbd 8b02 	vpop	{d8}
 800b44c:	bd38      	pop	{r3, r4, r5, pc}
 800b44e:	bf00      	nop
 800b450:	200001dc 	.word	0x200001dc
 800b454:	00000000 	.word	0x00000000

0800b458 <__ieee754_atan2>:
 800b458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b45c:	ec57 6b11 	vmov	r6, r7, d1
 800b460:	4273      	negs	r3, r6
 800b462:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b5e8 <__ieee754_atan2+0x190>
 800b466:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b46a:	4333      	orrs	r3, r6
 800b46c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b470:	4573      	cmp	r3, lr
 800b472:	ec51 0b10 	vmov	r0, r1, d0
 800b476:	ee11 8a10 	vmov	r8, s2
 800b47a:	d80a      	bhi.n	800b492 <__ieee754_atan2+0x3a>
 800b47c:	4244      	negs	r4, r0
 800b47e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b482:	4304      	orrs	r4, r0
 800b484:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b488:	4574      	cmp	r4, lr
 800b48a:	ee10 9a10 	vmov	r9, s0
 800b48e:	468c      	mov	ip, r1
 800b490:	d907      	bls.n	800b4a2 <__ieee754_atan2+0x4a>
 800b492:	4632      	mov	r2, r6
 800b494:	463b      	mov	r3, r7
 800b496:	f7f4 ff19 	bl	80002cc <__adddf3>
 800b49a:	ec41 0b10 	vmov	d0, r0, r1
 800b49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b4a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b4aa:	4334      	orrs	r4, r6
 800b4ac:	d103      	bne.n	800b4b6 <__ieee754_atan2+0x5e>
 800b4ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b2:	f7ff bd0d 	b.w	800aed0 <atan>
 800b4b6:	17bc      	asrs	r4, r7, #30
 800b4b8:	f004 0402 	and.w	r4, r4, #2
 800b4bc:	ea53 0909 	orrs.w	r9, r3, r9
 800b4c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b4c4:	d107      	bne.n	800b4d6 <__ieee754_atan2+0x7e>
 800b4c6:	2c02      	cmp	r4, #2
 800b4c8:	d060      	beq.n	800b58c <__ieee754_atan2+0x134>
 800b4ca:	2c03      	cmp	r4, #3
 800b4cc:	d1e5      	bne.n	800b49a <__ieee754_atan2+0x42>
 800b4ce:	a142      	add	r1, pc, #264	; (adr r1, 800b5d8 <__ieee754_atan2+0x180>)
 800b4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4d4:	e7e1      	b.n	800b49a <__ieee754_atan2+0x42>
 800b4d6:	ea52 0808 	orrs.w	r8, r2, r8
 800b4da:	d106      	bne.n	800b4ea <__ieee754_atan2+0x92>
 800b4dc:	f1bc 0f00 	cmp.w	ip, #0
 800b4e0:	da5f      	bge.n	800b5a2 <__ieee754_atan2+0x14a>
 800b4e2:	a13f      	add	r1, pc, #252	; (adr r1, 800b5e0 <__ieee754_atan2+0x188>)
 800b4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4e8:	e7d7      	b.n	800b49a <__ieee754_atan2+0x42>
 800b4ea:	4572      	cmp	r2, lr
 800b4ec:	d10f      	bne.n	800b50e <__ieee754_atan2+0xb6>
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b4f4:	d107      	bne.n	800b506 <__ieee754_atan2+0xae>
 800b4f6:	2c02      	cmp	r4, #2
 800b4f8:	d84c      	bhi.n	800b594 <__ieee754_atan2+0x13c>
 800b4fa:	4b35      	ldr	r3, [pc, #212]	; (800b5d0 <__ieee754_atan2+0x178>)
 800b4fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b500:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b504:	e7c9      	b.n	800b49a <__ieee754_atan2+0x42>
 800b506:	2c02      	cmp	r4, #2
 800b508:	d848      	bhi.n	800b59c <__ieee754_atan2+0x144>
 800b50a:	4b32      	ldr	r3, [pc, #200]	; (800b5d4 <__ieee754_atan2+0x17c>)
 800b50c:	e7f6      	b.n	800b4fc <__ieee754_atan2+0xa4>
 800b50e:	4573      	cmp	r3, lr
 800b510:	d0e4      	beq.n	800b4dc <__ieee754_atan2+0x84>
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b518:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b51c:	da1e      	bge.n	800b55c <__ieee754_atan2+0x104>
 800b51e:	2f00      	cmp	r7, #0
 800b520:	da01      	bge.n	800b526 <__ieee754_atan2+0xce>
 800b522:	323c      	adds	r2, #60	; 0x3c
 800b524:	db1e      	blt.n	800b564 <__ieee754_atan2+0x10c>
 800b526:	4632      	mov	r2, r6
 800b528:	463b      	mov	r3, r7
 800b52a:	f7f5 f9af 	bl	800088c <__aeabi_ddiv>
 800b52e:	ec41 0b10 	vmov	d0, r0, r1
 800b532:	f7ff febd 	bl	800b2b0 <fabs>
 800b536:	f7ff fccb 	bl	800aed0 <atan>
 800b53a:	ec51 0b10 	vmov	r0, r1, d0
 800b53e:	2c01      	cmp	r4, #1
 800b540:	d013      	beq.n	800b56a <__ieee754_atan2+0x112>
 800b542:	2c02      	cmp	r4, #2
 800b544:	d015      	beq.n	800b572 <__ieee754_atan2+0x11a>
 800b546:	2c00      	cmp	r4, #0
 800b548:	d0a7      	beq.n	800b49a <__ieee754_atan2+0x42>
 800b54a:	a319      	add	r3, pc, #100	; (adr r3, 800b5b0 <__ieee754_atan2+0x158>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f7f4 feba 	bl	80002c8 <__aeabi_dsub>
 800b554:	a318      	add	r3, pc, #96	; (adr r3, 800b5b8 <__ieee754_atan2+0x160>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	e014      	b.n	800b586 <__ieee754_atan2+0x12e>
 800b55c:	a118      	add	r1, pc, #96	; (adr r1, 800b5c0 <__ieee754_atan2+0x168>)
 800b55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b562:	e7ec      	b.n	800b53e <__ieee754_atan2+0xe6>
 800b564:	2000      	movs	r0, #0
 800b566:	2100      	movs	r1, #0
 800b568:	e7e9      	b.n	800b53e <__ieee754_atan2+0xe6>
 800b56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b56e:	4619      	mov	r1, r3
 800b570:	e793      	b.n	800b49a <__ieee754_atan2+0x42>
 800b572:	a30f      	add	r3, pc, #60	; (adr r3, 800b5b0 <__ieee754_atan2+0x158>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f7f4 fea6 	bl	80002c8 <__aeabi_dsub>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	a10d      	add	r1, pc, #52	; (adr r1, 800b5b8 <__ieee754_atan2+0x160>)
 800b582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b586:	f7f4 fe9f 	bl	80002c8 <__aeabi_dsub>
 800b58a:	e786      	b.n	800b49a <__ieee754_atan2+0x42>
 800b58c:	a10a      	add	r1, pc, #40	; (adr r1, 800b5b8 <__ieee754_atan2+0x160>)
 800b58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b592:	e782      	b.n	800b49a <__ieee754_atan2+0x42>
 800b594:	a10c      	add	r1, pc, #48	; (adr r1, 800b5c8 <__ieee754_atan2+0x170>)
 800b596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b59a:	e77e      	b.n	800b49a <__ieee754_atan2+0x42>
 800b59c:	2000      	movs	r0, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	e77b      	b.n	800b49a <__ieee754_atan2+0x42>
 800b5a2:	a107      	add	r1, pc, #28	; (adr r1, 800b5c0 <__ieee754_atan2+0x168>)
 800b5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a8:	e777      	b.n	800b49a <__ieee754_atan2+0x42>
 800b5aa:	bf00      	nop
 800b5ac:	f3af 8000 	nop.w
 800b5b0:	33145c07 	.word	0x33145c07
 800b5b4:	3ca1a626 	.word	0x3ca1a626
 800b5b8:	54442d18 	.word	0x54442d18
 800b5bc:	400921fb 	.word	0x400921fb
 800b5c0:	54442d18 	.word	0x54442d18
 800b5c4:	3ff921fb 	.word	0x3ff921fb
 800b5c8:	54442d18 	.word	0x54442d18
 800b5cc:	3fe921fb 	.word	0x3fe921fb
 800b5d0:	0800cf68 	.word	0x0800cf68
 800b5d4:	0800cf80 	.word	0x0800cf80
 800b5d8:	54442d18 	.word	0x54442d18
 800b5dc:	c00921fb 	.word	0xc00921fb
 800b5e0:	54442d18 	.word	0x54442d18
 800b5e4:	bff921fb 	.word	0xbff921fb
 800b5e8:	7ff00000 	.word	0x7ff00000

0800b5ec <__ieee754_fmod>:
 800b5ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	ec53 2b11 	vmov	r2, r3, d1
 800b5f4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800b5f8:	ea5e 0402 	orrs.w	r4, lr, r2
 800b5fc:	ec51 0b10 	vmov	r0, r1, d0
 800b600:	ee11 7a10 	vmov	r7, s2
 800b604:	ee11 ca10 	vmov	ip, s2
 800b608:	461e      	mov	r6, r3
 800b60a:	d00d      	beq.n	800b628 <__ieee754_fmod+0x3c>
 800b60c:	4c7a      	ldr	r4, [pc, #488]	; (800b7f8 <__ieee754_fmod+0x20c>)
 800b60e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b612:	45a0      	cmp	r8, r4
 800b614:	4689      	mov	r9, r1
 800b616:	dc07      	bgt.n	800b628 <__ieee754_fmod+0x3c>
 800b618:	4254      	negs	r4, r2
 800b61a:	4d78      	ldr	r5, [pc, #480]	; (800b7fc <__ieee754_fmod+0x210>)
 800b61c:	4314      	orrs	r4, r2
 800b61e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800b622:	42ac      	cmp	r4, r5
 800b624:	46ab      	mov	fp, r5
 800b626:	d909      	bls.n	800b63c <__ieee754_fmod+0x50>
 800b628:	f7f5 f806 	bl	8000638 <__aeabi_dmul>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	f7f5 f92c 	bl	800088c <__aeabi_ddiv>
 800b634:	ec41 0b10 	vmov	d0, r0, r1
 800b638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63c:	45f0      	cmp	r8, lr
 800b63e:	ee10 aa10 	vmov	sl, s0
 800b642:	ee10 4a10 	vmov	r4, s0
 800b646:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b64a:	dc0a      	bgt.n	800b662 <__ieee754_fmod+0x76>
 800b64c:	dbf2      	blt.n	800b634 <__ieee754_fmod+0x48>
 800b64e:	4290      	cmp	r0, r2
 800b650:	d3f0      	bcc.n	800b634 <__ieee754_fmod+0x48>
 800b652:	d106      	bne.n	800b662 <__ieee754_fmod+0x76>
 800b654:	4a6a      	ldr	r2, [pc, #424]	; (800b800 <__ieee754_fmod+0x214>)
 800b656:	0fed      	lsrs	r5, r5, #31
 800b658:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b65c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b660:	e7e8      	b.n	800b634 <__ieee754_fmod+0x48>
 800b662:	ea19 0f0b 	tst.w	r9, fp
 800b666:	d14a      	bne.n	800b6fe <__ieee754_fmod+0x112>
 800b668:	f1b8 0f00 	cmp.w	r8, #0
 800b66c:	d13f      	bne.n	800b6ee <__ieee754_fmod+0x102>
 800b66e:	4965      	ldr	r1, [pc, #404]	; (800b804 <__ieee754_fmod+0x218>)
 800b670:	4653      	mov	r3, sl
 800b672:	2b00      	cmp	r3, #0
 800b674:	dc38      	bgt.n	800b6e8 <__ieee754_fmod+0xfc>
 800b676:	4b61      	ldr	r3, [pc, #388]	; (800b7fc <__ieee754_fmod+0x210>)
 800b678:	4033      	ands	r3, r6
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d14f      	bne.n	800b71e <__ieee754_fmod+0x132>
 800b67e:	f1be 0f00 	cmp.w	lr, #0
 800b682:	d144      	bne.n	800b70e <__ieee754_fmod+0x122>
 800b684:	4a5f      	ldr	r2, [pc, #380]	; (800b804 <__ieee754_fmod+0x218>)
 800b686:	463b      	mov	r3, r7
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dc3d      	bgt.n	800b708 <__ieee754_fmod+0x11c>
 800b68c:	4b5e      	ldr	r3, [pc, #376]	; (800b808 <__ieee754_fmod+0x21c>)
 800b68e:	4299      	cmp	r1, r3
 800b690:	db4a      	blt.n	800b728 <__ieee754_fmod+0x13c>
 800b692:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b69a:	485b      	ldr	r0, [pc, #364]	; (800b808 <__ieee754_fmod+0x21c>)
 800b69c:	4282      	cmp	r2, r0
 800b69e:	db57      	blt.n	800b750 <__ieee754_fmod+0x164>
 800b6a0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b6a4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b6a8:	1a89      	subs	r1, r1, r2
 800b6aa:	1b98      	subs	r0, r3, r6
 800b6ac:	eba4 070c 	sub.w	r7, r4, ip
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	d164      	bne.n	800b77e <__ieee754_fmod+0x192>
 800b6b4:	4564      	cmp	r4, ip
 800b6b6:	bf38      	it	cc
 800b6b8:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	bfa4      	itt	ge
 800b6c0:	463c      	movge	r4, r7
 800b6c2:	4603      	movge	r3, r0
 800b6c4:	ea53 0104 	orrs.w	r1, r3, r4
 800b6c8:	d0c4      	beq.n	800b654 <__ieee754_fmod+0x68>
 800b6ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6ce:	db6b      	blt.n	800b7a8 <__ieee754_fmod+0x1bc>
 800b6d0:	494d      	ldr	r1, [pc, #308]	; (800b808 <__ieee754_fmod+0x21c>)
 800b6d2:	428a      	cmp	r2, r1
 800b6d4:	db6e      	blt.n	800b7b4 <__ieee754_fmod+0x1c8>
 800b6d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b6da:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b6de:	431d      	orrs	r5, r3
 800b6e0:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	e7a5      	b.n	800b634 <__ieee754_fmod+0x48>
 800b6e8:	3901      	subs	r1, #1
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	e7c1      	b.n	800b672 <__ieee754_fmod+0x86>
 800b6ee:	4946      	ldr	r1, [pc, #280]	; (800b808 <__ieee754_fmod+0x21c>)
 800b6f0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	ddbe      	ble.n	800b676 <__ieee754_fmod+0x8a>
 800b6f8:	3901      	subs	r1, #1
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	e7fa      	b.n	800b6f4 <__ieee754_fmod+0x108>
 800b6fe:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b702:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b706:	e7b6      	b.n	800b676 <__ieee754_fmod+0x8a>
 800b708:	3a01      	subs	r2, #1
 800b70a:	005b      	lsls	r3, r3, #1
 800b70c:	e7bc      	b.n	800b688 <__ieee754_fmod+0x9c>
 800b70e:	4a3e      	ldr	r2, [pc, #248]	; (800b808 <__ieee754_fmod+0x21c>)
 800b710:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800b714:	2b00      	cmp	r3, #0
 800b716:	ddb9      	ble.n	800b68c <__ieee754_fmod+0xa0>
 800b718:	3a01      	subs	r2, #1
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	e7fa      	b.n	800b714 <__ieee754_fmod+0x128>
 800b71e:	ea4f 522e 	mov.w	r2, lr, asr #20
 800b722:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b726:	e7b1      	b.n	800b68c <__ieee754_fmod+0xa0>
 800b728:	1a5c      	subs	r4, r3, r1
 800b72a:	2c1f      	cmp	r4, #31
 800b72c:	dc0a      	bgt.n	800b744 <__ieee754_fmod+0x158>
 800b72e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b732:	fa08 f804 	lsl.w	r8, r8, r4
 800b736:	fa2a f303 	lsr.w	r3, sl, r3
 800b73a:	ea43 0308 	orr.w	r3, r3, r8
 800b73e:	fa0a f404 	lsl.w	r4, sl, r4
 800b742:	e7aa      	b.n	800b69a <__ieee754_fmod+0xae>
 800b744:	4b31      	ldr	r3, [pc, #196]	; (800b80c <__ieee754_fmod+0x220>)
 800b746:	1a5b      	subs	r3, r3, r1
 800b748:	fa0a f303 	lsl.w	r3, sl, r3
 800b74c:	2400      	movs	r4, #0
 800b74e:	e7a4      	b.n	800b69a <__ieee754_fmod+0xae>
 800b750:	eba0 0c02 	sub.w	ip, r0, r2
 800b754:	f1bc 0f1f 	cmp.w	ip, #31
 800b758:	dc0a      	bgt.n	800b770 <__ieee754_fmod+0x184>
 800b75a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b75e:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b762:	fa27 f606 	lsr.w	r6, r7, r6
 800b766:	ea46 060e 	orr.w	r6, r6, lr
 800b76a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800b76e:	e79b      	b.n	800b6a8 <__ieee754_fmod+0xbc>
 800b770:	4e26      	ldr	r6, [pc, #152]	; (800b80c <__ieee754_fmod+0x220>)
 800b772:	1ab6      	subs	r6, r6, r2
 800b774:	fa07 f606 	lsl.w	r6, r7, r6
 800b778:	f04f 0c00 	mov.w	ip, #0
 800b77c:	e794      	b.n	800b6a8 <__ieee754_fmod+0xbc>
 800b77e:	4564      	cmp	r4, ip
 800b780:	bf38      	it	cc
 800b782:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800b786:	2800      	cmp	r0, #0
 800b788:	da05      	bge.n	800b796 <__ieee754_fmod+0x1aa>
 800b78a:	0fe0      	lsrs	r0, r4, #31
 800b78c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b790:	0064      	lsls	r4, r4, #1
 800b792:	3901      	subs	r1, #1
 800b794:	e789      	b.n	800b6aa <__ieee754_fmod+0xbe>
 800b796:	ea50 0307 	orrs.w	r3, r0, r7
 800b79a:	f43f af5b 	beq.w	800b654 <__ieee754_fmod+0x68>
 800b79e:	0ffb      	lsrs	r3, r7, #31
 800b7a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b7a4:	007c      	lsls	r4, r7, #1
 800b7a6:	e7f4      	b.n	800b792 <__ieee754_fmod+0x1a6>
 800b7a8:	0fe1      	lsrs	r1, r4, #31
 800b7aa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b7ae:	0064      	lsls	r4, r4, #1
 800b7b0:	3a01      	subs	r2, #1
 800b7b2:	e78a      	b.n	800b6ca <__ieee754_fmod+0xde>
 800b7b4:	1a89      	subs	r1, r1, r2
 800b7b6:	2914      	cmp	r1, #20
 800b7b8:	dc0a      	bgt.n	800b7d0 <__ieee754_fmod+0x1e4>
 800b7ba:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b7be:	fa03 f202 	lsl.w	r2, r3, r2
 800b7c2:	40cc      	lsrs	r4, r1
 800b7c4:	4322      	orrs	r2, r4
 800b7c6:	410b      	asrs	r3, r1
 800b7c8:	ea43 0105 	orr.w	r1, r3, r5
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	e731      	b.n	800b634 <__ieee754_fmod+0x48>
 800b7d0:	291f      	cmp	r1, #31
 800b7d2:	dc07      	bgt.n	800b7e4 <__ieee754_fmod+0x1f8>
 800b7d4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b7d8:	40cc      	lsrs	r4, r1
 800b7da:	fa03 f202 	lsl.w	r2, r3, r2
 800b7de:	4322      	orrs	r2, r4
 800b7e0:	462b      	mov	r3, r5
 800b7e2:	e7f1      	b.n	800b7c8 <__ieee754_fmod+0x1dc>
 800b7e4:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b7e8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b7ec:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b7f0:	32e2      	adds	r2, #226	; 0xe2
 800b7f2:	fa43 f202 	asr.w	r2, r3, r2
 800b7f6:	e7f3      	b.n	800b7e0 <__ieee754_fmod+0x1f4>
 800b7f8:	7fefffff 	.word	0x7fefffff
 800b7fc:	7ff00000 	.word	0x7ff00000
 800b800:	0800cf98 	.word	0x0800cf98
 800b804:	fffffbed 	.word	0xfffffbed
 800b808:	fffffc02 	.word	0xfffffc02
 800b80c:	fffffbe2 	.word	0xfffffbe2

0800b810 <__ieee754_rem_pio2>:
 800b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	ed2d 8b02 	vpush	{d8}
 800b818:	ec55 4b10 	vmov	r4, r5, d0
 800b81c:	4bca      	ldr	r3, [pc, #808]	; (800bb48 <__ieee754_rem_pio2+0x338>)
 800b81e:	b08b      	sub	sp, #44	; 0x2c
 800b820:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b824:	4598      	cmp	r8, r3
 800b826:	4682      	mov	sl, r0
 800b828:	9502      	str	r5, [sp, #8]
 800b82a:	dc08      	bgt.n	800b83e <__ieee754_rem_pio2+0x2e>
 800b82c:	2200      	movs	r2, #0
 800b82e:	2300      	movs	r3, #0
 800b830:	ed80 0b00 	vstr	d0, [r0]
 800b834:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b838:	f04f 0b00 	mov.w	fp, #0
 800b83c:	e028      	b.n	800b890 <__ieee754_rem_pio2+0x80>
 800b83e:	4bc3      	ldr	r3, [pc, #780]	; (800bb4c <__ieee754_rem_pio2+0x33c>)
 800b840:	4598      	cmp	r8, r3
 800b842:	dc78      	bgt.n	800b936 <__ieee754_rem_pio2+0x126>
 800b844:	9b02      	ldr	r3, [sp, #8]
 800b846:	4ec2      	ldr	r6, [pc, #776]	; (800bb50 <__ieee754_rem_pio2+0x340>)
 800b848:	2b00      	cmp	r3, #0
 800b84a:	ee10 0a10 	vmov	r0, s0
 800b84e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bb10 <__ieee754_rem_pio2+0x300>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	4629      	mov	r1, r5
 800b856:	dd39      	ble.n	800b8cc <__ieee754_rem_pio2+0xbc>
 800b858:	f7f4 fd36 	bl	80002c8 <__aeabi_dsub>
 800b85c:	45b0      	cmp	r8, r6
 800b85e:	4604      	mov	r4, r0
 800b860:	460d      	mov	r5, r1
 800b862:	d01b      	beq.n	800b89c <__ieee754_rem_pio2+0x8c>
 800b864:	a3ac      	add	r3, pc, #688	; (adr r3, 800bb18 <__ieee754_rem_pio2+0x308>)
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f7f4 fd2d 	bl	80002c8 <__aeabi_dsub>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	e9ca 2300 	strd	r2, r3, [sl]
 800b876:	4620      	mov	r0, r4
 800b878:	4629      	mov	r1, r5
 800b87a:	f7f4 fd25 	bl	80002c8 <__aeabi_dsub>
 800b87e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bb18 <__ieee754_rem_pio2+0x308>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	f7f4 fd20 	bl	80002c8 <__aeabi_dsub>
 800b888:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b88c:	f04f 0b01 	mov.w	fp, #1
 800b890:	4658      	mov	r0, fp
 800b892:	b00b      	add	sp, #44	; 0x2c
 800b894:	ecbd 8b02 	vpop	{d8}
 800b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89c:	a3a0      	add	r3, pc, #640	; (adr r3, 800bb20 <__ieee754_rem_pio2+0x310>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	f7f4 fd11 	bl	80002c8 <__aeabi_dsub>
 800b8a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800bb28 <__ieee754_rem_pio2+0x318>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	460d      	mov	r5, r1
 800b8b0:	f7f4 fd0a 	bl	80002c8 <__aeabi_dsub>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	e9ca 2300 	strd	r2, r3, [sl]
 800b8bc:	4620      	mov	r0, r4
 800b8be:	4629      	mov	r1, r5
 800b8c0:	f7f4 fd02 	bl	80002c8 <__aeabi_dsub>
 800b8c4:	a398      	add	r3, pc, #608	; (adr r3, 800bb28 <__ieee754_rem_pio2+0x318>)
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	e7db      	b.n	800b884 <__ieee754_rem_pio2+0x74>
 800b8cc:	f7f4 fcfe 	bl	80002cc <__adddf3>
 800b8d0:	45b0      	cmp	r8, r6
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	d016      	beq.n	800b906 <__ieee754_rem_pio2+0xf6>
 800b8d8:	a38f      	add	r3, pc, #572	; (adr r3, 800bb18 <__ieee754_rem_pio2+0x308>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 fcf5 	bl	80002cc <__adddf3>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	e9ca 2300 	strd	r2, r3, [sl]
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	f7f4 fceb 	bl	80002c8 <__aeabi_dsub>
 800b8f2:	a389      	add	r3, pc, #548	; (adr r3, 800bb18 <__ieee754_rem_pio2+0x308>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	f7f4 fce8 	bl	80002cc <__adddf3>
 800b8fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b900:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b904:	e7c4      	b.n	800b890 <__ieee754_rem_pio2+0x80>
 800b906:	a386      	add	r3, pc, #536	; (adr r3, 800bb20 <__ieee754_rem_pio2+0x310>)
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f7f4 fcde 	bl	80002cc <__adddf3>
 800b910:	a385      	add	r3, pc, #532	; (adr r3, 800bb28 <__ieee754_rem_pio2+0x318>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	4604      	mov	r4, r0
 800b918:	460d      	mov	r5, r1
 800b91a:	f7f4 fcd7 	bl	80002cc <__adddf3>
 800b91e:	4602      	mov	r2, r0
 800b920:	460b      	mov	r3, r1
 800b922:	e9ca 2300 	strd	r2, r3, [sl]
 800b926:	4620      	mov	r0, r4
 800b928:	4629      	mov	r1, r5
 800b92a:	f7f4 fccd 	bl	80002c8 <__aeabi_dsub>
 800b92e:	a37e      	add	r3, pc, #504	; (adr r3, 800bb28 <__ieee754_rem_pio2+0x318>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	e7e0      	b.n	800b8f8 <__ieee754_rem_pio2+0xe8>
 800b936:	4b87      	ldr	r3, [pc, #540]	; (800bb54 <__ieee754_rem_pio2+0x344>)
 800b938:	4598      	cmp	r8, r3
 800b93a:	f300 80d9 	bgt.w	800baf0 <__ieee754_rem_pio2+0x2e0>
 800b93e:	f7ff fcb7 	bl	800b2b0 <fabs>
 800b942:	ec55 4b10 	vmov	r4, r5, d0
 800b946:	ee10 0a10 	vmov	r0, s0
 800b94a:	a379      	add	r3, pc, #484	; (adr r3, 800bb30 <__ieee754_rem_pio2+0x320>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	4629      	mov	r1, r5
 800b952:	f7f4 fe71 	bl	8000638 <__aeabi_dmul>
 800b956:	4b80      	ldr	r3, [pc, #512]	; (800bb58 <__ieee754_rem_pio2+0x348>)
 800b958:	2200      	movs	r2, #0
 800b95a:	f7f4 fcb7 	bl	80002cc <__adddf3>
 800b95e:	f7f5 f91b 	bl	8000b98 <__aeabi_d2iz>
 800b962:	4683      	mov	fp, r0
 800b964:	f7f4 fdfe 	bl	8000564 <__aeabi_i2d>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	ec43 2b18 	vmov	d8, r2, r3
 800b970:	a367      	add	r3, pc, #412	; (adr r3, 800bb10 <__ieee754_rem_pio2+0x300>)
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	f7f4 fe5f 	bl	8000638 <__aeabi_dmul>
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4620      	mov	r0, r4
 800b980:	4629      	mov	r1, r5
 800b982:	f7f4 fca1 	bl	80002c8 <__aeabi_dsub>
 800b986:	a364      	add	r3, pc, #400	; (adr r3, 800bb18 <__ieee754_rem_pio2+0x308>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	4606      	mov	r6, r0
 800b98e:	460f      	mov	r7, r1
 800b990:	ec51 0b18 	vmov	r0, r1, d8
 800b994:	f7f4 fe50 	bl	8000638 <__aeabi_dmul>
 800b998:	f1bb 0f1f 	cmp.w	fp, #31
 800b99c:	4604      	mov	r4, r0
 800b99e:	460d      	mov	r5, r1
 800b9a0:	dc0d      	bgt.n	800b9be <__ieee754_rem_pio2+0x1ae>
 800b9a2:	4b6e      	ldr	r3, [pc, #440]	; (800bb5c <__ieee754_rem_pio2+0x34c>)
 800b9a4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ac:	4543      	cmp	r3, r8
 800b9ae:	d006      	beq.n	800b9be <__ieee754_rem_pio2+0x1ae>
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	4639      	mov	r1, r7
 800b9b8:	f7f4 fc86 	bl	80002c8 <__aeabi_dsub>
 800b9bc:	e00f      	b.n	800b9de <__ieee754_rem_pio2+0x1ce>
 800b9be:	462b      	mov	r3, r5
 800b9c0:	4622      	mov	r2, r4
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	f7f4 fc7f 	bl	80002c8 <__aeabi_dsub>
 800b9ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b9ce:	9303      	str	r3, [sp, #12]
 800b9d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b9d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b9d8:	f1b8 0f10 	cmp.w	r8, #16
 800b9dc:	dc02      	bgt.n	800b9e4 <__ieee754_rem_pio2+0x1d4>
 800b9de:	e9ca 0100 	strd	r0, r1, [sl]
 800b9e2:	e039      	b.n	800ba58 <__ieee754_rem_pio2+0x248>
 800b9e4:	a34e      	add	r3, pc, #312	; (adr r3, 800bb20 <__ieee754_rem_pio2+0x310>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	ec51 0b18 	vmov	r0, r1, d8
 800b9ee:	f7f4 fe23 	bl	8000638 <__aeabi_dmul>
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	460d      	mov	r5, r1
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	4639      	mov	r1, r7
 800b9fe:	f7f4 fc63 	bl	80002c8 <__aeabi_dsub>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4680      	mov	r8, r0
 800ba08:	4689      	mov	r9, r1
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	4639      	mov	r1, r7
 800ba0e:	f7f4 fc5b 	bl	80002c8 <__aeabi_dsub>
 800ba12:	4622      	mov	r2, r4
 800ba14:	462b      	mov	r3, r5
 800ba16:	f7f4 fc57 	bl	80002c8 <__aeabi_dsub>
 800ba1a:	a343      	add	r3, pc, #268	; (adr r3, 800bb28 <__ieee754_rem_pio2+0x318>)
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	ec51 0b18 	vmov	r0, r1, d8
 800ba28:	f7f4 fe06 	bl	8000638 <__aeabi_dmul>
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	462b      	mov	r3, r5
 800ba30:	f7f4 fc4a 	bl	80002c8 <__aeabi_dsub>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4604      	mov	r4, r0
 800ba3a:	460d      	mov	r5, r1
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	4649      	mov	r1, r9
 800ba40:	f7f4 fc42 	bl	80002c8 <__aeabi_dsub>
 800ba44:	9a03      	ldr	r2, [sp, #12]
 800ba46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	2b31      	cmp	r3, #49	; 0x31
 800ba4e:	dc24      	bgt.n	800ba9a <__ieee754_rem_pio2+0x28a>
 800ba50:	e9ca 0100 	strd	r0, r1, [sl]
 800ba54:	4646      	mov	r6, r8
 800ba56:	464f      	mov	r7, r9
 800ba58:	e9da 8900 	ldrd	r8, r9, [sl]
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4642      	mov	r2, r8
 800ba60:	464b      	mov	r3, r9
 800ba62:	4639      	mov	r1, r7
 800ba64:	f7f4 fc30 	bl	80002c8 <__aeabi_dsub>
 800ba68:	462b      	mov	r3, r5
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	f7f4 fc2c 	bl	80002c8 <__aeabi_dsub>
 800ba70:	9b02      	ldr	r3, [sp, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba78:	f6bf af0a 	bge.w	800b890 <__ieee754_rem_pio2+0x80>
 800ba7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ba80:	f8ca 3004 	str.w	r3, [sl, #4]
 800ba84:	f8ca 8000 	str.w	r8, [sl]
 800ba88:	f8ca 0008 	str.w	r0, [sl, #8]
 800ba8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba90:	f8ca 300c 	str.w	r3, [sl, #12]
 800ba94:	f1cb 0b00 	rsb	fp, fp, #0
 800ba98:	e6fa      	b.n	800b890 <__ieee754_rem_pio2+0x80>
 800ba9a:	a327      	add	r3, pc, #156	; (adr r3, 800bb38 <__ieee754_rem_pio2+0x328>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	ec51 0b18 	vmov	r0, r1, d8
 800baa4:	f7f4 fdc8 	bl	8000638 <__aeabi_dmul>
 800baa8:	4604      	mov	r4, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4640      	mov	r0, r8
 800bab2:	4649      	mov	r1, r9
 800bab4:	f7f4 fc08 	bl	80002c8 <__aeabi_dsub>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	4640      	mov	r0, r8
 800bac2:	4649      	mov	r1, r9
 800bac4:	f7f4 fc00 	bl	80002c8 <__aeabi_dsub>
 800bac8:	4622      	mov	r2, r4
 800baca:	462b      	mov	r3, r5
 800bacc:	f7f4 fbfc 	bl	80002c8 <__aeabi_dsub>
 800bad0:	a31b      	add	r3, pc, #108	; (adr r3, 800bb40 <__ieee754_rem_pio2+0x330>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	4604      	mov	r4, r0
 800bad8:	460d      	mov	r5, r1
 800bada:	ec51 0b18 	vmov	r0, r1, d8
 800bade:	f7f4 fdab 	bl	8000638 <__aeabi_dmul>
 800bae2:	4622      	mov	r2, r4
 800bae4:	462b      	mov	r3, r5
 800bae6:	f7f4 fbef 	bl	80002c8 <__aeabi_dsub>
 800baea:	4604      	mov	r4, r0
 800baec:	460d      	mov	r5, r1
 800baee:	e75f      	b.n	800b9b0 <__ieee754_rem_pio2+0x1a0>
 800baf0:	4b1b      	ldr	r3, [pc, #108]	; (800bb60 <__ieee754_rem_pio2+0x350>)
 800baf2:	4598      	cmp	r8, r3
 800baf4:	dd36      	ble.n	800bb64 <__ieee754_rem_pio2+0x354>
 800baf6:	ee10 2a10 	vmov	r2, s0
 800bafa:	462b      	mov	r3, r5
 800bafc:	4620      	mov	r0, r4
 800bafe:	4629      	mov	r1, r5
 800bb00:	f7f4 fbe2 	bl	80002c8 <__aeabi_dsub>
 800bb04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb08:	e9ca 0100 	strd	r0, r1, [sl]
 800bb0c:	e694      	b.n	800b838 <__ieee754_rem_pio2+0x28>
 800bb0e:	bf00      	nop
 800bb10:	54400000 	.word	0x54400000
 800bb14:	3ff921fb 	.word	0x3ff921fb
 800bb18:	1a626331 	.word	0x1a626331
 800bb1c:	3dd0b461 	.word	0x3dd0b461
 800bb20:	1a600000 	.word	0x1a600000
 800bb24:	3dd0b461 	.word	0x3dd0b461
 800bb28:	2e037073 	.word	0x2e037073
 800bb2c:	3ba3198a 	.word	0x3ba3198a
 800bb30:	6dc9c883 	.word	0x6dc9c883
 800bb34:	3fe45f30 	.word	0x3fe45f30
 800bb38:	2e000000 	.word	0x2e000000
 800bb3c:	3ba3198a 	.word	0x3ba3198a
 800bb40:	252049c1 	.word	0x252049c1
 800bb44:	397b839a 	.word	0x397b839a
 800bb48:	3fe921fb 	.word	0x3fe921fb
 800bb4c:	4002d97b 	.word	0x4002d97b
 800bb50:	3ff921fb 	.word	0x3ff921fb
 800bb54:	413921fb 	.word	0x413921fb
 800bb58:	3fe00000 	.word	0x3fe00000
 800bb5c:	0800cfa8 	.word	0x0800cfa8
 800bb60:	7fefffff 	.word	0x7fefffff
 800bb64:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bb68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bb6c:	ee10 0a10 	vmov	r0, s0
 800bb70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bb74:	ee10 6a10 	vmov	r6, s0
 800bb78:	460f      	mov	r7, r1
 800bb7a:	f7f5 f80d 	bl	8000b98 <__aeabi_d2iz>
 800bb7e:	f7f4 fcf1 	bl	8000564 <__aeabi_i2d>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4630      	mov	r0, r6
 800bb88:	4639      	mov	r1, r7
 800bb8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb8e:	f7f4 fb9b 	bl	80002c8 <__aeabi_dsub>
 800bb92:	4b22      	ldr	r3, [pc, #136]	; (800bc1c <__ieee754_rem_pio2+0x40c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	f7f4 fd4f 	bl	8000638 <__aeabi_dmul>
 800bb9a:	460f      	mov	r7, r1
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	f7f4 fffb 	bl	8000b98 <__aeabi_d2iz>
 800bba2:	f7f4 fcdf 	bl	8000564 <__aeabi_i2d>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bbb2:	f7f4 fb89 	bl	80002c8 <__aeabi_dsub>
 800bbb6:	4b19      	ldr	r3, [pc, #100]	; (800bc1c <__ieee754_rem_pio2+0x40c>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f7f4 fd3d 	bl	8000638 <__aeabi_dmul>
 800bbbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bbc2:	ad04      	add	r5, sp, #16
 800bbc4:	f04f 0803 	mov.w	r8, #3
 800bbc8:	46a9      	mov	r9, r5
 800bbca:	2600      	movs	r6, #0
 800bbcc:	2700      	movs	r7, #0
 800bbce:	4632      	mov	r2, r6
 800bbd0:	463b      	mov	r3, r7
 800bbd2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bbd6:	46c3      	mov	fp, r8
 800bbd8:	3d08      	subs	r5, #8
 800bbda:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bbde:	f7f4 ff93 	bl	8000b08 <__aeabi_dcmpeq>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d1f3      	bne.n	800bbce <__ieee754_rem_pio2+0x3be>
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <__ieee754_rem_pio2+0x410>)
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	2302      	movs	r3, #2
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	4622      	mov	r2, r4
 800bbf0:	465b      	mov	r3, fp
 800bbf2:	4651      	mov	r1, sl
 800bbf4:	4648      	mov	r0, r9
 800bbf6:	f000 f993 	bl	800bf20 <__kernel_rem_pio2>
 800bbfa:	9b02      	ldr	r3, [sp, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	4683      	mov	fp, r0
 800bc00:	f6bf ae46 	bge.w	800b890 <__ieee754_rem_pio2+0x80>
 800bc04:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bc08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bc0c:	f8ca 3004 	str.w	r3, [sl, #4]
 800bc10:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bc14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bc18:	e73a      	b.n	800ba90 <__ieee754_rem_pio2+0x280>
 800bc1a:	bf00      	nop
 800bc1c:	41700000 	.word	0x41700000
 800bc20:	0800d028 	.word	0x0800d028

0800bc24 <__ieee754_sqrt>:
 800bc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc28:	ec55 4b10 	vmov	r4, r5, d0
 800bc2c:	4e56      	ldr	r6, [pc, #344]	; (800bd88 <__ieee754_sqrt+0x164>)
 800bc2e:	43ae      	bics	r6, r5
 800bc30:	ee10 0a10 	vmov	r0, s0
 800bc34:	ee10 3a10 	vmov	r3, s0
 800bc38:	4629      	mov	r1, r5
 800bc3a:	462a      	mov	r2, r5
 800bc3c:	d110      	bne.n	800bc60 <__ieee754_sqrt+0x3c>
 800bc3e:	ee10 2a10 	vmov	r2, s0
 800bc42:	462b      	mov	r3, r5
 800bc44:	f7f4 fcf8 	bl	8000638 <__aeabi_dmul>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7f4 fb3c 	bl	80002cc <__adddf3>
 800bc54:	4604      	mov	r4, r0
 800bc56:	460d      	mov	r5, r1
 800bc58:	ec45 4b10 	vmov	d0, r4, r5
 800bc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc60:	2d00      	cmp	r5, #0
 800bc62:	dc10      	bgt.n	800bc86 <__ieee754_sqrt+0x62>
 800bc64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc68:	4330      	orrs	r0, r6
 800bc6a:	d0f5      	beq.n	800bc58 <__ieee754_sqrt+0x34>
 800bc6c:	b15d      	cbz	r5, 800bc86 <__ieee754_sqrt+0x62>
 800bc6e:	ee10 2a10 	vmov	r2, s0
 800bc72:	462b      	mov	r3, r5
 800bc74:	ee10 0a10 	vmov	r0, s0
 800bc78:	f7f4 fb26 	bl	80002c8 <__aeabi_dsub>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	f7f4 fe04 	bl	800088c <__aeabi_ddiv>
 800bc84:	e7e6      	b.n	800bc54 <__ieee754_sqrt+0x30>
 800bc86:	1509      	asrs	r1, r1, #20
 800bc88:	d076      	beq.n	800bd78 <__ieee754_sqrt+0x154>
 800bc8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bc8e:	07ce      	lsls	r6, r1, #31
 800bc90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bc94:	bf5e      	ittt	pl
 800bc96:	0fda      	lsrpl	r2, r3, #31
 800bc98:	005b      	lslpl	r3, r3, #1
 800bc9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bc9e:	0fda      	lsrs	r2, r3, #31
 800bca0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bca4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bca8:	2000      	movs	r0, #0
 800bcaa:	106d      	asrs	r5, r5, #1
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	f04f 0e16 	mov.w	lr, #22
 800bcb2:	4684      	mov	ip, r0
 800bcb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcb8:	eb0c 0401 	add.w	r4, ip, r1
 800bcbc:	4294      	cmp	r4, r2
 800bcbe:	bfde      	ittt	le
 800bcc0:	1b12      	suble	r2, r2, r4
 800bcc2:	eb04 0c01 	addle.w	ip, r4, r1
 800bcc6:	1840      	addle	r0, r0, r1
 800bcc8:	0052      	lsls	r2, r2, #1
 800bcca:	f1be 0e01 	subs.w	lr, lr, #1
 800bcce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bcd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bcd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcda:	d1ed      	bne.n	800bcb8 <__ieee754_sqrt+0x94>
 800bcdc:	4671      	mov	r1, lr
 800bcde:	2720      	movs	r7, #32
 800bce0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bce4:	4562      	cmp	r2, ip
 800bce6:	eb04 060e 	add.w	r6, r4, lr
 800bcea:	dc02      	bgt.n	800bcf2 <__ieee754_sqrt+0xce>
 800bcec:	d113      	bne.n	800bd16 <__ieee754_sqrt+0xf2>
 800bcee:	429e      	cmp	r6, r3
 800bcf0:	d811      	bhi.n	800bd16 <__ieee754_sqrt+0xf2>
 800bcf2:	2e00      	cmp	r6, #0
 800bcf4:	eb06 0e04 	add.w	lr, r6, r4
 800bcf8:	da43      	bge.n	800bd82 <__ieee754_sqrt+0x15e>
 800bcfa:	f1be 0f00 	cmp.w	lr, #0
 800bcfe:	db40      	blt.n	800bd82 <__ieee754_sqrt+0x15e>
 800bd00:	f10c 0801 	add.w	r8, ip, #1
 800bd04:	eba2 020c 	sub.w	r2, r2, ip
 800bd08:	429e      	cmp	r6, r3
 800bd0a:	bf88      	it	hi
 800bd0c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800bd10:	1b9b      	subs	r3, r3, r6
 800bd12:	4421      	add	r1, r4
 800bd14:	46c4      	mov	ip, r8
 800bd16:	0052      	lsls	r2, r2, #1
 800bd18:	3f01      	subs	r7, #1
 800bd1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bd1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bd22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd26:	d1dd      	bne.n	800bce4 <__ieee754_sqrt+0xc0>
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	d006      	beq.n	800bd3a <__ieee754_sqrt+0x116>
 800bd2c:	1c4c      	adds	r4, r1, #1
 800bd2e:	bf13      	iteet	ne
 800bd30:	3101      	addne	r1, #1
 800bd32:	3001      	addeq	r0, #1
 800bd34:	4639      	moveq	r1, r7
 800bd36:	f021 0101 	bicne.w	r1, r1, #1
 800bd3a:	1043      	asrs	r3, r0, #1
 800bd3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd40:	0849      	lsrs	r1, r1, #1
 800bd42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd46:	07c2      	lsls	r2, r0, #31
 800bd48:	bf48      	it	mi
 800bd4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bd4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bd52:	460c      	mov	r4, r1
 800bd54:	463d      	mov	r5, r7
 800bd56:	e77f      	b.n	800bc58 <__ieee754_sqrt+0x34>
 800bd58:	0ada      	lsrs	r2, r3, #11
 800bd5a:	3815      	subs	r0, #21
 800bd5c:	055b      	lsls	r3, r3, #21
 800bd5e:	2a00      	cmp	r2, #0
 800bd60:	d0fa      	beq.n	800bd58 <__ieee754_sqrt+0x134>
 800bd62:	02d7      	lsls	r7, r2, #11
 800bd64:	d50a      	bpl.n	800bd7c <__ieee754_sqrt+0x158>
 800bd66:	f1c1 0420 	rsb	r4, r1, #32
 800bd6a:	fa23 f404 	lsr.w	r4, r3, r4
 800bd6e:	1e4d      	subs	r5, r1, #1
 800bd70:	408b      	lsls	r3, r1
 800bd72:	4322      	orrs	r2, r4
 800bd74:	1b41      	subs	r1, r0, r5
 800bd76:	e788      	b.n	800bc8a <__ieee754_sqrt+0x66>
 800bd78:	4608      	mov	r0, r1
 800bd7a:	e7f0      	b.n	800bd5e <__ieee754_sqrt+0x13a>
 800bd7c:	0052      	lsls	r2, r2, #1
 800bd7e:	3101      	adds	r1, #1
 800bd80:	e7ef      	b.n	800bd62 <__ieee754_sqrt+0x13e>
 800bd82:	46e0      	mov	r8, ip
 800bd84:	e7be      	b.n	800bd04 <__ieee754_sqrt+0xe0>
 800bd86:	bf00      	nop
 800bd88:	7ff00000 	.word	0x7ff00000
 800bd8c:	00000000 	.word	0x00000000

0800bd90 <__kernel_cos>:
 800bd90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	ec57 6b10 	vmov	r6, r7, d0
 800bd98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bd9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bda0:	ed8d 1b00 	vstr	d1, [sp]
 800bda4:	da07      	bge.n	800bdb6 <__kernel_cos+0x26>
 800bda6:	ee10 0a10 	vmov	r0, s0
 800bdaa:	4639      	mov	r1, r7
 800bdac:	f7f4 fef4 	bl	8000b98 <__aeabi_d2iz>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	f000 8088 	beq.w	800bec6 <__kernel_cos+0x136>
 800bdb6:	4632      	mov	r2, r6
 800bdb8:	463b      	mov	r3, r7
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 fc3b 	bl	8000638 <__aeabi_dmul>
 800bdc2:	4b51      	ldr	r3, [pc, #324]	; (800bf08 <__kernel_cos+0x178>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	460d      	mov	r5, r1
 800bdca:	f7f4 fc35 	bl	8000638 <__aeabi_dmul>
 800bdce:	a340      	add	r3, pc, #256	; (adr r3, 800bed0 <__kernel_cos+0x140>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	4682      	mov	sl, r0
 800bdd6:	468b      	mov	fp, r1
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7f4 fc2c 	bl	8000638 <__aeabi_dmul>
 800bde0:	a33d      	add	r3, pc, #244	; (adr r3, 800bed8 <__kernel_cos+0x148>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fa71 	bl	80002cc <__adddf3>
 800bdea:	4622      	mov	r2, r4
 800bdec:	462b      	mov	r3, r5
 800bdee:	f7f4 fc23 	bl	8000638 <__aeabi_dmul>
 800bdf2:	a33b      	add	r3, pc, #236	; (adr r3, 800bee0 <__kernel_cos+0x150>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 fa66 	bl	80002c8 <__aeabi_dsub>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	f7f4 fc1a 	bl	8000638 <__aeabi_dmul>
 800be04:	a338      	add	r3, pc, #224	; (adr r3, 800bee8 <__kernel_cos+0x158>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 fa5f 	bl	80002cc <__adddf3>
 800be0e:	4622      	mov	r2, r4
 800be10:	462b      	mov	r3, r5
 800be12:	f7f4 fc11 	bl	8000638 <__aeabi_dmul>
 800be16:	a336      	add	r3, pc, #216	; (adr r3, 800bef0 <__kernel_cos+0x160>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 fa54 	bl	80002c8 <__aeabi_dsub>
 800be20:	4622      	mov	r2, r4
 800be22:	462b      	mov	r3, r5
 800be24:	f7f4 fc08 	bl	8000638 <__aeabi_dmul>
 800be28:	a333      	add	r3, pc, #204	; (adr r3, 800bef8 <__kernel_cos+0x168>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 fa4d 	bl	80002cc <__adddf3>
 800be32:	4622      	mov	r2, r4
 800be34:	462b      	mov	r3, r5
 800be36:	f7f4 fbff 	bl	8000638 <__aeabi_dmul>
 800be3a:	4622      	mov	r2, r4
 800be3c:	462b      	mov	r3, r5
 800be3e:	f7f4 fbfb 	bl	8000638 <__aeabi_dmul>
 800be42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be46:	4604      	mov	r4, r0
 800be48:	460d      	mov	r5, r1
 800be4a:	4630      	mov	r0, r6
 800be4c:	4639      	mov	r1, r7
 800be4e:	f7f4 fbf3 	bl	8000638 <__aeabi_dmul>
 800be52:	460b      	mov	r3, r1
 800be54:	4602      	mov	r2, r0
 800be56:	4629      	mov	r1, r5
 800be58:	4620      	mov	r0, r4
 800be5a:	f7f4 fa35 	bl	80002c8 <__aeabi_dsub>
 800be5e:	4b2b      	ldr	r3, [pc, #172]	; (800bf0c <__kernel_cos+0x17c>)
 800be60:	4598      	cmp	r8, r3
 800be62:	4606      	mov	r6, r0
 800be64:	460f      	mov	r7, r1
 800be66:	dc10      	bgt.n	800be8a <__kernel_cos+0xfa>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4650      	mov	r0, sl
 800be6e:	4659      	mov	r1, fp
 800be70:	f7f4 fa2a 	bl	80002c8 <__aeabi_dsub>
 800be74:	460b      	mov	r3, r1
 800be76:	4926      	ldr	r1, [pc, #152]	; (800bf10 <__kernel_cos+0x180>)
 800be78:	4602      	mov	r2, r0
 800be7a:	2000      	movs	r0, #0
 800be7c:	f7f4 fa24 	bl	80002c8 <__aeabi_dsub>
 800be80:	ec41 0b10 	vmov	d0, r0, r1
 800be84:	b003      	add	sp, #12
 800be86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8a:	4b22      	ldr	r3, [pc, #136]	; (800bf14 <__kernel_cos+0x184>)
 800be8c:	4920      	ldr	r1, [pc, #128]	; (800bf10 <__kernel_cos+0x180>)
 800be8e:	4598      	cmp	r8, r3
 800be90:	bfcc      	ite	gt
 800be92:	4d21      	ldrgt	r5, [pc, #132]	; (800bf18 <__kernel_cos+0x188>)
 800be94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800be98:	2400      	movs	r4, #0
 800be9a:	4622      	mov	r2, r4
 800be9c:	462b      	mov	r3, r5
 800be9e:	2000      	movs	r0, #0
 800bea0:	f7f4 fa12 	bl	80002c8 <__aeabi_dsub>
 800bea4:	4622      	mov	r2, r4
 800bea6:	4680      	mov	r8, r0
 800bea8:	4689      	mov	r9, r1
 800beaa:	462b      	mov	r3, r5
 800beac:	4650      	mov	r0, sl
 800beae:	4659      	mov	r1, fp
 800beb0:	f7f4 fa0a 	bl	80002c8 <__aeabi_dsub>
 800beb4:	4632      	mov	r2, r6
 800beb6:	463b      	mov	r3, r7
 800beb8:	f7f4 fa06 	bl	80002c8 <__aeabi_dsub>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4640      	mov	r0, r8
 800bec2:	4649      	mov	r1, r9
 800bec4:	e7da      	b.n	800be7c <__kernel_cos+0xec>
 800bec6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bf00 <__kernel_cos+0x170>
 800beca:	e7db      	b.n	800be84 <__kernel_cos+0xf4>
 800becc:	f3af 8000 	nop.w
 800bed0:	be8838d4 	.word	0xbe8838d4
 800bed4:	bda8fae9 	.word	0xbda8fae9
 800bed8:	bdb4b1c4 	.word	0xbdb4b1c4
 800bedc:	3e21ee9e 	.word	0x3e21ee9e
 800bee0:	809c52ad 	.word	0x809c52ad
 800bee4:	3e927e4f 	.word	0x3e927e4f
 800bee8:	19cb1590 	.word	0x19cb1590
 800beec:	3efa01a0 	.word	0x3efa01a0
 800bef0:	16c15177 	.word	0x16c15177
 800bef4:	3f56c16c 	.word	0x3f56c16c
 800bef8:	5555554c 	.word	0x5555554c
 800befc:	3fa55555 	.word	0x3fa55555
 800bf00:	00000000 	.word	0x00000000
 800bf04:	3ff00000 	.word	0x3ff00000
 800bf08:	3fe00000 	.word	0x3fe00000
 800bf0c:	3fd33332 	.word	0x3fd33332
 800bf10:	3ff00000 	.word	0x3ff00000
 800bf14:	3fe90000 	.word	0x3fe90000
 800bf18:	3fd20000 	.word	0x3fd20000
 800bf1c:	00000000 	.word	0x00000000

0800bf20 <__kernel_rem_pio2>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	ed2d 8b02 	vpush	{d8}
 800bf28:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bf2c:	f112 0f14 	cmn.w	r2, #20
 800bf30:	9308      	str	r3, [sp, #32]
 800bf32:	9101      	str	r1, [sp, #4]
 800bf34:	4bc6      	ldr	r3, [pc, #792]	; (800c250 <__kernel_rem_pio2+0x330>)
 800bf36:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bf38:	9009      	str	r0, [sp, #36]	; 0x24
 800bf3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf3e:	9304      	str	r3, [sp, #16]
 800bf40:	9b08      	ldr	r3, [sp, #32]
 800bf42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bf46:	bfa8      	it	ge
 800bf48:	1ed4      	subge	r4, r2, #3
 800bf4a:	9306      	str	r3, [sp, #24]
 800bf4c:	bfb2      	itee	lt
 800bf4e:	2400      	movlt	r4, #0
 800bf50:	2318      	movge	r3, #24
 800bf52:	fb94 f4f3 	sdivge	r4, r4, r3
 800bf56:	f06f 0317 	mvn.w	r3, #23
 800bf5a:	fb04 3303 	mla	r3, r4, r3, r3
 800bf5e:	eb03 0a02 	add.w	sl, r3, r2
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	9a06      	ldr	r2, [sp, #24]
 800bf66:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c240 <__kernel_rem_pio2+0x320>
 800bf6a:	eb03 0802 	add.w	r8, r3, r2
 800bf6e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bf70:	1aa7      	subs	r7, r4, r2
 800bf72:	ae20      	add	r6, sp, #128	; 0x80
 800bf74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bf78:	2500      	movs	r5, #0
 800bf7a:	4545      	cmp	r5, r8
 800bf7c:	dd18      	ble.n	800bfb0 <__kernel_rem_pio2+0x90>
 800bf7e:	9b08      	ldr	r3, [sp, #32]
 800bf80:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bf84:	aa20      	add	r2, sp, #128	; 0x80
 800bf86:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c240 <__kernel_rem_pio2+0x320>
 800bf8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bf8e:	f1c3 0301 	rsb	r3, r3, #1
 800bf92:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bf96:	9307      	str	r3, [sp, #28]
 800bf98:	9b07      	ldr	r3, [sp, #28]
 800bf9a:	9a04      	ldr	r2, [sp, #16]
 800bf9c:	4443      	add	r3, r8
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	db2f      	blt.n	800c002 <__kernel_rem_pio2+0xe2>
 800bfa2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bfa6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bfaa:	462f      	mov	r7, r5
 800bfac:	2600      	movs	r6, #0
 800bfae:	e01b      	b.n	800bfe8 <__kernel_rem_pio2+0xc8>
 800bfb0:	42ef      	cmn	r7, r5
 800bfb2:	d407      	bmi.n	800bfc4 <__kernel_rem_pio2+0xa4>
 800bfb4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bfb8:	f7f4 fad4 	bl	8000564 <__aeabi_i2d>
 800bfbc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bfc0:	3501      	adds	r5, #1
 800bfc2:	e7da      	b.n	800bf7a <__kernel_rem_pio2+0x5a>
 800bfc4:	ec51 0b18 	vmov	r0, r1, d8
 800bfc8:	e7f8      	b.n	800bfbc <__kernel_rem_pio2+0x9c>
 800bfca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bfd2:	f7f4 fb31 	bl	8000638 <__aeabi_dmul>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfde:	f7f4 f975 	bl	80002cc <__adddf3>
 800bfe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe6:	3601      	adds	r6, #1
 800bfe8:	9b06      	ldr	r3, [sp, #24]
 800bfea:	429e      	cmp	r6, r3
 800bfec:	f1a7 0708 	sub.w	r7, r7, #8
 800bff0:	ddeb      	ble.n	800bfca <__kernel_rem_pio2+0xaa>
 800bff2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bff6:	3508      	adds	r5, #8
 800bff8:	ecab 7b02 	vstmia	fp!, {d7}
 800bffc:	f108 0801 	add.w	r8, r8, #1
 800c000:	e7ca      	b.n	800bf98 <__kernel_rem_pio2+0x78>
 800c002:	9b04      	ldr	r3, [sp, #16]
 800c004:	aa0c      	add	r2, sp, #48	; 0x30
 800c006:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c00a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c00c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c00e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c012:	9c04      	ldr	r4, [sp, #16]
 800c014:	930a      	str	r3, [sp, #40]	; 0x28
 800c016:	ab98      	add	r3, sp, #608	; 0x260
 800c018:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c01c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c020:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c024:	f8cd b008 	str.w	fp, [sp, #8]
 800c028:	4625      	mov	r5, r4
 800c02a:	2d00      	cmp	r5, #0
 800c02c:	dc78      	bgt.n	800c120 <__kernel_rem_pio2+0x200>
 800c02e:	ec47 6b10 	vmov	d0, r6, r7
 800c032:	4650      	mov	r0, sl
 800c034:	f000 fbf4 	bl	800c820 <scalbn>
 800c038:	ec57 6b10 	vmov	r6, r7, d0
 800c03c:	2200      	movs	r2, #0
 800c03e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c042:	ee10 0a10 	vmov	r0, s0
 800c046:	4639      	mov	r1, r7
 800c048:	f7f4 faf6 	bl	8000638 <__aeabi_dmul>
 800c04c:	ec41 0b10 	vmov	d0, r0, r1
 800c050:	f000 fb66 	bl	800c720 <floor>
 800c054:	4b7f      	ldr	r3, [pc, #508]	; (800c254 <__kernel_rem_pio2+0x334>)
 800c056:	ec51 0b10 	vmov	r0, r1, d0
 800c05a:	2200      	movs	r2, #0
 800c05c:	f7f4 faec 	bl	8000638 <__aeabi_dmul>
 800c060:	4602      	mov	r2, r0
 800c062:	460b      	mov	r3, r1
 800c064:	4630      	mov	r0, r6
 800c066:	4639      	mov	r1, r7
 800c068:	f7f4 f92e 	bl	80002c8 <__aeabi_dsub>
 800c06c:	460f      	mov	r7, r1
 800c06e:	4606      	mov	r6, r0
 800c070:	f7f4 fd92 	bl	8000b98 <__aeabi_d2iz>
 800c074:	9007      	str	r0, [sp, #28]
 800c076:	f7f4 fa75 	bl	8000564 <__aeabi_i2d>
 800c07a:	4602      	mov	r2, r0
 800c07c:	460b      	mov	r3, r1
 800c07e:	4630      	mov	r0, r6
 800c080:	4639      	mov	r1, r7
 800c082:	f7f4 f921 	bl	80002c8 <__aeabi_dsub>
 800c086:	f1ba 0f00 	cmp.w	sl, #0
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	dd70      	ble.n	800c172 <__kernel_rem_pio2+0x252>
 800c090:	1e62      	subs	r2, r4, #1
 800c092:	ab0c      	add	r3, sp, #48	; 0x30
 800c094:	9d07      	ldr	r5, [sp, #28]
 800c096:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c09a:	f1ca 0118 	rsb	r1, sl, #24
 800c09e:	fa40 f301 	asr.w	r3, r0, r1
 800c0a2:	441d      	add	r5, r3
 800c0a4:	408b      	lsls	r3, r1
 800c0a6:	1ac0      	subs	r0, r0, r3
 800c0a8:	ab0c      	add	r3, sp, #48	; 0x30
 800c0aa:	9507      	str	r5, [sp, #28]
 800c0ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c0b0:	f1ca 0317 	rsb	r3, sl, #23
 800c0b4:	fa40 f303 	asr.w	r3, r0, r3
 800c0b8:	9302      	str	r3, [sp, #8]
 800c0ba:	9b02      	ldr	r3, [sp, #8]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dd66      	ble.n	800c18e <__kernel_rem_pio2+0x26e>
 800c0c0:	9b07      	ldr	r3, [sp, #28]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	9307      	str	r3, [sp, #28]
 800c0c8:	4615      	mov	r5, r2
 800c0ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c0ce:	4294      	cmp	r4, r2
 800c0d0:	f300 8099 	bgt.w	800c206 <__kernel_rem_pio2+0x2e6>
 800c0d4:	f1ba 0f00 	cmp.w	sl, #0
 800c0d8:	dd07      	ble.n	800c0ea <__kernel_rem_pio2+0x1ca>
 800c0da:	f1ba 0f01 	cmp.w	sl, #1
 800c0de:	f000 80a5 	beq.w	800c22c <__kernel_rem_pio2+0x30c>
 800c0e2:	f1ba 0f02 	cmp.w	sl, #2
 800c0e6:	f000 80c1 	beq.w	800c26c <__kernel_rem_pio2+0x34c>
 800c0ea:	9b02      	ldr	r3, [sp, #8]
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d14e      	bne.n	800c18e <__kernel_rem_pio2+0x26e>
 800c0f0:	4632      	mov	r2, r6
 800c0f2:	463b      	mov	r3, r7
 800c0f4:	4958      	ldr	r1, [pc, #352]	; (800c258 <__kernel_rem_pio2+0x338>)
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	f7f4 f8e6 	bl	80002c8 <__aeabi_dsub>
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460f      	mov	r7, r1
 800c100:	2d00      	cmp	r5, #0
 800c102:	d044      	beq.n	800c18e <__kernel_rem_pio2+0x26e>
 800c104:	4650      	mov	r0, sl
 800c106:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c248 <__kernel_rem_pio2+0x328>
 800c10a:	f000 fb89 	bl	800c820 <scalbn>
 800c10e:	4630      	mov	r0, r6
 800c110:	4639      	mov	r1, r7
 800c112:	ec53 2b10 	vmov	r2, r3, d0
 800c116:	f7f4 f8d7 	bl	80002c8 <__aeabi_dsub>
 800c11a:	4606      	mov	r6, r0
 800c11c:	460f      	mov	r7, r1
 800c11e:	e036      	b.n	800c18e <__kernel_rem_pio2+0x26e>
 800c120:	4b4e      	ldr	r3, [pc, #312]	; (800c25c <__kernel_rem_pio2+0x33c>)
 800c122:	2200      	movs	r2, #0
 800c124:	4630      	mov	r0, r6
 800c126:	4639      	mov	r1, r7
 800c128:	f7f4 fa86 	bl	8000638 <__aeabi_dmul>
 800c12c:	f7f4 fd34 	bl	8000b98 <__aeabi_d2iz>
 800c130:	f7f4 fa18 	bl	8000564 <__aeabi_i2d>
 800c134:	4b4a      	ldr	r3, [pc, #296]	; (800c260 <__kernel_rem_pio2+0x340>)
 800c136:	2200      	movs	r2, #0
 800c138:	4680      	mov	r8, r0
 800c13a:	4689      	mov	r9, r1
 800c13c:	f7f4 fa7c 	bl	8000638 <__aeabi_dmul>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	4630      	mov	r0, r6
 800c146:	4639      	mov	r1, r7
 800c148:	f7f4 f8be 	bl	80002c8 <__aeabi_dsub>
 800c14c:	f7f4 fd24 	bl	8000b98 <__aeabi_d2iz>
 800c150:	9b02      	ldr	r3, [sp, #8]
 800c152:	f843 0b04 	str.w	r0, [r3], #4
 800c156:	3d01      	subs	r5, #1
 800c158:	9302      	str	r3, [sp, #8]
 800c15a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c15c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	4640      	mov	r0, r8
 800c166:	4649      	mov	r1, r9
 800c168:	f7f4 f8b0 	bl	80002cc <__adddf3>
 800c16c:	4606      	mov	r6, r0
 800c16e:	460f      	mov	r7, r1
 800c170:	e75b      	b.n	800c02a <__kernel_rem_pio2+0x10a>
 800c172:	d105      	bne.n	800c180 <__kernel_rem_pio2+0x260>
 800c174:	1e63      	subs	r3, r4, #1
 800c176:	aa0c      	add	r2, sp, #48	; 0x30
 800c178:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c17c:	15c3      	asrs	r3, r0, #23
 800c17e:	e79b      	b.n	800c0b8 <__kernel_rem_pio2+0x198>
 800c180:	4b38      	ldr	r3, [pc, #224]	; (800c264 <__kernel_rem_pio2+0x344>)
 800c182:	2200      	movs	r2, #0
 800c184:	f7f4 fcde 	bl	8000b44 <__aeabi_dcmpge>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d139      	bne.n	800c200 <__kernel_rem_pio2+0x2e0>
 800c18c:	9002      	str	r0, [sp, #8]
 800c18e:	2200      	movs	r2, #0
 800c190:	2300      	movs	r3, #0
 800c192:	4630      	mov	r0, r6
 800c194:	4639      	mov	r1, r7
 800c196:	f7f4 fcb7 	bl	8000b08 <__aeabi_dcmpeq>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	f000 80b4 	beq.w	800c308 <__kernel_rem_pio2+0x3e8>
 800c1a0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800c1a4:	465b      	mov	r3, fp
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	9904      	ldr	r1, [sp, #16]
 800c1aa:	428b      	cmp	r3, r1
 800c1ac:	da65      	bge.n	800c27a <__kernel_rem_pio2+0x35a>
 800c1ae:	2a00      	cmp	r2, #0
 800c1b0:	d07b      	beq.n	800c2aa <__kernel_rem_pio2+0x38a>
 800c1b2:	ab0c      	add	r3, sp, #48	; 0x30
 800c1b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c1b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f000 80a0 	beq.w	800c302 <__kernel_rem_pio2+0x3e2>
 800c1c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c248 <__kernel_rem_pio2+0x328>
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	f000 fb2a 	bl	800c820 <scalbn>
 800c1cc:	4f23      	ldr	r7, [pc, #140]	; (800c25c <__kernel_rem_pio2+0x33c>)
 800c1ce:	ec55 4b10 	vmov	r4, r5, d0
 800c1d2:	46d8      	mov	r8, fp
 800c1d4:	2600      	movs	r6, #0
 800c1d6:	f1b8 0f00 	cmp.w	r8, #0
 800c1da:	f280 80cf 	bge.w	800c37c <__kernel_rem_pio2+0x45c>
 800c1de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c240 <__kernel_rem_pio2+0x320>
 800c1e2:	465f      	mov	r7, fp
 800c1e4:	f04f 0800 	mov.w	r8, #0
 800c1e8:	2f00      	cmp	r7, #0
 800c1ea:	f2c0 80fd 	blt.w	800c3e8 <__kernel_rem_pio2+0x4c8>
 800c1ee:	ab70      	add	r3, sp, #448	; 0x1c0
 800c1f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c268 <__kernel_rem_pio2+0x348>
 800c1f4:	ec55 4b18 	vmov	r4, r5, d8
 800c1f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c1fc:	2600      	movs	r6, #0
 800c1fe:	e0e5      	b.n	800c3cc <__kernel_rem_pio2+0x4ac>
 800c200:	2302      	movs	r3, #2
 800c202:	9302      	str	r3, [sp, #8]
 800c204:	e75c      	b.n	800c0c0 <__kernel_rem_pio2+0x1a0>
 800c206:	f8db 3000 	ldr.w	r3, [fp]
 800c20a:	b955      	cbnz	r5, 800c222 <__kernel_rem_pio2+0x302>
 800c20c:	b123      	cbz	r3, 800c218 <__kernel_rem_pio2+0x2f8>
 800c20e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c212:	f8cb 3000 	str.w	r3, [fp]
 800c216:	2301      	movs	r3, #1
 800c218:	3201      	adds	r2, #1
 800c21a:	f10b 0b04 	add.w	fp, fp, #4
 800c21e:	461d      	mov	r5, r3
 800c220:	e755      	b.n	800c0ce <__kernel_rem_pio2+0x1ae>
 800c222:	1acb      	subs	r3, r1, r3
 800c224:	f8cb 3000 	str.w	r3, [fp]
 800c228:	462b      	mov	r3, r5
 800c22a:	e7f5      	b.n	800c218 <__kernel_rem_pio2+0x2f8>
 800c22c:	1e62      	subs	r2, r4, #1
 800c22e:	ab0c      	add	r3, sp, #48	; 0x30
 800c230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c234:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c238:	a90c      	add	r1, sp, #48	; 0x30
 800c23a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c23e:	e754      	b.n	800c0ea <__kernel_rem_pio2+0x1ca>
	...
 800c24c:	3ff00000 	.word	0x3ff00000
 800c250:	0800d170 	.word	0x0800d170
 800c254:	40200000 	.word	0x40200000
 800c258:	3ff00000 	.word	0x3ff00000
 800c25c:	3e700000 	.word	0x3e700000
 800c260:	41700000 	.word	0x41700000
 800c264:	3fe00000 	.word	0x3fe00000
 800c268:	0800d130 	.word	0x0800d130
 800c26c:	1e62      	subs	r2, r4, #1
 800c26e:	ab0c      	add	r3, sp, #48	; 0x30
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c278:	e7de      	b.n	800c238 <__kernel_rem_pio2+0x318>
 800c27a:	a90c      	add	r1, sp, #48	; 0x30
 800c27c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c280:	3b01      	subs	r3, #1
 800c282:	430a      	orrs	r2, r1
 800c284:	e790      	b.n	800c1a8 <__kernel_rem_pio2+0x288>
 800c286:	3301      	adds	r3, #1
 800c288:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c28c:	2900      	cmp	r1, #0
 800c28e:	d0fa      	beq.n	800c286 <__kernel_rem_pio2+0x366>
 800c290:	9a08      	ldr	r2, [sp, #32]
 800c292:	18e3      	adds	r3, r4, r3
 800c294:	18a6      	adds	r6, r4, r2
 800c296:	aa20      	add	r2, sp, #128	; 0x80
 800c298:	1c65      	adds	r5, r4, #1
 800c29a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c29e:	9302      	str	r3, [sp, #8]
 800c2a0:	9b02      	ldr	r3, [sp, #8]
 800c2a2:	42ab      	cmp	r3, r5
 800c2a4:	da04      	bge.n	800c2b0 <__kernel_rem_pio2+0x390>
 800c2a6:	461c      	mov	r4, r3
 800c2a8:	e6b5      	b.n	800c016 <__kernel_rem_pio2+0xf6>
 800c2aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e7eb      	b.n	800c288 <__kernel_rem_pio2+0x368>
 800c2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2b6:	f7f4 f955 	bl	8000564 <__aeabi_i2d>
 800c2ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c0:	46b3      	mov	fp, r6
 800c2c2:	461c      	mov	r4, r3
 800c2c4:	2700      	movs	r7, #0
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	f04f 0900 	mov.w	r9, #0
 800c2ce:	9b06      	ldr	r3, [sp, #24]
 800c2d0:	429f      	cmp	r7, r3
 800c2d2:	dd06      	ble.n	800c2e2 <__kernel_rem_pio2+0x3c2>
 800c2d4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c2d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c2da:	e9c3 8900 	strd	r8, r9, [r3]
 800c2de:	3501      	adds	r5, #1
 800c2e0:	e7de      	b.n	800c2a0 <__kernel_rem_pio2+0x380>
 800c2e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c2e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c2ea:	f7f4 f9a5 	bl	8000638 <__aeabi_dmul>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f3 ffe9 	bl	80002cc <__adddf3>
 800c2fa:	3701      	adds	r7, #1
 800c2fc:	4680      	mov	r8, r0
 800c2fe:	4689      	mov	r9, r1
 800c300:	e7e5      	b.n	800c2ce <__kernel_rem_pio2+0x3ae>
 800c302:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c306:	e754      	b.n	800c1b2 <__kernel_rem_pio2+0x292>
 800c308:	ec47 6b10 	vmov	d0, r6, r7
 800c30c:	f1ca 0000 	rsb	r0, sl, #0
 800c310:	f000 fa86 	bl	800c820 <scalbn>
 800c314:	ec57 6b10 	vmov	r6, r7, d0
 800c318:	4b9f      	ldr	r3, [pc, #636]	; (800c598 <__kernel_rem_pio2+0x678>)
 800c31a:	ee10 0a10 	vmov	r0, s0
 800c31e:	2200      	movs	r2, #0
 800c320:	4639      	mov	r1, r7
 800c322:	f7f4 fc0f 	bl	8000b44 <__aeabi_dcmpge>
 800c326:	b300      	cbz	r0, 800c36a <__kernel_rem_pio2+0x44a>
 800c328:	4b9c      	ldr	r3, [pc, #624]	; (800c59c <__kernel_rem_pio2+0x67c>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	4630      	mov	r0, r6
 800c32e:	4639      	mov	r1, r7
 800c330:	f7f4 f982 	bl	8000638 <__aeabi_dmul>
 800c334:	f7f4 fc30 	bl	8000b98 <__aeabi_d2iz>
 800c338:	4605      	mov	r5, r0
 800c33a:	f7f4 f913 	bl	8000564 <__aeabi_i2d>
 800c33e:	4b96      	ldr	r3, [pc, #600]	; (800c598 <__kernel_rem_pio2+0x678>)
 800c340:	2200      	movs	r2, #0
 800c342:	f7f4 f979 	bl	8000638 <__aeabi_dmul>
 800c346:	460b      	mov	r3, r1
 800c348:	4602      	mov	r2, r0
 800c34a:	4639      	mov	r1, r7
 800c34c:	4630      	mov	r0, r6
 800c34e:	f7f3 ffbb 	bl	80002c8 <__aeabi_dsub>
 800c352:	f7f4 fc21 	bl	8000b98 <__aeabi_d2iz>
 800c356:	f104 0b01 	add.w	fp, r4, #1
 800c35a:	ab0c      	add	r3, sp, #48	; 0x30
 800c35c:	f10a 0a18 	add.w	sl, sl, #24
 800c360:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c364:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c368:	e72b      	b.n	800c1c2 <__kernel_rem_pio2+0x2a2>
 800c36a:	4630      	mov	r0, r6
 800c36c:	4639      	mov	r1, r7
 800c36e:	f7f4 fc13 	bl	8000b98 <__aeabi_d2iz>
 800c372:	ab0c      	add	r3, sp, #48	; 0x30
 800c374:	46a3      	mov	fp, r4
 800c376:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c37a:	e722      	b.n	800c1c2 <__kernel_rem_pio2+0x2a2>
 800c37c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c37e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c382:	ab0c      	add	r3, sp, #48	; 0x30
 800c384:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c388:	f7f4 f8ec 	bl	8000564 <__aeabi_i2d>
 800c38c:	4622      	mov	r2, r4
 800c38e:	462b      	mov	r3, r5
 800c390:	f7f4 f952 	bl	8000638 <__aeabi_dmul>
 800c394:	4632      	mov	r2, r6
 800c396:	e9c9 0100 	strd	r0, r1, [r9]
 800c39a:	463b      	mov	r3, r7
 800c39c:	4620      	mov	r0, r4
 800c39e:	4629      	mov	r1, r5
 800c3a0:	f7f4 f94a 	bl	8000638 <__aeabi_dmul>
 800c3a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	e713      	b.n	800c1d6 <__kernel_rem_pio2+0x2b6>
 800c3ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c3b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c3b6:	f7f4 f93f 	bl	8000638 <__aeabi_dmul>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4620      	mov	r0, r4
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	f7f3 ff83 	bl	80002cc <__adddf3>
 800c3c6:	3601      	adds	r6, #1
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	460d      	mov	r5, r1
 800c3cc:	9b04      	ldr	r3, [sp, #16]
 800c3ce:	429e      	cmp	r6, r3
 800c3d0:	dc01      	bgt.n	800c3d6 <__kernel_rem_pio2+0x4b6>
 800c3d2:	45b0      	cmp	r8, r6
 800c3d4:	daeb      	bge.n	800c3ae <__kernel_rem_pio2+0x48e>
 800c3d6:	ab48      	add	r3, sp, #288	; 0x120
 800c3d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c3dc:	e9c3 4500 	strd	r4, r5, [r3]
 800c3e0:	3f01      	subs	r7, #1
 800c3e2:	f108 0801 	add.w	r8, r8, #1
 800c3e6:	e6ff      	b.n	800c1e8 <__kernel_rem_pio2+0x2c8>
 800c3e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	dc0b      	bgt.n	800c406 <__kernel_rem_pio2+0x4e6>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	dc6e      	bgt.n	800c4d0 <__kernel_rem_pio2+0x5b0>
 800c3f2:	d045      	beq.n	800c480 <__kernel_rem_pio2+0x560>
 800c3f4:	9b07      	ldr	r3, [sp, #28]
 800c3f6:	f003 0007 	and.w	r0, r3, #7
 800c3fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c3fe:	ecbd 8b02 	vpop	{d8}
 800c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c406:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c408:	2b03      	cmp	r3, #3
 800c40a:	d1f3      	bne.n	800c3f4 <__kernel_rem_pio2+0x4d4>
 800c40c:	ab48      	add	r3, sp, #288	; 0x120
 800c40e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c412:	46d0      	mov	r8, sl
 800c414:	46d9      	mov	r9, fp
 800c416:	f1b9 0f00 	cmp.w	r9, #0
 800c41a:	f1a8 0808 	sub.w	r8, r8, #8
 800c41e:	dc64      	bgt.n	800c4ea <__kernel_rem_pio2+0x5ca>
 800c420:	465c      	mov	r4, fp
 800c422:	2c01      	cmp	r4, #1
 800c424:	f1aa 0a08 	sub.w	sl, sl, #8
 800c428:	dc7e      	bgt.n	800c528 <__kernel_rem_pio2+0x608>
 800c42a:	2000      	movs	r0, #0
 800c42c:	2100      	movs	r1, #0
 800c42e:	f1bb 0f01 	cmp.w	fp, #1
 800c432:	f300 8097 	bgt.w	800c564 <__kernel_rem_pio2+0x644>
 800c436:	9b02      	ldr	r3, [sp, #8]
 800c438:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c43c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c440:	2b00      	cmp	r3, #0
 800c442:	f040 8099 	bne.w	800c578 <__kernel_rem_pio2+0x658>
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	e9c3 5600 	strd	r5, r6, [r3]
 800c44c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c450:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c454:	e7ce      	b.n	800c3f4 <__kernel_rem_pio2+0x4d4>
 800c456:	ab48      	add	r3, sp, #288	; 0x120
 800c458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f7f3 ff34 	bl	80002cc <__adddf3>
 800c464:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c468:	f1bb 0f00 	cmp.w	fp, #0
 800c46c:	daf3      	bge.n	800c456 <__kernel_rem_pio2+0x536>
 800c46e:	9b02      	ldr	r3, [sp, #8]
 800c470:	b113      	cbz	r3, 800c478 <__kernel_rem_pio2+0x558>
 800c472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c476:	4619      	mov	r1, r3
 800c478:	9b01      	ldr	r3, [sp, #4]
 800c47a:	e9c3 0100 	strd	r0, r1, [r3]
 800c47e:	e7b9      	b.n	800c3f4 <__kernel_rem_pio2+0x4d4>
 800c480:	2000      	movs	r0, #0
 800c482:	2100      	movs	r1, #0
 800c484:	e7f0      	b.n	800c468 <__kernel_rem_pio2+0x548>
 800c486:	ab48      	add	r3, sp, #288	; 0x120
 800c488:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c490:	f7f3 ff1c 	bl	80002cc <__adddf3>
 800c494:	3c01      	subs	r4, #1
 800c496:	2c00      	cmp	r4, #0
 800c498:	daf5      	bge.n	800c486 <__kernel_rem_pio2+0x566>
 800c49a:	9b02      	ldr	r3, [sp, #8]
 800c49c:	b1e3      	cbz	r3, 800c4d8 <__kernel_rem_pio2+0x5b8>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4a4:	9c01      	ldr	r4, [sp, #4]
 800c4a6:	e9c4 2300 	strd	r2, r3, [r4]
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c4b2:	f7f3 ff09 	bl	80002c8 <__aeabi_dsub>
 800c4b6:	ad4a      	add	r5, sp, #296	; 0x128
 800c4b8:	2401      	movs	r4, #1
 800c4ba:	45a3      	cmp	fp, r4
 800c4bc:	da0f      	bge.n	800c4de <__kernel_rem_pio2+0x5be>
 800c4be:	9b02      	ldr	r3, [sp, #8]
 800c4c0:	b113      	cbz	r3, 800c4c8 <__kernel_rem_pio2+0x5a8>
 800c4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c4ce:	e791      	b.n	800c3f4 <__kernel_rem_pio2+0x4d4>
 800c4d0:	465c      	mov	r4, fp
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	e7de      	b.n	800c496 <__kernel_rem_pio2+0x576>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	e7e2      	b.n	800c4a4 <__kernel_rem_pio2+0x584>
 800c4de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c4e2:	f7f3 fef3 	bl	80002cc <__adddf3>
 800c4e6:	3401      	adds	r4, #1
 800c4e8:	e7e7      	b.n	800c4ba <__kernel_rem_pio2+0x59a>
 800c4ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c4ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	4632      	mov	r2, r6
 800c4f6:	463b      	mov	r3, r7
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f3 fee7 	bl	80002cc <__adddf3>
 800c4fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f3 fedd 	bl	80002c8 <__aeabi_dsub>
 800c50e:	4632      	mov	r2, r6
 800c510:	463b      	mov	r3, r7
 800c512:	f7f3 fedb 	bl	80002cc <__adddf3>
 800c516:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c51a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c51e:	ed88 7b00 	vstr	d7, [r8]
 800c522:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c526:	e776      	b.n	800c416 <__kernel_rem_pio2+0x4f6>
 800c528:	e9da 8900 	ldrd	r8, r9, [sl]
 800c52c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c530:	4640      	mov	r0, r8
 800c532:	4632      	mov	r2, r6
 800c534:	463b      	mov	r3, r7
 800c536:	4649      	mov	r1, r9
 800c538:	f7f3 fec8 	bl	80002cc <__adddf3>
 800c53c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4640      	mov	r0, r8
 800c546:	4649      	mov	r1, r9
 800c548:	f7f3 febe 	bl	80002c8 <__aeabi_dsub>
 800c54c:	4632      	mov	r2, r6
 800c54e:	463b      	mov	r3, r7
 800c550:	f7f3 febc 	bl	80002cc <__adddf3>
 800c554:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c558:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c55c:	ed8a 7b00 	vstr	d7, [sl]
 800c560:	3c01      	subs	r4, #1
 800c562:	e75e      	b.n	800c422 <__kernel_rem_pio2+0x502>
 800c564:	ab48      	add	r3, sp, #288	; 0x120
 800c566:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56e:	f7f3 fead 	bl	80002cc <__adddf3>
 800c572:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c576:	e75a      	b.n	800c42e <__kernel_rem_pio2+0x50e>
 800c578:	9b01      	ldr	r3, [sp, #4]
 800c57a:	9a01      	ldr	r2, [sp, #4]
 800c57c:	601d      	str	r5, [r3, #0]
 800c57e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c582:	605c      	str	r4, [r3, #4]
 800c584:	609f      	str	r7, [r3, #8]
 800c586:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c58a:	60d3      	str	r3, [r2, #12]
 800c58c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c590:	6110      	str	r0, [r2, #16]
 800c592:	6153      	str	r3, [r2, #20]
 800c594:	e72e      	b.n	800c3f4 <__kernel_rem_pio2+0x4d4>
 800c596:	bf00      	nop
 800c598:	41700000 	.word	0x41700000
 800c59c:	3e700000 	.word	0x3e700000

0800c5a0 <__kernel_sin>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	ed2d 8b04 	vpush	{d8-d9}
 800c5a8:	eeb0 8a41 	vmov.f32	s16, s2
 800c5ac:	eef0 8a61 	vmov.f32	s17, s3
 800c5b0:	ec55 4b10 	vmov	r4, r5, d0
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c5ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c5be:	9001      	str	r0, [sp, #4]
 800c5c0:	da06      	bge.n	800c5d0 <__kernel_sin+0x30>
 800c5c2:	ee10 0a10 	vmov	r0, s0
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	f7f4 fae6 	bl	8000b98 <__aeabi_d2iz>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d051      	beq.n	800c674 <__kernel_sin+0xd4>
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7f4 f82e 	bl	8000638 <__aeabi_dmul>
 800c5dc:	4682      	mov	sl, r0
 800c5de:	468b      	mov	fp, r1
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f7f4 f826 	bl	8000638 <__aeabi_dmul>
 800c5ec:	a341      	add	r3, pc, #260	; (adr r3, 800c6f4 <__kernel_sin+0x154>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	4680      	mov	r8, r0
 800c5f4:	4689      	mov	r9, r1
 800c5f6:	4650      	mov	r0, sl
 800c5f8:	4659      	mov	r1, fp
 800c5fa:	f7f4 f81d 	bl	8000638 <__aeabi_dmul>
 800c5fe:	a33f      	add	r3, pc, #252	; (adr r3, 800c6fc <__kernel_sin+0x15c>)
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	f7f3 fe60 	bl	80002c8 <__aeabi_dsub>
 800c608:	4652      	mov	r2, sl
 800c60a:	465b      	mov	r3, fp
 800c60c:	f7f4 f814 	bl	8000638 <__aeabi_dmul>
 800c610:	a33c      	add	r3, pc, #240	; (adr r3, 800c704 <__kernel_sin+0x164>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	f7f3 fe59 	bl	80002cc <__adddf3>
 800c61a:	4652      	mov	r2, sl
 800c61c:	465b      	mov	r3, fp
 800c61e:	f7f4 f80b 	bl	8000638 <__aeabi_dmul>
 800c622:	a33a      	add	r3, pc, #232	; (adr r3, 800c70c <__kernel_sin+0x16c>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	f7f3 fe4e 	bl	80002c8 <__aeabi_dsub>
 800c62c:	4652      	mov	r2, sl
 800c62e:	465b      	mov	r3, fp
 800c630:	f7f4 f802 	bl	8000638 <__aeabi_dmul>
 800c634:	a337      	add	r3, pc, #220	; (adr r3, 800c714 <__kernel_sin+0x174>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fe47 	bl	80002cc <__adddf3>
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	4606      	mov	r6, r0
 800c642:	460f      	mov	r7, r1
 800c644:	b9eb      	cbnz	r3, 800c682 <__kernel_sin+0xe2>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4650      	mov	r0, sl
 800c64c:	4659      	mov	r1, fp
 800c64e:	f7f3 fff3 	bl	8000638 <__aeabi_dmul>
 800c652:	a325      	add	r3, pc, #148	; (adr r3, 800c6e8 <__kernel_sin+0x148>)
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f7f3 fe36 	bl	80002c8 <__aeabi_dsub>
 800c65c:	4642      	mov	r2, r8
 800c65e:	464b      	mov	r3, r9
 800c660:	f7f3 ffea 	bl	8000638 <__aeabi_dmul>
 800c664:	4602      	mov	r2, r0
 800c666:	460b      	mov	r3, r1
 800c668:	4620      	mov	r0, r4
 800c66a:	4629      	mov	r1, r5
 800c66c:	f7f3 fe2e 	bl	80002cc <__adddf3>
 800c670:	4604      	mov	r4, r0
 800c672:	460d      	mov	r5, r1
 800c674:	ec45 4b10 	vmov	d0, r4, r5
 800c678:	b003      	add	sp, #12
 800c67a:	ecbd 8b04 	vpop	{d8-d9}
 800c67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c682:	4b1b      	ldr	r3, [pc, #108]	; (800c6f0 <__kernel_sin+0x150>)
 800c684:	ec51 0b18 	vmov	r0, r1, d8
 800c688:	2200      	movs	r2, #0
 800c68a:	f7f3 ffd5 	bl	8000638 <__aeabi_dmul>
 800c68e:	4632      	mov	r2, r6
 800c690:	ec41 0b19 	vmov	d9, r0, r1
 800c694:	463b      	mov	r3, r7
 800c696:	4640      	mov	r0, r8
 800c698:	4649      	mov	r1, r9
 800c69a:	f7f3 ffcd 	bl	8000638 <__aeabi_dmul>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	ec51 0b19 	vmov	r0, r1, d9
 800c6a6:	f7f3 fe0f 	bl	80002c8 <__aeabi_dsub>
 800c6aa:	4652      	mov	r2, sl
 800c6ac:	465b      	mov	r3, fp
 800c6ae:	f7f3 ffc3 	bl	8000638 <__aeabi_dmul>
 800c6b2:	ec53 2b18 	vmov	r2, r3, d8
 800c6b6:	f7f3 fe07 	bl	80002c8 <__aeabi_dsub>
 800c6ba:	a30b      	add	r3, pc, #44	; (adr r3, 800c6e8 <__kernel_sin+0x148>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	4606      	mov	r6, r0
 800c6c2:	460f      	mov	r7, r1
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	4649      	mov	r1, r9
 800c6c8:	f7f3 ffb6 	bl	8000638 <__aeabi_dmul>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f3 fdfa 	bl	80002cc <__adddf3>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f3 fdf2 	bl	80002c8 <__aeabi_dsub>
 800c6e4:	e7c4      	b.n	800c670 <__kernel_sin+0xd0>
 800c6e6:	bf00      	nop
 800c6e8:	55555549 	.word	0x55555549
 800c6ec:	3fc55555 	.word	0x3fc55555
 800c6f0:	3fe00000 	.word	0x3fe00000
 800c6f4:	5acfd57c 	.word	0x5acfd57c
 800c6f8:	3de5d93a 	.word	0x3de5d93a
 800c6fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c700:	3e5ae5e6 	.word	0x3e5ae5e6
 800c704:	57b1fe7d 	.word	0x57b1fe7d
 800c708:	3ec71de3 	.word	0x3ec71de3
 800c70c:	19c161d5 	.word	0x19c161d5
 800c710:	3f2a01a0 	.word	0x3f2a01a0
 800c714:	1110f8a6 	.word	0x1110f8a6
 800c718:	3f811111 	.word	0x3f811111
 800c71c:	00000000 	.word	0x00000000

0800c720 <floor>:
 800c720:	ec51 0b10 	vmov	r0, r1, d0
 800c724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c728:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c72c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c730:	2e13      	cmp	r6, #19
 800c732:	ee10 5a10 	vmov	r5, s0
 800c736:	ee10 8a10 	vmov	r8, s0
 800c73a:	460c      	mov	r4, r1
 800c73c:	dc32      	bgt.n	800c7a4 <floor+0x84>
 800c73e:	2e00      	cmp	r6, #0
 800c740:	da14      	bge.n	800c76c <floor+0x4c>
 800c742:	a333      	add	r3, pc, #204	; (adr r3, 800c810 <floor+0xf0>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fdc0 	bl	80002cc <__adddf3>
 800c74c:	2200      	movs	r2, #0
 800c74e:	2300      	movs	r3, #0
 800c750:	f7f4 fa02 	bl	8000b58 <__aeabi_dcmpgt>
 800c754:	b138      	cbz	r0, 800c766 <floor+0x46>
 800c756:	2c00      	cmp	r4, #0
 800c758:	da57      	bge.n	800c80a <floor+0xea>
 800c75a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c75e:	431d      	orrs	r5, r3
 800c760:	d001      	beq.n	800c766 <floor+0x46>
 800c762:	4c2d      	ldr	r4, [pc, #180]	; (800c818 <floor+0xf8>)
 800c764:	2500      	movs	r5, #0
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	e025      	b.n	800c7b8 <floor+0x98>
 800c76c:	4f2b      	ldr	r7, [pc, #172]	; (800c81c <floor+0xfc>)
 800c76e:	4137      	asrs	r7, r6
 800c770:	ea01 0307 	and.w	r3, r1, r7
 800c774:	4303      	orrs	r3, r0
 800c776:	d01f      	beq.n	800c7b8 <floor+0x98>
 800c778:	a325      	add	r3, pc, #148	; (adr r3, 800c810 <floor+0xf0>)
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	f7f3 fda5 	bl	80002cc <__adddf3>
 800c782:	2200      	movs	r2, #0
 800c784:	2300      	movs	r3, #0
 800c786:	f7f4 f9e7 	bl	8000b58 <__aeabi_dcmpgt>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d0eb      	beq.n	800c766 <floor+0x46>
 800c78e:	2c00      	cmp	r4, #0
 800c790:	bfbe      	ittt	lt
 800c792:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c796:	fa43 f606 	asrlt.w	r6, r3, r6
 800c79a:	19a4      	addlt	r4, r4, r6
 800c79c:	ea24 0407 	bic.w	r4, r4, r7
 800c7a0:	2500      	movs	r5, #0
 800c7a2:	e7e0      	b.n	800c766 <floor+0x46>
 800c7a4:	2e33      	cmp	r6, #51	; 0x33
 800c7a6:	dd0b      	ble.n	800c7c0 <floor+0xa0>
 800c7a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c7ac:	d104      	bne.n	800c7b8 <floor+0x98>
 800c7ae:	ee10 2a10 	vmov	r2, s0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	f7f3 fd8a 	bl	80002cc <__adddf3>
 800c7b8:	ec41 0b10 	vmov	d0, r0, r1
 800c7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c7c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7c8:	fa23 f707 	lsr.w	r7, r3, r7
 800c7cc:	4207      	tst	r7, r0
 800c7ce:	d0f3      	beq.n	800c7b8 <floor+0x98>
 800c7d0:	a30f      	add	r3, pc, #60	; (adr r3, 800c810 <floor+0xf0>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 fd79 	bl	80002cc <__adddf3>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f7f4 f9bb 	bl	8000b58 <__aeabi_dcmpgt>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d0bf      	beq.n	800c766 <floor+0x46>
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	da02      	bge.n	800c7f0 <floor+0xd0>
 800c7ea:	2e14      	cmp	r6, #20
 800c7ec:	d103      	bne.n	800c7f6 <floor+0xd6>
 800c7ee:	3401      	adds	r4, #1
 800c7f0:	ea25 0507 	bic.w	r5, r5, r7
 800c7f4:	e7b7      	b.n	800c766 <floor+0x46>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c7fc:	fa03 f606 	lsl.w	r6, r3, r6
 800c800:	4435      	add	r5, r6
 800c802:	4545      	cmp	r5, r8
 800c804:	bf38      	it	cc
 800c806:	18e4      	addcc	r4, r4, r3
 800c808:	e7f2      	b.n	800c7f0 <floor+0xd0>
 800c80a:	2500      	movs	r5, #0
 800c80c:	462c      	mov	r4, r5
 800c80e:	e7aa      	b.n	800c766 <floor+0x46>
 800c810:	8800759c 	.word	0x8800759c
 800c814:	7e37e43c 	.word	0x7e37e43c
 800c818:	bff00000 	.word	0xbff00000
 800c81c:	000fffff 	.word	0x000fffff

0800c820 <scalbn>:
 800c820:	b570      	push	{r4, r5, r6, lr}
 800c822:	ec55 4b10 	vmov	r4, r5, d0
 800c826:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c82a:	4606      	mov	r6, r0
 800c82c:	462b      	mov	r3, r5
 800c82e:	b99a      	cbnz	r2, 800c858 <scalbn+0x38>
 800c830:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c834:	4323      	orrs	r3, r4
 800c836:	d036      	beq.n	800c8a6 <scalbn+0x86>
 800c838:	4b39      	ldr	r3, [pc, #228]	; (800c920 <scalbn+0x100>)
 800c83a:	4629      	mov	r1, r5
 800c83c:	ee10 0a10 	vmov	r0, s0
 800c840:	2200      	movs	r2, #0
 800c842:	f7f3 fef9 	bl	8000638 <__aeabi_dmul>
 800c846:	4b37      	ldr	r3, [pc, #220]	; (800c924 <scalbn+0x104>)
 800c848:	429e      	cmp	r6, r3
 800c84a:	4604      	mov	r4, r0
 800c84c:	460d      	mov	r5, r1
 800c84e:	da10      	bge.n	800c872 <scalbn+0x52>
 800c850:	a32b      	add	r3, pc, #172	; (adr r3, 800c900 <scalbn+0xe0>)
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	e03a      	b.n	800c8ce <scalbn+0xae>
 800c858:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c85c:	428a      	cmp	r2, r1
 800c85e:	d10c      	bne.n	800c87a <scalbn+0x5a>
 800c860:	ee10 2a10 	vmov	r2, s0
 800c864:	4620      	mov	r0, r4
 800c866:	4629      	mov	r1, r5
 800c868:	f7f3 fd30 	bl	80002cc <__adddf3>
 800c86c:	4604      	mov	r4, r0
 800c86e:	460d      	mov	r5, r1
 800c870:	e019      	b.n	800c8a6 <scalbn+0x86>
 800c872:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c876:	460b      	mov	r3, r1
 800c878:	3a36      	subs	r2, #54	; 0x36
 800c87a:	4432      	add	r2, r6
 800c87c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c880:	428a      	cmp	r2, r1
 800c882:	dd08      	ble.n	800c896 <scalbn+0x76>
 800c884:	2d00      	cmp	r5, #0
 800c886:	a120      	add	r1, pc, #128	; (adr r1, 800c908 <scalbn+0xe8>)
 800c888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c88c:	da1c      	bge.n	800c8c8 <scalbn+0xa8>
 800c88e:	a120      	add	r1, pc, #128	; (adr r1, 800c910 <scalbn+0xf0>)
 800c890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c894:	e018      	b.n	800c8c8 <scalbn+0xa8>
 800c896:	2a00      	cmp	r2, #0
 800c898:	dd08      	ble.n	800c8ac <scalbn+0x8c>
 800c89a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c89e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c8a6:	ec45 4b10 	vmov	d0, r4, r5
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c8b0:	da19      	bge.n	800c8e6 <scalbn+0xc6>
 800c8b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c8b6:	429e      	cmp	r6, r3
 800c8b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c8bc:	dd0a      	ble.n	800c8d4 <scalbn+0xb4>
 800c8be:	a112      	add	r1, pc, #72	; (adr r1, 800c908 <scalbn+0xe8>)
 800c8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1e2      	bne.n	800c88e <scalbn+0x6e>
 800c8c8:	a30f      	add	r3, pc, #60	; (adr r3, 800c908 <scalbn+0xe8>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	f7f3 feb3 	bl	8000638 <__aeabi_dmul>
 800c8d2:	e7cb      	b.n	800c86c <scalbn+0x4c>
 800c8d4:	a10a      	add	r1, pc, #40	; (adr r1, 800c900 <scalbn+0xe0>)
 800c8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d0b8      	beq.n	800c850 <scalbn+0x30>
 800c8de:	a10e      	add	r1, pc, #56	; (adr r1, 800c918 <scalbn+0xf8>)
 800c8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8e4:	e7b4      	b.n	800c850 <scalbn+0x30>
 800c8e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c8ea:	3236      	adds	r2, #54	; 0x36
 800c8ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <scalbn+0x108>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	e7e8      	b.n	800c8ce <scalbn+0xae>
 800c8fc:	f3af 8000 	nop.w
 800c900:	c2f8f359 	.word	0xc2f8f359
 800c904:	01a56e1f 	.word	0x01a56e1f
 800c908:	8800759c 	.word	0x8800759c
 800c90c:	7e37e43c 	.word	0x7e37e43c
 800c910:	8800759c 	.word	0x8800759c
 800c914:	fe37e43c 	.word	0xfe37e43c
 800c918:	c2f8f359 	.word	0xc2f8f359
 800c91c:	81a56e1f 	.word	0x81a56e1f
 800c920:	43500000 	.word	0x43500000
 800c924:	ffff3cb0 	.word	0xffff3cb0
 800c928:	3c900000 	.word	0x3c900000

0800c92c <_init>:
 800c92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92e:	bf00      	nop
 800c930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c932:	bc08      	pop	{r3}
 800c934:	469e      	mov	lr, r3
 800c936:	4770      	bx	lr

0800c938 <_fini>:
 800c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93a:	bf00      	nop
 800c93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93e:	bc08      	pop	{r3}
 800c940:	469e      	mov	lr, r3
 800c942:	4770      	bx	lr
