
PhobosMainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08009d58  08009d58  00019d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a408  0800a408  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a410  0800a410  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001e0  0800a5f8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a5f8  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bcf  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319f  00000000  00000000  00037ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0003af80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  0003bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248d4  00000000  00000000  0003cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014389  00000000  00000000  0006162c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d313d  00000000  00000000  000759b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148af2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052bc  00000000  00000000  00148b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d3c 	.word	0x08009d3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009d3c 	.word	0x08009d3c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <bezier_new>:
#include "bezier.h"


Bezier* bezier_new(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b091      	sub	sp, #68	; 0x44
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000f8a:	edc7 0a08 	vstr	s1, [r7, #32]
 8000f8e:	ed87 1a07 	vstr	s2, [r7, #28]
 8000f92:	edc7 1a06 	vstr	s3, [r7, #24]
 8000f96:	ed87 2a05 	vstr	s4, [r7, #20]
 8000f9a:	edc7 2a04 	vstr	s5, [r7, #16]
 8000f9e:	ed87 3a03 	vstr	s6, [r7, #12]
 8000fa2:	edc7 3a02 	vstr	s7, [r7, #8]
 8000fa6:	6078      	str	r0, [r7, #4]
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f004 fff1 	bl	8005f90 <malloc>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
    b->p1 = vector2_new(x1, y1);
 8000fb2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000fb4:	edd7 0a08 	vldr	s1, [r7, #32]
 8000fb8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000fbc:	f001 f982 	bl	80022c4 <vector2_new>
 8000fc0:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc4:	eef0 7a60 	vmov.f32	s15, s1
 8000fc8:	ed84 7a00 	vstr	s14, [r4]
 8000fcc:	edc4 7a01 	vstr	s15, [r4, #4]
    b->p2 = vector2_new(x2, y2);
 8000fd0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000fd2:	edd7 0a06 	vldr	s1, [r7, #24]
 8000fd6:	ed97 0a07 	vldr	s0, [r7, #28]
 8000fda:	f001 f973 	bl	80022c4 <vector2_new>
 8000fde:	eeb0 7a40 	vmov.f32	s14, s0
 8000fe2:	eef0 7a60 	vmov.f32	s15, s1
 8000fe6:	ed84 7a02 	vstr	s14, [r4, #8]
 8000fea:	edc4 7a03 	vstr	s15, [r4, #12]
    b->p3 = vector2_new(x3, y3);
 8000fee:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000ff0:	edd7 0a04 	vldr	s1, [r7, #16]
 8000ff4:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ff8:	f001 f964 	bl	80022c4 <vector2_new>
 8000ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8001000:	eef0 7a60 	vmov.f32	s15, s1
 8001004:	ed84 7a04 	vstr	s14, [r4, #16]
 8001008:	edc4 7a05 	vstr	s15, [r4, #20]
    b->p4 = vector2_new(x4, y4);
 800100c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800100e:	edd7 0a02 	vldr	s1, [r7, #8]
 8001012:	ed97 0a03 	vldr	s0, [r7, #12]
 8001016:	f001 f955 	bl	80022c4 <vector2_new>
 800101a:	eeb0 7a40 	vmov.f32	s14, s0
 800101e:	eef0 7a60 	vmov.f32	s15, s1
 8001022:	ed84 7a06 	vstr	s14, [r4, #24]
 8001026:	edc4 7a07 	vstr	s15, [r4, #28]
    b->lutLength = lutLength;
 800102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
    b->lut = (Vector2*) malloc(sizeof(Vector2) * b->lutLength);
 8001030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4618      	mov	r0, r3
 8001038:	f004 ffaa 	bl	8005f90 <malloc>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001042:	621a      	str	r2, [r3, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001048:	e02b      	b.n	80010a2 <bezier_new+0x122>
        float t = (float) i/(b->lutLength-1);
 800104a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	3b01      	subs	r3, #1
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Vector2 eval = bezier_eval(b, t);
 800106a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800106e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001070:	f000 f821 	bl	80010b6 <bezier_eval>
 8001074:	eeb0 7a40 	vmov.f32	s14, s0
 8001078:	eef0 7a60 	vmov.f32	s15, s1
 800107c:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8001080:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        b->lut[i] = eval;
 8001084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	461a      	mov	r2, r3
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001098:	e882 0003 	stmia.w	r2, {r0, r1}
    for (int i=0; i<b->lutLength; i++) {
 800109c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800109e:	3301      	adds	r3, #1
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbce      	blt.n	800104a <bezier_new+0xca>
    }
    return b;
 80010ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3744      	adds	r7, #68	; 0x44
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}

080010b6 <bezier_eval>:
    vector2_display(b->p4);
    printf("}\r\n");
}


Vector2 bezier_eval(Bezier* b, float t) {
 80010b6:	b480      	push	{r7}
 80010b8:	b08d      	sub	sp, #52	; 0x34
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 80010c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = b->p1.x * u*u*u + b->p2.x * 3*u*u*t + b->p3.x * 3*u*t*t + b->p4.x * t*t*t;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010f6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80010fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80010fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001102:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001106:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800110a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001120:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001124:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001128:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800112c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001130:	edd7 7a02 	vldr	s15, [r7, #8]
 8001134:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001138:	edd7 7a02 	vldr	s15, [r7, #8]
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	edd3 6a06 	vldr	s13, [r3, #24]
 800114a:	edd7 7a02 	vldr	s15, [r7, #8]
 800114e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001152:	edd7 7a02 	vldr	s15, [r7, #8]
 8001156:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800115a:	edd7 7a02 	vldr	s15, [r7, #8]
 800115e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001166:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = b->p1.y * u*u*u + b->p2.y * 3*u*u*t + b->p3.y * 3*u*t*t + b->p4.y * t*t*t;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001170:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800117c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001180:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	edd3 7a03 	vldr	s15, [r3, #12]
 800118e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001192:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001196:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800119a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800119e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80011b8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80011bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80011c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edd3 6a07 	vldr	s13, [r3, #28]
 80011e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	61bb      	str	r3, [r7, #24]
    return eval;
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	f107 0214 	add.w	r2, r7, #20
 8001212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001216:	e883 0003 	stmia.w	r3, {r0, r1}
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	ee07 2a10 	vmov	s14, r2
 8001222:	ee07 3a90 	vmov	s15, r3
}
 8001226:	eeb0 0a47 	vmov.f32	s0, s14
 800122a:	eef0 0a67 	vmov.f32	s1, s15
 800122e:	3734      	adds	r7, #52	; 0x34
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <bezier_deriv1>:
    int i = round(t*(b->lutLength-1));
    return b->lut[i];
}


Vector2 bezier_deriv1(Bezier* b, float t) {
 8001238:	b480      	push	{r7}
 800123a:	b08d      	sub	sp, #52	; 0x34
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8001244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001248:	edd7 7a02 	vldr	s15, [r7, #8]
 800124c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001250:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p2.x - b->p1.x) * 3*u*u + (b->p3.x - b->p2.x) * 6*u*t + (b->p4.x - b->p3.x) * 3*t*t;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	ed93 7a02 	vldr	s14, [r3, #8]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001264:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001268:	ee27 7a87 	vmul.f32	s14, s15, s14
 800126c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001274:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	edd3 7a02 	vldr	s15, [r3, #8]
 8001288:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800128c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001290:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001294:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001298:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800129c:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edd3 6a06 	vldr	s13, [r3, #24]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012b8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80012bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p2.y - b->p1.y) * 3*u*u + (b->p3.y - b->p2.y) * 6*u*t + (b->p4.y - b->p3.y) * 3*t*t;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	ed93 7a03 	vldr	s14, [r3, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80012ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	edd3 6a05 	vldr	s13, [r3, #20]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	edd3 7a03 	vldr	s15, [r3, #12]
 800130c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001310:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001314:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800131c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001320:	edd7 7a02 	vldr	s15, [r7, #8]
 8001324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	edd3 7a05 	vldr	s15, [r3, #20]
 8001338:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800133c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001340:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001344:	edd7 7a02 	vldr	s15, [r7, #8]
 8001348:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800134c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	61bb      	str	r3, [r7, #24]
    return eval;
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	f107 0214 	add.w	r2, r7, #20
 800136c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001370:	e883 0003 	stmia.w	r3, {r0, r1}
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	ee07 2a10 	vmov	s14, r2
 800137c:	ee07 3a90 	vmov	s15, r3
}
 8001380:	eeb0 0a47 	vmov.f32	s0, s14
 8001384:	eef0 0a67 	vmov.f32	s1, s15
 8001388:	3734      	adds	r7, #52	; 0x34
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <bezier_deriv2>:


Vector2 bezier_deriv2(Bezier* b, float t) {
 8001392:	b480      	push	{r7}
 8001394:	b08d      	sub	sp, #52	; 0x34
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 800139e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p3.x - 2*b->p2.x + b->p1.x) * 6*u + (b->p4.x - 2*b->p3.x + b->p2.x) * 6*t;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edd3 6a06 	vldr	s13, [r3, #24]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80013e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80013fa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80013fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001402:	edd7 7a02 	vldr	s15, [r7, #8]
 8001406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p3.y - 2*b->p2.y + b->p1.y) * 6*u + (b->p4.y - 2*b->p3.y + b->p2.y) * 6*t;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	ed93 7a05 	vldr	s14, [r3, #20]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edd3 7a03 	vldr	s15, [r3, #12]
 800141e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001422:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 7a01 	vldr	s15, [r3, #4]
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001434:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001438:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800143c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	edd3 6a07 	vldr	s13, [r3, #28]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	edd3 7a05 	vldr	s15, [r3, #20]
 800144c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001450:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edd3 7a03 	vldr	s15, [r3, #12]
 800145a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800145e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001462:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001466:	edd7 7a02 	vldr	s15, [r7, #8]
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	61bb      	str	r3, [r7, #24]
    return eval;
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	f107 0214 	add.w	r2, r7, #20
 8001486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148a:	e883 0003 	stmia.w	r3, {r0, r1}
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	ee07 2a10 	vmov	s14, r2
 8001496:	ee07 3a90 	vmov	s15, r3
}
 800149a:	eeb0 0a47 	vmov.f32	s0, s14
 800149e:	eef0 0a67 	vmov.f32	s1, s15
 80014a2:	3734      	adds	r7, #52	; 0x34
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <bezier_curvature>:


float bezier_curvature(Bezier* b, float t) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	ed87 0a00 	vstr	s0, [r7]
    Vector2 diff1 = bezier_deriv1(b, t); // B'(t)
 80014b8:	ed97 0a00 	vldr	s0, [r7]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff febb 	bl	8001238 <bezier_deriv1>
 80014c2:	eeb0 7a40 	vmov.f32	s14, s0
 80014c6:	eef0 7a60 	vmov.f32	s15, s1
 80014ca:	ed87 7a04 	vstr	s14, [r7, #16]
 80014ce:	edc7 7a05 	vstr	s15, [r7, #20]
    Vector2 diff2 = bezier_deriv2(b, t); // B''(t)
 80014d2:	ed97 0a00 	vldr	s0, [r7]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff5b 	bl	8001392 <bezier_deriv2>
 80014dc:	eeb0 7a40 	vmov.f32	s14, s0
 80014e0:	eef0 7a60 	vmov.f32	s15, s1
 80014e4:	ed87 7a02 	vstr	s14, [r7, #8]
 80014e8:	edc7 7a03 	vstr	s15, [r7, #12]
    float num = vector2_cross(diff1, diff2);
 80014ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80014f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80014f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fc:	eeb0 1a46 	vmov.f32	s2, s12
 8001500:	eef0 1a66 	vmov.f32	s3, s13
 8001504:	eeb0 0a47 	vmov.f32	s0, s14
 8001508:	eef0 0a67 	vmov.f32	s1, s15
 800150c:	f000 ff99 	bl	8002442 <vector2_cross>
 8001510:	ed87 0a07 	vstr	s0, [r7, #28]
    float den = vector2_norm(diff1);
 8001514:	ed97 7a04 	vldr	s14, [r7, #16]
 8001518:	edd7 7a05 	vldr	s15, [r7, #20]
 800151c:	eeb0 0a47 	vmov.f32	s0, s14
 8001520:	eef0 0a67 	vmov.f32	s1, s15
 8001524:	f000 fef0 	bl	8002308 <vector2_norm>
 8001528:	ed87 0a06 	vstr	s0, [r7, #24]
    if (den == 0)
 800152c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001530:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	d102      	bne.n	8001540 <bezier_curvature+0x94>
        return INFINITY;
 800153a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001568 <bezier_curvature+0xbc>
 800153e:	e00b      	b.n	8001558 <bezier_curvature+0xac>
    return num/(den*den*den);
 8001540:	edd7 7a06 	vldr	s15, [r7, #24]
 8001544:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001548:	edd7 7a06 	vldr	s15, [r7, #24]
 800154c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001550:	ed97 7a07 	vldr	s14, [r7, #28]
 8001554:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001558:	eef0 7a66 	vmov.f32	s15, s13
}
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	7f800000 	.word	0x7f800000

0800156c <bezier_projectLut>:


float bezier_projectLut(Bezier* b, Vector2 p) { // 19 µs 
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	eeb0 7a40 	vmov.f32	s14, s0
 8001578:	eef0 7a60 	vmov.f32	s15, s1
 800157c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001580:	edc7 7a02 	vstr	s15, [r7, #8]
    float minDist = INFINITY;
 8001584:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    float minIndex = 0;
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	e02d      	b.n	80015f2 <bezier_projectLut+0x86>
        float dist = vector2_dist2(p, b->lut[i]);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	ed93 6a00 	vldr	s12, [r3]
 80015a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80015a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b0:	eeb0 1a46 	vmov.f32	s2, s12
 80015b4:	eef0 1a66 	vmov.f32	s3, s13
 80015b8:	eeb0 0a47 	vmov.f32	s0, s14
 80015bc:	eef0 0a67 	vmov.f32	s1, s15
 80015c0:	f000 ff07 	bl	80023d2 <vector2_dist2>
 80015c4:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < minDist) {
 80015c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	d508      	bpl.n	80015ec <bezier_projectLut+0x80>
            minDist = dist;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
            minIndex = i;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	3301      	adds	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbcc      	blt.n	8001596 <bezier_projectLut+0x2a>
        }
    }
    float tLut = (float) minIndex/(b->lutLength-1);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	3b01      	subs	r3, #1
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160a:	edd7 6a08 	vldr	s13, [r7, #32]
 800160e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001612:	edc7 7a06 	vstr	s15, [r7, #24]
    return tLut;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	ee07 3a90 	vmov	s15, r3
}
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <bezier_project>:


float bezier_project(Bezier* b, Vector2 p, float precision) {
 8001628:	b580      	push	{r7, lr}
 800162a:	ed2d 8b02 	vpush	{d8}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	eeb0 7a40 	vmov.f32	s14, s0
 8001638:	eef0 7a60 	vmov.f32	s15, s1
 800163c:	ed87 1a00 	vstr	s2, [r7]
 8001640:	ed87 7a01 	vstr	s14, [r7, #4]
 8001644:	edc7 7a02 	vstr	s15, [r7, #8]
    float tLut = bezier_projectLut(b, p);
 8001648:	ed97 7a01 	vldr	s14, [r7, #4]
 800164c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001650:	eeb0 0a47 	vmov.f32	s0, s14
 8001654:	eef0 0a67 	vmov.f32	s1, s15
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff ff87 	bl	800156c <bezier_projectLut>
 800165e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    float halfWidth = 1.0/(b->lutLength-1);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	3b01      	subs	r3, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff7b 	bl	8000564 <__aeabi_i2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	495b      	ldr	r1, [pc, #364]	; (80017e4 <bezier_project+0x1bc>)
 8001678:	f7ff f908 	bl	800088c <__aeabi_ddiv>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fab0 	bl	8000be8 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	623b      	str	r3, [r7, #32]

    float t_a = tLut - halfWidth;
 800168c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001690:	edd7 7a08 	vldr	s15, [r7, #32]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t_a = (t_a<0)?0:t_a;
 800169c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d502      	bpl.n	80016b0 <bezier_project+0x88>
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e000      	b.n	80016b2 <bezier_project+0x8a>
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    float t_b = tLut + halfWidth;
 80016b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t_b = (t_b>1)?1:t_b;
 80016c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dd02      	ble.n	80016dc <bezier_project+0xb4>
 80016d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016da:	e000      	b.n	80016de <bezier_project+0xb6>
 80016dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28

    Vector2 p_a, p_b;

    while (t_b - t_a > precision) {
 80016e0:	e05f      	b.n	80017a2 <bezier_project+0x17a>
        p_a = bezier_eval(b, t_a);
 80016e2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff fce5 	bl	80010b6 <bezier_eval>
 80016ec:	eeb0 7a40 	vmov.f32	s14, s0
 80016f0:	eef0 7a60 	vmov.f32	s15, s1
 80016f4:	ed87 7a06 	vstr	s14, [r7, #24]
 80016f8:	edc7 7a07 	vstr	s15, [r7, #28]
        p_b = bezier_eval(b, t_b);
 80016fc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff fcd8 	bl	80010b6 <bezier_eval>
 8001706:	eeb0 7a40 	vmov.f32	s14, s0
 800170a:	eef0 7a60 	vmov.f32	s15, s1
 800170e:	ed87 7a04 	vstr	s14, [r7, #16]
 8001712:	edc7 7a05 	vstr	s15, [r7, #20]
        if (vector2_dist2(p, p_a) < vector2_dist2(p, p_b))
 8001716:	ed97 6a06 	vldr	s12, [r7, #24]
 800171a:	edd7 6a07 	vldr	s13, [r7, #28]
 800171e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001722:	edd7 7a02 	vldr	s15, [r7, #8]
 8001726:	eeb0 1a46 	vmov.f32	s2, s12
 800172a:	eef0 1a66 	vmov.f32	s3, s13
 800172e:	eeb0 0a47 	vmov.f32	s0, s14
 8001732:	eef0 0a67 	vmov.f32	s1, s15
 8001736:	f000 fe4c 	bl	80023d2 <vector2_dist2>
 800173a:	eeb0 8a40 	vmov.f32	s16, s0
 800173e:	ed97 6a04 	vldr	s12, [r7, #16]
 8001742:	edd7 6a05 	vldr	s13, [r7, #20]
 8001746:	ed97 7a01 	vldr	s14, [r7, #4]
 800174a:	edd7 7a02 	vldr	s15, [r7, #8]
 800174e:	eeb0 1a46 	vmov.f32	s2, s12
 8001752:	eef0 1a66 	vmov.f32	s3, s13
 8001756:	eeb0 0a47 	vmov.f32	s0, s14
 800175a:	eef0 0a67 	vmov.f32	s1, s15
 800175e:	f000 fe38 	bl	80023d2 <vector2_dist2>
 8001762:	eef0 7a40 	vmov.f32	s15, s0
 8001766:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d50c      	bpl.n	800178a <bezier_project+0x162>
            t_b = (t_a + t_b)/2;
 8001770:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001774:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001784:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001788:	e00b      	b.n	80017a2 <bezier_project+0x17a>
        else
            t_a = (t_a + t_b)/2;
 800178a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800178e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001796:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800179a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while (t_b - t_a > precision) {
 80017a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80017a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ae:	ed97 7a00 	vldr	s14, [r7]
 80017b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	d492      	bmi.n	80016e2 <bezier_project+0xba>
    }
    return (t_a + t_b)/2;
 80017bc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80017d4:	eeb0 0a67 	vmov.f32	s0, s15
 80017d8:	3730      	adds	r7, #48	; 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	ecbd 8b02 	vpop	{d8}
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	3ff00000 	.word	0x3ff00000

080017e8 <drv8825_init>:


void drv8825_init(Stepper *stepper, uint16_t enablePin, 
                  GPIO_TypeDef* enableGPIO, uint16_t dirPin, 
                  GPIO_TypeDef *dirGPIO, TIM_HandleTypeDef *timer, 
                  uint8_t channel) {
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	460b      	mov	r3, r1
 80017f6:	817b      	strh	r3, [r7, #10]
 80017f8:	4613      	mov	r3, r2
 80017fa:	813b      	strh	r3, [r7, #8]
	stepper->enablePin = enablePin;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	897a      	ldrh	r2, [r7, #10]
 8001800:	801a      	strh	r2, [r3, #0]
	stepper->enableGPIO = enableGPIO;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]

	stepper->dirPin = dirPin;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	893a      	ldrh	r2, [r7, #8]
 800180c:	811a      	strh	r2, [r3, #8]
	stepper->dirGPIO = dirGPIO;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]

	stepper->timer = timer;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	611a      	str	r2, [r3, #16]
	stepper->channel = channel;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001820:	751a      	strb	r2, [r3, #20]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <drv8825_setDirection>:


void drv8825_setDirection(Stepper *stepper, StepperDirection direction) {
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(stepper->dirGPIO, stepper->dirPin, (uint8_t) direction);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68d8      	ldr	r0, [r3, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	891b      	ldrh	r3, [r3, #8]
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	4619      	mov	r1, r3
 8001846:	f002 f951 	bl	8003aec <HAL_GPIO_WritePin>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <drv8825_enable>:


void drv8825_enable(Stepper *stepper) {
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6858      	ldr	r0, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	4619      	mov	r1, r3
 8001866:	f002 f941 	bl	8003aec <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin, 
		(uint8_t) ACTIVE
	);
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <drv8825_setPWMFrequency>:
		(uint8_t) PASSIVE
	);
}


void drv8825_setPWMFrequency(Stepper* stepper, uint16_t frequency) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if (frequency != 0) {
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <drv8825_setPWMFrequency+0x2a>
		stepper->timer->Init.Prescaler = 179;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	22b3      	movs	r2, #179	; 0xb3
 800188c:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = (uint32_t)1000000/frequency;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4945      	ldr	r1, [pc, #276]	; (80019ac <drv8825_setPWMFrequency+0x138>)
 8001896:	fbb1 f2f2 	udiv	r2, r1, r2
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	e009      	b.n	80018b2 <drv8825_setPWMFrequency+0x3e>
	} else {
		stepper->timer->Init.Prescaler = 0xFFFE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018a6:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = 0xFFFE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018b0:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(stepper->timer) != HAL_OK) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 feec 	bl	8004694 <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <drv8825_setPWMFrequency+0x52>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 80018c2:	f000 ff47 	bl	8002754 <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(stepper->timer) != HAL_OK) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 ffa2 	bl	8004814 <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <drv8825_setPWMFrequency+0x66>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 80018d6:	f000 ff3d 	bl	8002754 <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(stepper->timer, stepper->channel);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7d1b      	ldrb	r3, [r3, #20]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f002 ffef 	bl	80048c8 <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch (stepper->channel) {
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7d1b      	ldrb	r3, [r3, #20]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d858      	bhi.n	80019a4 <drv8825_setPWMFrequency+0x130>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <drv8825_setPWMFrequency+0x84>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	0800192d 	.word	0x0800192d
 80018fc:	080019a5 	.word	0x080019a5
 8001900:	080019a5 	.word	0x080019a5
 8001904:	080019a5 	.word	0x080019a5
 8001908:	0800194b 	.word	0x0800194b
 800190c:	080019a5 	.word	0x080019a5
 8001910:	080019a5 	.word	0x080019a5
 8001914:	080019a5 	.word	0x080019a5
 8001918:	08001969 	.word	0x08001969
 800191c:	080019a5 	.word	0x080019a5
 8001920:	080019a5 	.word	0x080019a5
 8001924:	080019a5 	.word	0x080019a5
 8001928:	08001987 	.word	0x08001987
		case (TIM_CHANNEL_1):
			stepper->timer->Instance->CCR1 = (50*stepper->timer->Init.Period)/100;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2232      	movs	r2, #50	; 0x32
 8001934:	fb02 f203 	mul.w	r2, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	491c      	ldr	r1, [pc, #112]	; (80019b0 <drv8825_setPWMFrequency+0x13c>)
 8001940:	fba1 1202 	umull	r1, r2, r1, r2
 8001944:	0952      	lsrs	r2, r2, #5
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001948:	e02c      	b.n	80019a4 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_2):
			stepper->timer->Instance->CCR2 = (50*stepper->timer->Init.Period)/100;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2232      	movs	r2, #50	; 0x32
 8001952:	fb02 f203 	mul.w	r2, r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4914      	ldr	r1, [pc, #80]	; (80019b0 <drv8825_setPWMFrequency+0x13c>)
 800195e:	fba1 1202 	umull	r1, r2, r1, r2
 8001962:	0952      	lsrs	r2, r2, #5
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001966:	e01d      	b.n	80019a4 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_3):
			stepper->timer->Instance->CCR3 = (50*stepper->timer->Init.Period)/100;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2232      	movs	r2, #50	; 0x32
 8001970:	fb02 f203 	mul.w	r2, r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	490d      	ldr	r1, [pc, #52]	; (80019b0 <drv8825_setPWMFrequency+0x13c>)
 800197c:	fba1 1202 	umull	r1, r2, r1, r2
 8001980:	0952      	lsrs	r2, r2, #5
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001984:	e00e      	b.n	80019a4 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_4):
			stepper->timer->Instance->CCR4 = (50*stepper->timer->Init.Period)/100;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2232      	movs	r2, #50	; 0x32
 800198e:	fb02 f203 	mul.w	r2, r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4905      	ldr	r1, [pc, #20]	; (80019b0 <drv8825_setPWMFrequency+0x13c>)
 800199a:	fba1 1202 	umull	r1, r2, r1, r2
 800199e:	0952      	lsrs	r2, r2, #5
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80019a2:	bf00      	nop
	}
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	000f4240 	.word	0x000f4240
 80019b0:	51eb851f 	.word	0x51eb851f

080019b4 <drv8825_setRotationSpeed>:


void drv8825_setRotationSpeed(Stepper *stepper, float rpm) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	ed87 0a00 	vstr	s0, [r7]
	uint16_t f = (rpm / 60) * STEPS_PER_REV * MICROSTEPS;
 80019c0:	ed97 7a00 	vldr	s14, [r7]
 80019c4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80019f8 <drv8825_setRotationSpeed+0x44>
 80019c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019cc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80019fc <drv8825_setRotationSpeed+0x48>
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80019d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e0:	ee17 3a90 	vmov	r3, s15
 80019e4:	81fb      	strh	r3, [r7, #14]
	drv8825_setPWMFrequency(stepper, f);
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff42 	bl	8001874 <drv8825_setPWMFrequency>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	42700000 	.word	0x42700000
 80019fc:	43480000 	.word	0x43480000

08001a00 <getRightEncoderCount>:


extern Robot robot;


int16_t getRightEncoderCount(){
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	return (int16_t) R_ENCODER.Instance->CNT;
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <getRightEncoderCount+0x18>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	b21b      	sxth	r3, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200003d4 	.word	0x200003d4

08001a1c <getLeftEncoderCount>:


int16_t getLeftEncoderCount(){
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return -1 * (int16_t) L_ENCODER.Instance->CNT;
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <getLeftEncoderCount+0x1c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	425b      	negs	r3, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	b21b      	sxth	r3, r3
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	200002fc 	.word	0x200002fc

08001a3c <resetRightEncoderCount>:


void resetRightEncoderCount(){
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	R_ENCODER.Instance->CNT = 0;
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <resetRightEncoderCount+0x18>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200003d4 	.word	0x200003d4

08001a58 <resetLeftEncoderCount>:


void resetLeftEncoderCount(){
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
	L_ENCODER.Instance->CNT = 0;
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <resetLeftEncoderCount+0x18>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200002fc 	.word	0x200002fc
 8001a74:	00000000 	.word	0x00000000

08001a78 <updateRobotPosition>:


void updateRobotPosition(){
 8001a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
	//printf("x: %.1fmm, y: %.1fmm, angle: %.1fdeg\r\n", robot.position.x, robot.position.y, robot.angle/2/M_PI*360);

	int valCodG = getLeftEncoderCount();
 8001a80:	f7ff ffcc 	bl	8001a1c <getLeftEncoderCount>
 8001a84:	4603      	mov	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]
	int valCodD = getRightEncoderCount();
 8001a88:	f7ff ffba 	bl	8001a00 <getRightEncoderCount>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60bb      	str	r3, [r7, #8]

	resetRightEncoderCount();
 8001a90:	f7ff ffd4 	bl	8001a3c <resetRightEncoderCount>
	resetLeftEncoderCount();
 8001a94:	f7ff ffe0 	bl	8001a58 <resetLeftEncoderCount>

	float r =  (valCodG*COEFF_CODEUR_L + valCodD*COEFF_CODEUR_R)/2;
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7fe fd63 	bl	8000564 <__aeabi_i2d>
 8001a9e:	a38f      	add	r3, pc, #572	; (adr r3, 8001cdc <updateRobotPosition+0x264>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fdc8 	bl	8000638 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4614      	mov	r4, r2
 8001aae:	461d      	mov	r5, r3
 8001ab0:	68b8      	ldr	r0, [r7, #8]
 8001ab2:	f7fe fd57 	bl	8000564 <__aeabi_i2d>
 8001ab6:	a389      	add	r3, pc, #548	; (adr r3, 8001cdc <updateRobotPosition+0x264>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fdbc 	bl	8000638 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fc00 	bl	80002cc <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001adc:	f7fe fed6 	bl	800088c <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff f87e 	bl	8000be8 <__aeabi_d2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	607b      	str	r3, [r7, #4]
	float alpha = (valCodD*COEFF_CODEUR_R - valCodG*COEFF_CODEUR_L)/ENTRAXE_ODOMETRY;
 8001af0:	68b8      	ldr	r0, [r7, #8]
 8001af2:	f7fe fd37 	bl	8000564 <__aeabi_i2d>
 8001af6:	a379      	add	r3, pc, #484	; (adr r3, 8001cdc <updateRobotPosition+0x264>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fd9c 	bl	8000638 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7fe fd2b 	bl	8000564 <__aeabi_i2d>
 8001b0e:	a373      	add	r3, pc, #460	; (adr r3, 8001cdc <updateRobotPosition+0x264>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd90 	bl	8000638 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fbd2 	bl	80002c8 <__aeabi_dsub>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	a36d      	add	r3, pc, #436	; (adr r3, 8001ce4 <updateRobotPosition+0x26c>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe feab 	bl	800088c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f853 	bl	8000be8 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	603b      	str	r3, [r7, #0]

	robot.position.x += r * cos(robot.angle + alpha/2);
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <updateRobotPosition+0x260>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd1c 	bl	8000588 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7fe fd17 	bl	8000588 <__aeabi_f2d>
 8001b5a:	4680      	mov	r8, r0
 8001b5c:	4689      	mov	r9, r1
 8001b5e:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <updateRobotPosition+0x260>)
 8001b60:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b64:	edd7 6a00 	vldr	s13, [r7]
 8001b68:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b74:	ee17 0a90 	vmov	r0, s15
 8001b78:	f7fe fd06 	bl	8000588 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	ec43 2b10 	vmov	d0, r2, r3
 8001b84:	f006 ff6c 	bl	8008a60 <cos>
 8001b88:	ec53 2b10 	vmov	r2, r3, d0
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	4649      	mov	r1, r9
 8001b90:	f7fe fd52 	bl	8000638 <__aeabi_dmul>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4620      	mov	r0, r4
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	f7fe fb96 	bl	80002cc <__adddf3>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7ff f81e 	bl	8000be8 <__aeabi_d2f>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a4a      	ldr	r2, [pc, #296]	; (8001cd8 <updateRobotPosition+0x260>)
 8001bb0:	6013      	str	r3, [r2, #0]
	robot.position.y += r * sin(robot.angle + alpha/2);
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <updateRobotPosition+0x260>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	460d      	mov	r5, r1
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe fce1 	bl	8000588 <__aeabi_f2d>
 8001bc6:	4680      	mov	r8, r0
 8001bc8:	4689      	mov	r9, r1
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <updateRobotPosition+0x260>)
 8001bcc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bd0:	edd7 6a00 	vldr	s13, [r7]
 8001bd4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001bd8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be0:	ee17 0a90 	vmov	r0, s15
 8001be4:	f7fe fcd0 	bl	8000588 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	ec43 2b10 	vmov	d0, r2, r3
 8001bf0:	f006 ff86 	bl	8008b00 <sin>
 8001bf4:	ec53 2b10 	vmov	r2, r3, d0
 8001bf8:	4640      	mov	r0, r8
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	f7fe fd1c 	bl	8000638 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe fb60 	bl	80002cc <__adddf3>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe ffe8 	bl	8000be8 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <updateRobotPosition+0x260>)
 8001c1c:	6053      	str	r3, [r2, #4]
	robot.angle += alpha;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <updateRobotPosition+0x260>)
 8001c20:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c24:	edd7 7a00 	vldr	s15, [r7]
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <updateRobotPosition+0x260>)
 8001c2e:	edc3 7a02 	vstr	s15, [r3, #8]

	if (robot.angle > M_PI)
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <updateRobotPosition+0x260>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fca6 	bl	8000588 <__aeabi_f2d>
 8001c3c:	a320      	add	r3, pc, #128	; (adr r3, 8001cc0 <updateRobotPosition+0x248>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe ff89 	bl	8000b58 <__aeabi_dcmpgt>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <updateRobotPosition+0x1fc>
		robot.angle = robot.angle - M_TWOPI;
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <updateRobotPosition+0x260>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc99 	bl	8000588 <__aeabi_f2d>
 8001c56:	a31c      	add	r3, pc, #112	; (adr r3, 8001cc8 <updateRobotPosition+0x250>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fb34 	bl	80002c8 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffbe 	bl	8000be8 <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <updateRobotPosition+0x260>)
 8001c70:	6093      	str	r3, [r2, #8]
	else if (robot.angle < -M_PI)
		robot.angle = robot.angle + M_TWOPI;
}
 8001c72:	e020      	b.n	8001cb6 <updateRobotPosition+0x23e>
	else if (robot.angle < -M_PI)
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <updateRobotPosition+0x260>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc85 	bl	8000588 <__aeabi_f2d>
 8001c7e:	a314      	add	r3, pc, #80	; (adr r3, 8001cd0 <updateRobotPosition+0x258>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe ff4a 	bl	8000b1c <__aeabi_dcmplt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d100      	bne.n	8001c90 <updateRobotPosition+0x218>
}
 8001c8e:	e012      	b.n	8001cb6 <updateRobotPosition+0x23e>
		robot.angle = robot.angle + M_TWOPI;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <updateRobotPosition+0x260>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc77 	bl	8000588 <__aeabi_f2d>
 8001c9a:	a30b      	add	r3, pc, #44	; (adr r3, 8001cc8 <updateRobotPosition+0x250>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fb14 	bl	80002cc <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff9c 	bl	8000be8 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <updateRobotPosition+0x260>)
 8001cb4:	6093      	str	r3, [r2, #8]
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cc0:	54442d18 	.word	0x54442d18
 8001cc4:	400921fb 	.word	0x400921fb
 8001cc8:	54442d18 	.word	0x54442d18
 8001ccc:	401921fb 	.word	0x401921fb
 8001cd0:	54442d18 	.word	0x54442d18
 8001cd4:	c00921fb 	.word	0xc00921fb
 8001cd8:	20000208 	.word	0x20000208
 8001cdc:	0fa743d0 	.word	0x0fa743d0
 8001ce0:	3fa4c5ef 	.word	0x3fa4c5ef
 8001ce4:	00000000 	.word	0x00000000
 8001ce8:	40709000 	.word	0x40709000

08001cec <setRobotPosition>:


void setRobotPosition(float x, float y){
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cf6:	edc7 0a00 	vstr	s1, [r7]
	robot.position.x = x;
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <setRobotPosition+0x28>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6013      	str	r3, [r2, #0]
	robot.position.y = y;
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <setRobotPosition+0x28>)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6053      	str	r3, [r2, #4]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000208 	.word	0x20000208

08001d18 <propulsion_initialize>:


extern Robot robot;


void propulsion_initialize() {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af04      	add	r7, sp, #16
	robot.leftMotor = (Stepper*) malloc(sizeof(Stepper));
 8001d1e:	2018      	movs	r0, #24
 8001d20:	f004 f936 	bl	8005f90 <malloc>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <propulsion_initialize+0x60>)
 8001d2a:	60da      	str	r2, [r3, #12]
	robot.rightMotor = (Stepper*) malloc(sizeof(Stepper));
 8001d2c:	2018      	movs	r0, #24
 8001d2e:	f004 f92f 	bl	8005f90 <malloc>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <propulsion_initialize+0x60>)
 8001d38:	615a      	str	r2, [r3, #20]

	drv8825_init(
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <propulsion_initialize+0x60>)
 8001d3c:	68d8      	ldr	r0, [r3, #12]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <propulsion_initialize+0x64>)
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <propulsion_initialize+0x68>)
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <propulsion_initialize+0x68>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	f7ff fd4a 	bl	80017e8 <drv8825_init>
		robot.leftMotor,
		L_MOTOR_EN_Pin, L_MOTOR_EN_GPIO_Port, 
		L_MOTOR_DIR_Pin, L_MOTOR_DIR_GPIO_Port, 
		&L_MOTOR_TIMER, TIM_CHANNEL_1
	);
	drv8825_init(
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <propulsion_initialize+0x60>)
 8001d56:	6958      	ldr	r0, [r3, #20]
 8001d58:	230c      	movs	r3, #12
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <propulsion_initialize+0x6c>)
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <propulsion_initialize+0x68>)
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d68:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <propulsion_initialize+0x68>)
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	f7ff fd3c 	bl	80017e8 <drv8825_init>
		robot.rightMotor,
		R_MOTOR_EN_Pin, R_MOTOR_EN_GPIO_Port, 
		R_MOTOR_DIR_Pin, R_MOTOR_DIR_GPIO_Port, 
		&R_MOTOR_TIMER, TIM_CHANNEL_4
	);
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000208 	.word	0x20000208
 8001d7c:	20000344 	.word	0x20000344
 8001d80:	40020800 	.word	0x40020800
 8001d84:	20000224 	.word	0x20000224

08001d88 <propulsion_enableMotors>:


void propulsion_enableMotors() {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	drv8825_enable(robot.leftMotor);
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <propulsion_enableMotors+0x1c>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fd5e 	bl	8001852 <drv8825_enable>
	drv8825_enable(robot.rightMotor);
 8001d96:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <propulsion_enableMotors+0x1c>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd59 	bl	8001852 <drv8825_enable>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000208 	.word	0x20000208

08001da8 <propulsion_setSpeeds>:
	drv8825_disable(robot.leftMotor);
	drv8825_disable(robot.rightMotor);
}


void propulsion_setSpeeds(float left, float right) {
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8001db2:	edc7 0a00 	vstr	s1, [r7]
	robot.leftSpeed = left;
 8001db6:	4a3a      	ldr	r2, [pc, #232]	; (8001ea0 <propulsion_setSpeeds+0xf8>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6113      	str	r3, [r2, #16]
	drv8825_setDirection(robot.leftMotor, (left < 0)?NEGATIVE:POSITIVE);
 8001dbc:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <propulsion_setSpeeds+0xf8>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	bf4c      	ite	mi
 8001dce:	2301      	movmi	r3, #1
 8001dd0:	2300      	movpl	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f7ff fd25 	bl	800182e <drv8825_setDirection>
	drv8825_setRotationSpeed(robot.leftMotor, 60 * fabsf(left) / (2*M_PI*WHEEL_RADIUS));
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <propulsion_setSpeeds+0xf8>)
 8001de6:	68dc      	ldr	r4, [r3, #12]
 8001de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dec:	eef0 7ae7 	vabs.f32	s15, s15
 8001df0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001ea4 <propulsion_setSpeeds+0xfc>
 8001df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df8:	ee17 0a90 	vmov	r0, s15
 8001dfc:	f7fe fbc4 	bl	8000588 <__aeabi_f2d>
 8001e00:	a325      	add	r3, pc, #148	; (adr r3, 8001e98 <propulsion_setSpeeds+0xf0>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fd41 	bl	800088c <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fee9 	bl	8000be8 <__aeabi_d2f>
 8001e16:	4603      	mov	r3, r0
 8001e18:	ee00 3a10 	vmov	s0, r3
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7ff fdc9 	bl	80019b4 <drv8825_setRotationSpeed>

	robot.rightSpeed = right;
 8001e22:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <propulsion_setSpeeds+0xf8>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6193      	str	r3, [r2, #24]
    drv8825_setDirection(robot.rightMotor, (right < 0)?NEGATIVE:POSITIVE);
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <propulsion_setSpeeds+0xf8>)
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	edd7 7a00 	vldr	s15, [r7]
 8001e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	bf4c      	ite	mi
 8001e3a:	2301      	movmi	r3, #1
 8001e3c:	2300      	movpl	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f7ff fcef 	bl	800182e <drv8825_setDirection>
	drv8825_setRotationSpeed(robot.rightMotor, 60 * fabsf(right) / (2*M_PI*WHEEL_RADIUS));
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <propulsion_setSpeeds+0xf8>)
 8001e52:	695c      	ldr	r4, [r3, #20]
 8001e54:	edd7 7a00 	vldr	s15, [r7]
 8001e58:	eef0 7ae7 	vabs.f32	s15, s15
 8001e5c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ea4 <propulsion_setSpeeds+0xfc>
 8001e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e64:	ee17 0a90 	vmov	r0, s15
 8001e68:	f7fe fb8e 	bl	8000588 <__aeabi_f2d>
 8001e6c:	a30a      	add	r3, pc, #40	; (adr r3, 8001e98 <propulsion_setSpeeds+0xf0>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fd0b 	bl	800088c <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe feb3 	bl	8000be8 <__aeabi_d2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	ee00 3a10 	vmov	s0, r3
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff fd93 	bl	80019b4 <drv8825_setRotationSpeed>
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	90d8a332 	.word	0x90d8a332
 8001e9c:	406e50fd 	.word	0x406e50fd
 8001ea0:	20000208 	.word	0x20000208
 8001ea4:	42700000 	.word	0x42700000

08001ea8 <propulsion_updatePosition>:


void propulsion_updatePosition(float dt) {
 8001ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	ed87 0a01 	vstr	s0, [r7, #4]
	float left = robot.leftSpeed * dt;
 8001eb4:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001eb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001eba:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	edc7 7a05 	vstr	s15, [r7, #20]
	float right = robot.rightSpeed * dt;
 8001ec6:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001ec8:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ecc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a04 	vstr	s15, [r7, #16]

	float r =  (left + right)/2;
 8001ed8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001edc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eec:	edc7 7a03 	vstr	s15, [r7, #12]
	float alpha = (right - left)/ENTRAXE_MOTOR;
 8001ef0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ef4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001efc:	eddf 6a69 	vldr	s13, [pc, #420]	; 80020a4 <propulsion_updatePosition+0x1fc>
 8001f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f04:	edc7 7a02 	vstr	s15, [r7, #8]

	robot.position.x += r * cos(robot.angle + alpha/2);
 8001f08:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb3b 	bl	8000588 <__aeabi_f2d>
 8001f12:	4604      	mov	r4, r0
 8001f14:	460d      	mov	r5, r1
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7fe fb36 	bl	8000588 <__aeabi_f2d>
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	4689      	mov	r9, r1
 8001f20:	4b5f      	ldr	r3, [pc, #380]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001f22:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f26:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f2a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f2e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe fb25 	bl	8000588 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	ec43 2b10 	vmov	d0, r2, r3
 8001f46:	f006 fd8b 	bl	8008a60 <cos>
 8001f4a:	ec53 2b10 	vmov	r2, r3, d0
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f7fe fb71 	bl	8000638 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe f9b5 	bl	80002cc <__adddf3>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fe3d 	bl	8000be8 <__aeabi_d2f>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001f72:	6013      	str	r3, [r2, #0]
	robot.position.y += r * sin(robot.angle + alpha/2);
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fb05 	bl	8000588 <__aeabi_f2d>
 8001f7e:	4604      	mov	r4, r0
 8001f80:	460d      	mov	r5, r1
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7fe fb00 	bl	8000588 <__aeabi_f2d>
 8001f88:	4680      	mov	r8, r0
 8001f8a:	4689      	mov	r9, r1
 8001f8c:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001f8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f92:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f96:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa2:	ee17 0a90 	vmov	r0, s15
 8001fa6:	f7fe faef 	bl	8000588 <__aeabi_f2d>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	ec43 2b10 	vmov	d0, r2, r3
 8001fb2:	f006 fda5 	bl	8008b00 <sin>
 8001fb6:	ec53 2b10 	vmov	r2, r3, d0
 8001fba:	4640      	mov	r0, r8
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	f7fe fb3b 	bl	8000638 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe f97f 	bl	80002cc <__adddf3>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fe07 	bl	8000be8 <__aeabi_d2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001fde:	6053      	str	r3, [r2, #4]
	robot.angle += alpha;
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001fe2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001ff0:	edc3 7a02 	vstr	s15, [r3, #8]

	if (robot.angle > M_PI)
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fac5 	bl	8000588 <__aeabi_f2d>
 8001ffe:	a322      	add	r3, pc, #136	; (adr r3, 8002088 <propulsion_updatePosition+0x1e0>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fda8 	bl	8000b58 <__aeabi_dcmpgt>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d013      	beq.n	8002036 <propulsion_updatePosition+0x18e>
		robot.angle = robot.angle - M_TWOPI;
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fab8 	bl	8000588 <__aeabi_f2d>
 8002018:	a31d      	add	r3, pc, #116	; (adr r3, 8002090 <propulsion_updatePosition+0x1e8>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe f953 	bl	80002c8 <__aeabi_dsub>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f7fe fddd 	bl	8000be8 <__aeabi_d2f>
 800202e:	4603      	mov	r3, r0
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8002032:	6093      	str	r3, [r2, #8]
	else if (robot.angle < -M_PI)
		robot.angle = robot.angle + M_TWOPI;
}
 8002034:	e020      	b.n	8002078 <propulsion_updatePosition+0x1d0>
	else if (robot.angle < -M_PI)
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe faa4 	bl	8000588 <__aeabi_f2d>
 8002040:	a315      	add	r3, pc, #84	; (adr r3, 8002098 <propulsion_updatePosition+0x1f0>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe fd69 	bl	8000b1c <__aeabi_dcmplt>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d100      	bne.n	8002052 <propulsion_updatePosition+0x1aa>
}
 8002050:	e012      	b.n	8002078 <propulsion_updatePosition+0x1d0>
		robot.angle = robot.angle + M_TWOPI;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa96 	bl	8000588 <__aeabi_f2d>
 800205c:	a30c      	add	r3, pc, #48	; (adr r3, 8002090 <propulsion_updatePosition+0x1e8>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f7fe f933 	bl	80002cc <__adddf3>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	f7fe fdbb 	bl	8000be8 <__aeabi_d2f>
 8002072:	4603      	mov	r3, r0
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <propulsion_updatePosition+0x1f8>)
 8002076:	6093      	str	r3, [r2, #8]
}
 8002078:	bf00      	nop
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	54442d18 	.word	0x54442d18
 800208c:	400921fb 	.word	0x400921fb
 8002090:	54442d18 	.word	0x54442d18
 8002094:	401921fb 	.word	0x401921fb
 8002098:	54442d18 	.word	0x54442d18
 800209c:	c00921fb 	.word	0xc00921fb
 80020a0:	20000208 	.word	0x20000208
 80020a4:	43400000 	.word	0x43400000

080020a8 <propulsion_followBezier>:

void propulsion_followBezier(Bezier* b) {
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	ed2d 8b02 	vpush	{d8}
 80020b0:	b092      	sub	sp, #72	; 0x48
 80020b2:	af08      	add	r7, sp, #32
 80020b4:	6078      	str	r0, [r7, #4]
    float t = bezier_project(b, robot.position, 0.0001);
 80020b6:	4b7c      	ldr	r3, [pc, #496]	; (80022a8 <propulsion_followBezier+0x200>)
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80020c0:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 80022ac <propulsion_followBezier+0x204>
 80020c4:	eeb0 0a47 	vmov.f32	s0, s14
 80020c8:	eef0 0a67 	vmov.f32	s1, s15
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff faab 	bl	8001628 <bezier_project>
 80020d2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    Vector2 pointOnCurve = bezier_eval(b, t);
 80020d6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe ffeb 	bl	80010b6 <bezier_eval>
 80020e0:	eeb0 7a40 	vmov.f32	s14, s0
 80020e4:	eef0 7a60 	vmov.f32	s15, s1
 80020e8:	ed87 7a02 	vstr	s14, [r7, #8]
 80020ec:	edc7 7a03 	vstr	s15, [r7, #12]
    float dist = vector2_dist(robot.position, pointOnCurve);
 80020f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80020f8:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <propulsion_followBezier+0x200>)
 80020fa:	ed93 7a00 	vldr	s14, [r3]
 80020fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002102:	eeb0 1a46 	vmov.f32	s2, s12
 8002106:	eef0 1a66 	vmov.f32	s3, s13
 800210a:	eeb0 0a47 	vmov.f32	s0, s14
 800210e:	eef0 0a67 	vmov.f32	s1, s15
 8002112:	f000 f92a 	bl	800236a <vector2_dist>
 8002116:	ed87 0a08 	vstr	s0, [r7, #32]

    printf("t = %f, x: %.1fmm, y: %.1fmm, angle: %.1fdeg, dist: %fmm\r\n", t, robot.position.x, robot.position.y, robot.angle / M_PI / 2 * 360, dist);
 800211a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800211c:	f7fe fa34 	bl	8000588 <__aeabi_f2d>
 8002120:	4682      	mov	sl, r0
 8002122:	468b      	mov	fp, r1
 8002124:	4b60      	ldr	r3, [pc, #384]	; (80022a8 <propulsion_followBezier+0x200>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa2d 	bl	8000588 <__aeabi_f2d>
 800212e:	4604      	mov	r4, r0
 8002130:	460d      	mov	r5, r1
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <propulsion_followBezier+0x200>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa26 	bl	8000588 <__aeabi_f2d>
 800213c:	4680      	mov	r8, r0
 800213e:	4689      	mov	r9, r1
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <propulsion_followBezier+0x200>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fa1f 	bl	8000588 <__aeabi_f2d>
 800214a:	a353      	add	r3, pc, #332	; (adr r3, 8002298 <propulsion_followBezier+0x1f0>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe fb9c 	bl	800088c <__aeabi_ddiv>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002164:	f7fe fb92 	bl	800088c <__aeabi_ddiv>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <propulsion_followBezier+0x208>)
 8002176:	f7fe fa5f 	bl	8000638 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	ec43 2b18 	vmov	d8, r2, r3
 8002182:	6a38      	ldr	r0, [r7, #32]
 8002184:	f7fe fa00 	bl	8000588 <__aeabi_f2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002190:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002194:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002198:	e9cd 4500 	strd	r4, r5, [sp]
 800219c:	4652      	mov	r2, sl
 800219e:	465b      	mov	r3, fp
 80021a0:	4844      	ldr	r0, [pc, #272]	; (80022b4 <propulsion_followBezier+0x20c>)
 80021a2:	f004 fc19 	bl	80069d8 <iprintf>

    if (t > 0.99) {
 80021a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021a8:	f7fe f9ee 	bl	8000588 <__aeabi_f2d>
 80021ac:	a33c      	add	r3, pc, #240	; (adr r3, 80022a0 <propulsion_followBezier+0x1f8>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe fcd1 	bl	8000b58 <__aeabi_dcmpgt>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <propulsion_followBezier+0x122>
    	propulsion_setSpeeds(0, 0);
 80021bc:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80022b8 <propulsion_followBezier+0x210>
 80021c0:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80022b8 <propulsion_followBezier+0x210>
 80021c4:	f7ff fdf0 	bl	8001da8 <propulsion_setSpeeds>
 80021c8:	e05e      	b.n	8002288 <propulsion_followBezier+0x1e0>
    	return;
    }

    float k = bezier_curvature(b, t);
 80021ca:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff f96c 	bl	80014ac <bezier_curvature>
 80021d4:	ed87 0a07 	vstr	s0, [r7, #28]
    //let slow = 1/(1 + pow(abs(k), 2)*10000)
    float v = (100*t*(1-t) + 8 *(1-t) + 8*t) * 2 * 10;
 80021d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021dc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80022bc <propulsion_followBezier+0x214>
 80021e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002200:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002204:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002210:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002214:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002220:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002228:	edc7 7a06 	vstr	s15, [r7, #24]
    float v_g = v*(1-ENTRAXE_MOTOR*k/2);
 800222c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002230:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80022c0 <propulsion_followBezier+0x218>
 8002234:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002238:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800223c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002248:	ed97 7a06 	vldr	s14, [r7, #24]
 800224c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002250:	edc7 7a05 	vstr	s15, [r7, #20]
    float v_d = v*(1+ENTRAXE_MOTOR*k/2);
 8002254:	edd7 7a07 	vldr	s15, [r7, #28]
 8002258:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80022c0 <propulsion_followBezier+0x218>
 800225c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002260:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800226c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002270:	ed97 7a06 	vldr	s14, [r7, #24]
 8002274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002278:	edc7 7a04 	vstr	s15, [r7, #16]

    propulsion_setSpeeds(v_g, v_d);
 800227c:	edd7 0a04 	vldr	s1, [r7, #16]
 8002280:	ed97 0a05 	vldr	s0, [r7, #20]
 8002284:	f7ff fd90 	bl	8001da8 <propulsion_setSpeeds>
}
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	ecbd 8b02 	vpop	{d8}
 8002290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002294:	f3af 8000 	nop.w
 8002298:	54442d18 	.word	0x54442d18
 800229c:	400921fb 	.word	0x400921fb
 80022a0:	7ae147ae 	.word	0x7ae147ae
 80022a4:	3fefae14 	.word	0x3fefae14
 80022a8:	20000208 	.word	0x20000208
 80022ac:	38d1b717 	.word	0x38d1b717
 80022b0:	40768000 	.word	0x40768000
 80022b4:	08009d58 	.word	0x08009d58
 80022b8:	00000000 	.word	0x00000000
 80022bc:	42c80000 	.word	0x42c80000
 80022c0:	43400000 	.word	0x43400000

080022c4 <vector2_new>:
#include "vector2.h"


Vector2 vector2_new(float x, float y) {
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80022ce:	edc7 0a02 	vstr	s1, [r7, #8]
    Vector2 u = { x, y };
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	617b      	str	r3, [r7, #20]
    return u;
 80022da:	f107 0318 	add.w	r3, r7, #24
 80022de:	f107 0210 	add.w	r2, r7, #16
 80022e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	ee07 2a10 	vmov	s14, r2
 80022f2:	ee07 3a90 	vmov	s15, r3
}
 80022f6:	eeb0 0a47 	vmov.f32	s0, s14
 80022fa:	eef0 0a67 	vmov.f32	s1, s15
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <vector2_norm>:
void vector2_display(Vector2 u) {
    printf("{ x: %f, y: %f }\r\n", u.x, u.y);
}


float vector2_norm(Vector2 u) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	eeb0 7a40 	vmov.f32	s14, s0
 8002312:	eef0 7a60 	vmov.f32	s15, s1
 8002316:	ed87 7a00 	vstr	s14, [r7]
 800231a:	edc7 7a01 	vstr	s15, [r7, #4]
    return sqrt(u.x*u.x + u.y*u.y);
 800231e:	ed97 7a00 	vldr	s14, [r7]
 8002322:	edd7 7a00 	vldr	s15, [r7]
 8002326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800232a:	edd7 6a01 	vldr	s13, [r7, #4]
 800232e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233a:	ee17 0a90 	vmov	r0, s15
 800233e:	f7fe f923 	bl	8000588 <__aeabi_f2d>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	ec43 2b10 	vmov	d0, r2, r3
 800234a:	f006 fc2d 	bl	8008ba8 <sqrt>
 800234e:	ec53 2b10 	vmov	r2, r3, d0
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fc47 	bl	8000be8 <__aeabi_d2f>
 800235a:	4603      	mov	r3, r0
 800235c:	ee07 3a90 	vmov	s15, r3
}
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <vector2_dist>:
float vector2_angle(Vector2 u) {
    return atan2(u.y, u.x);
}


float vector2_dist(Vector2 u, Vector2 v) {
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	eeb0 6a40 	vmov.f32	s12, s0
 8002374:	eef0 6a60 	vmov.f32	s13, s1
 8002378:	eeb0 7a41 	vmov.f32	s14, s2
 800237c:	eef0 7a61 	vmov.f32	s15, s3
 8002380:	ed87 6a02 	vstr	s12, [r7, #8]
 8002384:	edc7 6a03 	vstr	s13, [r7, #12]
 8002388:	ed87 7a00 	vstr	s14, [r7]
 800238c:	edc7 7a01 	vstr	s15, [r7, #4]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 8002390:	ed97 7a00 	vldr	s14, [r7]
 8002394:	edd7 7a02 	vldr	s15, [r7, #8]
 8002398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239c:	edc7 7a04 	vstr	s15, [r7, #16]
 80023a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80023a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ac:	edc7 7a05 	vstr	s15, [r7, #20]
    return vector2_norm(diff);
 80023b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80023b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b8:	eeb0 0a47 	vmov.f32	s0, s14
 80023bc:	eef0 0a67 	vmov.f32	s1, s15
 80023c0:	f7ff ffa2 	bl	8002308 <vector2_norm>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
}
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <vector2_dist2>:


float vector2_dist2(Vector2 u, Vector2 v) {
 80023d2:	b480      	push	{r7}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	eeb0 6a40 	vmov.f32	s12, s0
 80023dc:	eef0 6a60 	vmov.f32	s13, s1
 80023e0:	eeb0 7a41 	vmov.f32	s14, s2
 80023e4:	eef0 7a61 	vmov.f32	s15, s3
 80023e8:	ed87 6a02 	vstr	s12, [r7, #8]
 80023ec:	edc7 6a03 	vstr	s13, [r7, #12]
 80023f0:	ed87 7a00 	vstr	s14, [r7]
 80023f4:	edc7 7a01 	vstr	s15, [r7, #4]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 80023f8:	ed97 7a00 	vldr	s14, [r7]
 80023fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002404:	edc7 7a04 	vstr	s15, [r7, #16]
 8002408:	ed97 7a01 	vldr	s14, [r7, #4]
 800240c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002414:	edc7 7a05 	vstr	s15, [r7, #20]
    return diff.x*diff.x + diff.y*diff.y;
 8002418:	ed97 7a04 	vldr	s14, [r7, #16]
 800241c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002424:	edd7 6a05 	vldr	s13, [r7, #20]
 8002428:	edd7 7a05 	vldr	s15, [r7, #20]
 800242c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002430:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002434:	eeb0 0a67 	vmov.f32	s0, s15
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <vector2_cross>:
float vector2_dot(Vector2 u, Vector2 v) {
    return u.x * v.x + u.y * v.y;
}


float vector2_cross(Vector2 u, Vector2 v) {
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	eeb0 6a40 	vmov.f32	s12, s0
 800244c:	eef0 6a60 	vmov.f32	s13, s1
 8002450:	eeb0 7a41 	vmov.f32	s14, s2
 8002454:	eef0 7a61 	vmov.f32	s15, s3
 8002458:	ed87 6a02 	vstr	s12, [r7, #8]
 800245c:	edc7 6a03 	vstr	s13, [r7, #12]
 8002460:	ed87 7a00 	vstr	s14, [r7]
 8002464:	edc7 7a01 	vstr	s15, [r7, #4]
    return u.x * v.y - u.y * v.x;
 8002468:	ed97 7a02 	vldr	s14, [r7, #8]
 800246c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002474:	edd7 6a03 	vldr	s13, [r7, #12]
 8002478:	edd7 7a00 	vldr	s15, [r7]
 800247c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002480:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002484:	eeb0 0a67 	vmov.f32	s0, s15
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a29      	ldr	r2, [pc, #164]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <MX_GPIO_Init+0xc4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin, GPIO_PIN_RESET);
 80024fe:	2200      	movs	r2, #0
 8002500:	f640 0107 	movw	r1, #2055	; 0x807
 8002504:	4815      	ldr	r0, [pc, #84]	; (800255c <MX_GPIO_Init+0xc8>)
 8002506:	f001 faf1 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2120      	movs	r1, #32
 800250e:	4814      	ldr	r0, [pc, #80]	; (8002560 <MX_GPIO_Init+0xcc>)
 8002510:	f001 faec 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin;
 8002514:	f640 0307 	movw	r3, #2055	; 0x807
 8002518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251a:	2301      	movs	r3, #1
 800251c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	4619      	mov	r1, r3
 800252c:	480b      	ldr	r0, [pc, #44]	; (800255c <MX_GPIO_Init+0xc8>)
 800252e:	f001 f949 	bl	80037c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002532:	2320      	movs	r3, #32
 8002534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	2301      	movs	r3, #1
 8002538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <MX_GPIO_Init+0xcc>)
 800254a:	f001 f93b 	bl	80037c4 <HAL_GPIO_Init>

}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40020800 	.word	0x40020800
 8002560:	40020000 	.word	0x40020000

08002564 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e00b      	b.n	800258e <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	1c4b      	adds	r3, r1, #1
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002580:	2201      	movs	r2, #1
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <_write+0x3c>)
 8002584:	f003 fa11 	bl	80059aa <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	dbef      	blt.n	8002576 <_write+0x12>
	}
	return len;
 8002596:	687b      	ldr	r3, [r7, #4]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200004ac 	.word	0x200004ac

080025a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025aa:	f000 ff63 	bl	8003474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ae:	f000 f85d 	bl	800266c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b2:	f7ff ff6f 	bl	8002494 <MX_GPIO_Init>
  MX_TIM1_Init();
 80025b6:	f000 fa29 	bl	8002a0c <MX_TIM1_Init>
  MX_TIM8_Init();
 80025ba:	f000 fc27 	bl	8002e0c <MX_TIM8_Init>
  MX_TIM11_Init();
 80025be:	f000 fcc5 	bl	8002f4c <MX_TIM11_Init>
  MX_TIM3_Init();
 80025c2:	f000 fac9 	bl	8002b58 <MX_TIM3_Init>
  MX_TIM7_Init();
 80025c6:	f000 fbeb 	bl	8002da0 <MX_TIM7_Init>
  MX_TIM2_Init();
 80025ca:	f000 fa77 	bl	8002abc <MX_TIM2_Init>
  MX_TIM6_Init();
 80025ce:	f000 fbb1 	bl	8002d34 <MX_TIM6_Init>
  MX_TIM4_Init();
 80025d2:	f000 fb15 	bl	8002c00 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80025d6:	f000 feb1 	bl	800333c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80025da:	f000 fb5d 	bl	8002c98 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim5);
 80025de:	4819      	ldr	r0, [pc, #100]	; (8002644 <main+0xa0>)
 80025e0:	f002 f8a8 	bl	8004734 <HAL_TIM_Base_Start_IT>

  printf("Initializing propulsion system.\r\n");
 80025e4:	4818      	ldr	r0, [pc, #96]	; (8002648 <main+0xa4>)
 80025e6:	f004 fa7d 	bl	8006ae4 <puts>
  propulsion_initialize();
 80025ea:	f7ff fb95 	bl	8001d18 <propulsion_initialize>

  printf("Enabling propulsion system.\r\n");
 80025ee:	4817      	ldr	r0, [pc, #92]	; (800264c <main+0xa8>)
 80025f0:	f004 fa78 	bl	8006ae4 <puts>
  propulsion_enableMotors();
 80025f4:	f7ff fbc8 	bl	8001d88 <propulsion_enableMotors>

  HAL_Delay(100);
 80025f8:	2064      	movs	r0, #100	; 0x64
 80025fa:	f000 ffad 	bl	8003558 <HAL_Delay>

  updateRobotPosition();
 80025fe:	f7ff fa3b 	bl	8001a78 <updateRobotPosition>

  //Bezier* b = bezier_new(0, 0, 1000, 0, 0, 1000, 1000, 1000, 30);
  Bezier* b = bezier_new(125, 849, 799, 843, 1698, 1654, 1698, 202, 30);
 8002602:	201e      	movs	r0, #30
 8002604:	eddf 3a12 	vldr	s7, [pc, #72]	; 8002650 <main+0xac>
 8002608:	ed9f 3a12 	vldr	s6, [pc, #72]	; 8002654 <main+0xb0>
 800260c:	eddf 2a12 	vldr	s5, [pc, #72]	; 8002658 <main+0xb4>
 8002610:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8002654 <main+0xb0>
 8002614:	eddf 1a11 	vldr	s3, [pc, #68]	; 800265c <main+0xb8>
 8002618:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8002660 <main+0xbc>
 800261c:	eddf 0a11 	vldr	s1, [pc, #68]	; 8002664 <main+0xc0>
 8002620:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002668 <main+0xc4>
 8002624:	f7fe fcac 	bl	8000f80 <bezier_new>
 8002628:	6078      	str	r0, [r7, #4]
  setRobotPosition(125, 849);
 800262a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002664 <main+0xc0>
 800262e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002668 <main+0xc4>
 8002632:	f7ff fb5b 	bl	8001cec <setRobotPosition>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]

  while (1) {
	  //updateRobotPosition();

	  propulsion_followBezier(b);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fd34 	bl	80020a8 <propulsion_followBezier>
 8002640:	e7fb      	b.n	800263a <main+0x96>
 8002642:	bf00      	nop
 8002644:	200002b4 	.word	0x200002b4
 8002648:	08009d94 	.word	0x08009d94
 800264c:	08009db8 	.word	0x08009db8
 8002650:	434a0000 	.word	0x434a0000
 8002654:	44d44000 	.word	0x44d44000
 8002658:	44cec000 	.word	0x44cec000
 800265c:	4452c000 	.word	0x4452c000
 8002660:	4447c000 	.word	0x4447c000
 8002664:	44544000 	.word	0x44544000
 8002668:	42fa0000 	.word	0x42fa0000

0800266c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b094      	sub	sp, #80	; 0x50
 8002670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	2234      	movs	r2, #52	; 0x34
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f003 fc90 	bl	8005fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <SystemClock_Config+0xe0>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a2c      	ldr	r2, [pc, #176]	; (800274c <SystemClock_Config+0xe0>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <SystemClock_Config+0xe0>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ac:	2300      	movs	r3, #0
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <SystemClock_Config+0xe4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <SystemClock_Config+0xe4>)
 80026b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <SystemClock_Config+0xe4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026d0:	2310      	movs	r3, #16
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d4:	2302      	movs	r3, #2
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026d8:	2300      	movs	r3, #0
 80026da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80026dc:	2310      	movs	r3, #16
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80026e0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80026e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e6:	2302      	movs	r3, #2
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026ea:	2302      	movs	r3, #2
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026ee:	2302      	movs	r3, #2
 80026f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 fd2e 	bl	8004158 <HAL_RCC_OscConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002702:	f000 f827 	bl	8002754 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002706:	f001 fa0b 	bl	8003b20 <HAL_PWREx_EnableOverDrive>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002710:	f000 f820 	bl	8002754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002714:	230f      	movs	r3, #15
 8002716:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002718:	2302      	movs	r3, #2
 800271a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002720:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	2105      	movs	r1, #5
 8002732:	4618      	mov	r0, r3
 8002734:	f001 fa44 	bl	8003bc0 <HAL_RCC_ClockConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800273e:	f000 f809 	bl	8002754 <Error_Handler>
  }
}
 8002742:	bf00      	nop
 8002744:	3750      	adds	r7, #80	; 0x50
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000

08002754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("A runtime error occurred.\r\n");
 800275c:	4801      	ldr	r0, [pc, #4]	; (8002764 <Error_Handler+0x10>)
 800275e:	f004 f9c1 	bl	8006ae4 <puts>
  while (1) {
 8002762:	e7fe      	b.n	8002762 <Error_Handler+0xe>
 8002764:	08009dd8 	.word	0x08009dd8

08002768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_MspInit+0x4c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <HAL_MspInit+0x4c>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_MspInit+0x4c>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_MspInit+0x4c>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <HAL_MspInit+0x4c>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_MspInit+0x4c>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <NMI_Handler+0x4>
	...

080027c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("A hard fault occurred.\r\n");
 80027c4:	4801      	ldr	r0, [pc, #4]	; (80027cc <HardFault_Handler+0xc>)
 80027c6:	f004 f98d 	bl	8006ae4 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <HardFault_Handler+0xa>
 80027cc:	08009df4 	.word	0x08009df4

080027d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  printf("A memory management fault occurred.\r\n");
 80027d4:	4801      	ldr	r0, [pc, #4]	; (80027dc <MemManage_Handler+0xc>)
 80027d6:	f004 f985 	bl	8006ae4 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <MemManage_Handler+0xa>
 80027dc:	08009e0c 	.word	0x08009e0c

080027e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <BusFault_Handler+0x4>

080027e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <UsageFault_Handler+0x4>

080027ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281a:	f000 fe7d 	bl	8003518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <TIM2_IRQHandler+0x10>)
 800282a:	f002 f9bb 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000041c 	.word	0x2000041c

08002838 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <TIM4_IRQHandler+0x10>)
 800283e:	f002 f9b1 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000026c 	.word	0x2000026c

0800284c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  propulsion_updatePosition(0.001);
 8002850:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002864 <TIM5_IRQHandler+0x18>
 8002854:	f7ff fb28 	bl	8001ea8 <propulsion_updatePosition>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002858:	4803      	ldr	r0, [pc, #12]	; (8002868 <TIM5_IRQHandler+0x1c>)
 800285a:	f002 f9a3 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	3a83126f 	.word	0x3a83126f
 8002868:	200002b4 	.word	0x200002b4

0800286c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <TIM6_DAC_IRQHandler+0x10>)
 8002872:	f002 f997 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000038c 	.word	0x2000038c

08002880 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <TIM7_IRQHandler+0x10>)
 8002886:	f002 f98d 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000464 	.word	0x20000464

08002894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
	return 1;
 8002898:	2301      	movs	r3, #1
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <_kill>:

int _kill(int pid, int sig)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028ae:	f003 fb45 	bl	8005f3c <__errno>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2216      	movs	r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
	return -1;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_exit>:

void _exit (int status)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ffe7 	bl	80028a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028d6:	e7fe      	b.n	80028d6 <_exit+0x12>

080028d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e00a      	b.n	8002900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ea:	f3af 8000 	nop.w
 80028ee:	4601      	mov	r1, r0
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	60ba      	str	r2, [r7, #8]
 80028f6:	b2ca      	uxtb	r2, r1
 80028f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3301      	adds	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	429a      	cmp	r2, r3
 8002906:	dbf0      	blt.n	80028ea <_read+0x12>
	}

return len;
 8002908:	687b      	ldr	r3, [r7, #4]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
	return -1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800293a:	605a      	str	r2, [r3, #4]
	return 0;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_isatty>:

int _isatty(int file)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
	return 1;
 8002952:	2301      	movs	r3, #1
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
	return 0;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <_sbrk+0x5c>)
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <_sbrk+0x60>)
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <_sbrk+0x64>)
 800299a:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <_sbrk+0x68>)
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <_sbrk+0x64>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d207      	bcs.n	80029bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ac:	f003 fac6 	bl	8005f3c <__errno>
 80029b0:	4603      	mov	r3, r0
 80029b2:	220c      	movs	r2, #12
 80029b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ba:	e009      	b.n	80029d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <_sbrk+0x64>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <_sbrk+0x64>)
 80029cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20020000 	.word	0x20020000
 80029dc:	00000400 	.word	0x00000400
 80029e0:	200001fc 	.word	0x200001fc
 80029e4:	20000508 	.word	0x20000508

080029e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <SystemInit+0x20>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <SystemInit+0x20>)
 80029f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fac0 	bl	8005fa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <MX_TIM1_Init+0xac>)
 8002a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a54:	2303      	movs	r3, #3
 8002a56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002a64:	230a      	movs	r3, #10
 8002a66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a80:	f001 ffea 	bl	8004a58 <HAL_TIM_Encoder_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002a8a:	f7ff fe63 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4806      	ldr	r0, [pc, #24]	; (8002ab4 <MX_TIM1_Init+0xa8>)
 8002a9c:	f002 fe56 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002aa6:	f7ff fe55 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	3730      	adds	r7, #48	; 0x30
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200003d4 	.word	0x200003d4
 8002ab8:	40010000 	.word	0x40010000

08002abc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac2:	f107 0308 	add.w	r3, r7, #8
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ade:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002ae2:	f640 227e 	movw	r2, #2686	; 0xa7e
 8002ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b02:	4814      	ldr	r0, [pc, #80]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002b04:	f001 fdc6 	bl	8004694 <HAL_TIM_Base_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b0e:	f7ff fe21 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b18:	f107 0308 	add.w	r3, r7, #8
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	480d      	ldr	r0, [pc, #52]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002b20:	f002 fa0a 	bl	8004f38 <HAL_TIM_ConfigClockSource>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b2a:	f7ff fe13 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b36:	463b      	mov	r3, r7
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4806      	ldr	r0, [pc, #24]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002b3c:	f002 fe06 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b46:	f7ff fe05 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000041c 	.word	0x2000041c

08002b58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	2224      	movs	r2, #36	; 0x24
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fa1a 	bl	8005fa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b74:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <MX_TIM3_Init+0xa0>)
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <MX_TIM3_Init+0xa4>)
 8002b78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <MX_TIM3_Init+0xa0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <MX_TIM3_Init+0xa0>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <MX_TIM3_Init+0xa0>)
 8002b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_TIM3_Init+0xa0>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b94:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <MX_TIM3_Init+0xa0>)
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	480c      	ldr	r0, [pc, #48]	; (8002bf8 <MX_TIM3_Init+0xa0>)
 8002bc6:	f001 ff47 	bl	8004a58 <HAL_TIM_Encoder_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002bd0:	f7ff fdc0 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <MX_TIM3_Init+0xa0>)
 8002be2:	f002 fdb3 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002bec:	f7ff fdb2 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	3730      	adds	r7, #48	; 0x30
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200002fc 	.word	0x200002fc
 8002bfc:	40000400 	.word	0x40000400

08002c00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c14:	463b      	mov	r3, r7
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <MX_TIM4_Init+0x94>)
 8002c20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c30:	225a      	movs	r2, #90	; 0x5a
 8002c32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c40:	4813      	ldr	r0, [pc, #76]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c42:	f001 fd27 	bl	8004694 <HAL_TIM_Base_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002c4c:	f7ff fd82 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c5e:	f002 f96b 	bl	8004f38 <HAL_TIM_ConfigClockSource>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002c68:	f7ff fd74 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_TIM4_Init+0x90>)
 8002c7a:	f002 fd67 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002c84:	f7ff fd66 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2000026c 	.word	0x2000026c
 8002c94:	40000800 	.word	0x40000800

08002c98 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cac:	463b      	mov	r3, r7
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <MX_TIM5_Init+0x94>)
 8002cb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90000;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002cc8:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <MX_TIM5_Init+0x98>)
 8002cca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002cd8:	4813      	ldr	r0, [pc, #76]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002cda:	f001 fcdb 	bl	8004694 <HAL_TIM_Base_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002ce4:	f7ff fd36 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002cf6:	f002 f91f 	bl	8004f38 <HAL_TIM_ConfigClockSource>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002d00:	f7ff fd28 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_TIM5_Init+0x90>)
 8002d12:	f002 fd1b 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8002d1c:	f7ff fd1a 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200002b4 	.word	0x200002b4
 8002d2c:	40000c00 	.word	0x40000c00
 8002d30:	00015f90 	.word	0x00015f90

08002d34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <MX_TIM6_Init+0x64>)
 8002d44:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8002d48:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <MX_TIM6_Init+0x64>)
 8002d4a:	f242 3227 	movw	r2, #8999	; 0x2327
 8002d4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <MX_TIM6_Init+0x64>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <MX_TIM6_Init+0x64>)
 8002d58:	2263      	movs	r2, #99	; 0x63
 8002d5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <MX_TIM6_Init+0x64>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d62:	480d      	ldr	r0, [pc, #52]	; (8002d98 <MX_TIM6_Init+0x64>)
 8002d64:	f001 fc96 	bl	8004694 <HAL_TIM_Base_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002d6e:	f7ff fcf1 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4806      	ldr	r0, [pc, #24]	; (8002d98 <MX_TIM6_Init+0x64>)
 8002d80:	f002 fce4 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002d8a:	f7ff fce3 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	2000038c 	.word	0x2000038c
 8002d9c:	40001000 	.word	0x40001000

08002da0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da6:	463b      	mov	r3, r7
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <MX_TIM7_Init+0x64>)
 8002db0:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <MX_TIM7_Init+0x68>)
 8002db2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <MX_TIM7_Init+0x64>)
 8002db6:	f242 3227 	movw	r2, #8999	; 0x2327
 8002dba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <MX_TIM7_Init+0x64>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <MX_TIM7_Init+0x64>)
 8002dc4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002dc8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_TIM7_Init+0x64>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002dd0:	480c      	ldr	r0, [pc, #48]	; (8002e04 <MX_TIM7_Init+0x64>)
 8002dd2:	f001 fc5f 	bl	8004694 <HAL_TIM_Base_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002ddc:	f7ff fcba 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002de8:	463b      	mov	r3, r7
 8002dea:	4619      	mov	r1, r3
 8002dec:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_TIM7_Init+0x64>)
 8002dee:	f002 fcad 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002df8:	f7ff fcac 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000464 	.word	0x20000464
 8002e08:	40001400 	.word	0x40001400

08002e0c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b096      	sub	sp, #88	; 0x58
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	615a      	str	r2, [r3, #20]
 8002e3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	2220      	movs	r2, #32
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 f8ab 	bl	8005fa0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e4c:	4a3e      	ldr	r2, [pc, #248]	; (8002f48 <MX_TIM8_Init+0x13c>)
 8002e4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8002e50:	4b3c      	ldr	r3, [pc, #240]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e52:	22b3      	movs	r2, #179	; 0xb3
 8002e54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8002e5c:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e64:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e70:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e76:	4833      	ldr	r0, [pc, #204]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e78:	f001 fc0c 	bl	8004694 <HAL_TIM_Base_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002e82:	f7ff fc67 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e90:	4619      	mov	r1, r3
 8002e92:	482c      	ldr	r0, [pc, #176]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002e94:	f002 f850 	bl	8004f38 <HAL_TIM_ConfigClockSource>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002e9e:	f7ff fc59 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ea2:	4828      	ldr	r0, [pc, #160]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002ea4:	f001 fcb6 	bl	8004814 <HAL_TIM_PWM_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002eae:	f7ff fc51 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4820      	ldr	r0, [pc, #128]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002ec2:	f002 fc43 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002ecc:	f7ff fc42 	bl	8002754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed0:	2360      	movs	r3, #96	; 0x60
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8002ed4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	220c      	movs	r2, #12
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4814      	ldr	r0, [pc, #80]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002ef4:	f001 ff5e 	bl	8004db4 <HAL_TIM_PWM_ConfigChannel>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8002efe:	f7ff fc29 	bl	8002754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4807      	ldr	r0, [pc, #28]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002f26:	f002 fc8d 	bl	8005844 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002f30:	f7ff fc10 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002f34:	4803      	ldr	r0, [pc, #12]	; (8002f44 <MX_TIM8_Init+0x138>)
 8002f36:	f000 f99d 	bl	8003274 <HAL_TIM_MspPostInit>

}
 8002f3a:	bf00      	nop
 8002f3c:	3758      	adds	r7, #88	; 0x58
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000224 	.word	0x20000224
 8002f48:	40010400 	.word	0x40010400

08002f4c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
 8002f60:	615a      	str	r2, [r3, #20]
 8002f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002f64:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002f66:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <MX_TIM11_Init+0x98>)
 8002f68:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002f6c:	22b3      	movs	r2, #179	; 0xb3
 8002f6e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f7c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002f8a:	4815      	ldr	r0, [pc, #84]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002f8c:	f001 fb82 	bl	8004694 <HAL_TIM_Base_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002f96:	f7ff fbdd 	bl	8002754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002f9a:	4811      	ldr	r0, [pc, #68]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002f9c:	f001 fc3a 	bl	8004814 <HAL_TIM_PWM_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002fa6:	f7ff fbd5 	bl	8002754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002faa:	2360      	movs	r3, #96	; 0x60
 8002fac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002fc2:	f001 fef7 	bl	8004db4 <HAL_TIM_PWM_ConfigChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002fcc:	f7ff fbc2 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002fd0:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <MX_TIM11_Init+0x94>)
 8002fd2:	f000 f94f 	bl	8003274 <HAL_TIM_MspPostInit>

}
 8002fd6:	bf00      	nop
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000344 	.word	0x20000344
 8002fe4:	40014800 	.word	0x40014800

08002fe8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 031c 	add.w	r3, r7, #28
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a32      	ldr	r2, [pc, #200]	; (80030d0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d12d      	bne.n	8003066 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	4a30      	ldr	r2, [pc, #192]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6453      	str	r3, [r2, #68]	; 0x44
 800301a:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003042:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003048:	2302      	movs	r3, #2
 800304a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003054:	2301      	movs	r3, #1
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	4619      	mov	r1, r3
 800305e:	481e      	ldr	r0, [pc, #120]	; (80030d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003060:	f000 fbb0 	bl	80037c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003064:	e030      	b.n	80030c8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <HAL_TIM_Encoder_MspInit+0xf4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d12b      	bne.n	80030c8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	6413      	str	r3, [r2, #64]	; 0x40
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4a0f      	ldr	r2, [pc, #60]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6313      	str	r3, [r2, #48]	; 0x30
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <HAL_TIM_Encoder_MspInit+0xec>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030a8:	23c0      	movs	r3, #192	; 0xc0
 80030aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030b8:	2302      	movs	r3, #2
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	4619      	mov	r1, r3
 80030c2:	4805      	ldr	r0, [pc, #20]	; (80030d8 <HAL_TIM_Encoder_MspInit+0xf0>)
 80030c4:	f000 fb7e 	bl	80037c4 <HAL_GPIO_Init>
}
 80030c8:	bf00      	nop
 80030ca:	3730      	adds	r7, #48	; 0x30
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40020000 	.word	0x40020000
 80030dc:	40000400 	.word	0x40000400

080030e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d116      	bne.n	8003120 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a57      	ldr	r2, [pc, #348]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b55      	ldr	r3, [pc, #340]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	201c      	movs	r0, #28
 8003114:	f000 fb1f 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003118:	201c      	movs	r0, #28
 800311a:	f000 fb38 	bl	800378e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800311e:	e096      	b.n	800324e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a4d      	ldr	r2, [pc, #308]	; (800325c <HAL_TIM_Base_MspInit+0x17c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d116      	bne.n	8003158 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
 800312e:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a49      	ldr	r2, [pc, #292]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	623b      	str	r3, [r7, #32]
 8003144:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	201e      	movs	r0, #30
 800314c:	f000 fb03 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003150:	201e      	movs	r0, #30
 8003152:	f000 fb1c 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 8003156:	e07a      	b.n	800324e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a40      	ldr	r2, [pc, #256]	; (8003260 <HAL_TIM_Base_MspInit+0x180>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d116      	bne.n	8003190 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	4b3c      	ldr	r3, [pc, #240]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b39      	ldr	r3, [pc, #228]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	2032      	movs	r0, #50	; 0x32
 8003184:	f000 fae7 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003188:	2032      	movs	r0, #50	; 0x32
 800318a:	f000 fb00 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 800318e:	e05e      	b.n	800324e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a33      	ldr	r2, [pc, #204]	; (8003264 <HAL_TIM_Base_MspInit+0x184>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d116      	bne.n	80031c8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 80031a4:	f043 0310 	orr.w	r3, r3, #16
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	2036      	movs	r0, #54	; 0x36
 80031bc:	f000 facb 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031c0:	2036      	movs	r0, #54	; 0x36
 80031c2:	f000 fae4 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 80031c6:	e042      	b.n	800324e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM7)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <HAL_TIM_Base_MspInit+0x188>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d116      	bne.n	8003200 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 80031dc:	f043 0320 	orr.w	r3, r3, #32
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2102      	movs	r1, #2
 80031f2:	2037      	movs	r0, #55	; 0x37
 80031f4:	f000 faaf 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031f8:	2037      	movs	r0, #55	; 0x37
 80031fa:	f000 fac8 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 80031fe:	e026      	b.n	800324e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM8)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <HAL_TIM_Base_MspInit+0x18c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10e      	bne.n	8003228 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	6453      	str	r3, [r2, #68]	; 0x44
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
}
 8003226:	e012      	b.n	800324e <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM11)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a10      	ldr	r2, [pc, #64]	; (8003270 <HAL_TIM_Base_MspInit+0x190>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d10d      	bne.n	800324e <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 800323c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003240:	6453      	str	r3, [r2, #68]	; 0x44
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_TIM_Base_MspInit+0x178>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
}
 800324e:	bf00      	nop
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40001000 	.word	0x40001000
 8003268:	40001400 	.word	0x40001400
 800326c:	40010400 	.word	0x40010400
 8003270:	40014800 	.word	0x40014800

08003274 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <HAL_TIM_MspPostInit+0xb4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d11f      	bne.n	80032d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_TIM_MspPostInit+0xb8>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_TIM_MspPostInit+0xb8>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_TIM_MspPostInit+0xb8>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032c4:	2303      	movs	r3, #3
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	4818      	ldr	r0, [pc, #96]	; (8003330 <HAL_TIM_MspPostInit+0xbc>)
 80032d0:	f000 fa78 	bl	80037c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80032d4:	e023      	b.n	800331e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_TIM_MspPostInit+0xc0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d11e      	bne.n	800331e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_TIM_MspPostInit+0xb8>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_TIM_MspPostInit+0xb8>)
 80032ea:	f043 0302 	orr.w	r3, r3, #2
 80032ee:	6313      	str	r3, [r2, #48]	; 0x30
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_TIM_MspPostInit+0xb8>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800330e:	2303      	movs	r3, #3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	4807      	ldr	r0, [pc, #28]	; (8003338 <HAL_TIM_MspPostInit+0xc4>)
 800331a:	f000 fa53 	bl	80037c4 <HAL_GPIO_Init>
}
 800331e:	bf00      	nop
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40010400 	.word	0x40010400
 800332c:	40023800 	.word	0x40023800
 8003330:	40020800 	.word	0x40020800
 8003334:	40014800 	.word	0x40014800
 8003338:	40020400 	.word	0x40020400

0800333c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <MX_USART2_UART_Init+0x50>)
 8003344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 8003348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800334c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 8003362:	220c      	movs	r2, #12
 8003364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <MX_USART2_UART_Init+0x4c>)
 8003374:	f002 facc 	bl	8005910 <HAL_UART_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800337e:	f7ff f9e9 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200004ac 	.word	0x200004ac
 800338c:	40004400 	.word	0x40004400

08003390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <HAL_UART_MspInit+0x84>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d12b      	bne.n	800340a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	4b18      	ldr	r3, [pc, #96]	; (8003418 <HAL_UART_MspInit+0x88>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a17      	ldr	r2, [pc, #92]	; (8003418 <HAL_UART_MspInit+0x88>)
 80033bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_UART_MspInit+0x88>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_UART_MspInit+0x88>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a10      	ldr	r2, [pc, #64]	; (8003418 <HAL_UART_MspInit+0x88>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_UART_MspInit+0x88>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033ea:	230c      	movs	r3, #12
 80033ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f6:	2303      	movs	r3, #3
 80033f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033fa:	2307      	movs	r3, #7
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	f107 0314 	add.w	r3, r7, #20
 8003402:	4619      	mov	r1, r3
 8003404:	4805      	ldr	r0, [pc, #20]	; (800341c <HAL_UART_MspInit+0x8c>)
 8003406:	f000 f9dd 	bl	80037c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800340a:	bf00      	nop
 800340c:	3728      	adds	r7, #40	; 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40004400 	.word	0x40004400
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000

08003420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003458 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003426:	490e      	ldr	r1, [pc, #56]	; (8003460 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800342c:	e002      	b.n	8003434 <LoopCopyDataInit>

0800342e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800342e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003432:	3304      	adds	r3, #4

08003434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003438:	d3f9      	bcc.n	800342e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800343c:	4c0b      	ldr	r4, [pc, #44]	; (800346c <LoopFillZerobss+0x26>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003440:	e001      	b.n	8003446 <LoopFillZerobss>

08003442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003444:	3204      	adds	r2, #4

08003446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003448:	d3fb      	bcc.n	8003442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800344a:	f7ff facd 	bl	80029e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800344e:	f002 fd7b 	bl	8005f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003452:	f7ff f8a7 	bl	80025a4 <main>
  bx  lr    
 8003456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003458:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800345c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003460:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003464:	0800a418 	.word	0x0800a418
  ldr r2, =_sbss
 8003468:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800346c:	20000504 	.word	0x20000504

08003470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003470:	e7fe      	b.n	8003470 <ADC_IRQHandler>
	...

08003474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_Init+0x40>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_Init+0x40>)
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_Init+0x40>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <HAL_Init+0x40>)
 800348a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800348e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_Init+0x40>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <HAL_Init+0x40>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800349c:	2003      	movs	r0, #3
 800349e:	f000 f94f 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034a2:	2000      	movs	r0, #0
 80034a4:	f000 f808 	bl	80034b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034a8:	f7ff f95e 	bl	8002768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00

080034b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_InitTick+0x54>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_InitTick+0x58>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f967 	bl	80037aa <HAL_SYSTICK_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00e      	b.n	8003504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b0f      	cmp	r3, #15
 80034ea:	d80a      	bhi.n	8003502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ec:	2200      	movs	r2, #0
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f4:	f000 f92f 	bl	8003756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034f8:	4a06      	ldr	r2, [pc, #24]	; (8003514 <HAL_InitTick+0x5c>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000000 	.word	0x20000000
 8003510:	20000008 	.word	0x20000008
 8003514:	20000004 	.word	0x20000004

08003518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_IncTick+0x20>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_IncTick+0x24>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4413      	add	r3, r2
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_IncTick+0x24>)
 800352a:	6013      	str	r3, [r2, #0]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000008 	.word	0x20000008
 800353c:	200004f0 	.word	0x200004f0

08003540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return uwTick;
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <HAL_GetTick+0x14>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	200004f0 	.word	0x200004f0

08003558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7ff ffee 	bl	8003540 <HAL_GetTick>
 8003564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003570:	d005      	beq.n	800357e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_Delay+0x44>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800357e:	bf00      	nop
 8003580:	f7ff ffde 	bl	8003540 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d8f7      	bhi.n	8003580 <HAL_Delay+0x28>
  {
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000008 	.word	0x20000008

080035a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d2:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	60d3      	str	r3, [r2, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db0b      	blt.n	800362e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <__NVIC_EnableIRQ+0x38>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2001      	movs	r0, #1
 8003626:	fa00 f202 	lsl.w	r2, r0, r2
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	; (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	; (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf28      	it	cs
 80036b2:	2304      	movcs	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b03      	subs	r3, #3
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
         );
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	; 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800370c:	d301      	bcc.n	8003712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370e:	2301      	movs	r3, #1
 8003710:	e00f      	b.n	8003732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <SysTick_Config+0x40>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371a:	210f      	movs	r1, #15
 800371c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003720:	f7ff ff8e 	bl	8003640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <SysTick_Config+0x40>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <SysTick_Config+0x40>)
 800372c:	2207      	movs	r2, #7
 800372e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000e010 	.word	0xe000e010

08003740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff29 	bl	80035a0 <__NVIC_SetPriorityGrouping>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003768:	f7ff ff3e 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 800376c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7ff ff8e 	bl	8003694 <NVIC_EncodePriority>
 8003778:	4602      	mov	r2, r0
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff5d 	bl	8003640 <__NVIC_SetPriority>
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff31 	bl	8003604 <__NVIC_EnableIRQ>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffa2 	bl	80036fc <SysTick_Config>
 80037b8:	4603      	mov	r3, r0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e165      	b.n	8003aac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f040 8154 	bne.w	8003aa6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d005      	beq.n	8003816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003812:	2b02      	cmp	r3, #2
 8003814:	d130      	bne.n	8003878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 0201 	and.w	r2, r3, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d017      	beq.n	80038b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d123      	bne.n	8003908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	220f      	movs	r2, #15
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	08da      	lsrs	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3208      	adds	r2, #8
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	2203      	movs	r2, #3
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0203 	and.w	r2, r3, #3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80ae 	beq.w	8003aa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <HAL_GPIO_Init+0x300>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	4a5c      	ldr	r2, [pc, #368]	; (8003ac4 <HAL_GPIO_Init+0x300>)
 8003954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003958:	6453      	str	r3, [r2, #68]	; 0x44
 800395a:	4b5a      	ldr	r3, [pc, #360]	; (8003ac4 <HAL_GPIO_Init+0x300>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003966:	4a58      	ldr	r2, [pc, #352]	; (8003ac8 <HAL_GPIO_Init+0x304>)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4f      	ldr	r2, [pc, #316]	; (8003acc <HAL_GPIO_Init+0x308>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d025      	beq.n	80039de <HAL_GPIO_Init+0x21a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4e      	ldr	r2, [pc, #312]	; (8003ad0 <HAL_GPIO_Init+0x30c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <HAL_GPIO_Init+0x216>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4d      	ldr	r2, [pc, #308]	; (8003ad4 <HAL_GPIO_Init+0x310>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d019      	beq.n	80039d6 <HAL_GPIO_Init+0x212>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4c      	ldr	r2, [pc, #304]	; (8003ad8 <HAL_GPIO_Init+0x314>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0x20e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4b      	ldr	r2, [pc, #300]	; (8003adc <HAL_GPIO_Init+0x318>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00d      	beq.n	80039ce <HAL_GPIO_Init+0x20a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4a      	ldr	r2, [pc, #296]	; (8003ae0 <HAL_GPIO_Init+0x31c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_GPIO_Init+0x206>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a49      	ldr	r2, [pc, #292]	; (8003ae4 <HAL_GPIO_Init+0x320>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_GPIO_Init+0x202>
 80039c2:	2306      	movs	r3, #6
 80039c4:	e00c      	b.n	80039e0 <HAL_GPIO_Init+0x21c>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e00a      	b.n	80039e0 <HAL_GPIO_Init+0x21c>
 80039ca:	2305      	movs	r3, #5
 80039cc:	e008      	b.n	80039e0 <HAL_GPIO_Init+0x21c>
 80039ce:	2304      	movs	r3, #4
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x21c>
 80039d2:	2303      	movs	r3, #3
 80039d4:	e004      	b.n	80039e0 <HAL_GPIO_Init+0x21c>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_Init+0x21c>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_GPIO_Init+0x21c>
 80039de:	2300      	movs	r3, #0
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f002 0203 	and.w	r2, r2, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4093      	lsls	r3, r2
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f0:	4935      	ldr	r1, [pc, #212]	; (8003ac8 <HAL_GPIO_Init+0x304>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039fe:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a22:	4a31      	ldr	r2, [pc, #196]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a28:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a4c:	4a26      	ldr	r2, [pc, #152]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a76:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa0:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	f67f ae96 	bls.w	80037e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3724      	adds	r7, #36	; 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40021400 	.word	0x40021400
 8003ae4:	40021800 	.word	0x40021800
 8003ae8:	40013c00 	.word	0x40013c00

08003aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
 8003af8:	4613      	mov	r3, r2
 8003afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003afc:	787b      	ldrb	r3, [r7, #1]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b02:	887a      	ldrh	r2, [r7, #2]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b08:	e003      	b.n	8003b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b0a:	887b      	ldrh	r3, [r7, #2]
 8003b0c:	041a      	lsls	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	619a      	str	r2, [r3, #24]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b4c:	f7ff fcf8 	bl	8003540 <HAL_GetTick>
 8003b50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b52:	e009      	b.n	8003b68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b54:	f7ff fcf4 	bl	8003540 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b62:	d901      	bls.n	8003b68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e01f      	b.n	8003ba8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d1ee      	bne.n	8003b54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b7c:	f7ff fce0 	bl	8003540 <HAL_GetTick>
 8003b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b82:	e009      	b.n	8003b98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b84:	f7ff fcdc 	bl	8003540 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b92:	d901      	bls.n	8003b98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e007      	b.n	8003ba8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba4:	d1ee      	bne.n	8003b84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	420e0040 	.word	0x420e0040
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	420e0044 	.word	0x420e0044

08003bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0cc      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b68      	ldr	r3, [pc, #416]	; (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d90c      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0b8      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c14:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c2c:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a52      	ldr	r2, [pc, #328]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b50      	ldr	r3, [pc, #320]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	494d      	ldr	r1, [pc, #308]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d044      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d119      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e07f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7e:	4b3f      	ldr	r3, [pc, #252]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e06f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e067      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9e:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f023 0203 	bic.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4934      	ldr	r1, [pc, #208]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb0:	f7ff fc46 	bl	8003540 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb8:	f7ff fc42 	bl	8003540 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e04f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 020c 	and.w	r2, r3, #12
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d1eb      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d20c      	bcs.n	8003d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e032      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4916      	ldr	r1, [pc, #88]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	490e      	ldr	r1, [pc, #56]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d46:	f000 f855 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	490a      	ldr	r1, [pc, #40]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	5ccb      	ldrb	r3, [r1, r3]
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1c8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fba6 	bl	80034b8 <HAL_InitTick>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023c00 	.word	0x40023c00
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	08009e34 	.word	0x08009e34
 8003d84:	20000000 	.word	0x20000000
 8003d88:	20000004 	.word	0x20000004

08003d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000000 	.word	0x20000000

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08009e44 	.word	0x08009e44

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd0:	f7ff ffdc 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0b5b      	lsrs	r3, r3, #13
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	08009e44 	.word	0x08009e44

08003df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b088      	sub	sp, #32
 8003dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e10:	4bce      	ldr	r3, [pc, #824]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	f200 818d 	bhi.w	8004138 <HAL_RCC_GetSysClockFreq+0x344>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <HAL_RCC_GetSysClockFreq+0x30>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e59 	.word	0x08003e59
 8003e28:	08004139 	.word	0x08004139
 8003e2c:	08004139 	.word	0x08004139
 8003e30:	08004139 	.word	0x08004139
 8003e34:	08003e5f 	.word	0x08003e5f
 8003e38:	08004139 	.word	0x08004139
 8003e3c:	08004139 	.word	0x08004139
 8003e40:	08004139 	.word	0x08004139
 8003e44:	08003e65 	.word	0x08003e65
 8003e48:	08004139 	.word	0x08004139
 8003e4c:	08004139 	.word	0x08004139
 8003e50:	08004139 	.word	0x08004139
 8003e54:	08003fd9 	.word	0x08003fd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4bbd      	ldr	r3, [pc, #756]	; (8004150 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e5a:	61bb      	str	r3, [r7, #24]
       break;
 8003e5c:	e16f      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5e:	4bbd      	ldr	r3, [pc, #756]	; (8004154 <HAL_RCC_GetSysClockFreq+0x360>)
 8003e60:	61bb      	str	r3, [r7, #24]
      break;
 8003e62:	e16c      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e64:	4bb9      	ldr	r3, [pc, #740]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6e:	4bb7      	ldr	r3, [pc, #732]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d053      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7a:	4bb4      	ldr	r3, [pc, #720]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	099b      	lsrs	r3, r3, #6
 8003e80:	461a      	mov	r2, r3
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e8a:	f04f 0100 	mov.w	r1, #0
 8003e8e:	ea02 0400 	and.w	r4, r2, r0
 8003e92:	603c      	str	r4, [r7, #0]
 8003e94:	400b      	ands	r3, r1
 8003e96:	607b      	str	r3, [r7, #4]
 8003e98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	014b      	lsls	r3, r1, #5
 8003eaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eae:	0142      	lsls	r2, r0, #5
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4623      	mov	r3, r4
 8003eb6:	1ac0      	subs	r0, r0, r3
 8003eb8:	462b      	mov	r3, r5
 8003eba:	eb61 0103 	sbc.w	r1, r1, r3
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	018b      	lsls	r3, r1, #6
 8003ec8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ecc:	0182      	lsls	r2, r0, #6
 8003ece:	1a12      	subs	r2, r2, r0
 8003ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	00d9      	lsls	r1, r3, #3
 8003ede:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee2:	00d0      	lsls	r0, r2, #3
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4621      	mov	r1, r4
 8003eea:	1852      	adds	r2, r2, r1
 8003eec:	4629      	mov	r1, r5
 8003eee:	eb43 0101 	adc.w	r1, r3, r1
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	f04f 0100 	mov.w	r1, #0
 8003efc:	0259      	lsls	r1, r3, #9
 8003efe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f02:	0250      	lsls	r0, r2, #9
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	f7fc feb8 	bl	8000c88 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	e04c      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f22:	4b8a      	ldr	r3, [pc, #552]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	ea02 0a00 	and.w	sl, r2, r0
 8003f3a:	ea03 0b01 	and.w	fp, r3, r1
 8003f3e:	4650      	mov	r0, sl
 8003f40:	4659      	mov	r1, fp
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	014b      	lsls	r3, r1, #5
 8003f4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f50:	0142      	lsls	r2, r0, #5
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	ebb0 000a 	subs.w	r0, r0, sl
 8003f5a:	eb61 010b 	sbc.w	r1, r1, fp
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	018b      	lsls	r3, r1, #6
 8003f68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f6c:	0182      	lsls	r2, r0, #6
 8003f6e:	1a12      	subs	r2, r2, r0
 8003f70:	eb63 0301 	sbc.w	r3, r3, r1
 8003f74:	f04f 0000 	mov.w	r0, #0
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	00d9      	lsls	r1, r3, #3
 8003f7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f82:	00d0      	lsls	r0, r2, #3
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	eb12 020a 	adds.w	r2, r2, sl
 8003f8c:	eb43 030b 	adc.w	r3, r3, fp
 8003f90:	f04f 0000 	mov.w	r0, #0
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	0299      	lsls	r1, r3, #10
 8003f9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f9e:	0290      	lsls	r0, r2, #10
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	f7fc fe6a 	bl	8000c88 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4613      	mov	r3, r2
 8003fba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fbc:	4b63      	ldr	r3, [pc, #396]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	61bb      	str	r3, [r7, #24]
      break;
 8003fd6:	e0b2      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd8:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe2:	4b5a      	ldr	r3, [pc, #360]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04d      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fee:	4b57      	ldr	r3, [pc, #348]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	ea02 0800 	and.w	r8, r2, r0
 8004006:	ea03 0901 	and.w	r9, r3, r1
 800400a:	4640      	mov	r0, r8
 800400c:	4649      	mov	r1, r9
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	014b      	lsls	r3, r1, #5
 8004018:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800401c:	0142      	lsls	r2, r0, #5
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	ebb0 0008 	subs.w	r0, r0, r8
 8004026:	eb61 0109 	sbc.w	r1, r1, r9
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	018b      	lsls	r3, r1, #6
 8004034:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004038:	0182      	lsls	r2, r0, #6
 800403a:	1a12      	subs	r2, r2, r0
 800403c:	eb63 0301 	sbc.w	r3, r3, r1
 8004040:	f04f 0000 	mov.w	r0, #0
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	00d9      	lsls	r1, r3, #3
 800404a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800404e:	00d0      	lsls	r0, r2, #3
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	eb12 0208 	adds.w	r2, r2, r8
 8004058:	eb43 0309 	adc.w	r3, r3, r9
 800405c:	f04f 0000 	mov.w	r0, #0
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	0259      	lsls	r1, r3, #9
 8004066:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800406a:	0250      	lsls	r0, r2, #9
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4610      	mov	r0, r2
 8004072:	4619      	mov	r1, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	461a      	mov	r2, r3
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	f7fc fe04 	bl	8000c88 <__aeabi_uldivmod>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4613      	mov	r3, r2
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e04a      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	099b      	lsrs	r3, r3, #6
 8004090:	461a      	mov	r2, r3
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	f240 10ff 	movw	r0, #511	; 0x1ff
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	ea02 0400 	and.w	r4, r2, r0
 80040a2:	ea03 0501 	and.w	r5, r3, r1
 80040a6:	4620      	mov	r0, r4
 80040a8:	4629      	mov	r1, r5
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	014b      	lsls	r3, r1, #5
 80040b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040b8:	0142      	lsls	r2, r0, #5
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	1b00      	subs	r0, r0, r4
 80040c0:	eb61 0105 	sbc.w	r1, r1, r5
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	018b      	lsls	r3, r1, #6
 80040ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040d2:	0182      	lsls	r2, r0, #6
 80040d4:	1a12      	subs	r2, r2, r0
 80040d6:	eb63 0301 	sbc.w	r3, r3, r1
 80040da:	f04f 0000 	mov.w	r0, #0
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	00d9      	lsls	r1, r3, #3
 80040e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e8:	00d0      	lsls	r0, r2, #3
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	1912      	adds	r2, r2, r4
 80040f0:	eb45 0303 	adc.w	r3, r5, r3
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	0299      	lsls	r1, r3, #10
 80040fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004102:	0290      	lsls	r0, r2, #10
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	461a      	mov	r2, r3
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f7fc fdb8 	bl	8000c88 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0f1b      	lsrs	r3, r3, #28
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	61bb      	str	r3, [r7, #24]
      break;
 8004136:	e002      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetSysClockFreq+0x35c>)
 800413a:	61bb      	str	r3, [r7, #24]
      break;
 800413c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413e:	69bb      	ldr	r3, [r7, #24]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	00f42400 	.word	0x00f42400
 8004154:	007a1200 	.word	0x007a1200

08004158 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e28d      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8083 	beq.w	800427e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004178:	4b94      	ldr	r3, [pc, #592]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b04      	cmp	r3, #4
 8004182:	d019      	beq.n	80041b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004184:	4b91      	ldr	r3, [pc, #580]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800418c:	2b08      	cmp	r3, #8
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004190:	4b8e      	ldr	r3, [pc, #568]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419c:	d00c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b8b      	ldr	r3, [pc, #556]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d112      	bne.n	80041d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b88      	ldr	r3, [pc, #544]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4b84      	ldr	r3, [pc, #528]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x124>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d157      	bne.n	800427c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e25a      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d106      	bne.n	80041e8 <HAL_RCC_OscConfig+0x90>
 80041da:	4b7c      	ldr	r3, [pc, #496]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7b      	ldr	r2, [pc, #492]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xcc>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0xb4>
 80041f2:	4b76      	ldr	r3, [pc, #472]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a75      	ldr	r2, [pc, #468]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b73      	ldr	r3, [pc, #460]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a72      	ldr	r2, [pc, #456]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xcc>
 800420c:	4b6f      	ldr	r3, [pc, #444]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6e      	ldr	r2, [pc, #440]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b6c      	ldr	r3, [pc, #432]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7ff f988 	bl	8003540 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7ff f984 	bl	8003540 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e21f      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b61      	ldr	r3, [pc, #388]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xdc>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7ff f974 	bl	8003540 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7ff f970 	bl	8003540 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e20b      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b57      	ldr	r3, [pc, #348]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x104>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06f      	beq.n	800436a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800428a:	4b50      	ldr	r3, [pc, #320]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b00      	cmp	r3, #0
 8004294:	d017      	beq.n	80042c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004296:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042a2:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ae:	4b47      	ldr	r3, [pc, #284]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d11c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ba:	4b44      	ldr	r3, [pc, #272]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d116      	bne.n	80042f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c6:	4b41      	ldr	r3, [pc, #260]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x186>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e1d3      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042de:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4937      	ldr	r1, [pc, #220]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	e03a      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	4b34      	ldr	r3, [pc, #208]	; (80043d0 <HAL_RCC_OscConfig+0x278>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7ff f91d 	bl	8003540 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430a:	f7ff f919 	bl	8003540 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1b4      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004328:	4b28      	ldr	r3, [pc, #160]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4925      	ldr	r1, [pc, #148]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
 800433c:	e015      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCC_OscConfig+0x278>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7ff f8fc 	bl	8003540 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434c:	f7ff f8f8 	bl	8003540 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e193      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d036      	beq.n	80043e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <HAL_RCC_OscConfig+0x27c>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7ff f8dc 	bl	8003540 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438c:	f7ff f8d8 	bl	8003540 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e173      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_OscConfig+0x274>)
 80043a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x234>
 80043aa:	e01b      	b.n	80043e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7ff f8c5 	bl	8003540 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	e00e      	b.n	80043d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ba:	f7ff f8c1 	bl	8003540 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d907      	bls.n	80043d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e15c      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
 80043cc:	40023800 	.word	0x40023800
 80043d0:	42470000 	.word	0x42470000
 80043d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d8:	4b8a      	ldr	r3, [pc, #552]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ea      	bne.n	80043ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8097 	beq.w	8004520 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f2:	2300      	movs	r3, #0
 80043f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f6:	4b83      	ldr	r3, [pc, #524]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	4b7f      	ldr	r3, [pc, #508]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	4a7e      	ldr	r2, [pc, #504]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004410:	6413      	str	r3, [r2, #64]	; 0x40
 8004412:	4b7c      	ldr	r3, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004422:	4b79      	ldr	r3, [pc, #484]	; (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d118      	bne.n	8004460 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800442e:	4b76      	ldr	r3, [pc, #472]	; (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a75      	ldr	r2, [pc, #468]	; (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443a:	f7ff f881 	bl	8003540 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004442:	f7ff f87d 	bl	8003540 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e118      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	4b6c      	ldr	r3, [pc, #432]	; (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x31e>
 8004468:	4b66      	ldr	r3, [pc, #408]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	4a65      	ldr	r2, [pc, #404]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6713      	str	r3, [r2, #112]	; 0x70
 8004474:	e01c      	b.n	80044b0 <HAL_RCC_OscConfig+0x358>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x340>
 800447e:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a60      	ldr	r2, [pc, #384]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
 800448a:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	4a5d      	ldr	r2, [pc, #372]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6713      	str	r3, [r2, #112]	; 0x70
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0x358>
 8004498:	4b5a      	ldr	r3, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	4a59      	ldr	r2, [pc, #356]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70
 80044a4:	4b57      	ldr	r3, [pc, #348]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	4a56      	ldr	r2, [pc, #344]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	f023 0304 	bic.w	r3, r3, #4
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7ff f842 	bl	8003540 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7ff f83e 	bl	8003540 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e0d7      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d6:	4b4b      	ldr	r3, [pc, #300]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0ee      	beq.n	80044c0 <HAL_RCC_OscConfig+0x368>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7ff f82c 	bl	8003540 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7ff f828 	bl	8003540 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0c1      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004502:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ee      	bne.n	80044ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450e:	7dfb      	ldrb	r3, [r7, #23]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d105      	bne.n	8004520 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004514:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	4a3a      	ldr	r2, [pc, #232]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80ad 	beq.w	8004684 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b08      	cmp	r3, #8
 8004534:	d060      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d145      	bne.n	80045ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453e:	4b33      	ldr	r3, [pc, #204]	; (800460c <HAL_RCC_OscConfig+0x4b4>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fe fffc 	bl	8003540 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454c:	f7fe fff8 	bl	8003540 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e093      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	019b      	lsls	r3, r3, #6
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	3b01      	subs	r3, #1
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	071b      	lsls	r3, r3, #28
 8004596:	491b      	ldr	r1, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x4b4>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fe ffcd 	bl	8003540 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fe ffc9 	bl	8003540 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e064      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x452>
 80045c8:	e05c      	b.n	8004684 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <HAL_RCC_OscConfig+0x4b4>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fe ffb6 	bl	8003540 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fe ffb2 	bl	8003540 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04d      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x480>
 80045f6:	e045      	b.n	8004684 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e040      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
 8004604:	40023800 	.word	0x40023800
 8004608:	40007000 	.word	0x40007000
 800460c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <HAL_RCC_OscConfig+0x538>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d030      	beq.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d129      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d122      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004640:	4013      	ands	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004648:	4293      	cmp	r3, r2
 800464a:	d119      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	3b01      	subs	r3, #1
 800465a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d10f      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d107      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800

08004694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e041      	b.n	800472a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fe fd10 	bl	80030e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f000 fd2a 	bl	800512c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04e      	b.n	80047ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d022      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d01d      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <HAL_TIM_Base_Start_IT+0xc8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d018      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_TIM_Base_Start_IT+0xcc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d013      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <HAL_TIM_Base_Start_IT+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00e      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <HAL_TIM_Base_Start_IT+0xd4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d009      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <HAL_TIM_Base_Start_IT+0xd8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d004      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIM_Base_Start_IT+0xdc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d111      	bne.n	80047d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b06      	cmp	r3, #6
 80047c4:	d010      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d6:	e007      	b.n	80047e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40010400 	.word	0x40010400
 800480c:	40014000 	.word	0x40014000
 8004810:	40001800 	.word	0x40001800

08004814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e041      	b.n	80048aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f839 	bl	80048b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f000 fc6a 	bl	800512c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_TIM_PWM_Start+0x24>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e022      	b.n	8004932 <HAL_TIM_PWM_Start+0x6a>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d109      	bne.n	8004906 <HAL_TIM_PWM_Start+0x3e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	bf14      	ite	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	2300      	moveq	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e015      	b.n	8004932 <HAL_TIM_PWM_Start+0x6a>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d109      	bne.n	8004920 <HAL_TIM_PWM_Start+0x58>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e008      	b.n	8004932 <HAL_TIM_PWM_Start+0x6a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07c      	b.n	8004a34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0x82>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	e013      	b.n	8004972 <HAL_TIM_PWM_Start+0xaa>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b04      	cmp	r3, #4
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start+0x92>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004958:	e00b      	b.n	8004972 <HAL_TIM_PWM_Start+0xaa>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Start+0xa2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004968:	e003      	b.n	8004972 <HAL_TIM_PWM_Start+0xaa>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fec0 	bl	8005700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2d      	ldr	r2, [pc, #180]	; (8004a3c <HAL_TIM_PWM_Start+0x174>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_TIM_PWM_Start+0xcc>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <HAL_TIM_PWM_Start+0x178>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_TIM_PWM_Start+0xd0>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_TIM_PWM_Start+0xd2>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <HAL_TIM_PWM_Start+0x174>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d01d      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_TIM_PWM_Start+0x17c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_TIM_PWM_Start+0x180>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_TIM_PWM_Start+0x184>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_TIM_PWM_Start+0x178>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_TIM_PWM_Start+0x188>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <HAL_TIM_PWM_Start+0x18c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d111      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b06      	cmp	r3, #6
 8004a0e:	d010      	beq.n	8004a32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	e007      	b.n	8004a32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40010400 	.word	0x40010400
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40001800 	.word	0x40001800

08004a58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e097      	b.n	8004b9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fe fab1 	bl	8002fe8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f000 fb3d 	bl	800512c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	4313      	orrs	r3, r2
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004af8:	f023 030c 	bic.w	r3, r3, #12
 8004afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	4313      	orrs	r3, r2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	011a      	lsls	r2, r3, #4
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	031b      	lsls	r3, r3, #12
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0202 	mvn.w	r2, #2
 8004bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa81 	bl	80050ee <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa73 	bl	80050da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fa84 	bl	8005102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0204 	mvn.w	r2, #4
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa57 	bl	80050ee <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa49 	bl	80050da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa5a 	bl	8005102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0208 	mvn.w	r2, #8
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa2d 	bl	80050ee <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa1f 	bl	80050da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fa30 	bl	8005102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d122      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d11b      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0210 	mvn.w	r2, #16
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa03 	bl	80050ee <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9f5 	bl	80050da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fa06 	bl	8005102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0201 	mvn.w	r2, #1
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9cf 	bl	80050c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fdd4 	bl	80058fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d107      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9cb 	bl	8005116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d107      	bne.n	8004dac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0220 	mvn.w	r2, #32
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fd9e 	bl	80058e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e0ae      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b0c      	cmp	r3, #12
 8004dde:	f200 809f 	bhi.w	8004f20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004f21 	.word	0x08004f21
 8004df0:	08004f21 	.word	0x08004f21
 8004df4:	08004f21 	.word	0x08004f21
 8004df8:	08004e5d 	.word	0x08004e5d
 8004dfc:	08004f21 	.word	0x08004f21
 8004e00:	08004f21 	.word	0x08004f21
 8004e04:	08004f21 	.word	0x08004f21
 8004e08:	08004e9f 	.word	0x08004e9f
 8004e0c:	08004f21 	.word	0x08004f21
 8004e10:	08004f21 	.word	0x08004f21
 8004e14:	08004f21 	.word	0x08004f21
 8004e18:	08004edf 	.word	0x08004edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fa22 	bl	800526c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0208 	orr.w	r2, r2, #8
 8004e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0204 	bic.w	r2, r2, #4
 8004e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6999      	ldr	r1, [r3, #24]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	619a      	str	r2, [r3, #24]
      break;
 8004e5a:	e064      	b.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fa72 	bl	800534c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6999      	ldr	r1, [r3, #24]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	021a      	lsls	r2, r3, #8
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	619a      	str	r2, [r3, #24]
      break;
 8004e9c:	e043      	b.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fac7 	bl	8005438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0208 	orr.w	r2, r2, #8
 8004eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0204 	bic.w	r2, r2, #4
 8004ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69d9      	ldr	r1, [r3, #28]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	61da      	str	r2, [r3, #28]
      break;
 8004edc:	e023      	b.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fb1b 	bl	8005520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69d9      	ldr	r1, [r3, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	021a      	lsls	r2, r3, #8
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	61da      	str	r2, [r3, #28]
      break;
 8004f1e:	e002      	b.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	75fb      	strb	r3, [r7, #23]
      break;
 8004f24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_ConfigClockSource+0x1c>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0b4      	b.n	80050be <HAL_TIM_ConfigClockSource+0x186>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8c:	d03e      	beq.n	800500c <HAL_TIM_ConfigClockSource+0xd4>
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f92:	f200 8087 	bhi.w	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9a:	f000 8086 	beq.w	80050aa <HAL_TIM_ConfigClockSource+0x172>
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa2:	d87f      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa4:	2b70      	cmp	r3, #112	; 0x70
 8004fa6:	d01a      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0xa6>
 8004fa8:	2b70      	cmp	r3, #112	; 0x70
 8004faa:	d87b      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fac:	2b60      	cmp	r3, #96	; 0x60
 8004fae:	d050      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x11a>
 8004fb0:	2b60      	cmp	r3, #96	; 0x60
 8004fb2:	d877      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb4:	2b50      	cmp	r3, #80	; 0x50
 8004fb6:	d03c      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0xfa>
 8004fb8:	2b50      	cmp	r3, #80	; 0x50
 8004fba:	d873      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	d058      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x13a>
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d86f      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc4:	2b30      	cmp	r3, #48	; 0x30
 8004fc6:	d064      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x15a>
 8004fc8:	2b30      	cmp	r3, #48	; 0x30
 8004fca:	d86b      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d060      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d867      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d05c      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d05a      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x15a>
 8004fdc:	e062      	b.n	80050a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6899      	ldr	r1, [r3, #8]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f000 fb67 	bl	80056c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	609a      	str	r2, [r3, #8]
      break;
 800500a:	e04f      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6899      	ldr	r1, [r3, #8]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f000 fb50 	bl	80056c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800502e:	609a      	str	r2, [r3, #8]
      break;
 8005030:	e03c      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fac4 	bl	80055cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2150      	movs	r1, #80	; 0x50
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fb1d 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 8005050:	e02c      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	461a      	mov	r2, r3
 8005060:	f000 fae3 	bl	800562a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2160      	movs	r1, #96	; 0x60
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fb0d 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 8005070:	e01c      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	461a      	mov	r2, r3
 8005080:	f000 faa4 	bl	80055cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2140      	movs	r1, #64	; 0x40
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fafd 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 8005090:	e00c      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f000 faf4 	bl	800568a <TIM_ITRx_SetConfig>
      break;
 80050a2:	e003      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      break;
 80050a8:	e000      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a40      	ldr	r2, [pc, #256]	; (8005240 <TIM_Base_SetConfig+0x114>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514a:	d00f      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a3d      	ldr	r2, [pc, #244]	; (8005244 <TIM_Base_SetConfig+0x118>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00b      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a3c      	ldr	r2, [pc, #240]	; (8005248 <TIM_Base_SetConfig+0x11c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3b      	ldr	r2, [pc, #236]	; (800524c <TIM_Base_SetConfig+0x120>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0x40>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a3a      	ldr	r2, [pc, #232]	; (8005250 <TIM_Base_SetConfig+0x124>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d108      	bne.n	800517e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2f      	ldr	r2, [pc, #188]	; (8005240 <TIM_Base_SetConfig+0x114>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d02b      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d027      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2c      	ldr	r2, [pc, #176]	; (8005244 <TIM_Base_SetConfig+0x118>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d023      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2b      	ldr	r2, [pc, #172]	; (8005248 <TIM_Base_SetConfig+0x11c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d01f      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2a      	ldr	r2, [pc, #168]	; (800524c <TIM_Base_SetConfig+0x120>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01b      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a29      	ldr	r2, [pc, #164]	; (8005250 <TIM_Base_SetConfig+0x124>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d017      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a28      	ldr	r2, [pc, #160]	; (8005254 <TIM_Base_SetConfig+0x128>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <TIM_Base_SetConfig+0x12c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00f      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a26      	ldr	r2, [pc, #152]	; (800525c <TIM_Base_SetConfig+0x130>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00b      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a25      	ldr	r2, [pc, #148]	; (8005260 <TIM_Base_SetConfig+0x134>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a24      	ldr	r2, [pc, #144]	; (8005264 <TIM_Base_SetConfig+0x138>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a23      	ldr	r2, [pc, #140]	; (8005268 <TIM_Base_SetConfig+0x13c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d108      	bne.n	80051f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <TIM_Base_SetConfig+0x114>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_Base_SetConfig+0xf8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <TIM_Base_SetConfig+0x124>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d103      	bne.n	800522c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	615a      	str	r2, [r3, #20]
}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40010400 	.word	0x40010400
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800
 8005260:	40001800 	.word	0x40001800
 8005264:	40001c00 	.word	0x40001c00
 8005268:	40002000 	.word	0x40002000

0800526c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f023 0201 	bic.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0302 	bic.w	r3, r3, #2
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a20      	ldr	r2, [pc, #128]	; (8005344 <TIM_OC1_SetConfig+0xd8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_OC1_SetConfig+0x64>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a1f      	ldr	r2, [pc, #124]	; (8005348 <TIM_OC1_SetConfig+0xdc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d10c      	bne.n	80052ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0308 	bic.w	r3, r3, #8
 80052d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 0304 	bic.w	r3, r3, #4
 80052e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a15      	ldr	r2, [pc, #84]	; (8005344 <TIM_OC1_SetConfig+0xd8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_OC1_SetConfig+0x8e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a14      	ldr	r2, [pc, #80]	; (8005348 <TIM_OC1_SetConfig+0xdc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d111      	bne.n	800531e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40010000 	.word	0x40010000
 8005348:	40010400 	.word	0x40010400

0800534c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0210 	bic.w	r2, r3, #16
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0320 	bic.w	r3, r3, #32
 8005396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a22      	ldr	r2, [pc, #136]	; (8005430 <TIM_OC2_SetConfig+0xe4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_OC2_SetConfig+0x68>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a21      	ldr	r2, [pc, #132]	; (8005434 <TIM_OC2_SetConfig+0xe8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d10d      	bne.n	80053d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a17      	ldr	r2, [pc, #92]	; (8005430 <TIM_OC2_SetConfig+0xe4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC2_SetConfig+0x94>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a16      	ldr	r2, [pc, #88]	; (8005434 <TIM_OC2_SetConfig+0xe8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d113      	bne.n	8005408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40010400 	.word	0x40010400

08005438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0303 	bic.w	r3, r3, #3
 800546e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a21      	ldr	r2, [pc, #132]	; (8005518 <TIM_OC3_SetConfig+0xe0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_OC3_SetConfig+0x66>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a20      	ldr	r2, [pc, #128]	; (800551c <TIM_OC3_SetConfig+0xe4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d10d      	bne.n	80054ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a16      	ldr	r2, [pc, #88]	; (8005518 <TIM_OC3_SetConfig+0xe0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_OC3_SetConfig+0x92>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a15      	ldr	r2, [pc, #84]	; (800551c <TIM_OC3_SetConfig+0xe4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d113      	bne.n	80054f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	621a      	str	r2, [r3, #32]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40010000 	.word	0x40010000
 800551c:	40010400 	.word	0x40010400

08005520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800556a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a12      	ldr	r2, [pc, #72]	; (80055c4 <TIM_OC4_SetConfig+0xa4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC4_SetConfig+0x68>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <TIM_OC4_SetConfig+0xa8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d109      	bne.n	800559c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	019b      	lsls	r3, r3, #6
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40010400 	.word	0x40010400

080055cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 030a 	bic.w	r3, r3, #10
 8005608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562a:	b480      	push	{r7}
 800562c:	b087      	sub	sp, #28
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0210 	bic.w	r2, r3, #16
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	031b      	lsls	r3, r3, #12
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f043 0307 	orr.w	r3, r3, #7
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2201      	movs	r2, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1a      	ldr	r2, [r3, #32]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e05a      	b.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a21      	ldr	r2, [pc, #132]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d01d      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1d      	ldr	r2, [pc, #116]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a17      	ldr	r2, [pc, #92]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d10c      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40010000 	.word	0x40010000
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800
 8005834:	40000c00 	.word	0x40000c00
 8005838:	40010400 	.word	0x40010400
 800583c:	40014000 	.word	0x40014000
 8005840:	40001800 	.word	0x40001800

08005844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800585c:	2302      	movs	r3, #2
 800585e:	e03d      	b.n	80058dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e03f      	b.n	80059a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fd fd2a 	bl	8003390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2224      	movs	r2, #36	; 0x24
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f929 	bl	8005bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b08a      	sub	sp, #40	; 0x28
 80059ae:	af02      	add	r7, sp, #8
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d17c      	bne.n	8005ac4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_UART_Transmit+0x2c>
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e075      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_UART_Transmit+0x3e>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e06e      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2221      	movs	r2, #33	; 0x21
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059fe:	f7fd fd9f 	bl	8003540 <HAL_GetTick>
 8005a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	88fa      	ldrh	r2, [r7, #6]
 8005a0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a18:	d108      	bne.n	8005a2c <HAL_UART_Transmit+0x82>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d104      	bne.n	8005a2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e003      	b.n	8005a34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a3c:	e02a      	b.n	8005a94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	2180      	movs	r1, #128	; 0x80
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f840 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e036      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10b      	bne.n	8005a76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	3302      	adds	r3, #2
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e007      	b.n	8005a86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	3301      	adds	r3, #1
 8005a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1cf      	bne.n	8005a3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2140      	movs	r1, #64	; 0x40
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f810 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b090      	sub	sp, #64	; 0x40
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	e050      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae6:	d04c      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <UART_WaitOnFlagUntilTimeout+0x30>
 8005aee:	f7fd fd27 	bl	8003540 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d241      	bcs.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b1e:	637a      	str	r2, [r7, #52]	; 0x34
 8005b20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e5      	bne.n	8005afe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b52:	623a      	str	r2, [r7, #32]
 8005b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	69f9      	ldr	r1, [r7, #28]
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e00f      	b.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d09f      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3740      	adds	r7, #64	; 0x40
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	b09f      	sub	sp, #124	; 0x7c
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	68d9      	ldr	r1, [r3, #12]
 8005bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	ea40 0301 	orr.w	r3, r0, r1
 8005bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bf0:	f021 010c 	bic.w	r1, r1, #12
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0a:	6999      	ldr	r1, [r3, #24]
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	ea40 0301 	orr.w	r3, r0, r1
 8005c14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4bc5      	ldr	r3, [pc, #788]	; (8005f30 <UART_SetConfig+0x384>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d004      	beq.n	8005c2a <UART_SetConfig+0x7e>
 8005c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4bc3      	ldr	r3, [pc, #780]	; (8005f34 <UART_SetConfig+0x388>)
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d103      	bne.n	8005c32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c2a:	f7fe f8cf 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005c2e:	6778      	str	r0, [r7, #116]	; 0x74
 8005c30:	e002      	b.n	8005c38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c32:	f7fe f8b7 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005c36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c40:	f040 80b6 	bne.w	8005db0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c46:	461c      	mov	r4, r3
 8005c48:	f04f 0500 	mov.w	r5, #0
 8005c4c:	4622      	mov	r2, r4
 8005c4e:	462b      	mov	r3, r5
 8005c50:	1891      	adds	r1, r2, r2
 8005c52:	6439      	str	r1, [r7, #64]	; 0x40
 8005c54:	415b      	adcs	r3, r3
 8005c56:	647b      	str	r3, [r7, #68]	; 0x44
 8005c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c5c:	1912      	adds	r2, r2, r4
 8005c5e:	eb45 0303 	adc.w	r3, r5, r3
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f04f 0100 	mov.w	r1, #0
 8005c6a:	00d9      	lsls	r1, r3, #3
 8005c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c70:	00d0      	lsls	r0, r2, #3
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	1911      	adds	r1, r2, r4
 8005c78:	6639      	str	r1, [r7, #96]	; 0x60
 8005c7a:	416b      	adcs	r3, r5
 8005c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c98:	f7fa fff6 	bl	8000c88 <__aeabi_uldivmod>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4ba5      	ldr	r3, [pc, #660]	; (8005f38 <UART_SetConfig+0x38c>)
 8005ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	011e      	lsls	r6, r3, #4
 8005caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cac:	461c      	mov	r4, r3
 8005cae:	f04f 0500 	mov.w	r5, #0
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	1891      	adds	r1, r2, r2
 8005cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8005cba:	415b      	adcs	r3, r3
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cc2:	1912      	adds	r2, r2, r4
 8005cc4:	eb45 0303 	adc.w	r3, r5, r3
 8005cc8:	f04f 0000 	mov.w	r0, #0
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	00d9      	lsls	r1, r3, #3
 8005cd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cd6:	00d0      	lsls	r0, r2, #3
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	1911      	adds	r1, r2, r4
 8005cde:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ce0:	416b      	adcs	r3, r5
 8005ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	1891      	adds	r1, r2, r2
 8005cf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cf2:	415b      	adcs	r3, r3
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005cfe:	f7fa ffc3 	bl	8000c88 <__aeabi_uldivmod>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4b8c      	ldr	r3, [pc, #560]	; (8005f38 <UART_SetConfig+0x38c>)
 8005d08:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	2164      	movs	r1, #100	; 0x64
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	3332      	adds	r3, #50	; 0x32
 8005d1a:	4a87      	ldr	r2, [pc, #540]	; (8005f38 <UART_SetConfig+0x38c>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	095b      	lsrs	r3, r3, #5
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d28:	441e      	add	r6, r3
 8005d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	1894      	adds	r4, r2, r2
 8005d38:	623c      	str	r4, [r7, #32]
 8005d3a:	415b      	adcs	r3, r3
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d42:	1812      	adds	r2, r2, r0
 8005d44:	eb41 0303 	adc.w	r3, r1, r3
 8005d48:	f04f 0400 	mov.w	r4, #0
 8005d4c:	f04f 0500 	mov.w	r5, #0
 8005d50:	00dd      	lsls	r5, r3, #3
 8005d52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d56:	00d4      	lsls	r4, r2, #3
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	1814      	adds	r4, r2, r0
 8005d5e:	653c      	str	r4, [r7, #80]	; 0x50
 8005d60:	414b      	adcs	r3, r1
 8005d62:	657b      	str	r3, [r7, #84]	; 0x54
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	1891      	adds	r1, r2, r2
 8005d70:	61b9      	str	r1, [r7, #24]
 8005d72:	415b      	adcs	r3, r3
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d7e:	f7fa ff83 	bl	8000c88 <__aeabi_uldivmod>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4b6c      	ldr	r3, [pc, #432]	; (8005f38 <UART_SetConfig+0x38c>)
 8005d88:	fba3 1302 	umull	r1, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	2164      	movs	r1, #100	; 0x64
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	3332      	adds	r3, #50	; 0x32
 8005d9a:	4a67      	ldr	r2, [pc, #412]	; (8005f38 <UART_SetConfig+0x38c>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	f003 0207 	and.w	r2, r3, #7
 8005da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4432      	add	r2, r6
 8005dac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dae:	e0b9      	b.n	8005f24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005db2:	461c      	mov	r4, r3
 8005db4:	f04f 0500 	mov.w	r5, #0
 8005db8:	4622      	mov	r2, r4
 8005dba:	462b      	mov	r3, r5
 8005dbc:	1891      	adds	r1, r2, r2
 8005dbe:	6139      	str	r1, [r7, #16]
 8005dc0:	415b      	adcs	r3, r3
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005dc8:	1912      	adds	r2, r2, r4
 8005dca:	eb45 0303 	adc.w	r3, r5, r3
 8005dce:	f04f 0000 	mov.w	r0, #0
 8005dd2:	f04f 0100 	mov.w	r1, #0
 8005dd6:	00d9      	lsls	r1, r3, #3
 8005dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ddc:	00d0      	lsls	r0, r2, #3
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	eb12 0804 	adds.w	r8, r2, r4
 8005de6:	eb43 0905 	adc.w	r9, r3, r5
 8005dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	008b      	lsls	r3, r1, #2
 8005dfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e02:	0082      	lsls	r2, r0, #2
 8005e04:	4640      	mov	r0, r8
 8005e06:	4649      	mov	r1, r9
 8005e08:	f7fa ff3e 	bl	8000c88 <__aeabi_uldivmod>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4b49      	ldr	r3, [pc, #292]	; (8005f38 <UART_SetConfig+0x38c>)
 8005e12:	fba3 2302 	umull	r2, r3, r3, r2
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	011e      	lsls	r6, r3, #4
 8005e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	1894      	adds	r4, r2, r2
 8005e28:	60bc      	str	r4, [r7, #8]
 8005e2a:	415b      	adcs	r3, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e32:	1812      	adds	r2, r2, r0
 8005e34:	eb41 0303 	adc.w	r3, r1, r3
 8005e38:	f04f 0400 	mov.w	r4, #0
 8005e3c:	f04f 0500 	mov.w	r5, #0
 8005e40:	00dd      	lsls	r5, r3, #3
 8005e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e46:	00d4      	lsls	r4, r2, #3
 8005e48:	4622      	mov	r2, r4
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	1814      	adds	r4, r2, r0
 8005e4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e50:	414b      	adcs	r3, r1
 8005e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f04f 0100 	mov.w	r1, #0
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	008b      	lsls	r3, r1, #2
 8005e68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e6c:	0082      	lsls	r2, r0, #2
 8005e6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e72:	f7fa ff09 	bl	8000c88 <__aeabi_uldivmod>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <UART_SetConfig+0x38c>)
 8005e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	2164      	movs	r1, #100	; 0x64
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	3332      	adds	r3, #50	; 0x32
 8005e8e:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <UART_SetConfig+0x38c>)
 8005e90:	fba2 2303 	umull	r2, r3, r2, r3
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e9a:	441e      	add	r6, r3
 8005e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f04f 0100 	mov.w	r1, #0
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	1894      	adds	r4, r2, r2
 8005eaa:	603c      	str	r4, [r7, #0]
 8005eac:	415b      	adcs	r3, r3
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb4:	1812      	adds	r2, r2, r0
 8005eb6:	eb41 0303 	adc.w	r3, r1, r3
 8005eba:	f04f 0400 	mov.w	r4, #0
 8005ebe:	f04f 0500 	mov.w	r5, #0
 8005ec2:	00dd      	lsls	r5, r3, #3
 8005ec4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ec8:	00d4      	lsls	r4, r2, #3
 8005eca:	4622      	mov	r2, r4
 8005ecc:	462b      	mov	r3, r5
 8005ece:	eb12 0a00 	adds.w	sl, r2, r0
 8005ed2:	eb43 0b01 	adc.w	fp, r3, r1
 8005ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f04f 0100 	mov.w	r1, #0
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	008b      	lsls	r3, r1, #2
 8005eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005eee:	0082      	lsls	r2, r0, #2
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	4659      	mov	r1, fp
 8005ef4:	f7fa fec8 	bl	8000c88 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <UART_SetConfig+0x38c>)
 8005efe:	fba3 1302 	umull	r1, r3, r3, r2
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	2164      	movs	r1, #100	; 0x64
 8005f06:	fb01 f303 	mul.w	r3, r1, r3
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	3332      	adds	r3, #50	; 0x32
 8005f10:	4a09      	ldr	r2, [pc, #36]	; (8005f38 <UART_SetConfig+0x38c>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4432      	add	r2, r6
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	377c      	adds	r7, #124	; 0x7c
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2e:	bf00      	nop
 8005f30:	40011000 	.word	0x40011000
 8005f34:	40011400 	.word	0x40011400
 8005f38:	51eb851f 	.word	0x51eb851f

08005f3c <__errno>:
 8005f3c:	4b01      	ldr	r3, [pc, #4]	; (8005f44 <__errno+0x8>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	2000000c 	.word	0x2000000c

08005f48 <__libc_init_array>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	4d0d      	ldr	r5, [pc, #52]	; (8005f80 <__libc_init_array+0x38>)
 8005f4c:	4c0d      	ldr	r4, [pc, #52]	; (8005f84 <__libc_init_array+0x3c>)
 8005f4e:	1b64      	subs	r4, r4, r5
 8005f50:	10a4      	asrs	r4, r4, #2
 8005f52:	2600      	movs	r6, #0
 8005f54:	42a6      	cmp	r6, r4
 8005f56:	d109      	bne.n	8005f6c <__libc_init_array+0x24>
 8005f58:	4d0b      	ldr	r5, [pc, #44]	; (8005f88 <__libc_init_array+0x40>)
 8005f5a:	4c0c      	ldr	r4, [pc, #48]	; (8005f8c <__libc_init_array+0x44>)
 8005f5c:	f003 feee 	bl	8009d3c <_init>
 8005f60:	1b64      	subs	r4, r4, r5
 8005f62:	10a4      	asrs	r4, r4, #2
 8005f64:	2600      	movs	r6, #0
 8005f66:	42a6      	cmp	r6, r4
 8005f68:	d105      	bne.n	8005f76 <__libc_init_array+0x2e>
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f70:	4798      	blx	r3
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7ee      	b.n	8005f54 <__libc_init_array+0xc>
 8005f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7a:	4798      	blx	r3
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	e7f2      	b.n	8005f66 <__libc_init_array+0x1e>
 8005f80:	0800a410 	.word	0x0800a410
 8005f84:	0800a410 	.word	0x0800a410
 8005f88:	0800a410 	.word	0x0800a410
 8005f8c:	0800a414 	.word	0x0800a414

08005f90 <malloc>:
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <malloc+0xc>)
 8005f92:	4601      	mov	r1, r0
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f000 b85b 	b.w	8006050 <_malloc_r>
 8005f9a:	bf00      	nop
 8005f9c:	2000000c 	.word	0x2000000c

08005fa0 <memset>:
 8005fa0:	4402      	add	r2, r0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d100      	bne.n	8005faa <memset+0xa>
 8005fa8:	4770      	bx	lr
 8005faa:	f803 1b01 	strb.w	r1, [r3], #1
 8005fae:	e7f9      	b.n	8005fa4 <memset+0x4>

08005fb0 <_free_r>:
 8005fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fb2:	2900      	cmp	r1, #0
 8005fb4:	d048      	beq.n	8006048 <_free_r+0x98>
 8005fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fba:	9001      	str	r0, [sp, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f1a1 0404 	sub.w	r4, r1, #4
 8005fc2:	bfb8      	it	lt
 8005fc4:	18e4      	addlt	r4, r4, r3
 8005fc6:	f001 ff11 	bl	8007dec <__malloc_lock>
 8005fca:	4a20      	ldr	r2, [pc, #128]	; (800604c <_free_r+0x9c>)
 8005fcc:	9801      	ldr	r0, [sp, #4]
 8005fce:	6813      	ldr	r3, [r2, #0]
 8005fd0:	4615      	mov	r5, r2
 8005fd2:	b933      	cbnz	r3, 8005fe2 <_free_r+0x32>
 8005fd4:	6063      	str	r3, [r4, #4]
 8005fd6:	6014      	str	r4, [r2, #0]
 8005fd8:	b003      	add	sp, #12
 8005fda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fde:	f001 bf0b 	b.w	8007df8 <__malloc_unlock>
 8005fe2:	42a3      	cmp	r3, r4
 8005fe4:	d90b      	bls.n	8005ffe <_free_r+0x4e>
 8005fe6:	6821      	ldr	r1, [r4, #0]
 8005fe8:	1862      	adds	r2, r4, r1
 8005fea:	4293      	cmp	r3, r2
 8005fec:	bf04      	itt	eq
 8005fee:	681a      	ldreq	r2, [r3, #0]
 8005ff0:	685b      	ldreq	r3, [r3, #4]
 8005ff2:	6063      	str	r3, [r4, #4]
 8005ff4:	bf04      	itt	eq
 8005ff6:	1852      	addeq	r2, r2, r1
 8005ff8:	6022      	streq	r2, [r4, #0]
 8005ffa:	602c      	str	r4, [r5, #0]
 8005ffc:	e7ec      	b.n	8005fd8 <_free_r+0x28>
 8005ffe:	461a      	mov	r2, r3
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b10b      	cbz	r3, 8006008 <_free_r+0x58>
 8006004:	42a3      	cmp	r3, r4
 8006006:	d9fa      	bls.n	8005ffe <_free_r+0x4e>
 8006008:	6811      	ldr	r1, [r2, #0]
 800600a:	1855      	adds	r5, r2, r1
 800600c:	42a5      	cmp	r5, r4
 800600e:	d10b      	bne.n	8006028 <_free_r+0x78>
 8006010:	6824      	ldr	r4, [r4, #0]
 8006012:	4421      	add	r1, r4
 8006014:	1854      	adds	r4, r2, r1
 8006016:	42a3      	cmp	r3, r4
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	d1dd      	bne.n	8005fd8 <_free_r+0x28>
 800601c:	681c      	ldr	r4, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	6053      	str	r3, [r2, #4]
 8006022:	4421      	add	r1, r4
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	e7d7      	b.n	8005fd8 <_free_r+0x28>
 8006028:	d902      	bls.n	8006030 <_free_r+0x80>
 800602a:	230c      	movs	r3, #12
 800602c:	6003      	str	r3, [r0, #0]
 800602e:	e7d3      	b.n	8005fd8 <_free_r+0x28>
 8006030:	6825      	ldr	r5, [r4, #0]
 8006032:	1961      	adds	r1, r4, r5
 8006034:	428b      	cmp	r3, r1
 8006036:	bf04      	itt	eq
 8006038:	6819      	ldreq	r1, [r3, #0]
 800603a:	685b      	ldreq	r3, [r3, #4]
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	bf04      	itt	eq
 8006040:	1949      	addeq	r1, r1, r5
 8006042:	6021      	streq	r1, [r4, #0]
 8006044:	6054      	str	r4, [r2, #4]
 8006046:	e7c7      	b.n	8005fd8 <_free_r+0x28>
 8006048:	b003      	add	sp, #12
 800604a:	bd30      	pop	{r4, r5, pc}
 800604c:	20000200 	.word	0x20000200

08006050 <_malloc_r>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	1ccd      	adds	r5, r1, #3
 8006054:	f025 0503 	bic.w	r5, r5, #3
 8006058:	3508      	adds	r5, #8
 800605a:	2d0c      	cmp	r5, #12
 800605c:	bf38      	it	cc
 800605e:	250c      	movcc	r5, #12
 8006060:	2d00      	cmp	r5, #0
 8006062:	4606      	mov	r6, r0
 8006064:	db01      	blt.n	800606a <_malloc_r+0x1a>
 8006066:	42a9      	cmp	r1, r5
 8006068:	d903      	bls.n	8006072 <_malloc_r+0x22>
 800606a:	230c      	movs	r3, #12
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	2000      	movs	r0, #0
 8006070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006072:	f001 febb 	bl	8007dec <__malloc_lock>
 8006076:	4921      	ldr	r1, [pc, #132]	; (80060fc <_malloc_r+0xac>)
 8006078:	680a      	ldr	r2, [r1, #0]
 800607a:	4614      	mov	r4, r2
 800607c:	b99c      	cbnz	r4, 80060a6 <_malloc_r+0x56>
 800607e:	4f20      	ldr	r7, [pc, #128]	; (8006100 <_malloc_r+0xb0>)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	b923      	cbnz	r3, 800608e <_malloc_r+0x3e>
 8006084:	4621      	mov	r1, r4
 8006086:	4630      	mov	r0, r6
 8006088:	f000 fd34 	bl	8006af4 <_sbrk_r>
 800608c:	6038      	str	r0, [r7, #0]
 800608e:	4629      	mov	r1, r5
 8006090:	4630      	mov	r0, r6
 8006092:	f000 fd2f 	bl	8006af4 <_sbrk_r>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d123      	bne.n	80060e2 <_malloc_r+0x92>
 800609a:	230c      	movs	r3, #12
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	4630      	mov	r0, r6
 80060a0:	f001 feaa 	bl	8007df8 <__malloc_unlock>
 80060a4:	e7e3      	b.n	800606e <_malloc_r+0x1e>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	1b5b      	subs	r3, r3, r5
 80060aa:	d417      	bmi.n	80060dc <_malloc_r+0x8c>
 80060ac:	2b0b      	cmp	r3, #11
 80060ae:	d903      	bls.n	80060b8 <_malloc_r+0x68>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	441c      	add	r4, r3
 80060b4:	6025      	str	r5, [r4, #0]
 80060b6:	e004      	b.n	80060c2 <_malloc_r+0x72>
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	42a2      	cmp	r2, r4
 80060bc:	bf0c      	ite	eq
 80060be:	600b      	streq	r3, [r1, #0]
 80060c0:	6053      	strne	r3, [r2, #4]
 80060c2:	4630      	mov	r0, r6
 80060c4:	f001 fe98 	bl	8007df8 <__malloc_unlock>
 80060c8:	f104 000b 	add.w	r0, r4, #11
 80060cc:	1d23      	adds	r3, r4, #4
 80060ce:	f020 0007 	bic.w	r0, r0, #7
 80060d2:	1ac2      	subs	r2, r0, r3
 80060d4:	d0cc      	beq.n	8006070 <_malloc_r+0x20>
 80060d6:	1a1b      	subs	r3, r3, r0
 80060d8:	50a3      	str	r3, [r4, r2]
 80060da:	e7c9      	b.n	8006070 <_malloc_r+0x20>
 80060dc:	4622      	mov	r2, r4
 80060de:	6864      	ldr	r4, [r4, #4]
 80060e0:	e7cc      	b.n	800607c <_malloc_r+0x2c>
 80060e2:	1cc4      	adds	r4, r0, #3
 80060e4:	f024 0403 	bic.w	r4, r4, #3
 80060e8:	42a0      	cmp	r0, r4
 80060ea:	d0e3      	beq.n	80060b4 <_malloc_r+0x64>
 80060ec:	1a21      	subs	r1, r4, r0
 80060ee:	4630      	mov	r0, r6
 80060f0:	f000 fd00 	bl	8006af4 <_sbrk_r>
 80060f4:	3001      	adds	r0, #1
 80060f6:	d1dd      	bne.n	80060b4 <_malloc_r+0x64>
 80060f8:	e7cf      	b.n	800609a <_malloc_r+0x4a>
 80060fa:	bf00      	nop
 80060fc:	20000200 	.word	0x20000200
 8006100:	20000204 	.word	0x20000204

08006104 <__cvt>:
 8006104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	ec55 4b10 	vmov	r4, r5, d0
 800610c:	2d00      	cmp	r5, #0
 800610e:	460e      	mov	r6, r1
 8006110:	4619      	mov	r1, r3
 8006112:	462b      	mov	r3, r5
 8006114:	bfbb      	ittet	lt
 8006116:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800611a:	461d      	movlt	r5, r3
 800611c:	2300      	movge	r3, #0
 800611e:	232d      	movlt	r3, #45	; 0x2d
 8006120:	700b      	strb	r3, [r1, #0]
 8006122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006124:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006128:	4691      	mov	r9, r2
 800612a:	f023 0820 	bic.w	r8, r3, #32
 800612e:	bfbc      	itt	lt
 8006130:	4622      	movlt	r2, r4
 8006132:	4614      	movlt	r4, r2
 8006134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006138:	d005      	beq.n	8006146 <__cvt+0x42>
 800613a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800613e:	d100      	bne.n	8006142 <__cvt+0x3e>
 8006140:	3601      	adds	r6, #1
 8006142:	2102      	movs	r1, #2
 8006144:	e000      	b.n	8006148 <__cvt+0x44>
 8006146:	2103      	movs	r1, #3
 8006148:	ab03      	add	r3, sp, #12
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	ab02      	add	r3, sp, #8
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	ec45 4b10 	vmov	d0, r4, r5
 8006154:	4653      	mov	r3, sl
 8006156:	4632      	mov	r2, r6
 8006158:	f000 fe2a 	bl	8006db0 <_dtoa_r>
 800615c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006160:	4607      	mov	r7, r0
 8006162:	d102      	bne.n	800616a <__cvt+0x66>
 8006164:	f019 0f01 	tst.w	r9, #1
 8006168:	d022      	beq.n	80061b0 <__cvt+0xac>
 800616a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800616e:	eb07 0906 	add.w	r9, r7, r6
 8006172:	d110      	bne.n	8006196 <__cvt+0x92>
 8006174:	783b      	ldrb	r3, [r7, #0]
 8006176:	2b30      	cmp	r3, #48	; 0x30
 8006178:	d10a      	bne.n	8006190 <__cvt+0x8c>
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	f7fa fcc1 	bl	8000b08 <__aeabi_dcmpeq>
 8006186:	b918      	cbnz	r0, 8006190 <__cvt+0x8c>
 8006188:	f1c6 0601 	rsb	r6, r6, #1
 800618c:	f8ca 6000 	str.w	r6, [sl]
 8006190:	f8da 3000 	ldr.w	r3, [sl]
 8006194:	4499      	add	r9, r3
 8006196:	2200      	movs	r2, #0
 8006198:	2300      	movs	r3, #0
 800619a:	4620      	mov	r0, r4
 800619c:	4629      	mov	r1, r5
 800619e:	f7fa fcb3 	bl	8000b08 <__aeabi_dcmpeq>
 80061a2:	b108      	cbz	r0, 80061a8 <__cvt+0xa4>
 80061a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061a8:	2230      	movs	r2, #48	; 0x30
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	454b      	cmp	r3, r9
 80061ae:	d307      	bcc.n	80061c0 <__cvt+0xbc>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b4:	1bdb      	subs	r3, r3, r7
 80061b6:	4638      	mov	r0, r7
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	b004      	add	sp, #16
 80061bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c0:	1c59      	adds	r1, r3, #1
 80061c2:	9103      	str	r1, [sp, #12]
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	e7f0      	b.n	80061aa <__cvt+0xa6>

080061c8 <__exponent>:
 80061c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ca:	4603      	mov	r3, r0
 80061cc:	2900      	cmp	r1, #0
 80061ce:	bfb8      	it	lt
 80061d0:	4249      	neglt	r1, r1
 80061d2:	f803 2b02 	strb.w	r2, [r3], #2
 80061d6:	bfb4      	ite	lt
 80061d8:	222d      	movlt	r2, #45	; 0x2d
 80061da:	222b      	movge	r2, #43	; 0x2b
 80061dc:	2909      	cmp	r1, #9
 80061de:	7042      	strb	r2, [r0, #1]
 80061e0:	dd2a      	ble.n	8006238 <__exponent+0x70>
 80061e2:	f10d 0407 	add.w	r4, sp, #7
 80061e6:	46a4      	mov	ip, r4
 80061e8:	270a      	movs	r7, #10
 80061ea:	46a6      	mov	lr, r4
 80061ec:	460a      	mov	r2, r1
 80061ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80061f2:	fb07 1516 	mls	r5, r7, r6, r1
 80061f6:	3530      	adds	r5, #48	; 0x30
 80061f8:	2a63      	cmp	r2, #99	; 0x63
 80061fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80061fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006202:	4631      	mov	r1, r6
 8006204:	dcf1      	bgt.n	80061ea <__exponent+0x22>
 8006206:	3130      	adds	r1, #48	; 0x30
 8006208:	f1ae 0502 	sub.w	r5, lr, #2
 800620c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006210:	1c44      	adds	r4, r0, #1
 8006212:	4629      	mov	r1, r5
 8006214:	4561      	cmp	r1, ip
 8006216:	d30a      	bcc.n	800622e <__exponent+0x66>
 8006218:	f10d 0209 	add.w	r2, sp, #9
 800621c:	eba2 020e 	sub.w	r2, r2, lr
 8006220:	4565      	cmp	r5, ip
 8006222:	bf88      	it	hi
 8006224:	2200      	movhi	r2, #0
 8006226:	4413      	add	r3, r2
 8006228:	1a18      	subs	r0, r3, r0
 800622a:	b003      	add	sp, #12
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006232:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006236:	e7ed      	b.n	8006214 <__exponent+0x4c>
 8006238:	2330      	movs	r3, #48	; 0x30
 800623a:	3130      	adds	r1, #48	; 0x30
 800623c:	7083      	strb	r3, [r0, #2]
 800623e:	70c1      	strb	r1, [r0, #3]
 8006240:	1d03      	adds	r3, r0, #4
 8006242:	e7f1      	b.n	8006228 <__exponent+0x60>

08006244 <_printf_float>:
 8006244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	ed2d 8b02 	vpush	{d8}
 800624c:	b08d      	sub	sp, #52	; 0x34
 800624e:	460c      	mov	r4, r1
 8006250:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006254:	4616      	mov	r6, r2
 8006256:	461f      	mov	r7, r3
 8006258:	4605      	mov	r5, r0
 800625a:	f001 fd4d 	bl	8007cf8 <_localeconv_r>
 800625e:	f8d0 a000 	ldr.w	sl, [r0]
 8006262:	4650      	mov	r0, sl
 8006264:	f7f9 ffd4 	bl	8000210 <strlen>
 8006268:	2300      	movs	r3, #0
 800626a:	930a      	str	r3, [sp, #40]	; 0x28
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	9305      	str	r3, [sp, #20]
 8006270:	f8d8 3000 	ldr.w	r3, [r8]
 8006274:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006278:	3307      	adds	r3, #7
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	f103 0208 	add.w	r2, r3, #8
 8006282:	f8c8 2000 	str.w	r2, [r8]
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800628e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006292:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006296:	9307      	str	r3, [sp, #28]
 8006298:	f8cd 8018 	str.w	r8, [sp, #24]
 800629c:	ee08 0a10 	vmov	s16, r0
 80062a0:	4b9f      	ldr	r3, [pc, #636]	; (8006520 <_printf_float+0x2dc>)
 80062a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062aa:	f7fa fc5f 	bl	8000b6c <__aeabi_dcmpun>
 80062ae:	bb88      	cbnz	r0, 8006314 <_printf_float+0xd0>
 80062b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062b4:	4b9a      	ldr	r3, [pc, #616]	; (8006520 <_printf_float+0x2dc>)
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ba:	f7fa fc39 	bl	8000b30 <__aeabi_dcmple>
 80062be:	bb48      	cbnz	r0, 8006314 <_printf_float+0xd0>
 80062c0:	2200      	movs	r2, #0
 80062c2:	2300      	movs	r3, #0
 80062c4:	4640      	mov	r0, r8
 80062c6:	4649      	mov	r1, r9
 80062c8:	f7fa fc28 	bl	8000b1c <__aeabi_dcmplt>
 80062cc:	b110      	cbz	r0, 80062d4 <_printf_float+0x90>
 80062ce:	232d      	movs	r3, #45	; 0x2d
 80062d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d4:	4b93      	ldr	r3, [pc, #588]	; (8006524 <_printf_float+0x2e0>)
 80062d6:	4894      	ldr	r0, [pc, #592]	; (8006528 <_printf_float+0x2e4>)
 80062d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80062dc:	bf94      	ite	ls
 80062de:	4698      	movls	r8, r3
 80062e0:	4680      	movhi	r8, r0
 80062e2:	2303      	movs	r3, #3
 80062e4:	6123      	str	r3, [r4, #16]
 80062e6:	9b05      	ldr	r3, [sp, #20]
 80062e8:	f023 0204 	bic.w	r2, r3, #4
 80062ec:	6022      	str	r2, [r4, #0]
 80062ee:	f04f 0900 	mov.w	r9, #0
 80062f2:	9700      	str	r7, [sp, #0]
 80062f4:	4633      	mov	r3, r6
 80062f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80062f8:	4621      	mov	r1, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 f9d8 	bl	80066b0 <_printf_common>
 8006300:	3001      	adds	r0, #1
 8006302:	f040 8090 	bne.w	8006426 <_printf_float+0x1e2>
 8006306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800630a:	b00d      	add	sp, #52	; 0x34
 800630c:	ecbd 8b02 	vpop	{d8}
 8006310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	4640      	mov	r0, r8
 800631a:	4649      	mov	r1, r9
 800631c:	f7fa fc26 	bl	8000b6c <__aeabi_dcmpun>
 8006320:	b140      	cbz	r0, 8006334 <_printf_float+0xf0>
 8006322:	464b      	mov	r3, r9
 8006324:	2b00      	cmp	r3, #0
 8006326:	bfbc      	itt	lt
 8006328:	232d      	movlt	r3, #45	; 0x2d
 800632a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800632e:	487f      	ldr	r0, [pc, #508]	; (800652c <_printf_float+0x2e8>)
 8006330:	4b7f      	ldr	r3, [pc, #508]	; (8006530 <_printf_float+0x2ec>)
 8006332:	e7d1      	b.n	80062d8 <_printf_float+0x94>
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800633a:	9206      	str	r2, [sp, #24]
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	d13f      	bne.n	80063c0 <_printf_float+0x17c>
 8006340:	2306      	movs	r3, #6
 8006342:	6063      	str	r3, [r4, #4]
 8006344:	9b05      	ldr	r3, [sp, #20]
 8006346:	6861      	ldr	r1, [r4, #4]
 8006348:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800634c:	2300      	movs	r3, #0
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	ab0a      	add	r3, sp, #40	; 0x28
 8006352:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006356:	ab09      	add	r3, sp, #36	; 0x24
 8006358:	ec49 8b10 	vmov	d0, r8, r9
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	6022      	str	r2, [r4, #0]
 8006360:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006364:	4628      	mov	r0, r5
 8006366:	f7ff fecd 	bl	8006104 <__cvt>
 800636a:	9b06      	ldr	r3, [sp, #24]
 800636c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800636e:	2b47      	cmp	r3, #71	; 0x47
 8006370:	4680      	mov	r8, r0
 8006372:	d108      	bne.n	8006386 <_printf_float+0x142>
 8006374:	1cc8      	adds	r0, r1, #3
 8006376:	db02      	blt.n	800637e <_printf_float+0x13a>
 8006378:	6863      	ldr	r3, [r4, #4]
 800637a:	4299      	cmp	r1, r3
 800637c:	dd41      	ble.n	8006402 <_printf_float+0x1be>
 800637e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006382:	fa5f fb8b 	uxtb.w	fp, fp
 8006386:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800638a:	d820      	bhi.n	80063ce <_printf_float+0x18a>
 800638c:	3901      	subs	r1, #1
 800638e:	465a      	mov	r2, fp
 8006390:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006394:	9109      	str	r1, [sp, #36]	; 0x24
 8006396:	f7ff ff17 	bl	80061c8 <__exponent>
 800639a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800639c:	1813      	adds	r3, r2, r0
 800639e:	2a01      	cmp	r2, #1
 80063a0:	4681      	mov	r9, r0
 80063a2:	6123      	str	r3, [r4, #16]
 80063a4:	dc02      	bgt.n	80063ac <_printf_float+0x168>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	07d2      	lsls	r2, r2, #31
 80063aa:	d501      	bpl.n	80063b0 <_printf_float+0x16c>
 80063ac:	3301      	adds	r3, #1
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d09c      	beq.n	80062f2 <_printf_float+0xae>
 80063b8:	232d      	movs	r3, #45	; 0x2d
 80063ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063be:	e798      	b.n	80062f2 <_printf_float+0xae>
 80063c0:	9a06      	ldr	r2, [sp, #24]
 80063c2:	2a47      	cmp	r2, #71	; 0x47
 80063c4:	d1be      	bne.n	8006344 <_printf_float+0x100>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1bc      	bne.n	8006344 <_printf_float+0x100>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e7b9      	b.n	8006342 <_printf_float+0xfe>
 80063ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063d2:	d118      	bne.n	8006406 <_printf_float+0x1c2>
 80063d4:	2900      	cmp	r1, #0
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	dd0b      	ble.n	80063f2 <_printf_float+0x1ae>
 80063da:	6121      	str	r1, [r4, #16]
 80063dc:	b913      	cbnz	r3, 80063e4 <_printf_float+0x1a0>
 80063de:	6822      	ldr	r2, [r4, #0]
 80063e0:	07d0      	lsls	r0, r2, #31
 80063e2:	d502      	bpl.n	80063ea <_printf_float+0x1a6>
 80063e4:	3301      	adds	r3, #1
 80063e6:	440b      	add	r3, r1
 80063e8:	6123      	str	r3, [r4, #16]
 80063ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80063ec:	f04f 0900 	mov.w	r9, #0
 80063f0:	e7de      	b.n	80063b0 <_printf_float+0x16c>
 80063f2:	b913      	cbnz	r3, 80063fa <_printf_float+0x1b6>
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	07d2      	lsls	r2, r2, #31
 80063f8:	d501      	bpl.n	80063fe <_printf_float+0x1ba>
 80063fa:	3302      	adds	r3, #2
 80063fc:	e7f4      	b.n	80063e8 <_printf_float+0x1a4>
 80063fe:	2301      	movs	r3, #1
 8006400:	e7f2      	b.n	80063e8 <_printf_float+0x1a4>
 8006402:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	4299      	cmp	r1, r3
 800640a:	db05      	blt.n	8006418 <_printf_float+0x1d4>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	6121      	str	r1, [r4, #16]
 8006410:	07d8      	lsls	r0, r3, #31
 8006412:	d5ea      	bpl.n	80063ea <_printf_float+0x1a6>
 8006414:	1c4b      	adds	r3, r1, #1
 8006416:	e7e7      	b.n	80063e8 <_printf_float+0x1a4>
 8006418:	2900      	cmp	r1, #0
 800641a:	bfd4      	ite	le
 800641c:	f1c1 0202 	rsble	r2, r1, #2
 8006420:	2201      	movgt	r2, #1
 8006422:	4413      	add	r3, r2
 8006424:	e7e0      	b.n	80063e8 <_printf_float+0x1a4>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	055a      	lsls	r2, r3, #21
 800642a:	d407      	bmi.n	800643c <_printf_float+0x1f8>
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	4642      	mov	r2, r8
 8006430:	4631      	mov	r1, r6
 8006432:	4628      	mov	r0, r5
 8006434:	47b8      	blx	r7
 8006436:	3001      	adds	r0, #1
 8006438:	d12c      	bne.n	8006494 <_printf_float+0x250>
 800643a:	e764      	b.n	8006306 <_printf_float+0xc2>
 800643c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006440:	f240 80e0 	bls.w	8006604 <_printf_float+0x3c0>
 8006444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006448:	2200      	movs	r2, #0
 800644a:	2300      	movs	r3, #0
 800644c:	f7fa fb5c 	bl	8000b08 <__aeabi_dcmpeq>
 8006450:	2800      	cmp	r0, #0
 8006452:	d034      	beq.n	80064be <_printf_float+0x27a>
 8006454:	4a37      	ldr	r2, [pc, #220]	; (8006534 <_printf_float+0x2f0>)
 8006456:	2301      	movs	r3, #1
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	f43f af51 	beq.w	8006306 <_printf_float+0xc2>
 8006464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006468:	429a      	cmp	r2, r3
 800646a:	db02      	blt.n	8006472 <_printf_float+0x22e>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	07d8      	lsls	r0, r3, #31
 8006470:	d510      	bpl.n	8006494 <_printf_float+0x250>
 8006472:	ee18 3a10 	vmov	r3, s16
 8006476:	4652      	mov	r2, sl
 8006478:	4631      	mov	r1, r6
 800647a:	4628      	mov	r0, r5
 800647c:	47b8      	blx	r7
 800647e:	3001      	adds	r0, #1
 8006480:	f43f af41 	beq.w	8006306 <_printf_float+0xc2>
 8006484:	f04f 0800 	mov.w	r8, #0
 8006488:	f104 091a 	add.w	r9, r4, #26
 800648c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648e:	3b01      	subs	r3, #1
 8006490:	4543      	cmp	r3, r8
 8006492:	dc09      	bgt.n	80064a8 <_printf_float+0x264>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	079b      	lsls	r3, r3, #30
 8006498:	f100 8105 	bmi.w	80066a6 <_printf_float+0x462>
 800649c:	68e0      	ldr	r0, [r4, #12]
 800649e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a0:	4298      	cmp	r0, r3
 80064a2:	bfb8      	it	lt
 80064a4:	4618      	movlt	r0, r3
 80064a6:	e730      	b.n	800630a <_printf_float+0xc6>
 80064a8:	2301      	movs	r3, #1
 80064aa:	464a      	mov	r2, r9
 80064ac:	4631      	mov	r1, r6
 80064ae:	4628      	mov	r0, r5
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	f43f af27 	beq.w	8006306 <_printf_float+0xc2>
 80064b8:	f108 0801 	add.w	r8, r8, #1
 80064bc:	e7e6      	b.n	800648c <_printf_float+0x248>
 80064be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc39      	bgt.n	8006538 <_printf_float+0x2f4>
 80064c4:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <_printf_float+0x2f0>)
 80064c6:	2301      	movs	r3, #1
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f af19 	beq.w	8006306 <_printf_float+0xc2>
 80064d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064d8:	4313      	orrs	r3, r2
 80064da:	d102      	bne.n	80064e2 <_printf_float+0x29e>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	07d9      	lsls	r1, r3, #31
 80064e0:	d5d8      	bpl.n	8006494 <_printf_float+0x250>
 80064e2:	ee18 3a10 	vmov	r3, s16
 80064e6:	4652      	mov	r2, sl
 80064e8:	4631      	mov	r1, r6
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	f43f af09 	beq.w	8006306 <_printf_float+0xc2>
 80064f4:	f04f 0900 	mov.w	r9, #0
 80064f8:	f104 0a1a 	add.w	sl, r4, #26
 80064fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fe:	425b      	negs	r3, r3
 8006500:	454b      	cmp	r3, r9
 8006502:	dc01      	bgt.n	8006508 <_printf_float+0x2c4>
 8006504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006506:	e792      	b.n	800642e <_printf_float+0x1ea>
 8006508:	2301      	movs	r3, #1
 800650a:	4652      	mov	r2, sl
 800650c:	4631      	mov	r1, r6
 800650e:	4628      	mov	r0, r5
 8006510:	47b8      	blx	r7
 8006512:	3001      	adds	r0, #1
 8006514:	f43f aef7 	beq.w	8006306 <_printf_float+0xc2>
 8006518:	f109 0901 	add.w	r9, r9, #1
 800651c:	e7ee      	b.n	80064fc <_printf_float+0x2b8>
 800651e:	bf00      	nop
 8006520:	7fefffff 	.word	0x7fefffff
 8006524:	08009e50 	.word	0x08009e50
 8006528:	08009e54 	.word	0x08009e54
 800652c:	08009e5c 	.word	0x08009e5c
 8006530:	08009e58 	.word	0x08009e58
 8006534:	08009e60 	.word	0x08009e60
 8006538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800653a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800653c:	429a      	cmp	r2, r3
 800653e:	bfa8      	it	ge
 8006540:	461a      	movge	r2, r3
 8006542:	2a00      	cmp	r2, #0
 8006544:	4691      	mov	r9, r2
 8006546:	dc37      	bgt.n	80065b8 <_printf_float+0x374>
 8006548:	f04f 0b00 	mov.w	fp, #0
 800654c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006550:	f104 021a 	add.w	r2, r4, #26
 8006554:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006556:	9305      	str	r3, [sp, #20]
 8006558:	eba3 0309 	sub.w	r3, r3, r9
 800655c:	455b      	cmp	r3, fp
 800655e:	dc33      	bgt.n	80065c8 <_printf_float+0x384>
 8006560:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006564:	429a      	cmp	r2, r3
 8006566:	db3b      	blt.n	80065e0 <_printf_float+0x39c>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	07da      	lsls	r2, r3, #31
 800656c:	d438      	bmi.n	80065e0 <_printf_float+0x39c>
 800656e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006570:	9b05      	ldr	r3, [sp, #20]
 8006572:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	eba2 0901 	sub.w	r9, r2, r1
 800657a:	4599      	cmp	r9, r3
 800657c:	bfa8      	it	ge
 800657e:	4699      	movge	r9, r3
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	dc35      	bgt.n	80065f2 <_printf_float+0x3ae>
 8006586:	f04f 0800 	mov.w	r8, #0
 800658a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800658e:	f104 0a1a 	add.w	sl, r4, #26
 8006592:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	eba3 0309 	sub.w	r3, r3, r9
 800659c:	4543      	cmp	r3, r8
 800659e:	f77f af79 	ble.w	8006494 <_printf_float+0x250>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4652      	mov	r2, sl
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	f43f aeaa 	beq.w	8006306 <_printf_float+0xc2>
 80065b2:	f108 0801 	add.w	r8, r8, #1
 80065b6:	e7ec      	b.n	8006592 <_printf_float+0x34e>
 80065b8:	4613      	mov	r3, r2
 80065ba:	4631      	mov	r1, r6
 80065bc:	4642      	mov	r2, r8
 80065be:	4628      	mov	r0, r5
 80065c0:	47b8      	blx	r7
 80065c2:	3001      	adds	r0, #1
 80065c4:	d1c0      	bne.n	8006548 <_printf_float+0x304>
 80065c6:	e69e      	b.n	8006306 <_printf_float+0xc2>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4631      	mov	r1, r6
 80065cc:	4628      	mov	r0, r5
 80065ce:	9205      	str	r2, [sp, #20]
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	f43f ae97 	beq.w	8006306 <_printf_float+0xc2>
 80065d8:	9a05      	ldr	r2, [sp, #20]
 80065da:	f10b 0b01 	add.w	fp, fp, #1
 80065de:	e7b9      	b.n	8006554 <_printf_float+0x310>
 80065e0:	ee18 3a10 	vmov	r3, s16
 80065e4:	4652      	mov	r2, sl
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	d1be      	bne.n	800656e <_printf_float+0x32a>
 80065f0:	e689      	b.n	8006306 <_printf_float+0xc2>
 80065f2:	9a05      	ldr	r2, [sp, #20]
 80065f4:	464b      	mov	r3, r9
 80065f6:	4442      	add	r2, r8
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	d1c1      	bne.n	8006586 <_printf_float+0x342>
 8006602:	e680      	b.n	8006306 <_printf_float+0xc2>
 8006604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006606:	2a01      	cmp	r2, #1
 8006608:	dc01      	bgt.n	800660e <_printf_float+0x3ca>
 800660a:	07db      	lsls	r3, r3, #31
 800660c:	d538      	bpl.n	8006680 <_printf_float+0x43c>
 800660e:	2301      	movs	r3, #1
 8006610:	4642      	mov	r2, r8
 8006612:	4631      	mov	r1, r6
 8006614:	4628      	mov	r0, r5
 8006616:	47b8      	blx	r7
 8006618:	3001      	adds	r0, #1
 800661a:	f43f ae74 	beq.w	8006306 <_printf_float+0xc2>
 800661e:	ee18 3a10 	vmov	r3, s16
 8006622:	4652      	mov	r2, sl
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f ae6b 	beq.w	8006306 <_printf_float+0xc2>
 8006630:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006634:	2200      	movs	r2, #0
 8006636:	2300      	movs	r3, #0
 8006638:	f7fa fa66 	bl	8000b08 <__aeabi_dcmpeq>
 800663c:	b9d8      	cbnz	r0, 8006676 <_printf_float+0x432>
 800663e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006640:	f108 0201 	add.w	r2, r8, #1
 8006644:	3b01      	subs	r3, #1
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	d10e      	bne.n	800666e <_printf_float+0x42a>
 8006650:	e659      	b.n	8006306 <_printf_float+0xc2>
 8006652:	2301      	movs	r3, #1
 8006654:	4652      	mov	r2, sl
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	f43f ae52 	beq.w	8006306 <_printf_float+0xc2>
 8006662:	f108 0801 	add.w	r8, r8, #1
 8006666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006668:	3b01      	subs	r3, #1
 800666a:	4543      	cmp	r3, r8
 800666c:	dcf1      	bgt.n	8006652 <_printf_float+0x40e>
 800666e:	464b      	mov	r3, r9
 8006670:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006674:	e6dc      	b.n	8006430 <_printf_float+0x1ec>
 8006676:	f04f 0800 	mov.w	r8, #0
 800667a:	f104 0a1a 	add.w	sl, r4, #26
 800667e:	e7f2      	b.n	8006666 <_printf_float+0x422>
 8006680:	2301      	movs	r3, #1
 8006682:	4642      	mov	r2, r8
 8006684:	e7df      	b.n	8006646 <_printf_float+0x402>
 8006686:	2301      	movs	r3, #1
 8006688:	464a      	mov	r2, r9
 800668a:	4631      	mov	r1, r6
 800668c:	4628      	mov	r0, r5
 800668e:	47b8      	blx	r7
 8006690:	3001      	adds	r0, #1
 8006692:	f43f ae38 	beq.w	8006306 <_printf_float+0xc2>
 8006696:	f108 0801 	add.w	r8, r8, #1
 800669a:	68e3      	ldr	r3, [r4, #12]
 800669c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800669e:	1a5b      	subs	r3, r3, r1
 80066a0:	4543      	cmp	r3, r8
 80066a2:	dcf0      	bgt.n	8006686 <_printf_float+0x442>
 80066a4:	e6fa      	b.n	800649c <_printf_float+0x258>
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	f104 0919 	add.w	r9, r4, #25
 80066ae:	e7f4      	b.n	800669a <_printf_float+0x456>

080066b0 <_printf_common>:
 80066b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	4616      	mov	r6, r2
 80066b6:	4699      	mov	r9, r3
 80066b8:	688a      	ldr	r2, [r1, #8]
 80066ba:	690b      	ldr	r3, [r1, #16]
 80066bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	bfb8      	it	lt
 80066c4:	4613      	movlt	r3, r2
 80066c6:	6033      	str	r3, [r6, #0]
 80066c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066cc:	4607      	mov	r7, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	b10a      	cbz	r2, 80066d6 <_printf_common+0x26>
 80066d2:	3301      	adds	r3, #1
 80066d4:	6033      	str	r3, [r6, #0]
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	0699      	lsls	r1, r3, #26
 80066da:	bf42      	ittt	mi
 80066dc:	6833      	ldrmi	r3, [r6, #0]
 80066de:	3302      	addmi	r3, #2
 80066e0:	6033      	strmi	r3, [r6, #0]
 80066e2:	6825      	ldr	r5, [r4, #0]
 80066e4:	f015 0506 	ands.w	r5, r5, #6
 80066e8:	d106      	bne.n	80066f8 <_printf_common+0x48>
 80066ea:	f104 0a19 	add.w	sl, r4, #25
 80066ee:	68e3      	ldr	r3, [r4, #12]
 80066f0:	6832      	ldr	r2, [r6, #0]
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	42ab      	cmp	r3, r5
 80066f6:	dc26      	bgt.n	8006746 <_printf_common+0x96>
 80066f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066fc:	1e13      	subs	r3, r2, #0
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	bf18      	it	ne
 8006702:	2301      	movne	r3, #1
 8006704:	0692      	lsls	r2, r2, #26
 8006706:	d42b      	bmi.n	8006760 <_printf_common+0xb0>
 8006708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800670c:	4649      	mov	r1, r9
 800670e:	4638      	mov	r0, r7
 8006710:	47c0      	blx	r8
 8006712:	3001      	adds	r0, #1
 8006714:	d01e      	beq.n	8006754 <_printf_common+0xa4>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	68e5      	ldr	r5, [r4, #12]
 800671a:	6832      	ldr	r2, [r6, #0]
 800671c:	f003 0306 	and.w	r3, r3, #6
 8006720:	2b04      	cmp	r3, #4
 8006722:	bf08      	it	eq
 8006724:	1aad      	subeq	r5, r5, r2
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	6922      	ldr	r2, [r4, #16]
 800672a:	bf0c      	ite	eq
 800672c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006730:	2500      	movne	r5, #0
 8006732:	4293      	cmp	r3, r2
 8006734:	bfc4      	itt	gt
 8006736:	1a9b      	subgt	r3, r3, r2
 8006738:	18ed      	addgt	r5, r5, r3
 800673a:	2600      	movs	r6, #0
 800673c:	341a      	adds	r4, #26
 800673e:	42b5      	cmp	r5, r6
 8006740:	d11a      	bne.n	8006778 <_printf_common+0xc8>
 8006742:	2000      	movs	r0, #0
 8006744:	e008      	b.n	8006758 <_printf_common+0xa8>
 8006746:	2301      	movs	r3, #1
 8006748:	4652      	mov	r2, sl
 800674a:	4649      	mov	r1, r9
 800674c:	4638      	mov	r0, r7
 800674e:	47c0      	blx	r8
 8006750:	3001      	adds	r0, #1
 8006752:	d103      	bne.n	800675c <_printf_common+0xac>
 8006754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675c:	3501      	adds	r5, #1
 800675e:	e7c6      	b.n	80066ee <_printf_common+0x3e>
 8006760:	18e1      	adds	r1, r4, r3
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	2030      	movs	r0, #48	; 0x30
 8006766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800676a:	4422      	add	r2, r4
 800676c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006774:	3302      	adds	r3, #2
 8006776:	e7c7      	b.n	8006708 <_printf_common+0x58>
 8006778:	2301      	movs	r3, #1
 800677a:	4622      	mov	r2, r4
 800677c:	4649      	mov	r1, r9
 800677e:	4638      	mov	r0, r7
 8006780:	47c0      	blx	r8
 8006782:	3001      	adds	r0, #1
 8006784:	d0e6      	beq.n	8006754 <_printf_common+0xa4>
 8006786:	3601      	adds	r6, #1
 8006788:	e7d9      	b.n	800673e <_printf_common+0x8e>
	...

0800678c <_printf_i>:
 800678c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006790:	460c      	mov	r4, r1
 8006792:	4691      	mov	r9, r2
 8006794:	7e27      	ldrb	r7, [r4, #24]
 8006796:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006798:	2f78      	cmp	r7, #120	; 0x78
 800679a:	4680      	mov	r8, r0
 800679c:	469a      	mov	sl, r3
 800679e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a2:	d807      	bhi.n	80067b4 <_printf_i+0x28>
 80067a4:	2f62      	cmp	r7, #98	; 0x62
 80067a6:	d80a      	bhi.n	80067be <_printf_i+0x32>
 80067a8:	2f00      	cmp	r7, #0
 80067aa:	f000 80d8 	beq.w	800695e <_printf_i+0x1d2>
 80067ae:	2f58      	cmp	r7, #88	; 0x58
 80067b0:	f000 80a3 	beq.w	80068fa <_printf_i+0x16e>
 80067b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067bc:	e03a      	b.n	8006834 <_printf_i+0xa8>
 80067be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067c2:	2b15      	cmp	r3, #21
 80067c4:	d8f6      	bhi.n	80067b4 <_printf_i+0x28>
 80067c6:	a001      	add	r0, pc, #4	; (adr r0, 80067cc <_printf_i+0x40>)
 80067c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80067cc:	08006825 	.word	0x08006825
 80067d0:	08006839 	.word	0x08006839
 80067d4:	080067b5 	.word	0x080067b5
 80067d8:	080067b5 	.word	0x080067b5
 80067dc:	080067b5 	.word	0x080067b5
 80067e0:	080067b5 	.word	0x080067b5
 80067e4:	08006839 	.word	0x08006839
 80067e8:	080067b5 	.word	0x080067b5
 80067ec:	080067b5 	.word	0x080067b5
 80067f0:	080067b5 	.word	0x080067b5
 80067f4:	080067b5 	.word	0x080067b5
 80067f8:	08006945 	.word	0x08006945
 80067fc:	08006869 	.word	0x08006869
 8006800:	08006927 	.word	0x08006927
 8006804:	080067b5 	.word	0x080067b5
 8006808:	080067b5 	.word	0x080067b5
 800680c:	08006967 	.word	0x08006967
 8006810:	080067b5 	.word	0x080067b5
 8006814:	08006869 	.word	0x08006869
 8006818:	080067b5 	.word	0x080067b5
 800681c:	080067b5 	.word	0x080067b5
 8006820:	0800692f 	.word	0x0800692f
 8006824:	680b      	ldr	r3, [r1, #0]
 8006826:	1d1a      	adds	r2, r3, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	600a      	str	r2, [r1, #0]
 800682c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006834:	2301      	movs	r3, #1
 8006836:	e0a3      	b.n	8006980 <_printf_i+0x1f4>
 8006838:	6825      	ldr	r5, [r4, #0]
 800683a:	6808      	ldr	r0, [r1, #0]
 800683c:	062e      	lsls	r6, r5, #24
 800683e:	f100 0304 	add.w	r3, r0, #4
 8006842:	d50a      	bpl.n	800685a <_printf_i+0xce>
 8006844:	6805      	ldr	r5, [r0, #0]
 8006846:	600b      	str	r3, [r1, #0]
 8006848:	2d00      	cmp	r5, #0
 800684a:	da03      	bge.n	8006854 <_printf_i+0xc8>
 800684c:	232d      	movs	r3, #45	; 0x2d
 800684e:	426d      	negs	r5, r5
 8006850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006854:	485e      	ldr	r0, [pc, #376]	; (80069d0 <_printf_i+0x244>)
 8006856:	230a      	movs	r3, #10
 8006858:	e019      	b.n	800688e <_printf_i+0x102>
 800685a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800685e:	6805      	ldr	r5, [r0, #0]
 8006860:	600b      	str	r3, [r1, #0]
 8006862:	bf18      	it	ne
 8006864:	b22d      	sxthne	r5, r5
 8006866:	e7ef      	b.n	8006848 <_printf_i+0xbc>
 8006868:	680b      	ldr	r3, [r1, #0]
 800686a:	6825      	ldr	r5, [r4, #0]
 800686c:	1d18      	adds	r0, r3, #4
 800686e:	6008      	str	r0, [r1, #0]
 8006870:	0628      	lsls	r0, r5, #24
 8006872:	d501      	bpl.n	8006878 <_printf_i+0xec>
 8006874:	681d      	ldr	r5, [r3, #0]
 8006876:	e002      	b.n	800687e <_printf_i+0xf2>
 8006878:	0669      	lsls	r1, r5, #25
 800687a:	d5fb      	bpl.n	8006874 <_printf_i+0xe8>
 800687c:	881d      	ldrh	r5, [r3, #0]
 800687e:	4854      	ldr	r0, [pc, #336]	; (80069d0 <_printf_i+0x244>)
 8006880:	2f6f      	cmp	r7, #111	; 0x6f
 8006882:	bf0c      	ite	eq
 8006884:	2308      	moveq	r3, #8
 8006886:	230a      	movne	r3, #10
 8006888:	2100      	movs	r1, #0
 800688a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800688e:	6866      	ldr	r6, [r4, #4]
 8006890:	60a6      	str	r6, [r4, #8]
 8006892:	2e00      	cmp	r6, #0
 8006894:	bfa2      	ittt	ge
 8006896:	6821      	ldrge	r1, [r4, #0]
 8006898:	f021 0104 	bicge.w	r1, r1, #4
 800689c:	6021      	strge	r1, [r4, #0]
 800689e:	b90d      	cbnz	r5, 80068a4 <_printf_i+0x118>
 80068a0:	2e00      	cmp	r6, #0
 80068a2:	d04d      	beq.n	8006940 <_printf_i+0x1b4>
 80068a4:	4616      	mov	r6, r2
 80068a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80068aa:	fb03 5711 	mls	r7, r3, r1, r5
 80068ae:	5dc7      	ldrb	r7, [r0, r7]
 80068b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068b4:	462f      	mov	r7, r5
 80068b6:	42bb      	cmp	r3, r7
 80068b8:	460d      	mov	r5, r1
 80068ba:	d9f4      	bls.n	80068a6 <_printf_i+0x11a>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d10b      	bne.n	80068d8 <_printf_i+0x14c>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07df      	lsls	r7, r3, #31
 80068c4:	d508      	bpl.n	80068d8 <_printf_i+0x14c>
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	6861      	ldr	r1, [r4, #4]
 80068ca:	4299      	cmp	r1, r3
 80068cc:	bfde      	ittt	le
 80068ce:	2330      	movle	r3, #48	; 0x30
 80068d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068d4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80068d8:	1b92      	subs	r2, r2, r6
 80068da:	6122      	str	r2, [r4, #16]
 80068dc:	f8cd a000 	str.w	sl, [sp]
 80068e0:	464b      	mov	r3, r9
 80068e2:	aa03      	add	r2, sp, #12
 80068e4:	4621      	mov	r1, r4
 80068e6:	4640      	mov	r0, r8
 80068e8:	f7ff fee2 	bl	80066b0 <_printf_common>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d14c      	bne.n	800698a <_printf_i+0x1fe>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f4:	b004      	add	sp, #16
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	4835      	ldr	r0, [pc, #212]	; (80069d0 <_printf_i+0x244>)
 80068fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	680e      	ldr	r6, [r1, #0]
 8006904:	061f      	lsls	r7, r3, #24
 8006906:	f856 5b04 	ldr.w	r5, [r6], #4
 800690a:	600e      	str	r6, [r1, #0]
 800690c:	d514      	bpl.n	8006938 <_printf_i+0x1ac>
 800690e:	07d9      	lsls	r1, r3, #31
 8006910:	bf44      	itt	mi
 8006912:	f043 0320 	orrmi.w	r3, r3, #32
 8006916:	6023      	strmi	r3, [r4, #0]
 8006918:	b91d      	cbnz	r5, 8006922 <_printf_i+0x196>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f023 0320 	bic.w	r3, r3, #32
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	2310      	movs	r3, #16
 8006924:	e7b0      	b.n	8006888 <_printf_i+0xfc>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	f043 0320 	orr.w	r3, r3, #32
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	2378      	movs	r3, #120	; 0x78
 8006930:	4828      	ldr	r0, [pc, #160]	; (80069d4 <_printf_i+0x248>)
 8006932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006936:	e7e3      	b.n	8006900 <_printf_i+0x174>
 8006938:	065e      	lsls	r6, r3, #25
 800693a:	bf48      	it	mi
 800693c:	b2ad      	uxthmi	r5, r5
 800693e:	e7e6      	b.n	800690e <_printf_i+0x182>
 8006940:	4616      	mov	r6, r2
 8006942:	e7bb      	b.n	80068bc <_printf_i+0x130>
 8006944:	680b      	ldr	r3, [r1, #0]
 8006946:	6826      	ldr	r6, [r4, #0]
 8006948:	6960      	ldr	r0, [r4, #20]
 800694a:	1d1d      	adds	r5, r3, #4
 800694c:	600d      	str	r5, [r1, #0]
 800694e:	0635      	lsls	r5, r6, #24
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	d501      	bpl.n	8006958 <_printf_i+0x1cc>
 8006954:	6018      	str	r0, [r3, #0]
 8006956:	e002      	b.n	800695e <_printf_i+0x1d2>
 8006958:	0671      	lsls	r1, r6, #25
 800695a:	d5fb      	bpl.n	8006954 <_printf_i+0x1c8>
 800695c:	8018      	strh	r0, [r3, #0]
 800695e:	2300      	movs	r3, #0
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	4616      	mov	r6, r2
 8006964:	e7ba      	b.n	80068dc <_printf_i+0x150>
 8006966:	680b      	ldr	r3, [r1, #0]
 8006968:	1d1a      	adds	r2, r3, #4
 800696a:	600a      	str	r2, [r1, #0]
 800696c:	681e      	ldr	r6, [r3, #0]
 800696e:	6862      	ldr	r2, [r4, #4]
 8006970:	2100      	movs	r1, #0
 8006972:	4630      	mov	r0, r6
 8006974:	f7f9 fc54 	bl	8000220 <memchr>
 8006978:	b108      	cbz	r0, 800697e <_printf_i+0x1f2>
 800697a:	1b80      	subs	r0, r0, r6
 800697c:	6060      	str	r0, [r4, #4]
 800697e:	6863      	ldr	r3, [r4, #4]
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	2300      	movs	r3, #0
 8006984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006988:	e7a8      	b.n	80068dc <_printf_i+0x150>
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	4632      	mov	r2, r6
 800698e:	4649      	mov	r1, r9
 8006990:	4640      	mov	r0, r8
 8006992:	47d0      	blx	sl
 8006994:	3001      	adds	r0, #1
 8006996:	d0ab      	beq.n	80068f0 <_printf_i+0x164>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	079b      	lsls	r3, r3, #30
 800699c:	d413      	bmi.n	80069c6 <_printf_i+0x23a>
 800699e:	68e0      	ldr	r0, [r4, #12]
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	4298      	cmp	r0, r3
 80069a4:	bfb8      	it	lt
 80069a6:	4618      	movlt	r0, r3
 80069a8:	e7a4      	b.n	80068f4 <_printf_i+0x168>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4632      	mov	r2, r6
 80069ae:	4649      	mov	r1, r9
 80069b0:	4640      	mov	r0, r8
 80069b2:	47d0      	blx	sl
 80069b4:	3001      	adds	r0, #1
 80069b6:	d09b      	beq.n	80068f0 <_printf_i+0x164>
 80069b8:	3501      	adds	r5, #1
 80069ba:	68e3      	ldr	r3, [r4, #12]
 80069bc:	9903      	ldr	r1, [sp, #12]
 80069be:	1a5b      	subs	r3, r3, r1
 80069c0:	42ab      	cmp	r3, r5
 80069c2:	dcf2      	bgt.n	80069aa <_printf_i+0x21e>
 80069c4:	e7eb      	b.n	800699e <_printf_i+0x212>
 80069c6:	2500      	movs	r5, #0
 80069c8:	f104 0619 	add.w	r6, r4, #25
 80069cc:	e7f5      	b.n	80069ba <_printf_i+0x22e>
 80069ce:	bf00      	nop
 80069d0:	08009e62 	.word	0x08009e62
 80069d4:	08009e73 	.word	0x08009e73

080069d8 <iprintf>:
 80069d8:	b40f      	push	{r0, r1, r2, r3}
 80069da:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <iprintf+0x2c>)
 80069dc:	b513      	push	{r0, r1, r4, lr}
 80069de:	681c      	ldr	r4, [r3, #0]
 80069e0:	b124      	cbz	r4, 80069ec <iprintf+0x14>
 80069e2:	69a3      	ldr	r3, [r4, #24]
 80069e4:	b913      	cbnz	r3, 80069ec <iprintf+0x14>
 80069e6:	4620      	mov	r0, r4
 80069e8:	f001 f8e8 	bl	8007bbc <__sinit>
 80069ec:	ab05      	add	r3, sp, #20
 80069ee:	9a04      	ldr	r2, [sp, #16]
 80069f0:	68a1      	ldr	r1, [r4, #8]
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	4620      	mov	r0, r4
 80069f6:	f001 fdbb 	bl	8008570 <_vfiprintf_r>
 80069fa:	b002      	add	sp, #8
 80069fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a00:	b004      	add	sp, #16
 8006a02:	4770      	bx	lr
 8006a04:	2000000c 	.word	0x2000000c

08006a08 <_puts_r>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	460e      	mov	r6, r1
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	b118      	cbz	r0, 8006a18 <_puts_r+0x10>
 8006a10:	6983      	ldr	r3, [r0, #24]
 8006a12:	b90b      	cbnz	r3, 8006a18 <_puts_r+0x10>
 8006a14:	f001 f8d2 	bl	8007bbc <__sinit>
 8006a18:	69ab      	ldr	r3, [r5, #24]
 8006a1a:	68ac      	ldr	r4, [r5, #8]
 8006a1c:	b913      	cbnz	r3, 8006a24 <_puts_r+0x1c>
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f001 f8cc 	bl	8007bbc <__sinit>
 8006a24:	4b2c      	ldr	r3, [pc, #176]	; (8006ad8 <_puts_r+0xd0>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d120      	bne.n	8006a6c <_puts_r+0x64>
 8006a2a:	686c      	ldr	r4, [r5, #4]
 8006a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a2e:	07db      	lsls	r3, r3, #31
 8006a30:	d405      	bmi.n	8006a3e <_puts_r+0x36>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	0598      	lsls	r0, r3, #22
 8006a36:	d402      	bmi.n	8006a3e <_puts_r+0x36>
 8006a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3a:	f001 f962 	bl	8007d02 <__retarget_lock_acquire_recursive>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	0719      	lsls	r1, r3, #28
 8006a42:	d51d      	bpl.n	8006a80 <_puts_r+0x78>
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	b1db      	cbz	r3, 8006a80 <_puts_r+0x78>
 8006a48:	3e01      	subs	r6, #1
 8006a4a:	68a3      	ldr	r3, [r4, #8]
 8006a4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a50:	3b01      	subs	r3, #1
 8006a52:	60a3      	str	r3, [r4, #8]
 8006a54:	bb39      	cbnz	r1, 8006aa6 <_puts_r+0x9e>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	da38      	bge.n	8006acc <_puts_r+0xc4>
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	210a      	movs	r1, #10
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f858 	bl	8006b14 <__swbuf_r>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d011      	beq.n	8006a8c <_puts_r+0x84>
 8006a68:	250a      	movs	r5, #10
 8006a6a:	e011      	b.n	8006a90 <_puts_r+0x88>
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <_puts_r+0xd4>)
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	d101      	bne.n	8006a76 <_puts_r+0x6e>
 8006a72:	68ac      	ldr	r4, [r5, #8]
 8006a74:	e7da      	b.n	8006a2c <_puts_r+0x24>
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <_puts_r+0xd8>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	bf08      	it	eq
 8006a7c:	68ec      	ldreq	r4, [r5, #12]
 8006a7e:	e7d5      	b.n	8006a2c <_puts_r+0x24>
 8006a80:	4621      	mov	r1, r4
 8006a82:	4628      	mov	r0, r5
 8006a84:	f000 f898 	bl	8006bb8 <__swsetup_r>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d0dd      	beq.n	8006a48 <_puts_r+0x40>
 8006a8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a92:	07da      	lsls	r2, r3, #31
 8006a94:	d405      	bmi.n	8006aa2 <_puts_r+0x9a>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	059b      	lsls	r3, r3, #22
 8006a9a:	d402      	bmi.n	8006aa2 <_puts_r+0x9a>
 8006a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a9e:	f001 f931 	bl	8007d04 <__retarget_lock_release_recursive>
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da04      	bge.n	8006ab4 <_puts_r+0xac>
 8006aaa:	69a2      	ldr	r2, [r4, #24]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	dc06      	bgt.n	8006abe <_puts_r+0xb6>
 8006ab0:	290a      	cmp	r1, #10
 8006ab2:	d004      	beq.n	8006abe <_puts_r+0xb6>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	6022      	str	r2, [r4, #0]
 8006aba:	7019      	strb	r1, [r3, #0]
 8006abc:	e7c5      	b.n	8006a4a <_puts_r+0x42>
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f000 f827 	bl	8006b14 <__swbuf_r>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d1bf      	bne.n	8006a4a <_puts_r+0x42>
 8006aca:	e7df      	b.n	8006a8c <_puts_r+0x84>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	250a      	movs	r5, #10
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	701d      	strb	r5, [r3, #0]
 8006ad6:	e7db      	b.n	8006a90 <_puts_r+0x88>
 8006ad8:	08009f38 	.word	0x08009f38
 8006adc:	08009f58 	.word	0x08009f58
 8006ae0:	08009f18 	.word	0x08009f18

08006ae4 <puts>:
 8006ae4:	4b02      	ldr	r3, [pc, #8]	; (8006af0 <puts+0xc>)
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	f7ff bf8d 	b.w	8006a08 <_puts_r>
 8006aee:	bf00      	nop
 8006af0:	2000000c 	.word	0x2000000c

08006af4 <_sbrk_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4d06      	ldr	r5, [pc, #24]	; (8006b10 <_sbrk_r+0x1c>)
 8006af8:	2300      	movs	r3, #0
 8006afa:	4604      	mov	r4, r0
 8006afc:	4608      	mov	r0, r1
 8006afe:	602b      	str	r3, [r5, #0]
 8006b00:	f7fb ff3c 	bl	800297c <_sbrk>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_sbrk_r+0x1a>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_sbrk_r+0x1a>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	20000500 	.word	0x20000500

08006b14 <__swbuf_r>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	460e      	mov	r6, r1
 8006b18:	4614      	mov	r4, r2
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	b118      	cbz	r0, 8006b26 <__swbuf_r+0x12>
 8006b1e:	6983      	ldr	r3, [r0, #24]
 8006b20:	b90b      	cbnz	r3, 8006b26 <__swbuf_r+0x12>
 8006b22:	f001 f84b 	bl	8007bbc <__sinit>
 8006b26:	4b21      	ldr	r3, [pc, #132]	; (8006bac <__swbuf_r+0x98>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	d12b      	bne.n	8006b84 <__swbuf_r+0x70>
 8006b2c:	686c      	ldr	r4, [r5, #4]
 8006b2e:	69a3      	ldr	r3, [r4, #24]
 8006b30:	60a3      	str	r3, [r4, #8]
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	071a      	lsls	r2, r3, #28
 8006b36:	d52f      	bpl.n	8006b98 <__swbuf_r+0x84>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	b36b      	cbz	r3, 8006b98 <__swbuf_r+0x84>
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	1ac0      	subs	r0, r0, r3
 8006b42:	6963      	ldr	r3, [r4, #20]
 8006b44:	b2f6      	uxtb	r6, r6
 8006b46:	4283      	cmp	r3, r0
 8006b48:	4637      	mov	r7, r6
 8006b4a:	dc04      	bgt.n	8006b56 <__swbuf_r+0x42>
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 ffa0 	bl	8007a94 <_fflush_r>
 8006b54:	bb30      	cbnz	r0, 8006ba4 <__swbuf_r+0x90>
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	60a3      	str	r3, [r4, #8]
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	701e      	strb	r6, [r3, #0]
 8006b64:	6963      	ldr	r3, [r4, #20]
 8006b66:	3001      	adds	r0, #1
 8006b68:	4283      	cmp	r3, r0
 8006b6a:	d004      	beq.n	8006b76 <__swbuf_r+0x62>
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	07db      	lsls	r3, r3, #31
 8006b70:	d506      	bpl.n	8006b80 <__swbuf_r+0x6c>
 8006b72:	2e0a      	cmp	r6, #10
 8006b74:	d104      	bne.n	8006b80 <__swbuf_r+0x6c>
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 ff8b 	bl	8007a94 <_fflush_r>
 8006b7e:	b988      	cbnz	r0, 8006ba4 <__swbuf_r+0x90>
 8006b80:	4638      	mov	r0, r7
 8006b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <__swbuf_r+0x9c>)
 8006b86:	429c      	cmp	r4, r3
 8006b88:	d101      	bne.n	8006b8e <__swbuf_r+0x7a>
 8006b8a:	68ac      	ldr	r4, [r5, #8]
 8006b8c:	e7cf      	b.n	8006b2e <__swbuf_r+0x1a>
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <__swbuf_r+0xa0>)
 8006b90:	429c      	cmp	r4, r3
 8006b92:	bf08      	it	eq
 8006b94:	68ec      	ldreq	r4, [r5, #12]
 8006b96:	e7ca      	b.n	8006b2e <__swbuf_r+0x1a>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 f80c 	bl	8006bb8 <__swsetup_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d0cb      	beq.n	8006b3c <__swbuf_r+0x28>
 8006ba4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ba8:	e7ea      	b.n	8006b80 <__swbuf_r+0x6c>
 8006baa:	bf00      	nop
 8006bac:	08009f38 	.word	0x08009f38
 8006bb0:	08009f58 	.word	0x08009f58
 8006bb4:	08009f18 	.word	0x08009f18

08006bb8 <__swsetup_r>:
 8006bb8:	4b32      	ldr	r3, [pc, #200]	; (8006c84 <__swsetup_r+0xcc>)
 8006bba:	b570      	push	{r4, r5, r6, lr}
 8006bbc:	681d      	ldr	r5, [r3, #0]
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	b125      	cbz	r5, 8006bce <__swsetup_r+0x16>
 8006bc4:	69ab      	ldr	r3, [r5, #24]
 8006bc6:	b913      	cbnz	r3, 8006bce <__swsetup_r+0x16>
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f000 fff7 	bl	8007bbc <__sinit>
 8006bce:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <__swsetup_r+0xd0>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	d10f      	bne.n	8006bf4 <__swsetup_r+0x3c>
 8006bd4:	686c      	ldr	r4, [r5, #4]
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bdc:	0719      	lsls	r1, r3, #28
 8006bde:	d42c      	bmi.n	8006c3a <__swsetup_r+0x82>
 8006be0:	06dd      	lsls	r5, r3, #27
 8006be2:	d411      	bmi.n	8006c08 <__swsetup_r+0x50>
 8006be4:	2309      	movs	r3, #9
 8006be6:	6033      	str	r3, [r6, #0]
 8006be8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf2:	e03e      	b.n	8006c72 <__swsetup_r+0xba>
 8006bf4:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <__swsetup_r+0xd4>)
 8006bf6:	429c      	cmp	r4, r3
 8006bf8:	d101      	bne.n	8006bfe <__swsetup_r+0x46>
 8006bfa:	68ac      	ldr	r4, [r5, #8]
 8006bfc:	e7eb      	b.n	8006bd6 <__swsetup_r+0x1e>
 8006bfe:	4b24      	ldr	r3, [pc, #144]	; (8006c90 <__swsetup_r+0xd8>)
 8006c00:	429c      	cmp	r4, r3
 8006c02:	bf08      	it	eq
 8006c04:	68ec      	ldreq	r4, [r5, #12]
 8006c06:	e7e6      	b.n	8006bd6 <__swsetup_r+0x1e>
 8006c08:	0758      	lsls	r0, r3, #29
 8006c0a:	d512      	bpl.n	8006c32 <__swsetup_r+0x7a>
 8006c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c0e:	b141      	cbz	r1, 8006c22 <__swsetup_r+0x6a>
 8006c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c14:	4299      	cmp	r1, r3
 8006c16:	d002      	beq.n	8006c1e <__swsetup_r+0x66>
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7ff f9c9 	bl	8005fb0 <_free_r>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	6363      	str	r3, [r4, #52]	; 0x34
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6063      	str	r3, [r4, #4]
 8006c2e:	6923      	ldr	r3, [r4, #16]
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f043 0308 	orr.w	r3, r3, #8
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	b94b      	cbnz	r3, 8006c52 <__swsetup_r+0x9a>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c48:	d003      	beq.n	8006c52 <__swsetup_r+0x9a>
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f001 f87f 	bl	8007d50 <__smakebuf_r>
 8006c52:	89a0      	ldrh	r0, [r4, #12]
 8006c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c58:	f010 0301 	ands.w	r3, r0, #1
 8006c5c:	d00a      	beq.n	8006c74 <__swsetup_r+0xbc>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60a3      	str	r3, [r4, #8]
 8006c62:	6963      	ldr	r3, [r4, #20]
 8006c64:	425b      	negs	r3, r3
 8006c66:	61a3      	str	r3, [r4, #24]
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	b943      	cbnz	r3, 8006c7e <__swsetup_r+0xc6>
 8006c6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c70:	d1ba      	bne.n	8006be8 <__swsetup_r+0x30>
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	0781      	lsls	r1, r0, #30
 8006c76:	bf58      	it	pl
 8006c78:	6963      	ldrpl	r3, [r4, #20]
 8006c7a:	60a3      	str	r3, [r4, #8]
 8006c7c:	e7f4      	b.n	8006c68 <__swsetup_r+0xb0>
 8006c7e:	2000      	movs	r0, #0
 8006c80:	e7f7      	b.n	8006c72 <__swsetup_r+0xba>
 8006c82:	bf00      	nop
 8006c84:	2000000c 	.word	0x2000000c
 8006c88:	08009f38 	.word	0x08009f38
 8006c8c:	08009f58 	.word	0x08009f58
 8006c90:	08009f18 	.word	0x08009f18

08006c94 <quorem>:
 8006c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	6903      	ldr	r3, [r0, #16]
 8006c9a:	690c      	ldr	r4, [r1, #16]
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	f2c0 8081 	blt.w	8006da6 <quorem+0x112>
 8006ca4:	3c01      	subs	r4, #1
 8006ca6:	f101 0814 	add.w	r8, r1, #20
 8006caa:	f100 0514 	add.w	r5, r0, #20
 8006cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ccc:	d331      	bcc.n	8006d32 <quorem+0x9e>
 8006cce:	f04f 0e00 	mov.w	lr, #0
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	46ac      	mov	ip, r5
 8006cd6:	46f2      	mov	sl, lr
 8006cd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cdc:	b293      	uxth	r3, r2
 8006cde:	fb06 e303 	mla	r3, r6, r3, lr
 8006ce2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8006cec:	0c12      	lsrs	r2, r2, #16
 8006cee:	f8dc a000 	ldr.w	sl, [ip]
 8006cf2:	fb06 e202 	mla	r2, r6, r2, lr
 8006cf6:	fa13 f38a 	uxtah	r3, r3, sl
 8006cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cfe:	fa1f fa82 	uxth.w	sl, r2
 8006d02:	f8dc 2000 	ldr.w	r2, [ip]
 8006d06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006d0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d14:	4581      	cmp	r9, r0
 8006d16:	f84c 3b04 	str.w	r3, [ip], #4
 8006d1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d1e:	d2db      	bcs.n	8006cd8 <quorem+0x44>
 8006d20:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d24:	b92b      	cbnz	r3, 8006d32 <quorem+0x9e>
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	3b04      	subs	r3, #4
 8006d2a:	429d      	cmp	r5, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	d32e      	bcc.n	8006d8e <quorem+0xfa>
 8006d30:	613c      	str	r4, [r7, #16]
 8006d32:	4638      	mov	r0, r7
 8006d34:	f001 fae4 	bl	8008300 <__mcmp>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	db24      	blt.n	8006d86 <quorem+0xf2>
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f04f 0c00 	mov.w	ip, #0
 8006d44:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d48:	f8d0 e000 	ldr.w	lr, [r0]
 8006d4c:	b293      	uxth	r3, r2
 8006d4e:	ebac 0303 	sub.w	r3, ip, r3
 8006d52:	0c12      	lsrs	r2, r2, #16
 8006d54:	fa13 f38e 	uxtah	r3, r3, lr
 8006d58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d66:	45c1      	cmp	r9, r8
 8006d68:	f840 3b04 	str.w	r3, [r0], #4
 8006d6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d70:	d2e8      	bcs.n	8006d44 <quorem+0xb0>
 8006d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d7a:	b922      	cbnz	r2, 8006d86 <quorem+0xf2>
 8006d7c:	3b04      	subs	r3, #4
 8006d7e:	429d      	cmp	r5, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	d30a      	bcc.n	8006d9a <quorem+0x106>
 8006d84:	613c      	str	r4, [r7, #16]
 8006d86:	4630      	mov	r0, r6
 8006d88:	b003      	add	sp, #12
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	6812      	ldr	r2, [r2, #0]
 8006d90:	3b04      	subs	r3, #4
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	d1cc      	bne.n	8006d30 <quorem+0x9c>
 8006d96:	3c01      	subs	r4, #1
 8006d98:	e7c7      	b.n	8006d2a <quorem+0x96>
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	3b04      	subs	r3, #4
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	d1f0      	bne.n	8006d84 <quorem+0xf0>
 8006da2:	3c01      	subs	r4, #1
 8006da4:	e7eb      	b.n	8006d7e <quorem+0xea>
 8006da6:	2000      	movs	r0, #0
 8006da8:	e7ee      	b.n	8006d88 <quorem+0xf4>
 8006daa:	0000      	movs	r0, r0
 8006dac:	0000      	movs	r0, r0
	...

08006db0 <_dtoa_r>:
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	ed2d 8b02 	vpush	{d8}
 8006db8:	ec57 6b10 	vmov	r6, r7, d0
 8006dbc:	b095      	sub	sp, #84	; 0x54
 8006dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006dc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006dc4:	9105      	str	r1, [sp, #20]
 8006dc6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006dca:	4604      	mov	r4, r0
 8006dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dd0:	b975      	cbnz	r5, 8006df0 <_dtoa_r+0x40>
 8006dd2:	2010      	movs	r0, #16
 8006dd4:	f7ff f8dc 	bl	8005f90 <malloc>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6260      	str	r0, [r4, #36]	; 0x24
 8006ddc:	b920      	cbnz	r0, 8006de8 <_dtoa_r+0x38>
 8006dde:	4bb2      	ldr	r3, [pc, #712]	; (80070a8 <_dtoa_r+0x2f8>)
 8006de0:	21ea      	movs	r1, #234	; 0xea
 8006de2:	48b2      	ldr	r0, [pc, #712]	; (80070ac <_dtoa_r+0x2fc>)
 8006de4:	f001 fd4a 	bl	800887c <__assert_func>
 8006de8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006dec:	6005      	str	r5, [r0, #0]
 8006dee:	60c5      	str	r5, [r0, #12]
 8006df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	b151      	cbz	r1, 8006e0c <_dtoa_r+0x5c>
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	604a      	str	r2, [r1, #4]
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4093      	lsls	r3, r2
 8006dfe:	608b      	str	r3, [r1, #8]
 8006e00:	4620      	mov	r0, r4
 8006e02:	f001 f83f 	bl	8007e84 <_Bfree>
 8006e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	1e3b      	subs	r3, r7, #0
 8006e0e:	bfb9      	ittee	lt
 8006e10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e14:	9303      	strlt	r3, [sp, #12]
 8006e16:	2300      	movge	r3, #0
 8006e18:	f8c8 3000 	strge.w	r3, [r8]
 8006e1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006e20:	4ba3      	ldr	r3, [pc, #652]	; (80070b0 <_dtoa_r+0x300>)
 8006e22:	bfbc      	itt	lt
 8006e24:	2201      	movlt	r2, #1
 8006e26:	f8c8 2000 	strlt.w	r2, [r8]
 8006e2a:	ea33 0309 	bics.w	r3, r3, r9
 8006e2e:	d11b      	bne.n	8006e68 <_dtoa_r+0xb8>
 8006e30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e3c:	4333      	orrs	r3, r6
 8006e3e:	f000 857a 	beq.w	8007936 <_dtoa_r+0xb86>
 8006e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e44:	b963      	cbnz	r3, 8006e60 <_dtoa_r+0xb0>
 8006e46:	4b9b      	ldr	r3, [pc, #620]	; (80070b4 <_dtoa_r+0x304>)
 8006e48:	e024      	b.n	8006e94 <_dtoa_r+0xe4>
 8006e4a:	4b9b      	ldr	r3, [pc, #620]	; (80070b8 <_dtoa_r+0x308>)
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	9800      	ldr	r0, [sp, #0]
 8006e56:	b015      	add	sp, #84	; 0x54
 8006e58:	ecbd 8b02 	vpop	{d8}
 8006e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e60:	4b94      	ldr	r3, [pc, #592]	; (80070b4 <_dtoa_r+0x304>)
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	3303      	adds	r3, #3
 8006e66:	e7f3      	b.n	8006e50 <_dtoa_r+0xa0>
 8006e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	ec51 0b17 	vmov	r0, r1, d7
 8006e72:	2300      	movs	r3, #0
 8006e74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006e78:	f7f9 fe46 	bl	8000b08 <__aeabi_dcmpeq>
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	b158      	cbz	r0, 8006e98 <_dtoa_r+0xe8>
 8006e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e82:	2301      	movs	r3, #1
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8551 	beq.w	8007930 <_dtoa_r+0xb80>
 8006e8e:	488b      	ldr	r0, [pc, #556]	; (80070bc <_dtoa_r+0x30c>)
 8006e90:	6018      	str	r0, [r3, #0]
 8006e92:	1e43      	subs	r3, r0, #1
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	e7dd      	b.n	8006e54 <_dtoa_r+0xa4>
 8006e98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006e9c:	aa12      	add	r2, sp, #72	; 0x48
 8006e9e:	a913      	add	r1, sp, #76	; 0x4c
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f001 fad1 	bl	8008448 <__d2b>
 8006ea6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006eaa:	4683      	mov	fp, r0
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	d07c      	beq.n	8006faa <_dtoa_r+0x1fa>
 8006eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006eb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006ebe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ec2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006eca:	4b7d      	ldr	r3, [pc, #500]	; (80070c0 <_dtoa_r+0x310>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	f7f9 f9f9 	bl	80002c8 <__aeabi_dsub>
 8006ed6:	a36e      	add	r3, pc, #440	; (adr r3, 8007090 <_dtoa_r+0x2e0>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f7f9 fbac 	bl	8000638 <__aeabi_dmul>
 8006ee0:	a36d      	add	r3, pc, #436	; (adr r3, 8007098 <_dtoa_r+0x2e8>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f7f9 f9f1 	bl	80002cc <__adddf3>
 8006eea:	4606      	mov	r6, r0
 8006eec:	4628      	mov	r0, r5
 8006eee:	460f      	mov	r7, r1
 8006ef0:	f7f9 fb38 	bl	8000564 <__aeabi_i2d>
 8006ef4:	a36a      	add	r3, pc, #424	; (adr r3, 80070a0 <_dtoa_r+0x2f0>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 fb9d 	bl	8000638 <__aeabi_dmul>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4630      	mov	r0, r6
 8006f04:	4639      	mov	r1, r7
 8006f06:	f7f9 f9e1 	bl	80002cc <__adddf3>
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460f      	mov	r7, r1
 8006f0e:	f7f9 fe43 	bl	8000b98 <__aeabi_d2iz>
 8006f12:	2200      	movs	r2, #0
 8006f14:	4682      	mov	sl, r0
 8006f16:	2300      	movs	r3, #0
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 fdfe 	bl	8000b1c <__aeabi_dcmplt>
 8006f20:	b148      	cbz	r0, 8006f36 <_dtoa_r+0x186>
 8006f22:	4650      	mov	r0, sl
 8006f24:	f7f9 fb1e 	bl	8000564 <__aeabi_i2d>
 8006f28:	4632      	mov	r2, r6
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	f7f9 fdec 	bl	8000b08 <__aeabi_dcmpeq>
 8006f30:	b908      	cbnz	r0, 8006f36 <_dtoa_r+0x186>
 8006f32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f36:	f1ba 0f16 	cmp.w	sl, #22
 8006f3a:	d854      	bhi.n	8006fe6 <_dtoa_r+0x236>
 8006f3c:	4b61      	ldr	r3, [pc, #388]	; (80070c4 <_dtoa_r+0x314>)
 8006f3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f4a:	f7f9 fde7 	bl	8000b1c <__aeabi_dcmplt>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d04b      	beq.n	8006fea <_dtoa_r+0x23a>
 8006f52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f56:	2300      	movs	r3, #0
 8006f58:	930e      	str	r3, [sp, #56]	; 0x38
 8006f5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f5c:	1b5d      	subs	r5, r3, r5
 8006f5e:	1e6b      	subs	r3, r5, #1
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	bf43      	ittte	mi
 8006f64:	2300      	movmi	r3, #0
 8006f66:	f1c5 0801 	rsbmi	r8, r5, #1
 8006f6a:	9304      	strmi	r3, [sp, #16]
 8006f6c:	f04f 0800 	movpl.w	r8, #0
 8006f70:	f1ba 0f00 	cmp.w	sl, #0
 8006f74:	db3b      	blt.n	8006fee <_dtoa_r+0x23e>
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006f7c:	4453      	add	r3, sl
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	2300      	movs	r3, #0
 8006f82:	9306      	str	r3, [sp, #24]
 8006f84:	9b05      	ldr	r3, [sp, #20]
 8006f86:	2b09      	cmp	r3, #9
 8006f88:	d869      	bhi.n	800705e <_dtoa_r+0x2ae>
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	bfc4      	itt	gt
 8006f8e:	3b04      	subgt	r3, #4
 8006f90:	9305      	strgt	r3, [sp, #20]
 8006f92:	9b05      	ldr	r3, [sp, #20]
 8006f94:	f1a3 0302 	sub.w	r3, r3, #2
 8006f98:	bfcc      	ite	gt
 8006f9a:	2500      	movgt	r5, #0
 8006f9c:	2501      	movle	r5, #1
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d869      	bhi.n	8007076 <_dtoa_r+0x2c6>
 8006fa2:	e8df f003 	tbb	[pc, r3]
 8006fa6:	4e2c      	.short	0x4e2c
 8006fa8:	5a4c      	.short	0x5a4c
 8006faa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006fae:	441d      	add	r5, r3
 8006fb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	bfc1      	itttt	gt
 8006fb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006fc0:	fa09 f303 	lslgt.w	r3, r9, r3
 8006fc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fc8:	bfda      	itte	le
 8006fca:	f1c3 0320 	rsble	r3, r3, #32
 8006fce:	fa06 f003 	lslle.w	r0, r6, r3
 8006fd2:	4318      	orrgt	r0, r3
 8006fd4:	f7f9 fab6 	bl	8000544 <__aeabi_ui2d>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4606      	mov	r6, r0
 8006fdc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006fe0:	3d01      	subs	r5, #1
 8006fe2:	9310      	str	r3, [sp, #64]	; 0x40
 8006fe4:	e771      	b.n	8006eca <_dtoa_r+0x11a>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7b6      	b.n	8006f58 <_dtoa_r+0x1a8>
 8006fea:	900e      	str	r0, [sp, #56]	; 0x38
 8006fec:	e7b5      	b.n	8006f5a <_dtoa_r+0x1aa>
 8006fee:	f1ca 0300 	rsb	r3, sl, #0
 8006ff2:	9306      	str	r3, [sp, #24]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	eba8 080a 	sub.w	r8, r8, sl
 8006ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8006ffc:	e7c2      	b.n	8006f84 <_dtoa_r+0x1d4>
 8006ffe:	2300      	movs	r3, #0
 8007000:	9308      	str	r3, [sp, #32]
 8007002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	dc39      	bgt.n	800707c <_dtoa_r+0x2cc>
 8007008:	f04f 0901 	mov.w	r9, #1
 800700c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007010:	464b      	mov	r3, r9
 8007012:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007016:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007018:	2200      	movs	r2, #0
 800701a:	6042      	str	r2, [r0, #4]
 800701c:	2204      	movs	r2, #4
 800701e:	f102 0614 	add.w	r6, r2, #20
 8007022:	429e      	cmp	r6, r3
 8007024:	6841      	ldr	r1, [r0, #4]
 8007026:	d92f      	bls.n	8007088 <_dtoa_r+0x2d8>
 8007028:	4620      	mov	r0, r4
 800702a:	f000 feeb 	bl	8007e04 <_Balloc>
 800702e:	9000      	str	r0, [sp, #0]
 8007030:	2800      	cmp	r0, #0
 8007032:	d14b      	bne.n	80070cc <_dtoa_r+0x31c>
 8007034:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <_dtoa_r+0x318>)
 8007036:	4602      	mov	r2, r0
 8007038:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800703c:	e6d1      	b.n	8006de2 <_dtoa_r+0x32>
 800703e:	2301      	movs	r3, #1
 8007040:	e7de      	b.n	8007000 <_dtoa_r+0x250>
 8007042:	2300      	movs	r3, #0
 8007044:	9308      	str	r3, [sp, #32]
 8007046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007048:	eb0a 0903 	add.w	r9, sl, r3
 800704c:	f109 0301 	add.w	r3, r9, #1
 8007050:	2b01      	cmp	r3, #1
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	bfb8      	it	lt
 8007056:	2301      	movlt	r3, #1
 8007058:	e7dd      	b.n	8007016 <_dtoa_r+0x266>
 800705a:	2301      	movs	r3, #1
 800705c:	e7f2      	b.n	8007044 <_dtoa_r+0x294>
 800705e:	2501      	movs	r5, #1
 8007060:	2300      	movs	r3, #0
 8007062:	9305      	str	r3, [sp, #20]
 8007064:	9508      	str	r5, [sp, #32]
 8007066:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800706a:	2200      	movs	r2, #0
 800706c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007070:	2312      	movs	r3, #18
 8007072:	9209      	str	r2, [sp, #36]	; 0x24
 8007074:	e7cf      	b.n	8007016 <_dtoa_r+0x266>
 8007076:	2301      	movs	r3, #1
 8007078:	9308      	str	r3, [sp, #32]
 800707a:	e7f4      	b.n	8007066 <_dtoa_r+0x2b6>
 800707c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007080:	f8cd 9004 	str.w	r9, [sp, #4]
 8007084:	464b      	mov	r3, r9
 8007086:	e7c6      	b.n	8007016 <_dtoa_r+0x266>
 8007088:	3101      	adds	r1, #1
 800708a:	6041      	str	r1, [r0, #4]
 800708c:	0052      	lsls	r2, r2, #1
 800708e:	e7c6      	b.n	800701e <_dtoa_r+0x26e>
 8007090:	636f4361 	.word	0x636f4361
 8007094:	3fd287a7 	.word	0x3fd287a7
 8007098:	8b60c8b3 	.word	0x8b60c8b3
 800709c:	3fc68a28 	.word	0x3fc68a28
 80070a0:	509f79fb 	.word	0x509f79fb
 80070a4:	3fd34413 	.word	0x3fd34413
 80070a8:	08009e91 	.word	0x08009e91
 80070ac:	08009ea8 	.word	0x08009ea8
 80070b0:	7ff00000 	.word	0x7ff00000
 80070b4:	08009e8d 	.word	0x08009e8d
 80070b8:	08009e84 	.word	0x08009e84
 80070bc:	08009e61 	.word	0x08009e61
 80070c0:	3ff80000 	.word	0x3ff80000
 80070c4:	0800a000 	.word	0x0800a000
 80070c8:	08009f07 	.word	0x08009f07
 80070cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ce:	9a00      	ldr	r2, [sp, #0]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	9b01      	ldr	r3, [sp, #4]
 80070d4:	2b0e      	cmp	r3, #14
 80070d6:	f200 80ad 	bhi.w	8007234 <_dtoa_r+0x484>
 80070da:	2d00      	cmp	r5, #0
 80070dc:	f000 80aa 	beq.w	8007234 <_dtoa_r+0x484>
 80070e0:	f1ba 0f00 	cmp.w	sl, #0
 80070e4:	dd36      	ble.n	8007154 <_dtoa_r+0x3a4>
 80070e6:	4ac3      	ldr	r2, [pc, #780]	; (80073f4 <_dtoa_r+0x644>)
 80070e8:	f00a 030f 	and.w	r3, sl, #15
 80070ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070f0:	ed93 7b00 	vldr	d7, [r3]
 80070f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80070fc:	eeb0 8a47 	vmov.f32	s16, s14
 8007100:	eef0 8a67 	vmov.f32	s17, s15
 8007104:	d016      	beq.n	8007134 <_dtoa_r+0x384>
 8007106:	4bbc      	ldr	r3, [pc, #752]	; (80073f8 <_dtoa_r+0x648>)
 8007108:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800710c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007110:	f7f9 fbbc 	bl	800088c <__aeabi_ddiv>
 8007114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007118:	f007 070f 	and.w	r7, r7, #15
 800711c:	2503      	movs	r5, #3
 800711e:	4eb6      	ldr	r6, [pc, #728]	; (80073f8 <_dtoa_r+0x648>)
 8007120:	b957      	cbnz	r7, 8007138 <_dtoa_r+0x388>
 8007122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007126:	ec53 2b18 	vmov	r2, r3, d8
 800712a:	f7f9 fbaf 	bl	800088c <__aeabi_ddiv>
 800712e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007132:	e029      	b.n	8007188 <_dtoa_r+0x3d8>
 8007134:	2502      	movs	r5, #2
 8007136:	e7f2      	b.n	800711e <_dtoa_r+0x36e>
 8007138:	07f9      	lsls	r1, r7, #31
 800713a:	d508      	bpl.n	800714e <_dtoa_r+0x39e>
 800713c:	ec51 0b18 	vmov	r0, r1, d8
 8007140:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007144:	f7f9 fa78 	bl	8000638 <__aeabi_dmul>
 8007148:	ec41 0b18 	vmov	d8, r0, r1
 800714c:	3501      	adds	r5, #1
 800714e:	107f      	asrs	r7, r7, #1
 8007150:	3608      	adds	r6, #8
 8007152:	e7e5      	b.n	8007120 <_dtoa_r+0x370>
 8007154:	f000 80a6 	beq.w	80072a4 <_dtoa_r+0x4f4>
 8007158:	f1ca 0600 	rsb	r6, sl, #0
 800715c:	4ba5      	ldr	r3, [pc, #660]	; (80073f4 <_dtoa_r+0x644>)
 800715e:	4fa6      	ldr	r7, [pc, #664]	; (80073f8 <_dtoa_r+0x648>)
 8007160:	f006 020f 	and.w	r2, r6, #15
 8007164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007170:	f7f9 fa62 	bl	8000638 <__aeabi_dmul>
 8007174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007178:	1136      	asrs	r6, r6, #4
 800717a:	2300      	movs	r3, #0
 800717c:	2502      	movs	r5, #2
 800717e:	2e00      	cmp	r6, #0
 8007180:	f040 8085 	bne.w	800728e <_dtoa_r+0x4de>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1d2      	bne.n	800712e <_dtoa_r+0x37e>
 8007188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 808c 	beq.w	80072a8 <_dtoa_r+0x4f8>
 8007190:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007194:	4b99      	ldr	r3, [pc, #612]	; (80073fc <_dtoa_r+0x64c>)
 8007196:	2200      	movs	r2, #0
 8007198:	4630      	mov	r0, r6
 800719a:	4639      	mov	r1, r7
 800719c:	f7f9 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	f000 8081 	beq.w	80072a8 <_dtoa_r+0x4f8>
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d07d      	beq.n	80072a8 <_dtoa_r+0x4f8>
 80071ac:	f1b9 0f00 	cmp.w	r9, #0
 80071b0:	dd3c      	ble.n	800722c <_dtoa_r+0x47c>
 80071b2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80071b6:	9307      	str	r3, [sp, #28]
 80071b8:	2200      	movs	r2, #0
 80071ba:	4b91      	ldr	r3, [pc, #580]	; (8007400 <_dtoa_r+0x650>)
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fa3a 	bl	8000638 <__aeabi_dmul>
 80071c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071c8:	3501      	adds	r5, #1
 80071ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80071ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071d2:	4628      	mov	r0, r5
 80071d4:	f7f9 f9c6 	bl	8000564 <__aeabi_i2d>
 80071d8:	4632      	mov	r2, r6
 80071da:	463b      	mov	r3, r7
 80071dc:	f7f9 fa2c 	bl	8000638 <__aeabi_dmul>
 80071e0:	4b88      	ldr	r3, [pc, #544]	; (8007404 <_dtoa_r+0x654>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	f7f9 f872 	bl	80002cc <__adddf3>
 80071e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80071ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071f0:	9303      	str	r3, [sp, #12]
 80071f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d15c      	bne.n	80072b2 <_dtoa_r+0x502>
 80071f8:	4b83      	ldr	r3, [pc, #524]	; (8007408 <_dtoa_r+0x658>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	4630      	mov	r0, r6
 80071fe:	4639      	mov	r1, r7
 8007200:	f7f9 f862 	bl	80002c8 <__aeabi_dsub>
 8007204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007208:	4606      	mov	r6, r0
 800720a:	460f      	mov	r7, r1
 800720c:	f7f9 fca4 	bl	8000b58 <__aeabi_dcmpgt>
 8007210:	2800      	cmp	r0, #0
 8007212:	f040 8296 	bne.w	8007742 <_dtoa_r+0x992>
 8007216:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800721a:	4630      	mov	r0, r6
 800721c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8007226:	2800      	cmp	r0, #0
 8007228:	f040 8288 	bne.w	800773c <_dtoa_r+0x98c>
 800722c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007230:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007236:	2b00      	cmp	r3, #0
 8007238:	f2c0 8158 	blt.w	80074ec <_dtoa_r+0x73c>
 800723c:	f1ba 0f0e 	cmp.w	sl, #14
 8007240:	f300 8154 	bgt.w	80074ec <_dtoa_r+0x73c>
 8007244:	4b6b      	ldr	r3, [pc, #428]	; (80073f4 <_dtoa_r+0x644>)
 8007246:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800724a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	f280 80e3 	bge.w	800741c <_dtoa_r+0x66c>
 8007256:	9b01      	ldr	r3, [sp, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f300 80df 	bgt.w	800741c <_dtoa_r+0x66c>
 800725e:	f040 826d 	bne.w	800773c <_dtoa_r+0x98c>
 8007262:	4b69      	ldr	r3, [pc, #420]	; (8007408 <_dtoa_r+0x658>)
 8007264:	2200      	movs	r2, #0
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	f7f9 f9e5 	bl	8000638 <__aeabi_dmul>
 800726e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007272:	f7f9 fc67 	bl	8000b44 <__aeabi_dcmpge>
 8007276:	9e01      	ldr	r6, [sp, #4]
 8007278:	4637      	mov	r7, r6
 800727a:	2800      	cmp	r0, #0
 800727c:	f040 8243 	bne.w	8007706 <_dtoa_r+0x956>
 8007280:	9d00      	ldr	r5, [sp, #0]
 8007282:	2331      	movs	r3, #49	; 0x31
 8007284:	f805 3b01 	strb.w	r3, [r5], #1
 8007288:	f10a 0a01 	add.w	sl, sl, #1
 800728c:	e23f      	b.n	800770e <_dtoa_r+0x95e>
 800728e:	07f2      	lsls	r2, r6, #31
 8007290:	d505      	bpl.n	800729e <_dtoa_r+0x4ee>
 8007292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007296:	f7f9 f9cf 	bl	8000638 <__aeabi_dmul>
 800729a:	3501      	adds	r5, #1
 800729c:	2301      	movs	r3, #1
 800729e:	1076      	asrs	r6, r6, #1
 80072a0:	3708      	adds	r7, #8
 80072a2:	e76c      	b.n	800717e <_dtoa_r+0x3ce>
 80072a4:	2502      	movs	r5, #2
 80072a6:	e76f      	b.n	8007188 <_dtoa_r+0x3d8>
 80072a8:	9b01      	ldr	r3, [sp, #4]
 80072aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80072ae:	930c      	str	r3, [sp, #48]	; 0x30
 80072b0:	e78d      	b.n	80071ce <_dtoa_r+0x41e>
 80072b2:	9900      	ldr	r1, [sp, #0]
 80072b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072b8:	4b4e      	ldr	r3, [pc, #312]	; (80073f4 <_dtoa_r+0x644>)
 80072ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072be:	4401      	add	r1, r0
 80072c0:	9102      	str	r1, [sp, #8]
 80072c2:	9908      	ldr	r1, [sp, #32]
 80072c4:	eeb0 8a47 	vmov.f32	s16, s14
 80072c8:	eef0 8a67 	vmov.f32	s17, s15
 80072cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072d4:	2900      	cmp	r1, #0
 80072d6:	d045      	beq.n	8007364 <_dtoa_r+0x5b4>
 80072d8:	494c      	ldr	r1, [pc, #304]	; (800740c <_dtoa_r+0x65c>)
 80072da:	2000      	movs	r0, #0
 80072dc:	f7f9 fad6 	bl	800088c <__aeabi_ddiv>
 80072e0:	ec53 2b18 	vmov	r2, r3, d8
 80072e4:	f7f8 fff0 	bl	80002c8 <__aeabi_dsub>
 80072e8:	9d00      	ldr	r5, [sp, #0]
 80072ea:	ec41 0b18 	vmov	d8, r0, r1
 80072ee:	4639      	mov	r1, r7
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7f9 fc51 	bl	8000b98 <__aeabi_d2iz>
 80072f6:	900c      	str	r0, [sp, #48]	; 0x30
 80072f8:	f7f9 f934 	bl	8000564 <__aeabi_i2d>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f8 ffe0 	bl	80002c8 <__aeabi_dsub>
 8007308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800730a:	3330      	adds	r3, #48	; 0x30
 800730c:	f805 3b01 	strb.w	r3, [r5], #1
 8007310:	ec53 2b18 	vmov	r2, r3, d8
 8007314:	4606      	mov	r6, r0
 8007316:	460f      	mov	r7, r1
 8007318:	f7f9 fc00 	bl	8000b1c <__aeabi_dcmplt>
 800731c:	2800      	cmp	r0, #0
 800731e:	d165      	bne.n	80073ec <_dtoa_r+0x63c>
 8007320:	4632      	mov	r2, r6
 8007322:	463b      	mov	r3, r7
 8007324:	4935      	ldr	r1, [pc, #212]	; (80073fc <_dtoa_r+0x64c>)
 8007326:	2000      	movs	r0, #0
 8007328:	f7f8 ffce 	bl	80002c8 <__aeabi_dsub>
 800732c:	ec53 2b18 	vmov	r2, r3, d8
 8007330:	f7f9 fbf4 	bl	8000b1c <__aeabi_dcmplt>
 8007334:	2800      	cmp	r0, #0
 8007336:	f040 80b9 	bne.w	80074ac <_dtoa_r+0x6fc>
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	429d      	cmp	r5, r3
 800733e:	f43f af75 	beq.w	800722c <_dtoa_r+0x47c>
 8007342:	4b2f      	ldr	r3, [pc, #188]	; (8007400 <_dtoa_r+0x650>)
 8007344:	ec51 0b18 	vmov	r0, r1, d8
 8007348:	2200      	movs	r2, #0
 800734a:	f7f9 f975 	bl	8000638 <__aeabi_dmul>
 800734e:	4b2c      	ldr	r3, [pc, #176]	; (8007400 <_dtoa_r+0x650>)
 8007350:	ec41 0b18 	vmov	d8, r0, r1
 8007354:	2200      	movs	r2, #0
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	f7f9 f96d 	bl	8000638 <__aeabi_dmul>
 800735e:	4606      	mov	r6, r0
 8007360:	460f      	mov	r7, r1
 8007362:	e7c4      	b.n	80072ee <_dtoa_r+0x53e>
 8007364:	ec51 0b17 	vmov	r0, r1, d7
 8007368:	f7f9 f966 	bl	8000638 <__aeabi_dmul>
 800736c:	9b02      	ldr	r3, [sp, #8]
 800736e:	9d00      	ldr	r5, [sp, #0]
 8007370:	930c      	str	r3, [sp, #48]	; 0x30
 8007372:	ec41 0b18 	vmov	d8, r0, r1
 8007376:	4639      	mov	r1, r7
 8007378:	4630      	mov	r0, r6
 800737a:	f7f9 fc0d 	bl	8000b98 <__aeabi_d2iz>
 800737e:	9011      	str	r0, [sp, #68]	; 0x44
 8007380:	f7f9 f8f0 	bl	8000564 <__aeabi_i2d>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	f7f8 ff9c 	bl	80002c8 <__aeabi_dsub>
 8007390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007392:	3330      	adds	r3, #48	; 0x30
 8007394:	f805 3b01 	strb.w	r3, [r5], #1
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	429d      	cmp	r5, r3
 800739c:	4606      	mov	r6, r0
 800739e:	460f      	mov	r7, r1
 80073a0:	f04f 0200 	mov.w	r2, #0
 80073a4:	d134      	bne.n	8007410 <_dtoa_r+0x660>
 80073a6:	4b19      	ldr	r3, [pc, #100]	; (800740c <_dtoa_r+0x65c>)
 80073a8:	ec51 0b18 	vmov	r0, r1, d8
 80073ac:	f7f8 ff8e 	bl	80002cc <__adddf3>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4630      	mov	r0, r6
 80073b6:	4639      	mov	r1, r7
 80073b8:	f7f9 fbce 	bl	8000b58 <__aeabi_dcmpgt>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d175      	bne.n	80074ac <_dtoa_r+0x6fc>
 80073c0:	ec53 2b18 	vmov	r2, r3, d8
 80073c4:	4911      	ldr	r1, [pc, #68]	; (800740c <_dtoa_r+0x65c>)
 80073c6:	2000      	movs	r0, #0
 80073c8:	f7f8 ff7e 	bl	80002c8 <__aeabi_dsub>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f9 fba2 	bl	8000b1c <__aeabi_dcmplt>
 80073d8:	2800      	cmp	r0, #0
 80073da:	f43f af27 	beq.w	800722c <_dtoa_r+0x47c>
 80073de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073e0:	1e6b      	subs	r3, r5, #1
 80073e2:	930c      	str	r3, [sp, #48]	; 0x30
 80073e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073e8:	2b30      	cmp	r3, #48	; 0x30
 80073ea:	d0f8      	beq.n	80073de <_dtoa_r+0x62e>
 80073ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80073f0:	e04a      	b.n	8007488 <_dtoa_r+0x6d8>
 80073f2:	bf00      	nop
 80073f4:	0800a000 	.word	0x0800a000
 80073f8:	08009fd8 	.word	0x08009fd8
 80073fc:	3ff00000 	.word	0x3ff00000
 8007400:	40240000 	.word	0x40240000
 8007404:	401c0000 	.word	0x401c0000
 8007408:	40140000 	.word	0x40140000
 800740c:	3fe00000 	.word	0x3fe00000
 8007410:	4baf      	ldr	r3, [pc, #700]	; (80076d0 <_dtoa_r+0x920>)
 8007412:	f7f9 f911 	bl	8000638 <__aeabi_dmul>
 8007416:	4606      	mov	r6, r0
 8007418:	460f      	mov	r7, r1
 800741a:	e7ac      	b.n	8007376 <_dtoa_r+0x5c6>
 800741c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007420:	9d00      	ldr	r5, [sp, #0]
 8007422:	4642      	mov	r2, r8
 8007424:	464b      	mov	r3, r9
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f9 fa2f 	bl	800088c <__aeabi_ddiv>
 800742e:	f7f9 fbb3 	bl	8000b98 <__aeabi_d2iz>
 8007432:	9002      	str	r0, [sp, #8]
 8007434:	f7f9 f896 	bl	8000564 <__aeabi_i2d>
 8007438:	4642      	mov	r2, r8
 800743a:	464b      	mov	r3, r9
 800743c:	f7f9 f8fc 	bl	8000638 <__aeabi_dmul>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4630      	mov	r0, r6
 8007446:	4639      	mov	r1, r7
 8007448:	f7f8 ff3e 	bl	80002c8 <__aeabi_dsub>
 800744c:	9e02      	ldr	r6, [sp, #8]
 800744e:	9f01      	ldr	r7, [sp, #4]
 8007450:	3630      	adds	r6, #48	; 0x30
 8007452:	f805 6b01 	strb.w	r6, [r5], #1
 8007456:	9e00      	ldr	r6, [sp, #0]
 8007458:	1bae      	subs	r6, r5, r6
 800745a:	42b7      	cmp	r7, r6
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	d137      	bne.n	80074d2 <_dtoa_r+0x722>
 8007462:	f7f8 ff33 	bl	80002cc <__adddf3>
 8007466:	4642      	mov	r2, r8
 8007468:	464b      	mov	r3, r9
 800746a:	4606      	mov	r6, r0
 800746c:	460f      	mov	r7, r1
 800746e:	f7f9 fb73 	bl	8000b58 <__aeabi_dcmpgt>
 8007472:	b9c8      	cbnz	r0, 80074a8 <_dtoa_r+0x6f8>
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	4630      	mov	r0, r6
 800747a:	4639      	mov	r1, r7
 800747c:	f7f9 fb44 	bl	8000b08 <__aeabi_dcmpeq>
 8007480:	b110      	cbz	r0, 8007488 <_dtoa_r+0x6d8>
 8007482:	9b02      	ldr	r3, [sp, #8]
 8007484:	07d9      	lsls	r1, r3, #31
 8007486:	d40f      	bmi.n	80074a8 <_dtoa_r+0x6f8>
 8007488:	4620      	mov	r0, r4
 800748a:	4659      	mov	r1, fp
 800748c:	f000 fcfa 	bl	8007e84 <_Bfree>
 8007490:	2300      	movs	r3, #0
 8007492:	702b      	strb	r3, [r5, #0]
 8007494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007496:	f10a 0001 	add.w	r0, sl, #1
 800749a:	6018      	str	r0, [r3, #0]
 800749c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f43f acd8 	beq.w	8006e54 <_dtoa_r+0xa4>
 80074a4:	601d      	str	r5, [r3, #0]
 80074a6:	e4d5      	b.n	8006e54 <_dtoa_r+0xa4>
 80074a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80074ac:	462b      	mov	r3, r5
 80074ae:	461d      	mov	r5, r3
 80074b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074b4:	2a39      	cmp	r2, #57	; 0x39
 80074b6:	d108      	bne.n	80074ca <_dtoa_r+0x71a>
 80074b8:	9a00      	ldr	r2, [sp, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d1f7      	bne.n	80074ae <_dtoa_r+0x6fe>
 80074be:	9a07      	ldr	r2, [sp, #28]
 80074c0:	9900      	ldr	r1, [sp, #0]
 80074c2:	3201      	adds	r2, #1
 80074c4:	9207      	str	r2, [sp, #28]
 80074c6:	2230      	movs	r2, #48	; 0x30
 80074c8:	700a      	strb	r2, [r1, #0]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	3201      	adds	r2, #1
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e78c      	b.n	80073ec <_dtoa_r+0x63c>
 80074d2:	4b7f      	ldr	r3, [pc, #508]	; (80076d0 <_dtoa_r+0x920>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	f7f9 f8af 	bl	8000638 <__aeabi_dmul>
 80074da:	2200      	movs	r2, #0
 80074dc:	2300      	movs	r3, #0
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	f7f9 fb11 	bl	8000b08 <__aeabi_dcmpeq>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d09b      	beq.n	8007422 <_dtoa_r+0x672>
 80074ea:	e7cd      	b.n	8007488 <_dtoa_r+0x6d8>
 80074ec:	9a08      	ldr	r2, [sp, #32]
 80074ee:	2a00      	cmp	r2, #0
 80074f0:	f000 80c4 	beq.w	800767c <_dtoa_r+0x8cc>
 80074f4:	9a05      	ldr	r2, [sp, #20]
 80074f6:	2a01      	cmp	r2, #1
 80074f8:	f300 80a8 	bgt.w	800764c <_dtoa_r+0x89c>
 80074fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074fe:	2a00      	cmp	r2, #0
 8007500:	f000 80a0 	beq.w	8007644 <_dtoa_r+0x894>
 8007504:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007508:	9e06      	ldr	r6, [sp, #24]
 800750a:	4645      	mov	r5, r8
 800750c:	9a04      	ldr	r2, [sp, #16]
 800750e:	2101      	movs	r1, #1
 8007510:	441a      	add	r2, r3
 8007512:	4620      	mov	r0, r4
 8007514:	4498      	add	r8, r3
 8007516:	9204      	str	r2, [sp, #16]
 8007518:	f000 fd70 	bl	8007ffc <__i2b>
 800751c:	4607      	mov	r7, r0
 800751e:	2d00      	cmp	r5, #0
 8007520:	dd0b      	ble.n	800753a <_dtoa_r+0x78a>
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	dd08      	ble.n	800753a <_dtoa_r+0x78a>
 8007528:	42ab      	cmp	r3, r5
 800752a:	9a04      	ldr	r2, [sp, #16]
 800752c:	bfa8      	it	ge
 800752e:	462b      	movge	r3, r5
 8007530:	eba8 0803 	sub.w	r8, r8, r3
 8007534:	1aed      	subs	r5, r5, r3
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	9b06      	ldr	r3, [sp, #24]
 800753c:	b1fb      	cbz	r3, 800757e <_dtoa_r+0x7ce>
 800753e:	9b08      	ldr	r3, [sp, #32]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 809f 	beq.w	8007684 <_dtoa_r+0x8d4>
 8007546:	2e00      	cmp	r6, #0
 8007548:	dd11      	ble.n	800756e <_dtoa_r+0x7be>
 800754a:	4639      	mov	r1, r7
 800754c:	4632      	mov	r2, r6
 800754e:	4620      	mov	r0, r4
 8007550:	f000 fe10 	bl	8008174 <__pow5mult>
 8007554:	465a      	mov	r2, fp
 8007556:	4601      	mov	r1, r0
 8007558:	4607      	mov	r7, r0
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fd64 	bl	8008028 <__multiply>
 8007560:	4659      	mov	r1, fp
 8007562:	9007      	str	r0, [sp, #28]
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fc8d 	bl	8007e84 <_Bfree>
 800756a:	9b07      	ldr	r3, [sp, #28]
 800756c:	469b      	mov	fp, r3
 800756e:	9b06      	ldr	r3, [sp, #24]
 8007570:	1b9a      	subs	r2, r3, r6
 8007572:	d004      	beq.n	800757e <_dtoa_r+0x7ce>
 8007574:	4659      	mov	r1, fp
 8007576:	4620      	mov	r0, r4
 8007578:	f000 fdfc 	bl	8008174 <__pow5mult>
 800757c:	4683      	mov	fp, r0
 800757e:	2101      	movs	r1, #1
 8007580:	4620      	mov	r0, r4
 8007582:	f000 fd3b 	bl	8007ffc <__i2b>
 8007586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007588:	2b00      	cmp	r3, #0
 800758a:	4606      	mov	r6, r0
 800758c:	dd7c      	ble.n	8007688 <_dtoa_r+0x8d8>
 800758e:	461a      	mov	r2, r3
 8007590:	4601      	mov	r1, r0
 8007592:	4620      	mov	r0, r4
 8007594:	f000 fdee 	bl	8008174 <__pow5mult>
 8007598:	9b05      	ldr	r3, [sp, #20]
 800759a:	2b01      	cmp	r3, #1
 800759c:	4606      	mov	r6, r0
 800759e:	dd76      	ble.n	800768e <_dtoa_r+0x8de>
 80075a0:	2300      	movs	r3, #0
 80075a2:	9306      	str	r3, [sp, #24]
 80075a4:	6933      	ldr	r3, [r6, #16]
 80075a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075aa:	6918      	ldr	r0, [r3, #16]
 80075ac:	f000 fcd6 	bl	8007f5c <__hi0bits>
 80075b0:	f1c0 0020 	rsb	r0, r0, #32
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	4418      	add	r0, r3
 80075b8:	f010 001f 	ands.w	r0, r0, #31
 80075bc:	f000 8086 	beq.w	80076cc <_dtoa_r+0x91c>
 80075c0:	f1c0 0320 	rsb	r3, r0, #32
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	dd7f      	ble.n	80076c8 <_dtoa_r+0x918>
 80075c8:	f1c0 001c 	rsb	r0, r0, #28
 80075cc:	9b04      	ldr	r3, [sp, #16]
 80075ce:	4403      	add	r3, r0
 80075d0:	4480      	add	r8, r0
 80075d2:	4405      	add	r5, r0
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	dd05      	ble.n	80075e8 <_dtoa_r+0x838>
 80075dc:	4659      	mov	r1, fp
 80075de:	4642      	mov	r2, r8
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 fe21 	bl	8008228 <__lshift>
 80075e6:	4683      	mov	fp, r0
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dd05      	ble.n	80075fa <_dtoa_r+0x84a>
 80075ee:	4631      	mov	r1, r6
 80075f0:	461a      	mov	r2, r3
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fe18 	bl	8008228 <__lshift>
 80075f8:	4606      	mov	r6, r0
 80075fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d069      	beq.n	80076d4 <_dtoa_r+0x924>
 8007600:	4631      	mov	r1, r6
 8007602:	4658      	mov	r0, fp
 8007604:	f000 fe7c 	bl	8008300 <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	da63      	bge.n	80076d4 <_dtoa_r+0x924>
 800760c:	2300      	movs	r3, #0
 800760e:	4659      	mov	r1, fp
 8007610:	220a      	movs	r2, #10
 8007612:	4620      	mov	r0, r4
 8007614:	f000 fc58 	bl	8007ec8 <__multadd>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800761e:	4683      	mov	fp, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 818f 	beq.w	8007944 <_dtoa_r+0xb94>
 8007626:	4639      	mov	r1, r7
 8007628:	2300      	movs	r3, #0
 800762a:	220a      	movs	r2, #10
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fc4b 	bl	8007ec8 <__multadd>
 8007632:	f1b9 0f00 	cmp.w	r9, #0
 8007636:	4607      	mov	r7, r0
 8007638:	f300 808e 	bgt.w	8007758 <_dtoa_r+0x9a8>
 800763c:	9b05      	ldr	r3, [sp, #20]
 800763e:	2b02      	cmp	r3, #2
 8007640:	dc50      	bgt.n	80076e4 <_dtoa_r+0x934>
 8007642:	e089      	b.n	8007758 <_dtoa_r+0x9a8>
 8007644:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007646:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800764a:	e75d      	b.n	8007508 <_dtoa_r+0x758>
 800764c:	9b01      	ldr	r3, [sp, #4]
 800764e:	1e5e      	subs	r6, r3, #1
 8007650:	9b06      	ldr	r3, [sp, #24]
 8007652:	42b3      	cmp	r3, r6
 8007654:	bfbf      	itttt	lt
 8007656:	9b06      	ldrlt	r3, [sp, #24]
 8007658:	9606      	strlt	r6, [sp, #24]
 800765a:	1af2      	sublt	r2, r6, r3
 800765c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800765e:	bfb6      	itet	lt
 8007660:	189b      	addlt	r3, r3, r2
 8007662:	1b9e      	subge	r6, r3, r6
 8007664:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	bfb8      	it	lt
 800766a:	2600      	movlt	r6, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfb5      	itete	lt
 8007670:	eba8 0503 	sublt.w	r5, r8, r3
 8007674:	9b01      	ldrge	r3, [sp, #4]
 8007676:	2300      	movlt	r3, #0
 8007678:	4645      	movge	r5, r8
 800767a:	e747      	b.n	800750c <_dtoa_r+0x75c>
 800767c:	9e06      	ldr	r6, [sp, #24]
 800767e:	9f08      	ldr	r7, [sp, #32]
 8007680:	4645      	mov	r5, r8
 8007682:	e74c      	b.n	800751e <_dtoa_r+0x76e>
 8007684:	9a06      	ldr	r2, [sp, #24]
 8007686:	e775      	b.n	8007574 <_dtoa_r+0x7c4>
 8007688:	9b05      	ldr	r3, [sp, #20]
 800768a:	2b01      	cmp	r3, #1
 800768c:	dc18      	bgt.n	80076c0 <_dtoa_r+0x910>
 800768e:	9b02      	ldr	r3, [sp, #8]
 8007690:	b9b3      	cbnz	r3, 80076c0 <_dtoa_r+0x910>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007698:	b9a3      	cbnz	r3, 80076c4 <_dtoa_r+0x914>
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076a0:	0d1b      	lsrs	r3, r3, #20
 80076a2:	051b      	lsls	r3, r3, #20
 80076a4:	b12b      	cbz	r3, 80076b2 <_dtoa_r+0x902>
 80076a6:	9b04      	ldr	r3, [sp, #16]
 80076a8:	3301      	adds	r3, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	f108 0801 	add.w	r8, r8, #1
 80076b0:	2301      	movs	r3, #1
 80076b2:	9306      	str	r3, [sp, #24]
 80076b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f47f af74 	bne.w	80075a4 <_dtoa_r+0x7f4>
 80076bc:	2001      	movs	r0, #1
 80076be:	e779      	b.n	80075b4 <_dtoa_r+0x804>
 80076c0:	2300      	movs	r3, #0
 80076c2:	e7f6      	b.n	80076b2 <_dtoa_r+0x902>
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	e7f4      	b.n	80076b2 <_dtoa_r+0x902>
 80076c8:	d085      	beq.n	80075d6 <_dtoa_r+0x826>
 80076ca:	4618      	mov	r0, r3
 80076cc:	301c      	adds	r0, #28
 80076ce:	e77d      	b.n	80075cc <_dtoa_r+0x81c>
 80076d0:	40240000 	.word	0x40240000
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dc38      	bgt.n	800774c <_dtoa_r+0x99c>
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	dd35      	ble.n	800774c <_dtoa_r+0x99c>
 80076e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80076e4:	f1b9 0f00 	cmp.w	r9, #0
 80076e8:	d10d      	bne.n	8007706 <_dtoa_r+0x956>
 80076ea:	4631      	mov	r1, r6
 80076ec:	464b      	mov	r3, r9
 80076ee:	2205      	movs	r2, #5
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fbe9 	bl	8007ec8 <__multadd>
 80076f6:	4601      	mov	r1, r0
 80076f8:	4606      	mov	r6, r0
 80076fa:	4658      	mov	r0, fp
 80076fc:	f000 fe00 	bl	8008300 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	f73f adbd 	bgt.w	8007280 <_dtoa_r+0x4d0>
 8007706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007708:	9d00      	ldr	r5, [sp, #0]
 800770a:	ea6f 0a03 	mvn.w	sl, r3
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	4631      	mov	r1, r6
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fbb5 	bl	8007e84 <_Bfree>
 800771a:	2f00      	cmp	r7, #0
 800771c:	f43f aeb4 	beq.w	8007488 <_dtoa_r+0x6d8>
 8007720:	f1b8 0f00 	cmp.w	r8, #0
 8007724:	d005      	beq.n	8007732 <_dtoa_r+0x982>
 8007726:	45b8      	cmp	r8, r7
 8007728:	d003      	beq.n	8007732 <_dtoa_r+0x982>
 800772a:	4641      	mov	r1, r8
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fba9 	bl	8007e84 <_Bfree>
 8007732:	4639      	mov	r1, r7
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fba5 	bl	8007e84 <_Bfree>
 800773a:	e6a5      	b.n	8007488 <_dtoa_r+0x6d8>
 800773c:	2600      	movs	r6, #0
 800773e:	4637      	mov	r7, r6
 8007740:	e7e1      	b.n	8007706 <_dtoa_r+0x956>
 8007742:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007744:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007748:	4637      	mov	r7, r6
 800774a:	e599      	b.n	8007280 <_dtoa_r+0x4d0>
 800774c:	9b08      	ldr	r3, [sp, #32]
 800774e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80fd 	beq.w	8007952 <_dtoa_r+0xba2>
 8007758:	2d00      	cmp	r5, #0
 800775a:	dd05      	ble.n	8007768 <_dtoa_r+0x9b8>
 800775c:	4639      	mov	r1, r7
 800775e:	462a      	mov	r2, r5
 8007760:	4620      	mov	r0, r4
 8007762:	f000 fd61 	bl	8008228 <__lshift>
 8007766:	4607      	mov	r7, r0
 8007768:	9b06      	ldr	r3, [sp, #24]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d05c      	beq.n	8007828 <_dtoa_r+0xa78>
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fb47 	bl	8007e04 <_Balloc>
 8007776:	4605      	mov	r5, r0
 8007778:	b928      	cbnz	r0, 8007786 <_dtoa_r+0x9d6>
 800777a:	4b80      	ldr	r3, [pc, #512]	; (800797c <_dtoa_r+0xbcc>)
 800777c:	4602      	mov	r2, r0
 800777e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007782:	f7ff bb2e 	b.w	8006de2 <_dtoa_r+0x32>
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	3202      	adds	r2, #2
 800778a:	0092      	lsls	r2, r2, #2
 800778c:	f107 010c 	add.w	r1, r7, #12
 8007790:	300c      	adds	r0, #12
 8007792:	f000 fb1d 	bl	8007dd0 <memcpy>
 8007796:	2201      	movs	r2, #1
 8007798:	4629      	mov	r1, r5
 800779a:	4620      	mov	r0, r4
 800779c:	f000 fd44 	bl	8008228 <__lshift>
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	3301      	adds	r3, #1
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	444b      	add	r3, r9
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	9b02      	ldr	r3, [sp, #8]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	46b8      	mov	r8, r7
 80077b4:	9306      	str	r3, [sp, #24]
 80077b6:	4607      	mov	r7, r0
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	4631      	mov	r1, r6
 80077bc:	3b01      	subs	r3, #1
 80077be:	4658      	mov	r0, fp
 80077c0:	9302      	str	r3, [sp, #8]
 80077c2:	f7ff fa67 	bl	8006c94 <quorem>
 80077c6:	4603      	mov	r3, r0
 80077c8:	3330      	adds	r3, #48	; 0x30
 80077ca:	9004      	str	r0, [sp, #16]
 80077cc:	4641      	mov	r1, r8
 80077ce:	4658      	mov	r0, fp
 80077d0:	9308      	str	r3, [sp, #32]
 80077d2:	f000 fd95 	bl	8008300 <__mcmp>
 80077d6:	463a      	mov	r2, r7
 80077d8:	4681      	mov	r9, r0
 80077da:	4631      	mov	r1, r6
 80077dc:	4620      	mov	r0, r4
 80077de:	f000 fdab 	bl	8008338 <__mdiff>
 80077e2:	68c2      	ldr	r2, [r0, #12]
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	4605      	mov	r5, r0
 80077e8:	bb02      	cbnz	r2, 800782c <_dtoa_r+0xa7c>
 80077ea:	4601      	mov	r1, r0
 80077ec:	4658      	mov	r0, fp
 80077ee:	f000 fd87 	bl	8008300 <__mcmp>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	4602      	mov	r2, r0
 80077f6:	4629      	mov	r1, r5
 80077f8:	4620      	mov	r0, r4
 80077fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80077fe:	f000 fb41 	bl	8007e84 <_Bfree>
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007806:	9d01      	ldr	r5, [sp, #4]
 8007808:	ea43 0102 	orr.w	r1, r3, r2
 800780c:	9b06      	ldr	r3, [sp, #24]
 800780e:	430b      	orrs	r3, r1
 8007810:	9b08      	ldr	r3, [sp, #32]
 8007812:	d10d      	bne.n	8007830 <_dtoa_r+0xa80>
 8007814:	2b39      	cmp	r3, #57	; 0x39
 8007816:	d029      	beq.n	800786c <_dtoa_r+0xabc>
 8007818:	f1b9 0f00 	cmp.w	r9, #0
 800781c:	dd01      	ble.n	8007822 <_dtoa_r+0xa72>
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	3331      	adds	r3, #49	; 0x31
 8007822:	9a02      	ldr	r2, [sp, #8]
 8007824:	7013      	strb	r3, [r2, #0]
 8007826:	e774      	b.n	8007712 <_dtoa_r+0x962>
 8007828:	4638      	mov	r0, r7
 800782a:	e7b9      	b.n	80077a0 <_dtoa_r+0x9f0>
 800782c:	2201      	movs	r2, #1
 800782e:	e7e2      	b.n	80077f6 <_dtoa_r+0xa46>
 8007830:	f1b9 0f00 	cmp.w	r9, #0
 8007834:	db06      	blt.n	8007844 <_dtoa_r+0xa94>
 8007836:	9905      	ldr	r1, [sp, #20]
 8007838:	ea41 0909 	orr.w	r9, r1, r9
 800783c:	9906      	ldr	r1, [sp, #24]
 800783e:	ea59 0101 	orrs.w	r1, r9, r1
 8007842:	d120      	bne.n	8007886 <_dtoa_r+0xad6>
 8007844:	2a00      	cmp	r2, #0
 8007846:	ddec      	ble.n	8007822 <_dtoa_r+0xa72>
 8007848:	4659      	mov	r1, fp
 800784a:	2201      	movs	r2, #1
 800784c:	4620      	mov	r0, r4
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	f000 fcea 	bl	8008228 <__lshift>
 8007854:	4631      	mov	r1, r6
 8007856:	4683      	mov	fp, r0
 8007858:	f000 fd52 	bl	8008300 <__mcmp>
 800785c:	2800      	cmp	r0, #0
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	dc02      	bgt.n	8007868 <_dtoa_r+0xab8>
 8007862:	d1de      	bne.n	8007822 <_dtoa_r+0xa72>
 8007864:	07da      	lsls	r2, r3, #31
 8007866:	d5dc      	bpl.n	8007822 <_dtoa_r+0xa72>
 8007868:	2b39      	cmp	r3, #57	; 0x39
 800786a:	d1d8      	bne.n	800781e <_dtoa_r+0xa6e>
 800786c:	9a02      	ldr	r2, [sp, #8]
 800786e:	2339      	movs	r3, #57	; 0x39
 8007870:	7013      	strb	r3, [r2, #0]
 8007872:	462b      	mov	r3, r5
 8007874:	461d      	mov	r5, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800787c:	2a39      	cmp	r2, #57	; 0x39
 800787e:	d050      	beq.n	8007922 <_dtoa_r+0xb72>
 8007880:	3201      	adds	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	e745      	b.n	8007712 <_dtoa_r+0x962>
 8007886:	2a00      	cmp	r2, #0
 8007888:	dd03      	ble.n	8007892 <_dtoa_r+0xae2>
 800788a:	2b39      	cmp	r3, #57	; 0x39
 800788c:	d0ee      	beq.n	800786c <_dtoa_r+0xabc>
 800788e:	3301      	adds	r3, #1
 8007890:	e7c7      	b.n	8007822 <_dtoa_r+0xa72>
 8007892:	9a01      	ldr	r2, [sp, #4]
 8007894:	9907      	ldr	r1, [sp, #28]
 8007896:	f802 3c01 	strb.w	r3, [r2, #-1]
 800789a:	428a      	cmp	r2, r1
 800789c:	d02a      	beq.n	80078f4 <_dtoa_r+0xb44>
 800789e:	4659      	mov	r1, fp
 80078a0:	2300      	movs	r3, #0
 80078a2:	220a      	movs	r2, #10
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 fb0f 	bl	8007ec8 <__multadd>
 80078aa:	45b8      	cmp	r8, r7
 80078ac:	4683      	mov	fp, r0
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	f04f 020a 	mov.w	r2, #10
 80078b6:	4641      	mov	r1, r8
 80078b8:	4620      	mov	r0, r4
 80078ba:	d107      	bne.n	80078cc <_dtoa_r+0xb1c>
 80078bc:	f000 fb04 	bl	8007ec8 <__multadd>
 80078c0:	4680      	mov	r8, r0
 80078c2:	4607      	mov	r7, r0
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	3301      	adds	r3, #1
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	e775      	b.n	80077b8 <_dtoa_r+0xa08>
 80078cc:	f000 fafc 	bl	8007ec8 <__multadd>
 80078d0:	4639      	mov	r1, r7
 80078d2:	4680      	mov	r8, r0
 80078d4:	2300      	movs	r3, #0
 80078d6:	220a      	movs	r2, #10
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 faf5 	bl	8007ec8 <__multadd>
 80078de:	4607      	mov	r7, r0
 80078e0:	e7f0      	b.n	80078c4 <_dtoa_r+0xb14>
 80078e2:	f1b9 0f00 	cmp.w	r9, #0
 80078e6:	9a00      	ldr	r2, [sp, #0]
 80078e8:	bfcc      	ite	gt
 80078ea:	464d      	movgt	r5, r9
 80078ec:	2501      	movle	r5, #1
 80078ee:	4415      	add	r5, r2
 80078f0:	f04f 0800 	mov.w	r8, #0
 80078f4:	4659      	mov	r1, fp
 80078f6:	2201      	movs	r2, #1
 80078f8:	4620      	mov	r0, r4
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	f000 fc94 	bl	8008228 <__lshift>
 8007900:	4631      	mov	r1, r6
 8007902:	4683      	mov	fp, r0
 8007904:	f000 fcfc 	bl	8008300 <__mcmp>
 8007908:	2800      	cmp	r0, #0
 800790a:	dcb2      	bgt.n	8007872 <_dtoa_r+0xac2>
 800790c:	d102      	bne.n	8007914 <_dtoa_r+0xb64>
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	07db      	lsls	r3, r3, #31
 8007912:	d4ae      	bmi.n	8007872 <_dtoa_r+0xac2>
 8007914:	462b      	mov	r3, r5
 8007916:	461d      	mov	r5, r3
 8007918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800791c:	2a30      	cmp	r2, #48	; 0x30
 800791e:	d0fa      	beq.n	8007916 <_dtoa_r+0xb66>
 8007920:	e6f7      	b.n	8007712 <_dtoa_r+0x962>
 8007922:	9a00      	ldr	r2, [sp, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d1a5      	bne.n	8007874 <_dtoa_r+0xac4>
 8007928:	f10a 0a01 	add.w	sl, sl, #1
 800792c:	2331      	movs	r3, #49	; 0x31
 800792e:	e779      	b.n	8007824 <_dtoa_r+0xa74>
 8007930:	4b13      	ldr	r3, [pc, #76]	; (8007980 <_dtoa_r+0xbd0>)
 8007932:	f7ff baaf 	b.w	8006e94 <_dtoa_r+0xe4>
 8007936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007938:	2b00      	cmp	r3, #0
 800793a:	f47f aa86 	bne.w	8006e4a <_dtoa_r+0x9a>
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <_dtoa_r+0xbd4>)
 8007940:	f7ff baa8 	b.w	8006e94 <_dtoa_r+0xe4>
 8007944:	f1b9 0f00 	cmp.w	r9, #0
 8007948:	dc03      	bgt.n	8007952 <_dtoa_r+0xba2>
 800794a:	9b05      	ldr	r3, [sp, #20]
 800794c:	2b02      	cmp	r3, #2
 800794e:	f73f aec9 	bgt.w	80076e4 <_dtoa_r+0x934>
 8007952:	9d00      	ldr	r5, [sp, #0]
 8007954:	4631      	mov	r1, r6
 8007956:	4658      	mov	r0, fp
 8007958:	f7ff f99c 	bl	8006c94 <quorem>
 800795c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007960:	f805 3b01 	strb.w	r3, [r5], #1
 8007964:	9a00      	ldr	r2, [sp, #0]
 8007966:	1aaa      	subs	r2, r5, r2
 8007968:	4591      	cmp	r9, r2
 800796a:	ddba      	ble.n	80078e2 <_dtoa_r+0xb32>
 800796c:	4659      	mov	r1, fp
 800796e:	2300      	movs	r3, #0
 8007970:	220a      	movs	r2, #10
 8007972:	4620      	mov	r0, r4
 8007974:	f000 faa8 	bl	8007ec8 <__multadd>
 8007978:	4683      	mov	fp, r0
 800797a:	e7eb      	b.n	8007954 <_dtoa_r+0xba4>
 800797c:	08009f07 	.word	0x08009f07
 8007980:	08009e60 	.word	0x08009e60
 8007984:	08009e84 	.word	0x08009e84

08007988 <__sflush_r>:
 8007988:	898a      	ldrh	r2, [r1, #12]
 800798a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800798e:	4605      	mov	r5, r0
 8007990:	0710      	lsls	r0, r2, #28
 8007992:	460c      	mov	r4, r1
 8007994:	d458      	bmi.n	8007a48 <__sflush_r+0xc0>
 8007996:	684b      	ldr	r3, [r1, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	dc05      	bgt.n	80079a8 <__sflush_r+0x20>
 800799c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	dc02      	bgt.n	80079a8 <__sflush_r+0x20>
 80079a2:	2000      	movs	r0, #0
 80079a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d0f9      	beq.n	80079a2 <__sflush_r+0x1a>
 80079ae:	2300      	movs	r3, #0
 80079b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079b4:	682f      	ldr	r7, [r5, #0]
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	d032      	beq.n	8007a20 <__sflush_r+0x98>
 80079ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	075a      	lsls	r2, r3, #29
 80079c0:	d505      	bpl.n	80079ce <__sflush_r+0x46>
 80079c2:	6863      	ldr	r3, [r4, #4]
 80079c4:	1ac0      	subs	r0, r0, r3
 80079c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079c8:	b10b      	cbz	r3, 80079ce <__sflush_r+0x46>
 80079ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079cc:	1ac0      	subs	r0, r0, r3
 80079ce:	2300      	movs	r3, #0
 80079d0:	4602      	mov	r2, r0
 80079d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079d4:	6a21      	ldr	r1, [r4, #32]
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b0      	blx	r6
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	d106      	bne.n	80079ee <__sflush_r+0x66>
 80079e0:	6829      	ldr	r1, [r5, #0]
 80079e2:	291d      	cmp	r1, #29
 80079e4:	d82c      	bhi.n	8007a40 <__sflush_r+0xb8>
 80079e6:	4a2a      	ldr	r2, [pc, #168]	; (8007a90 <__sflush_r+0x108>)
 80079e8:	40ca      	lsrs	r2, r1
 80079ea:	07d6      	lsls	r6, r2, #31
 80079ec:	d528      	bpl.n	8007a40 <__sflush_r+0xb8>
 80079ee:	2200      	movs	r2, #0
 80079f0:	6062      	str	r2, [r4, #4]
 80079f2:	04d9      	lsls	r1, r3, #19
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	6022      	str	r2, [r4, #0]
 80079f8:	d504      	bpl.n	8007a04 <__sflush_r+0x7c>
 80079fa:	1c42      	adds	r2, r0, #1
 80079fc:	d101      	bne.n	8007a02 <__sflush_r+0x7a>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	b903      	cbnz	r3, 8007a04 <__sflush_r+0x7c>
 8007a02:	6560      	str	r0, [r4, #84]	; 0x54
 8007a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a06:	602f      	str	r7, [r5, #0]
 8007a08:	2900      	cmp	r1, #0
 8007a0a:	d0ca      	beq.n	80079a2 <__sflush_r+0x1a>
 8007a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a10:	4299      	cmp	r1, r3
 8007a12:	d002      	beq.n	8007a1a <__sflush_r+0x92>
 8007a14:	4628      	mov	r0, r5
 8007a16:	f7fe facb 	bl	8005fb0 <_free_r>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a1e:	e7c1      	b.n	80079a4 <__sflush_r+0x1c>
 8007a20:	6a21      	ldr	r1, [r4, #32]
 8007a22:	2301      	movs	r3, #1
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b0      	blx	r6
 8007a28:	1c41      	adds	r1, r0, #1
 8007a2a:	d1c7      	bne.n	80079bc <__sflush_r+0x34>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0c4      	beq.n	80079bc <__sflush_r+0x34>
 8007a32:	2b1d      	cmp	r3, #29
 8007a34:	d001      	beq.n	8007a3a <__sflush_r+0xb2>
 8007a36:	2b16      	cmp	r3, #22
 8007a38:	d101      	bne.n	8007a3e <__sflush_r+0xb6>
 8007a3a:	602f      	str	r7, [r5, #0]
 8007a3c:	e7b1      	b.n	80079a2 <__sflush_r+0x1a>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	e7ad      	b.n	80079a4 <__sflush_r+0x1c>
 8007a48:	690f      	ldr	r7, [r1, #16]
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d0a9      	beq.n	80079a2 <__sflush_r+0x1a>
 8007a4e:	0793      	lsls	r3, r2, #30
 8007a50:	680e      	ldr	r6, [r1, #0]
 8007a52:	bf08      	it	eq
 8007a54:	694b      	ldreq	r3, [r1, #20]
 8007a56:	600f      	str	r7, [r1, #0]
 8007a58:	bf18      	it	ne
 8007a5a:	2300      	movne	r3, #0
 8007a5c:	eba6 0807 	sub.w	r8, r6, r7
 8007a60:	608b      	str	r3, [r1, #8]
 8007a62:	f1b8 0f00 	cmp.w	r8, #0
 8007a66:	dd9c      	ble.n	80079a2 <__sflush_r+0x1a>
 8007a68:	6a21      	ldr	r1, [r4, #32]
 8007a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a6c:	4643      	mov	r3, r8
 8007a6e:	463a      	mov	r2, r7
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b0      	blx	r6
 8007a74:	2800      	cmp	r0, #0
 8007a76:	dc06      	bgt.n	8007a86 <__sflush_r+0xfe>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7e:	81a3      	strh	r3, [r4, #12]
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a84:	e78e      	b.n	80079a4 <__sflush_r+0x1c>
 8007a86:	4407      	add	r7, r0
 8007a88:	eba8 0800 	sub.w	r8, r8, r0
 8007a8c:	e7e9      	b.n	8007a62 <__sflush_r+0xda>
 8007a8e:	bf00      	nop
 8007a90:	20400001 	.word	0x20400001

08007a94 <_fflush_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	690b      	ldr	r3, [r1, #16]
 8007a98:	4605      	mov	r5, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	b913      	cbnz	r3, 8007aa4 <_fflush_r+0x10>
 8007a9e:	2500      	movs	r5, #0
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	b118      	cbz	r0, 8007aae <_fflush_r+0x1a>
 8007aa6:	6983      	ldr	r3, [r0, #24]
 8007aa8:	b90b      	cbnz	r3, 8007aae <_fflush_r+0x1a>
 8007aaa:	f000 f887 	bl	8007bbc <__sinit>
 8007aae:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <_fflush_r+0x6c>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	d11b      	bne.n	8007aec <_fflush_r+0x58>
 8007ab4:	686c      	ldr	r4, [r5, #4]
 8007ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0ef      	beq.n	8007a9e <_fflush_r+0xa>
 8007abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ac0:	07d0      	lsls	r0, r2, #31
 8007ac2:	d404      	bmi.n	8007ace <_fflush_r+0x3a>
 8007ac4:	0599      	lsls	r1, r3, #22
 8007ac6:	d402      	bmi.n	8007ace <_fflush_r+0x3a>
 8007ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aca:	f000 f91a 	bl	8007d02 <__retarget_lock_acquire_recursive>
 8007ace:	4628      	mov	r0, r5
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	f7ff ff59 	bl	8007988 <__sflush_r>
 8007ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ad8:	07da      	lsls	r2, r3, #31
 8007ada:	4605      	mov	r5, r0
 8007adc:	d4e0      	bmi.n	8007aa0 <_fflush_r+0xc>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	059b      	lsls	r3, r3, #22
 8007ae2:	d4dd      	bmi.n	8007aa0 <_fflush_r+0xc>
 8007ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ae6:	f000 f90d 	bl	8007d04 <__retarget_lock_release_recursive>
 8007aea:	e7d9      	b.n	8007aa0 <_fflush_r+0xc>
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <_fflush_r+0x70>)
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d101      	bne.n	8007af6 <_fflush_r+0x62>
 8007af2:	68ac      	ldr	r4, [r5, #8]
 8007af4:	e7df      	b.n	8007ab6 <_fflush_r+0x22>
 8007af6:	4b04      	ldr	r3, [pc, #16]	; (8007b08 <_fflush_r+0x74>)
 8007af8:	429c      	cmp	r4, r3
 8007afa:	bf08      	it	eq
 8007afc:	68ec      	ldreq	r4, [r5, #12]
 8007afe:	e7da      	b.n	8007ab6 <_fflush_r+0x22>
 8007b00:	08009f38 	.word	0x08009f38
 8007b04:	08009f58 	.word	0x08009f58
 8007b08:	08009f18 	.word	0x08009f18

08007b0c <std>:
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	b510      	push	{r4, lr}
 8007b10:	4604      	mov	r4, r0
 8007b12:	e9c0 3300 	strd	r3, r3, [r0]
 8007b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b1a:	6083      	str	r3, [r0, #8]
 8007b1c:	8181      	strh	r1, [r0, #12]
 8007b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b20:	81c2      	strh	r2, [r0, #14]
 8007b22:	6183      	str	r3, [r0, #24]
 8007b24:	4619      	mov	r1, r3
 8007b26:	2208      	movs	r2, #8
 8007b28:	305c      	adds	r0, #92	; 0x5c
 8007b2a:	f7fe fa39 	bl	8005fa0 <memset>
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <std+0x38>)
 8007b30:	6263      	str	r3, [r4, #36]	; 0x24
 8007b32:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <std+0x3c>)
 8007b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b36:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <std+0x40>)
 8007b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <std+0x44>)
 8007b3c:	6224      	str	r4, [r4, #32]
 8007b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	bf00      	nop
 8007b44:	080087d1 	.word	0x080087d1
 8007b48:	080087f3 	.word	0x080087f3
 8007b4c:	0800882b 	.word	0x0800882b
 8007b50:	0800884f 	.word	0x0800884f

08007b54 <_cleanup_r>:
 8007b54:	4901      	ldr	r1, [pc, #4]	; (8007b5c <_cleanup_r+0x8>)
 8007b56:	f000 b8af 	b.w	8007cb8 <_fwalk_reent>
 8007b5a:	bf00      	nop
 8007b5c:	08007a95 	.word	0x08007a95

08007b60 <__sfmoreglue>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	1e4a      	subs	r2, r1, #1
 8007b64:	2568      	movs	r5, #104	; 0x68
 8007b66:	4355      	muls	r5, r2
 8007b68:	460e      	mov	r6, r1
 8007b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b6e:	f7fe fa6f 	bl	8006050 <_malloc_r>
 8007b72:	4604      	mov	r4, r0
 8007b74:	b140      	cbz	r0, 8007b88 <__sfmoreglue+0x28>
 8007b76:	2100      	movs	r1, #0
 8007b78:	e9c0 1600 	strd	r1, r6, [r0]
 8007b7c:	300c      	adds	r0, #12
 8007b7e:	60a0      	str	r0, [r4, #8]
 8007b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b84:	f7fe fa0c 	bl	8005fa0 <memset>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}

08007b8c <__sfp_lock_acquire>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__sfp_lock_acquire+0x8>)
 8007b8e:	f000 b8b8 	b.w	8007d02 <__retarget_lock_acquire_recursive>
 8007b92:	bf00      	nop
 8007b94:	200004fc 	.word	0x200004fc

08007b98 <__sfp_lock_release>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__sfp_lock_release+0x8>)
 8007b9a:	f000 b8b3 	b.w	8007d04 <__retarget_lock_release_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	200004fc 	.word	0x200004fc

08007ba4 <__sinit_lock_acquire>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__sinit_lock_acquire+0x8>)
 8007ba6:	f000 b8ac 	b.w	8007d02 <__retarget_lock_acquire_recursive>
 8007baa:	bf00      	nop
 8007bac:	200004f7 	.word	0x200004f7

08007bb0 <__sinit_lock_release>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	; (8007bb8 <__sinit_lock_release+0x8>)
 8007bb2:	f000 b8a7 	b.w	8007d04 <__retarget_lock_release_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	200004f7 	.word	0x200004f7

08007bbc <__sinit>:
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	f7ff fff0 	bl	8007ba4 <__sinit_lock_acquire>
 8007bc4:	69a3      	ldr	r3, [r4, #24]
 8007bc6:	b11b      	cbz	r3, 8007bd0 <__sinit+0x14>
 8007bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bcc:	f7ff bff0 	b.w	8007bb0 <__sinit_lock_release>
 8007bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8007bd6:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <__sinit+0x68>)
 8007bd8:	4a13      	ldr	r2, [pc, #76]	; (8007c28 <__sinit+0x6c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	bf04      	itt	eq
 8007be2:	2301      	moveq	r3, #1
 8007be4:	61a3      	streq	r3, [r4, #24]
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 f820 	bl	8007c2c <__sfp>
 8007bec:	6060      	str	r0, [r4, #4]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 f81c 	bl	8007c2c <__sfp>
 8007bf4:	60a0      	str	r0, [r4, #8]
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f000 f818 	bl	8007c2c <__sfp>
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	60e0      	str	r0, [r4, #12]
 8007c00:	2104      	movs	r1, #4
 8007c02:	6860      	ldr	r0, [r4, #4]
 8007c04:	f7ff ff82 	bl	8007b0c <std>
 8007c08:	68a0      	ldr	r0, [r4, #8]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	2109      	movs	r1, #9
 8007c0e:	f7ff ff7d 	bl	8007b0c <std>
 8007c12:	68e0      	ldr	r0, [r4, #12]
 8007c14:	2202      	movs	r2, #2
 8007c16:	2112      	movs	r1, #18
 8007c18:	f7ff ff78 	bl	8007b0c <std>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	61a3      	str	r3, [r4, #24]
 8007c20:	e7d2      	b.n	8007bc8 <__sinit+0xc>
 8007c22:	bf00      	nop
 8007c24:	08009e4c 	.word	0x08009e4c
 8007c28:	08007b55 	.word	0x08007b55

08007c2c <__sfp>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	4607      	mov	r7, r0
 8007c30:	f7ff ffac 	bl	8007b8c <__sfp_lock_acquire>
 8007c34:	4b1e      	ldr	r3, [pc, #120]	; (8007cb0 <__sfp+0x84>)
 8007c36:	681e      	ldr	r6, [r3, #0]
 8007c38:	69b3      	ldr	r3, [r6, #24]
 8007c3a:	b913      	cbnz	r3, 8007c42 <__sfp+0x16>
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff ffbd 	bl	8007bbc <__sinit>
 8007c42:	3648      	adds	r6, #72	; 0x48
 8007c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	d503      	bpl.n	8007c54 <__sfp+0x28>
 8007c4c:	6833      	ldr	r3, [r6, #0]
 8007c4e:	b30b      	cbz	r3, 8007c94 <__sfp+0x68>
 8007c50:	6836      	ldr	r6, [r6, #0]
 8007c52:	e7f7      	b.n	8007c44 <__sfp+0x18>
 8007c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c58:	b9d5      	cbnz	r5, 8007c90 <__sfp+0x64>
 8007c5a:	4b16      	ldr	r3, [pc, #88]	; (8007cb4 <__sfp+0x88>)
 8007c5c:	60e3      	str	r3, [r4, #12]
 8007c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c62:	6665      	str	r5, [r4, #100]	; 0x64
 8007c64:	f000 f84c 	bl	8007d00 <__retarget_lock_init_recursive>
 8007c68:	f7ff ff96 	bl	8007b98 <__sfp_lock_release>
 8007c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c74:	6025      	str	r5, [r4, #0]
 8007c76:	61a5      	str	r5, [r4, #24]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c80:	f7fe f98e 	bl	8005fa0 <memset>
 8007c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c90:	3468      	adds	r4, #104	; 0x68
 8007c92:	e7d9      	b.n	8007c48 <__sfp+0x1c>
 8007c94:	2104      	movs	r1, #4
 8007c96:	4638      	mov	r0, r7
 8007c98:	f7ff ff62 	bl	8007b60 <__sfmoreglue>
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	6030      	str	r0, [r6, #0]
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d1d5      	bne.n	8007c50 <__sfp+0x24>
 8007ca4:	f7ff ff78 	bl	8007b98 <__sfp_lock_release>
 8007ca8:	230c      	movs	r3, #12
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	e7ee      	b.n	8007c8c <__sfp+0x60>
 8007cae:	bf00      	nop
 8007cb0:	08009e4c 	.word	0x08009e4c
 8007cb4:	ffff0001 	.word	0xffff0001

08007cb8 <_fwalk_reent>:
 8007cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	4688      	mov	r8, r1
 8007cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cc4:	2700      	movs	r7, #0
 8007cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cca:	f1b9 0901 	subs.w	r9, r9, #1
 8007cce:	d505      	bpl.n	8007cdc <_fwalk_reent+0x24>
 8007cd0:	6824      	ldr	r4, [r4, #0]
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	d1f7      	bne.n	8007cc6 <_fwalk_reent+0xe>
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cdc:	89ab      	ldrh	r3, [r5, #12]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d907      	bls.n	8007cf2 <_fwalk_reent+0x3a>
 8007ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	d003      	beq.n	8007cf2 <_fwalk_reent+0x3a>
 8007cea:	4629      	mov	r1, r5
 8007cec:	4630      	mov	r0, r6
 8007cee:	47c0      	blx	r8
 8007cf0:	4307      	orrs	r7, r0
 8007cf2:	3568      	adds	r5, #104	; 0x68
 8007cf4:	e7e9      	b.n	8007cca <_fwalk_reent+0x12>
	...

08007cf8 <_localeconv_r>:
 8007cf8:	4800      	ldr	r0, [pc, #0]	; (8007cfc <_localeconv_r+0x4>)
 8007cfa:	4770      	bx	lr
 8007cfc:	20000160 	.word	0x20000160

08007d00 <__retarget_lock_init_recursive>:
 8007d00:	4770      	bx	lr

08007d02 <__retarget_lock_acquire_recursive>:
 8007d02:	4770      	bx	lr

08007d04 <__retarget_lock_release_recursive>:
 8007d04:	4770      	bx	lr

08007d06 <__swhatbuf_r>:
 8007d06:	b570      	push	{r4, r5, r6, lr}
 8007d08:	460e      	mov	r6, r1
 8007d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0e:	2900      	cmp	r1, #0
 8007d10:	b096      	sub	sp, #88	; 0x58
 8007d12:	4614      	mov	r4, r2
 8007d14:	461d      	mov	r5, r3
 8007d16:	da07      	bge.n	8007d28 <__swhatbuf_r+0x22>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	89b3      	ldrh	r3, [r6, #12]
 8007d1e:	061a      	lsls	r2, r3, #24
 8007d20:	d410      	bmi.n	8007d44 <__swhatbuf_r+0x3e>
 8007d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d26:	e00e      	b.n	8007d46 <__swhatbuf_r+0x40>
 8007d28:	466a      	mov	r2, sp
 8007d2a:	f000 fde7 	bl	80088fc <_fstat_r>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	dbf2      	blt.n	8007d18 <__swhatbuf_r+0x12>
 8007d32:	9a01      	ldr	r2, [sp, #4]
 8007d34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d3c:	425a      	negs	r2, r3
 8007d3e:	415a      	adcs	r2, r3
 8007d40:	602a      	str	r2, [r5, #0]
 8007d42:	e7ee      	b.n	8007d22 <__swhatbuf_r+0x1c>
 8007d44:	2340      	movs	r3, #64	; 0x40
 8007d46:	2000      	movs	r0, #0
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	b016      	add	sp, #88	; 0x58
 8007d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d50 <__smakebuf_r>:
 8007d50:	898b      	ldrh	r3, [r1, #12]
 8007d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d54:	079d      	lsls	r5, r3, #30
 8007d56:	4606      	mov	r6, r0
 8007d58:	460c      	mov	r4, r1
 8007d5a:	d507      	bpl.n	8007d6c <__smakebuf_r+0x1c>
 8007d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	6123      	str	r3, [r4, #16]
 8007d64:	2301      	movs	r3, #1
 8007d66:	6163      	str	r3, [r4, #20]
 8007d68:	b002      	add	sp, #8
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	ab01      	add	r3, sp, #4
 8007d6e:	466a      	mov	r2, sp
 8007d70:	f7ff ffc9 	bl	8007d06 <__swhatbuf_r>
 8007d74:	9900      	ldr	r1, [sp, #0]
 8007d76:	4605      	mov	r5, r0
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7fe f969 	bl	8006050 <_malloc_r>
 8007d7e:	b948      	cbnz	r0, 8007d94 <__smakebuf_r+0x44>
 8007d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d84:	059a      	lsls	r2, r3, #22
 8007d86:	d4ef      	bmi.n	8007d68 <__smakebuf_r+0x18>
 8007d88:	f023 0303 	bic.w	r3, r3, #3
 8007d8c:	f043 0302 	orr.w	r3, r3, #2
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	e7e3      	b.n	8007d5c <__smakebuf_r+0xc>
 8007d94:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <__smakebuf_r+0x7c>)
 8007d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	6020      	str	r0, [r4, #0]
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	9b00      	ldr	r3, [sp, #0]
 8007da4:	6163      	str	r3, [r4, #20]
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	6120      	str	r0, [r4, #16]
 8007daa:	b15b      	cbz	r3, 8007dc4 <__smakebuf_r+0x74>
 8007dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db0:	4630      	mov	r0, r6
 8007db2:	f000 fdb5 	bl	8008920 <_isatty_r>
 8007db6:	b128      	cbz	r0, 8007dc4 <__smakebuf_r+0x74>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	89a0      	ldrh	r0, [r4, #12]
 8007dc6:	4305      	orrs	r5, r0
 8007dc8:	81a5      	strh	r5, [r4, #12]
 8007dca:	e7cd      	b.n	8007d68 <__smakebuf_r+0x18>
 8007dcc:	08007b55 	.word	0x08007b55

08007dd0 <memcpy>:
 8007dd0:	440a      	add	r2, r1
 8007dd2:	4291      	cmp	r1, r2
 8007dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007dd8:	d100      	bne.n	8007ddc <memcpy+0xc>
 8007dda:	4770      	bx	lr
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007de6:	4291      	cmp	r1, r2
 8007de8:	d1f9      	bne.n	8007dde <memcpy+0xe>
 8007dea:	bd10      	pop	{r4, pc}

08007dec <__malloc_lock>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__malloc_lock+0x8>)
 8007dee:	f7ff bf88 	b.w	8007d02 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	200004f8 	.word	0x200004f8

08007df8 <__malloc_unlock>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__malloc_unlock+0x8>)
 8007dfa:	f7ff bf83 	b.w	8007d04 <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	200004f8 	.word	0x200004f8

08007e04 <_Balloc>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e08:	4604      	mov	r4, r0
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	b976      	cbnz	r6, 8007e2c <_Balloc+0x28>
 8007e0e:	2010      	movs	r0, #16
 8007e10:	f7fe f8be 	bl	8005f90 <malloc>
 8007e14:	4602      	mov	r2, r0
 8007e16:	6260      	str	r0, [r4, #36]	; 0x24
 8007e18:	b920      	cbnz	r0, 8007e24 <_Balloc+0x20>
 8007e1a:	4b18      	ldr	r3, [pc, #96]	; (8007e7c <_Balloc+0x78>)
 8007e1c:	4818      	ldr	r0, [pc, #96]	; (8007e80 <_Balloc+0x7c>)
 8007e1e:	2166      	movs	r1, #102	; 0x66
 8007e20:	f000 fd2c 	bl	800887c <__assert_func>
 8007e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e28:	6006      	str	r6, [r0, #0]
 8007e2a:	60c6      	str	r6, [r0, #12]
 8007e2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e2e:	68f3      	ldr	r3, [r6, #12]
 8007e30:	b183      	cbz	r3, 8007e54 <_Balloc+0x50>
 8007e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e3a:	b9b8      	cbnz	r0, 8007e6c <_Balloc+0x68>
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e42:	1d72      	adds	r2, r6, #5
 8007e44:	0092      	lsls	r2, r2, #2
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fb5a 	bl	8008500 <_calloc_r>
 8007e4c:	b160      	cbz	r0, 8007e68 <_Balloc+0x64>
 8007e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e52:	e00e      	b.n	8007e72 <_Balloc+0x6e>
 8007e54:	2221      	movs	r2, #33	; 0x21
 8007e56:	2104      	movs	r1, #4
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fb51 	bl	8008500 <_calloc_r>
 8007e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e60:	60f0      	str	r0, [r6, #12]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e4      	bne.n	8007e32 <_Balloc+0x2e>
 8007e68:	2000      	movs	r0, #0
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	6802      	ldr	r2, [r0, #0]
 8007e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e72:	2300      	movs	r3, #0
 8007e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e78:	e7f7      	b.n	8007e6a <_Balloc+0x66>
 8007e7a:	bf00      	nop
 8007e7c:	08009e91 	.word	0x08009e91
 8007e80:	08009f78 	.word	0x08009f78

08007e84 <_Bfree>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e88:	4605      	mov	r5, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	b976      	cbnz	r6, 8007eac <_Bfree+0x28>
 8007e8e:	2010      	movs	r0, #16
 8007e90:	f7fe f87e 	bl	8005f90 <malloc>
 8007e94:	4602      	mov	r2, r0
 8007e96:	6268      	str	r0, [r5, #36]	; 0x24
 8007e98:	b920      	cbnz	r0, 8007ea4 <_Bfree+0x20>
 8007e9a:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <_Bfree+0x3c>)
 8007e9c:	4809      	ldr	r0, [pc, #36]	; (8007ec4 <_Bfree+0x40>)
 8007e9e:	218a      	movs	r1, #138	; 0x8a
 8007ea0:	f000 fcec 	bl	800887c <__assert_func>
 8007ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ea8:	6006      	str	r6, [r0, #0]
 8007eaa:	60c6      	str	r6, [r0, #12]
 8007eac:	b13c      	cbz	r4, 8007ebe <_Bfree+0x3a>
 8007eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007eb0:	6862      	ldr	r2, [r4, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007eb8:	6021      	str	r1, [r4, #0]
 8007eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	08009e91 	.word	0x08009e91
 8007ec4:	08009f78 	.word	0x08009f78

08007ec8 <__multadd>:
 8007ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ecc:	690e      	ldr	r6, [r1, #16]
 8007ece:	4607      	mov	r7, r0
 8007ed0:	4698      	mov	r8, r3
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	f101 0014 	add.w	r0, r1, #20
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6805      	ldr	r5, [r0, #0]
 8007edc:	b2a9      	uxth	r1, r5
 8007ede:	fb02 8101 	mla	r1, r2, r1, r8
 8007ee2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007ee6:	0c2d      	lsrs	r5, r5, #16
 8007ee8:	fb02 c505 	mla	r5, r2, r5, ip
 8007eec:	b289      	uxth	r1, r1
 8007eee:	3301      	adds	r3, #1
 8007ef0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007ef4:	429e      	cmp	r6, r3
 8007ef6:	f840 1b04 	str.w	r1, [r0], #4
 8007efa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007efe:	dcec      	bgt.n	8007eda <__multadd+0x12>
 8007f00:	f1b8 0f00 	cmp.w	r8, #0
 8007f04:	d022      	beq.n	8007f4c <__multadd+0x84>
 8007f06:	68a3      	ldr	r3, [r4, #8]
 8007f08:	42b3      	cmp	r3, r6
 8007f0a:	dc19      	bgt.n	8007f40 <__multadd+0x78>
 8007f0c:	6861      	ldr	r1, [r4, #4]
 8007f0e:	4638      	mov	r0, r7
 8007f10:	3101      	adds	r1, #1
 8007f12:	f7ff ff77 	bl	8007e04 <_Balloc>
 8007f16:	4605      	mov	r5, r0
 8007f18:	b928      	cbnz	r0, 8007f26 <__multadd+0x5e>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <__multadd+0x8c>)
 8007f1e:	480e      	ldr	r0, [pc, #56]	; (8007f58 <__multadd+0x90>)
 8007f20:	21b5      	movs	r1, #181	; 0xb5
 8007f22:	f000 fcab 	bl	800887c <__assert_func>
 8007f26:	6922      	ldr	r2, [r4, #16]
 8007f28:	3202      	adds	r2, #2
 8007f2a:	f104 010c 	add.w	r1, r4, #12
 8007f2e:	0092      	lsls	r2, r2, #2
 8007f30:	300c      	adds	r0, #12
 8007f32:	f7ff ff4d 	bl	8007dd0 <memcpy>
 8007f36:	4621      	mov	r1, r4
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f7ff ffa3 	bl	8007e84 <_Bfree>
 8007f3e:	462c      	mov	r4, r5
 8007f40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007f44:	3601      	adds	r6, #1
 8007f46:	f8c3 8014 	str.w	r8, [r3, #20]
 8007f4a:	6126      	str	r6, [r4, #16]
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f52:	bf00      	nop
 8007f54:	08009f07 	.word	0x08009f07
 8007f58:	08009f78 	.word	0x08009f78

08007f5c <__hi0bits>:
 8007f5c:	0c03      	lsrs	r3, r0, #16
 8007f5e:	041b      	lsls	r3, r3, #16
 8007f60:	b9d3      	cbnz	r3, 8007f98 <__hi0bits+0x3c>
 8007f62:	0400      	lsls	r0, r0, #16
 8007f64:	2310      	movs	r3, #16
 8007f66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f6a:	bf04      	itt	eq
 8007f6c:	0200      	lsleq	r0, r0, #8
 8007f6e:	3308      	addeq	r3, #8
 8007f70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f74:	bf04      	itt	eq
 8007f76:	0100      	lsleq	r0, r0, #4
 8007f78:	3304      	addeq	r3, #4
 8007f7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f7e:	bf04      	itt	eq
 8007f80:	0080      	lsleq	r0, r0, #2
 8007f82:	3302      	addeq	r3, #2
 8007f84:	2800      	cmp	r0, #0
 8007f86:	db05      	blt.n	8007f94 <__hi0bits+0x38>
 8007f88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f8c:	f103 0301 	add.w	r3, r3, #1
 8007f90:	bf08      	it	eq
 8007f92:	2320      	moveq	r3, #32
 8007f94:	4618      	mov	r0, r3
 8007f96:	4770      	bx	lr
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e7e4      	b.n	8007f66 <__hi0bits+0xa>

08007f9c <__lo0bits>:
 8007f9c:	6803      	ldr	r3, [r0, #0]
 8007f9e:	f013 0207 	ands.w	r2, r3, #7
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	d00b      	beq.n	8007fbe <__lo0bits+0x22>
 8007fa6:	07da      	lsls	r2, r3, #31
 8007fa8:	d424      	bmi.n	8007ff4 <__lo0bits+0x58>
 8007faa:	0798      	lsls	r0, r3, #30
 8007fac:	bf49      	itett	mi
 8007fae:	085b      	lsrmi	r3, r3, #1
 8007fb0:	089b      	lsrpl	r3, r3, #2
 8007fb2:	2001      	movmi	r0, #1
 8007fb4:	600b      	strmi	r3, [r1, #0]
 8007fb6:	bf5c      	itt	pl
 8007fb8:	600b      	strpl	r3, [r1, #0]
 8007fba:	2002      	movpl	r0, #2
 8007fbc:	4770      	bx	lr
 8007fbe:	b298      	uxth	r0, r3
 8007fc0:	b9b0      	cbnz	r0, 8007ff0 <__lo0bits+0x54>
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	2010      	movs	r0, #16
 8007fc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007fca:	bf04      	itt	eq
 8007fcc:	0a1b      	lsreq	r3, r3, #8
 8007fce:	3008      	addeq	r0, #8
 8007fd0:	071a      	lsls	r2, r3, #28
 8007fd2:	bf04      	itt	eq
 8007fd4:	091b      	lsreq	r3, r3, #4
 8007fd6:	3004      	addeq	r0, #4
 8007fd8:	079a      	lsls	r2, r3, #30
 8007fda:	bf04      	itt	eq
 8007fdc:	089b      	lsreq	r3, r3, #2
 8007fde:	3002      	addeq	r0, #2
 8007fe0:	07da      	lsls	r2, r3, #31
 8007fe2:	d403      	bmi.n	8007fec <__lo0bits+0x50>
 8007fe4:	085b      	lsrs	r3, r3, #1
 8007fe6:	f100 0001 	add.w	r0, r0, #1
 8007fea:	d005      	beq.n	8007ff8 <__lo0bits+0x5c>
 8007fec:	600b      	str	r3, [r1, #0]
 8007fee:	4770      	bx	lr
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	e7e8      	b.n	8007fc6 <__lo0bits+0x2a>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	4770      	bx	lr
 8007ff8:	2020      	movs	r0, #32
 8007ffa:	4770      	bx	lr

08007ffc <__i2b>:
 8007ffc:	b510      	push	{r4, lr}
 8007ffe:	460c      	mov	r4, r1
 8008000:	2101      	movs	r1, #1
 8008002:	f7ff feff 	bl	8007e04 <_Balloc>
 8008006:	4602      	mov	r2, r0
 8008008:	b928      	cbnz	r0, 8008016 <__i2b+0x1a>
 800800a:	4b05      	ldr	r3, [pc, #20]	; (8008020 <__i2b+0x24>)
 800800c:	4805      	ldr	r0, [pc, #20]	; (8008024 <__i2b+0x28>)
 800800e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008012:	f000 fc33 	bl	800887c <__assert_func>
 8008016:	2301      	movs	r3, #1
 8008018:	6144      	str	r4, [r0, #20]
 800801a:	6103      	str	r3, [r0, #16]
 800801c:	bd10      	pop	{r4, pc}
 800801e:	bf00      	nop
 8008020:	08009f07 	.word	0x08009f07
 8008024:	08009f78 	.word	0x08009f78

08008028 <__multiply>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	4614      	mov	r4, r2
 800802e:	690a      	ldr	r2, [r1, #16]
 8008030:	6923      	ldr	r3, [r4, #16]
 8008032:	429a      	cmp	r2, r3
 8008034:	bfb8      	it	lt
 8008036:	460b      	movlt	r3, r1
 8008038:	460d      	mov	r5, r1
 800803a:	bfbc      	itt	lt
 800803c:	4625      	movlt	r5, r4
 800803e:	461c      	movlt	r4, r3
 8008040:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008044:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008048:	68ab      	ldr	r3, [r5, #8]
 800804a:	6869      	ldr	r1, [r5, #4]
 800804c:	eb0a 0709 	add.w	r7, sl, r9
 8008050:	42bb      	cmp	r3, r7
 8008052:	b085      	sub	sp, #20
 8008054:	bfb8      	it	lt
 8008056:	3101      	addlt	r1, #1
 8008058:	f7ff fed4 	bl	8007e04 <_Balloc>
 800805c:	b930      	cbnz	r0, 800806c <__multiply+0x44>
 800805e:	4602      	mov	r2, r0
 8008060:	4b42      	ldr	r3, [pc, #264]	; (800816c <__multiply+0x144>)
 8008062:	4843      	ldr	r0, [pc, #268]	; (8008170 <__multiply+0x148>)
 8008064:	f240 115d 	movw	r1, #349	; 0x15d
 8008068:	f000 fc08 	bl	800887c <__assert_func>
 800806c:	f100 0614 	add.w	r6, r0, #20
 8008070:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008074:	4633      	mov	r3, r6
 8008076:	2200      	movs	r2, #0
 8008078:	4543      	cmp	r3, r8
 800807a:	d31e      	bcc.n	80080ba <__multiply+0x92>
 800807c:	f105 0c14 	add.w	ip, r5, #20
 8008080:	f104 0314 	add.w	r3, r4, #20
 8008084:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008088:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800808c:	9202      	str	r2, [sp, #8]
 800808e:	ebac 0205 	sub.w	r2, ip, r5
 8008092:	3a15      	subs	r2, #21
 8008094:	f022 0203 	bic.w	r2, r2, #3
 8008098:	3204      	adds	r2, #4
 800809a:	f105 0115 	add.w	r1, r5, #21
 800809e:	458c      	cmp	ip, r1
 80080a0:	bf38      	it	cc
 80080a2:	2204      	movcc	r2, #4
 80080a4:	9201      	str	r2, [sp, #4]
 80080a6:	9a02      	ldr	r2, [sp, #8]
 80080a8:	9303      	str	r3, [sp, #12]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d808      	bhi.n	80080c0 <__multiply+0x98>
 80080ae:	2f00      	cmp	r7, #0
 80080b0:	dc55      	bgt.n	800815e <__multiply+0x136>
 80080b2:	6107      	str	r7, [r0, #16]
 80080b4:	b005      	add	sp, #20
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	f843 2b04 	str.w	r2, [r3], #4
 80080be:	e7db      	b.n	8008078 <__multiply+0x50>
 80080c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80080c4:	f1ba 0f00 	cmp.w	sl, #0
 80080c8:	d020      	beq.n	800810c <__multiply+0xe4>
 80080ca:	f105 0e14 	add.w	lr, r5, #20
 80080ce:	46b1      	mov	r9, r6
 80080d0:	2200      	movs	r2, #0
 80080d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80080d6:	f8d9 b000 	ldr.w	fp, [r9]
 80080da:	b2a1      	uxth	r1, r4
 80080dc:	fa1f fb8b 	uxth.w	fp, fp
 80080e0:	fb0a b101 	mla	r1, sl, r1, fp
 80080e4:	4411      	add	r1, r2
 80080e6:	f8d9 2000 	ldr.w	r2, [r9]
 80080ea:	0c24      	lsrs	r4, r4, #16
 80080ec:	0c12      	lsrs	r2, r2, #16
 80080ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80080f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80080f6:	b289      	uxth	r1, r1
 80080f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080fc:	45f4      	cmp	ip, lr
 80080fe:	f849 1b04 	str.w	r1, [r9], #4
 8008102:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008106:	d8e4      	bhi.n	80080d2 <__multiply+0xaa>
 8008108:	9901      	ldr	r1, [sp, #4]
 800810a:	5072      	str	r2, [r6, r1]
 800810c:	9a03      	ldr	r2, [sp, #12]
 800810e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008112:	3304      	adds	r3, #4
 8008114:	f1b9 0f00 	cmp.w	r9, #0
 8008118:	d01f      	beq.n	800815a <__multiply+0x132>
 800811a:	6834      	ldr	r4, [r6, #0]
 800811c:	f105 0114 	add.w	r1, r5, #20
 8008120:	46b6      	mov	lr, r6
 8008122:	f04f 0a00 	mov.w	sl, #0
 8008126:	880a      	ldrh	r2, [r1, #0]
 8008128:	f8be b002 	ldrh.w	fp, [lr, #2]
 800812c:	fb09 b202 	mla	r2, r9, r2, fp
 8008130:	4492      	add	sl, r2
 8008132:	b2a4      	uxth	r4, r4
 8008134:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008138:	f84e 4b04 	str.w	r4, [lr], #4
 800813c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008140:	f8be 2000 	ldrh.w	r2, [lr]
 8008144:	0c24      	lsrs	r4, r4, #16
 8008146:	fb09 2404 	mla	r4, r9, r4, r2
 800814a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800814e:	458c      	cmp	ip, r1
 8008150:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008154:	d8e7      	bhi.n	8008126 <__multiply+0xfe>
 8008156:	9a01      	ldr	r2, [sp, #4]
 8008158:	50b4      	str	r4, [r6, r2]
 800815a:	3604      	adds	r6, #4
 800815c:	e7a3      	b.n	80080a6 <__multiply+0x7e>
 800815e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1a5      	bne.n	80080b2 <__multiply+0x8a>
 8008166:	3f01      	subs	r7, #1
 8008168:	e7a1      	b.n	80080ae <__multiply+0x86>
 800816a:	bf00      	nop
 800816c:	08009f07 	.word	0x08009f07
 8008170:	08009f78 	.word	0x08009f78

08008174 <__pow5mult>:
 8008174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008178:	4615      	mov	r5, r2
 800817a:	f012 0203 	ands.w	r2, r2, #3
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	d007      	beq.n	8008194 <__pow5mult+0x20>
 8008184:	4c25      	ldr	r4, [pc, #148]	; (800821c <__pow5mult+0xa8>)
 8008186:	3a01      	subs	r2, #1
 8008188:	2300      	movs	r3, #0
 800818a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800818e:	f7ff fe9b 	bl	8007ec8 <__multadd>
 8008192:	4607      	mov	r7, r0
 8008194:	10ad      	asrs	r5, r5, #2
 8008196:	d03d      	beq.n	8008214 <__pow5mult+0xa0>
 8008198:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800819a:	b97c      	cbnz	r4, 80081bc <__pow5mult+0x48>
 800819c:	2010      	movs	r0, #16
 800819e:	f7fd fef7 	bl	8005f90 <malloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6270      	str	r0, [r6, #36]	; 0x24
 80081a6:	b928      	cbnz	r0, 80081b4 <__pow5mult+0x40>
 80081a8:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <__pow5mult+0xac>)
 80081aa:	481e      	ldr	r0, [pc, #120]	; (8008224 <__pow5mult+0xb0>)
 80081ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081b0:	f000 fb64 	bl	800887c <__assert_func>
 80081b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081b8:	6004      	str	r4, [r0, #0]
 80081ba:	60c4      	str	r4, [r0, #12]
 80081bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081c4:	b94c      	cbnz	r4, 80081da <__pow5mult+0x66>
 80081c6:	f240 2171 	movw	r1, #625	; 0x271
 80081ca:	4630      	mov	r0, r6
 80081cc:	f7ff ff16 	bl	8007ffc <__i2b>
 80081d0:	2300      	movs	r3, #0
 80081d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80081d6:	4604      	mov	r4, r0
 80081d8:	6003      	str	r3, [r0, #0]
 80081da:	f04f 0900 	mov.w	r9, #0
 80081de:	07eb      	lsls	r3, r5, #31
 80081e0:	d50a      	bpl.n	80081f8 <__pow5mult+0x84>
 80081e2:	4639      	mov	r1, r7
 80081e4:	4622      	mov	r2, r4
 80081e6:	4630      	mov	r0, r6
 80081e8:	f7ff ff1e 	bl	8008028 <__multiply>
 80081ec:	4639      	mov	r1, r7
 80081ee:	4680      	mov	r8, r0
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7ff fe47 	bl	8007e84 <_Bfree>
 80081f6:	4647      	mov	r7, r8
 80081f8:	106d      	asrs	r5, r5, #1
 80081fa:	d00b      	beq.n	8008214 <__pow5mult+0xa0>
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	b938      	cbnz	r0, 8008210 <__pow5mult+0x9c>
 8008200:	4622      	mov	r2, r4
 8008202:	4621      	mov	r1, r4
 8008204:	4630      	mov	r0, r6
 8008206:	f7ff ff0f 	bl	8008028 <__multiply>
 800820a:	6020      	str	r0, [r4, #0]
 800820c:	f8c0 9000 	str.w	r9, [r0]
 8008210:	4604      	mov	r4, r0
 8008212:	e7e4      	b.n	80081de <__pow5mult+0x6a>
 8008214:	4638      	mov	r0, r7
 8008216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800821a:	bf00      	nop
 800821c:	0800a0c8 	.word	0x0800a0c8
 8008220:	08009e91 	.word	0x08009e91
 8008224:	08009f78 	.word	0x08009f78

08008228 <__lshift>:
 8008228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	460c      	mov	r4, r1
 800822e:	6849      	ldr	r1, [r1, #4]
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	4607      	mov	r7, r0
 800823a:	4691      	mov	r9, r2
 800823c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008240:	f108 0601 	add.w	r6, r8, #1
 8008244:	42b3      	cmp	r3, r6
 8008246:	db0b      	blt.n	8008260 <__lshift+0x38>
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff fddb 	bl	8007e04 <_Balloc>
 800824e:	4605      	mov	r5, r0
 8008250:	b948      	cbnz	r0, 8008266 <__lshift+0x3e>
 8008252:	4602      	mov	r2, r0
 8008254:	4b28      	ldr	r3, [pc, #160]	; (80082f8 <__lshift+0xd0>)
 8008256:	4829      	ldr	r0, [pc, #164]	; (80082fc <__lshift+0xd4>)
 8008258:	f240 11d9 	movw	r1, #473	; 0x1d9
 800825c:	f000 fb0e 	bl	800887c <__assert_func>
 8008260:	3101      	adds	r1, #1
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	e7ee      	b.n	8008244 <__lshift+0x1c>
 8008266:	2300      	movs	r3, #0
 8008268:	f100 0114 	add.w	r1, r0, #20
 800826c:	f100 0210 	add.w	r2, r0, #16
 8008270:	4618      	mov	r0, r3
 8008272:	4553      	cmp	r3, sl
 8008274:	db33      	blt.n	80082de <__lshift+0xb6>
 8008276:	6920      	ldr	r0, [r4, #16]
 8008278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800827c:	f104 0314 	add.w	r3, r4, #20
 8008280:	f019 091f 	ands.w	r9, r9, #31
 8008284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008288:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800828c:	d02b      	beq.n	80082e6 <__lshift+0xbe>
 800828e:	f1c9 0e20 	rsb	lr, r9, #32
 8008292:	468a      	mov	sl, r1
 8008294:	2200      	movs	r2, #0
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	fa00 f009 	lsl.w	r0, r0, r9
 800829c:	4302      	orrs	r2, r0
 800829e:	f84a 2b04 	str.w	r2, [sl], #4
 80082a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a6:	459c      	cmp	ip, r3
 80082a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80082ac:	d8f3      	bhi.n	8008296 <__lshift+0x6e>
 80082ae:	ebac 0304 	sub.w	r3, ip, r4
 80082b2:	3b15      	subs	r3, #21
 80082b4:	f023 0303 	bic.w	r3, r3, #3
 80082b8:	3304      	adds	r3, #4
 80082ba:	f104 0015 	add.w	r0, r4, #21
 80082be:	4584      	cmp	ip, r0
 80082c0:	bf38      	it	cc
 80082c2:	2304      	movcc	r3, #4
 80082c4:	50ca      	str	r2, [r1, r3]
 80082c6:	b10a      	cbz	r2, 80082cc <__lshift+0xa4>
 80082c8:	f108 0602 	add.w	r6, r8, #2
 80082cc:	3e01      	subs	r6, #1
 80082ce:	4638      	mov	r0, r7
 80082d0:	612e      	str	r6, [r5, #16]
 80082d2:	4621      	mov	r1, r4
 80082d4:	f7ff fdd6 	bl	8007e84 <_Bfree>
 80082d8:	4628      	mov	r0, r5
 80082da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082de:	f842 0f04 	str.w	r0, [r2, #4]!
 80082e2:	3301      	adds	r3, #1
 80082e4:	e7c5      	b.n	8008272 <__lshift+0x4a>
 80082e6:	3904      	subs	r1, #4
 80082e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80082f0:	459c      	cmp	ip, r3
 80082f2:	d8f9      	bhi.n	80082e8 <__lshift+0xc0>
 80082f4:	e7ea      	b.n	80082cc <__lshift+0xa4>
 80082f6:	bf00      	nop
 80082f8:	08009f07 	.word	0x08009f07
 80082fc:	08009f78 	.word	0x08009f78

08008300 <__mcmp>:
 8008300:	b530      	push	{r4, r5, lr}
 8008302:	6902      	ldr	r2, [r0, #16]
 8008304:	690c      	ldr	r4, [r1, #16]
 8008306:	1b12      	subs	r2, r2, r4
 8008308:	d10e      	bne.n	8008328 <__mcmp+0x28>
 800830a:	f100 0314 	add.w	r3, r0, #20
 800830e:	3114      	adds	r1, #20
 8008310:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008314:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008318:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800831c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008320:	42a5      	cmp	r5, r4
 8008322:	d003      	beq.n	800832c <__mcmp+0x2c>
 8008324:	d305      	bcc.n	8008332 <__mcmp+0x32>
 8008326:	2201      	movs	r2, #1
 8008328:	4610      	mov	r0, r2
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	4283      	cmp	r3, r0
 800832e:	d3f3      	bcc.n	8008318 <__mcmp+0x18>
 8008330:	e7fa      	b.n	8008328 <__mcmp+0x28>
 8008332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008336:	e7f7      	b.n	8008328 <__mcmp+0x28>

08008338 <__mdiff>:
 8008338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	460c      	mov	r4, r1
 800833e:	4606      	mov	r6, r0
 8008340:	4611      	mov	r1, r2
 8008342:	4620      	mov	r0, r4
 8008344:	4617      	mov	r7, r2
 8008346:	f7ff ffdb 	bl	8008300 <__mcmp>
 800834a:	1e05      	subs	r5, r0, #0
 800834c:	d110      	bne.n	8008370 <__mdiff+0x38>
 800834e:	4629      	mov	r1, r5
 8008350:	4630      	mov	r0, r6
 8008352:	f7ff fd57 	bl	8007e04 <_Balloc>
 8008356:	b930      	cbnz	r0, 8008366 <__mdiff+0x2e>
 8008358:	4b39      	ldr	r3, [pc, #228]	; (8008440 <__mdiff+0x108>)
 800835a:	4602      	mov	r2, r0
 800835c:	f240 2132 	movw	r1, #562	; 0x232
 8008360:	4838      	ldr	r0, [pc, #224]	; (8008444 <__mdiff+0x10c>)
 8008362:	f000 fa8b 	bl	800887c <__assert_func>
 8008366:	2301      	movs	r3, #1
 8008368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800836c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008370:	bfa4      	itt	ge
 8008372:	463b      	movge	r3, r7
 8008374:	4627      	movge	r7, r4
 8008376:	4630      	mov	r0, r6
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	bfa6      	itte	ge
 800837c:	461c      	movge	r4, r3
 800837e:	2500      	movge	r5, #0
 8008380:	2501      	movlt	r5, #1
 8008382:	f7ff fd3f 	bl	8007e04 <_Balloc>
 8008386:	b920      	cbnz	r0, 8008392 <__mdiff+0x5a>
 8008388:	4b2d      	ldr	r3, [pc, #180]	; (8008440 <__mdiff+0x108>)
 800838a:	4602      	mov	r2, r0
 800838c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008390:	e7e6      	b.n	8008360 <__mdiff+0x28>
 8008392:	693e      	ldr	r6, [r7, #16]
 8008394:	60c5      	str	r5, [r0, #12]
 8008396:	6925      	ldr	r5, [r4, #16]
 8008398:	f107 0114 	add.w	r1, r7, #20
 800839c:	f104 0914 	add.w	r9, r4, #20
 80083a0:	f100 0e14 	add.w	lr, r0, #20
 80083a4:	f107 0210 	add.w	r2, r7, #16
 80083a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80083ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80083b0:	46f2      	mov	sl, lr
 80083b2:	2700      	movs	r7, #0
 80083b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80083b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083bc:	fa1f f883 	uxth.w	r8, r3
 80083c0:	fa17 f78b 	uxtah	r7, r7, fp
 80083c4:	0c1b      	lsrs	r3, r3, #16
 80083c6:	eba7 0808 	sub.w	r8, r7, r8
 80083ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083d2:	fa1f f888 	uxth.w	r8, r8
 80083d6:	141f      	asrs	r7, r3, #16
 80083d8:	454d      	cmp	r5, r9
 80083da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80083de:	f84a 3b04 	str.w	r3, [sl], #4
 80083e2:	d8e7      	bhi.n	80083b4 <__mdiff+0x7c>
 80083e4:	1b2b      	subs	r3, r5, r4
 80083e6:	3b15      	subs	r3, #21
 80083e8:	f023 0303 	bic.w	r3, r3, #3
 80083ec:	3304      	adds	r3, #4
 80083ee:	3415      	adds	r4, #21
 80083f0:	42a5      	cmp	r5, r4
 80083f2:	bf38      	it	cc
 80083f4:	2304      	movcc	r3, #4
 80083f6:	4419      	add	r1, r3
 80083f8:	4473      	add	r3, lr
 80083fa:	469e      	mov	lr, r3
 80083fc:	460d      	mov	r5, r1
 80083fe:	4565      	cmp	r5, ip
 8008400:	d30e      	bcc.n	8008420 <__mdiff+0xe8>
 8008402:	f10c 0203 	add.w	r2, ip, #3
 8008406:	1a52      	subs	r2, r2, r1
 8008408:	f022 0203 	bic.w	r2, r2, #3
 800840c:	3903      	subs	r1, #3
 800840e:	458c      	cmp	ip, r1
 8008410:	bf38      	it	cc
 8008412:	2200      	movcc	r2, #0
 8008414:	441a      	add	r2, r3
 8008416:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800841a:	b17b      	cbz	r3, 800843c <__mdiff+0x104>
 800841c:	6106      	str	r6, [r0, #16]
 800841e:	e7a5      	b.n	800836c <__mdiff+0x34>
 8008420:	f855 8b04 	ldr.w	r8, [r5], #4
 8008424:	fa17 f488 	uxtah	r4, r7, r8
 8008428:	1422      	asrs	r2, r4, #16
 800842a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800842e:	b2a4      	uxth	r4, r4
 8008430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008434:	f84e 4b04 	str.w	r4, [lr], #4
 8008438:	1417      	asrs	r7, r2, #16
 800843a:	e7e0      	b.n	80083fe <__mdiff+0xc6>
 800843c:	3e01      	subs	r6, #1
 800843e:	e7ea      	b.n	8008416 <__mdiff+0xde>
 8008440:	08009f07 	.word	0x08009f07
 8008444:	08009f78 	.word	0x08009f78

08008448 <__d2b>:
 8008448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800844c:	4689      	mov	r9, r1
 800844e:	2101      	movs	r1, #1
 8008450:	ec57 6b10 	vmov	r6, r7, d0
 8008454:	4690      	mov	r8, r2
 8008456:	f7ff fcd5 	bl	8007e04 <_Balloc>
 800845a:	4604      	mov	r4, r0
 800845c:	b930      	cbnz	r0, 800846c <__d2b+0x24>
 800845e:	4602      	mov	r2, r0
 8008460:	4b25      	ldr	r3, [pc, #148]	; (80084f8 <__d2b+0xb0>)
 8008462:	4826      	ldr	r0, [pc, #152]	; (80084fc <__d2b+0xb4>)
 8008464:	f240 310a 	movw	r1, #778	; 0x30a
 8008468:	f000 fa08 	bl	800887c <__assert_func>
 800846c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008474:	bb35      	cbnz	r5, 80084c4 <__d2b+0x7c>
 8008476:	2e00      	cmp	r6, #0
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	d028      	beq.n	80084ce <__d2b+0x86>
 800847c:	4668      	mov	r0, sp
 800847e:	9600      	str	r6, [sp, #0]
 8008480:	f7ff fd8c 	bl	8007f9c <__lo0bits>
 8008484:	9900      	ldr	r1, [sp, #0]
 8008486:	b300      	cbz	r0, 80084ca <__d2b+0x82>
 8008488:	9a01      	ldr	r2, [sp, #4]
 800848a:	f1c0 0320 	rsb	r3, r0, #32
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	430b      	orrs	r3, r1
 8008494:	40c2      	lsrs	r2, r0
 8008496:	6163      	str	r3, [r4, #20]
 8008498:	9201      	str	r2, [sp, #4]
 800849a:	9b01      	ldr	r3, [sp, #4]
 800849c:	61a3      	str	r3, [r4, #24]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bf14      	ite	ne
 80084a2:	2202      	movne	r2, #2
 80084a4:	2201      	moveq	r2, #1
 80084a6:	6122      	str	r2, [r4, #16]
 80084a8:	b1d5      	cbz	r5, 80084e0 <__d2b+0x98>
 80084aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084ae:	4405      	add	r5, r0
 80084b0:	f8c9 5000 	str.w	r5, [r9]
 80084b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084b8:	f8c8 0000 	str.w	r0, [r8]
 80084bc:	4620      	mov	r0, r4
 80084be:	b003      	add	sp, #12
 80084c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084c8:	e7d5      	b.n	8008476 <__d2b+0x2e>
 80084ca:	6161      	str	r1, [r4, #20]
 80084cc:	e7e5      	b.n	800849a <__d2b+0x52>
 80084ce:	a801      	add	r0, sp, #4
 80084d0:	f7ff fd64 	bl	8007f9c <__lo0bits>
 80084d4:	9b01      	ldr	r3, [sp, #4]
 80084d6:	6163      	str	r3, [r4, #20]
 80084d8:	2201      	movs	r2, #1
 80084da:	6122      	str	r2, [r4, #16]
 80084dc:	3020      	adds	r0, #32
 80084de:	e7e3      	b.n	80084a8 <__d2b+0x60>
 80084e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084e8:	f8c9 0000 	str.w	r0, [r9]
 80084ec:	6918      	ldr	r0, [r3, #16]
 80084ee:	f7ff fd35 	bl	8007f5c <__hi0bits>
 80084f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084f6:	e7df      	b.n	80084b8 <__d2b+0x70>
 80084f8:	08009f07 	.word	0x08009f07
 80084fc:	08009f78 	.word	0x08009f78

08008500 <_calloc_r>:
 8008500:	b513      	push	{r0, r1, r4, lr}
 8008502:	434a      	muls	r2, r1
 8008504:	4611      	mov	r1, r2
 8008506:	9201      	str	r2, [sp, #4]
 8008508:	f7fd fda2 	bl	8006050 <_malloc_r>
 800850c:	4604      	mov	r4, r0
 800850e:	b118      	cbz	r0, 8008518 <_calloc_r+0x18>
 8008510:	9a01      	ldr	r2, [sp, #4]
 8008512:	2100      	movs	r1, #0
 8008514:	f7fd fd44 	bl	8005fa0 <memset>
 8008518:	4620      	mov	r0, r4
 800851a:	b002      	add	sp, #8
 800851c:	bd10      	pop	{r4, pc}

0800851e <__sfputc_r>:
 800851e:	6893      	ldr	r3, [r2, #8]
 8008520:	3b01      	subs	r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	b410      	push	{r4}
 8008526:	6093      	str	r3, [r2, #8]
 8008528:	da08      	bge.n	800853c <__sfputc_r+0x1e>
 800852a:	6994      	ldr	r4, [r2, #24]
 800852c:	42a3      	cmp	r3, r4
 800852e:	db01      	blt.n	8008534 <__sfputc_r+0x16>
 8008530:	290a      	cmp	r1, #10
 8008532:	d103      	bne.n	800853c <__sfputc_r+0x1e>
 8008534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008538:	f7fe baec 	b.w	8006b14 <__swbuf_r>
 800853c:	6813      	ldr	r3, [r2, #0]
 800853e:	1c58      	adds	r0, r3, #1
 8008540:	6010      	str	r0, [r2, #0]
 8008542:	7019      	strb	r1, [r3, #0]
 8008544:	4608      	mov	r0, r1
 8008546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800854a:	4770      	bx	lr

0800854c <__sfputs_r>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	4606      	mov	r6, r0
 8008550:	460f      	mov	r7, r1
 8008552:	4614      	mov	r4, r2
 8008554:	18d5      	adds	r5, r2, r3
 8008556:	42ac      	cmp	r4, r5
 8008558:	d101      	bne.n	800855e <__sfputs_r+0x12>
 800855a:	2000      	movs	r0, #0
 800855c:	e007      	b.n	800856e <__sfputs_r+0x22>
 800855e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008562:	463a      	mov	r2, r7
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff ffda 	bl	800851e <__sfputc_r>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d1f3      	bne.n	8008556 <__sfputs_r+0xa>
 800856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008570 <_vfiprintf_r>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	460d      	mov	r5, r1
 8008576:	b09d      	sub	sp, #116	; 0x74
 8008578:	4614      	mov	r4, r2
 800857a:	4698      	mov	r8, r3
 800857c:	4606      	mov	r6, r0
 800857e:	b118      	cbz	r0, 8008588 <_vfiprintf_r+0x18>
 8008580:	6983      	ldr	r3, [r0, #24]
 8008582:	b90b      	cbnz	r3, 8008588 <_vfiprintf_r+0x18>
 8008584:	f7ff fb1a 	bl	8007bbc <__sinit>
 8008588:	4b89      	ldr	r3, [pc, #548]	; (80087b0 <_vfiprintf_r+0x240>)
 800858a:	429d      	cmp	r5, r3
 800858c:	d11b      	bne.n	80085c6 <_vfiprintf_r+0x56>
 800858e:	6875      	ldr	r5, [r6, #4]
 8008590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008592:	07d9      	lsls	r1, r3, #31
 8008594:	d405      	bmi.n	80085a2 <_vfiprintf_r+0x32>
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	059a      	lsls	r2, r3, #22
 800859a:	d402      	bmi.n	80085a2 <_vfiprintf_r+0x32>
 800859c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800859e:	f7ff fbb0 	bl	8007d02 <__retarget_lock_acquire_recursive>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	071b      	lsls	r3, r3, #28
 80085a6:	d501      	bpl.n	80085ac <_vfiprintf_r+0x3c>
 80085a8:	692b      	ldr	r3, [r5, #16]
 80085aa:	b9eb      	cbnz	r3, 80085e8 <_vfiprintf_r+0x78>
 80085ac:	4629      	mov	r1, r5
 80085ae:	4630      	mov	r0, r6
 80085b0:	f7fe fb02 	bl	8006bb8 <__swsetup_r>
 80085b4:	b1c0      	cbz	r0, 80085e8 <_vfiprintf_r+0x78>
 80085b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085b8:	07dc      	lsls	r4, r3, #31
 80085ba:	d50e      	bpl.n	80085da <_vfiprintf_r+0x6a>
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085c0:	b01d      	add	sp, #116	; 0x74
 80085c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c6:	4b7b      	ldr	r3, [pc, #492]	; (80087b4 <_vfiprintf_r+0x244>)
 80085c8:	429d      	cmp	r5, r3
 80085ca:	d101      	bne.n	80085d0 <_vfiprintf_r+0x60>
 80085cc:	68b5      	ldr	r5, [r6, #8]
 80085ce:	e7df      	b.n	8008590 <_vfiprintf_r+0x20>
 80085d0:	4b79      	ldr	r3, [pc, #484]	; (80087b8 <_vfiprintf_r+0x248>)
 80085d2:	429d      	cmp	r5, r3
 80085d4:	bf08      	it	eq
 80085d6:	68f5      	ldreq	r5, [r6, #12]
 80085d8:	e7da      	b.n	8008590 <_vfiprintf_r+0x20>
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	0598      	lsls	r0, r3, #22
 80085de:	d4ed      	bmi.n	80085bc <_vfiprintf_r+0x4c>
 80085e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085e2:	f7ff fb8f 	bl	8007d04 <__retarget_lock_release_recursive>
 80085e6:	e7e9      	b.n	80085bc <_vfiprintf_r+0x4c>
 80085e8:	2300      	movs	r3, #0
 80085ea:	9309      	str	r3, [sp, #36]	; 0x24
 80085ec:	2320      	movs	r3, #32
 80085ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80085f6:	2330      	movs	r3, #48	; 0x30
 80085f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087bc <_vfiprintf_r+0x24c>
 80085fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008600:	f04f 0901 	mov.w	r9, #1
 8008604:	4623      	mov	r3, r4
 8008606:	469a      	mov	sl, r3
 8008608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800860c:	b10a      	cbz	r2, 8008612 <_vfiprintf_r+0xa2>
 800860e:	2a25      	cmp	r2, #37	; 0x25
 8008610:	d1f9      	bne.n	8008606 <_vfiprintf_r+0x96>
 8008612:	ebba 0b04 	subs.w	fp, sl, r4
 8008616:	d00b      	beq.n	8008630 <_vfiprintf_r+0xc0>
 8008618:	465b      	mov	r3, fp
 800861a:	4622      	mov	r2, r4
 800861c:	4629      	mov	r1, r5
 800861e:	4630      	mov	r0, r6
 8008620:	f7ff ff94 	bl	800854c <__sfputs_r>
 8008624:	3001      	adds	r0, #1
 8008626:	f000 80aa 	beq.w	800877e <_vfiprintf_r+0x20e>
 800862a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800862c:	445a      	add	r2, fp
 800862e:	9209      	str	r2, [sp, #36]	; 0x24
 8008630:	f89a 3000 	ldrb.w	r3, [sl]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 80a2 	beq.w	800877e <_vfiprintf_r+0x20e>
 800863a:	2300      	movs	r3, #0
 800863c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008644:	f10a 0a01 	add.w	sl, sl, #1
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	9307      	str	r3, [sp, #28]
 800864c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008650:	931a      	str	r3, [sp, #104]	; 0x68
 8008652:	4654      	mov	r4, sl
 8008654:	2205      	movs	r2, #5
 8008656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865a:	4858      	ldr	r0, [pc, #352]	; (80087bc <_vfiprintf_r+0x24c>)
 800865c:	f7f7 fde0 	bl	8000220 <memchr>
 8008660:	9a04      	ldr	r2, [sp, #16]
 8008662:	b9d8      	cbnz	r0, 800869c <_vfiprintf_r+0x12c>
 8008664:	06d1      	lsls	r1, r2, #27
 8008666:	bf44      	itt	mi
 8008668:	2320      	movmi	r3, #32
 800866a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800866e:	0713      	lsls	r3, r2, #28
 8008670:	bf44      	itt	mi
 8008672:	232b      	movmi	r3, #43	; 0x2b
 8008674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008678:	f89a 3000 	ldrb.w	r3, [sl]
 800867c:	2b2a      	cmp	r3, #42	; 0x2a
 800867e:	d015      	beq.n	80086ac <_vfiprintf_r+0x13c>
 8008680:	9a07      	ldr	r2, [sp, #28]
 8008682:	4654      	mov	r4, sl
 8008684:	2000      	movs	r0, #0
 8008686:	f04f 0c0a 	mov.w	ip, #10
 800868a:	4621      	mov	r1, r4
 800868c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008690:	3b30      	subs	r3, #48	; 0x30
 8008692:	2b09      	cmp	r3, #9
 8008694:	d94e      	bls.n	8008734 <_vfiprintf_r+0x1c4>
 8008696:	b1b0      	cbz	r0, 80086c6 <_vfiprintf_r+0x156>
 8008698:	9207      	str	r2, [sp, #28]
 800869a:	e014      	b.n	80086c6 <_vfiprintf_r+0x156>
 800869c:	eba0 0308 	sub.w	r3, r0, r8
 80086a0:	fa09 f303 	lsl.w	r3, r9, r3
 80086a4:	4313      	orrs	r3, r2
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	46a2      	mov	sl, r4
 80086aa:	e7d2      	b.n	8008652 <_vfiprintf_r+0xe2>
 80086ac:	9b03      	ldr	r3, [sp, #12]
 80086ae:	1d19      	adds	r1, r3, #4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	9103      	str	r1, [sp, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bfbb      	ittet	lt
 80086b8:	425b      	neglt	r3, r3
 80086ba:	f042 0202 	orrlt.w	r2, r2, #2
 80086be:	9307      	strge	r3, [sp, #28]
 80086c0:	9307      	strlt	r3, [sp, #28]
 80086c2:	bfb8      	it	lt
 80086c4:	9204      	strlt	r2, [sp, #16]
 80086c6:	7823      	ldrb	r3, [r4, #0]
 80086c8:	2b2e      	cmp	r3, #46	; 0x2e
 80086ca:	d10c      	bne.n	80086e6 <_vfiprintf_r+0x176>
 80086cc:	7863      	ldrb	r3, [r4, #1]
 80086ce:	2b2a      	cmp	r3, #42	; 0x2a
 80086d0:	d135      	bne.n	800873e <_vfiprintf_r+0x1ce>
 80086d2:	9b03      	ldr	r3, [sp, #12]
 80086d4:	1d1a      	adds	r2, r3, #4
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	9203      	str	r2, [sp, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bfb8      	it	lt
 80086de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086e2:	3402      	adds	r4, #2
 80086e4:	9305      	str	r3, [sp, #20]
 80086e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087cc <_vfiprintf_r+0x25c>
 80086ea:	7821      	ldrb	r1, [r4, #0]
 80086ec:	2203      	movs	r2, #3
 80086ee:	4650      	mov	r0, sl
 80086f0:	f7f7 fd96 	bl	8000220 <memchr>
 80086f4:	b140      	cbz	r0, 8008708 <_vfiprintf_r+0x198>
 80086f6:	2340      	movs	r3, #64	; 0x40
 80086f8:	eba0 000a 	sub.w	r0, r0, sl
 80086fc:	fa03 f000 	lsl.w	r0, r3, r0
 8008700:	9b04      	ldr	r3, [sp, #16]
 8008702:	4303      	orrs	r3, r0
 8008704:	3401      	adds	r4, #1
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870c:	482c      	ldr	r0, [pc, #176]	; (80087c0 <_vfiprintf_r+0x250>)
 800870e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008712:	2206      	movs	r2, #6
 8008714:	f7f7 fd84 	bl	8000220 <memchr>
 8008718:	2800      	cmp	r0, #0
 800871a:	d03f      	beq.n	800879c <_vfiprintf_r+0x22c>
 800871c:	4b29      	ldr	r3, [pc, #164]	; (80087c4 <_vfiprintf_r+0x254>)
 800871e:	bb1b      	cbnz	r3, 8008768 <_vfiprintf_r+0x1f8>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	3307      	adds	r3, #7
 8008724:	f023 0307 	bic.w	r3, r3, #7
 8008728:	3308      	adds	r3, #8
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872e:	443b      	add	r3, r7
 8008730:	9309      	str	r3, [sp, #36]	; 0x24
 8008732:	e767      	b.n	8008604 <_vfiprintf_r+0x94>
 8008734:	fb0c 3202 	mla	r2, ip, r2, r3
 8008738:	460c      	mov	r4, r1
 800873a:	2001      	movs	r0, #1
 800873c:	e7a5      	b.n	800868a <_vfiprintf_r+0x11a>
 800873e:	2300      	movs	r3, #0
 8008740:	3401      	adds	r4, #1
 8008742:	9305      	str	r3, [sp, #20]
 8008744:	4619      	mov	r1, r3
 8008746:	f04f 0c0a 	mov.w	ip, #10
 800874a:	4620      	mov	r0, r4
 800874c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008750:	3a30      	subs	r2, #48	; 0x30
 8008752:	2a09      	cmp	r2, #9
 8008754:	d903      	bls.n	800875e <_vfiprintf_r+0x1ee>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0c5      	beq.n	80086e6 <_vfiprintf_r+0x176>
 800875a:	9105      	str	r1, [sp, #20]
 800875c:	e7c3      	b.n	80086e6 <_vfiprintf_r+0x176>
 800875e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008762:	4604      	mov	r4, r0
 8008764:	2301      	movs	r3, #1
 8008766:	e7f0      	b.n	800874a <_vfiprintf_r+0x1da>
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	462a      	mov	r2, r5
 800876e:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <_vfiprintf_r+0x258>)
 8008770:	a904      	add	r1, sp, #16
 8008772:	4630      	mov	r0, r6
 8008774:	f7fd fd66 	bl	8006244 <_printf_float>
 8008778:	4607      	mov	r7, r0
 800877a:	1c78      	adds	r0, r7, #1
 800877c:	d1d6      	bne.n	800872c <_vfiprintf_r+0x1bc>
 800877e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008780:	07d9      	lsls	r1, r3, #31
 8008782:	d405      	bmi.n	8008790 <_vfiprintf_r+0x220>
 8008784:	89ab      	ldrh	r3, [r5, #12]
 8008786:	059a      	lsls	r2, r3, #22
 8008788:	d402      	bmi.n	8008790 <_vfiprintf_r+0x220>
 800878a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800878c:	f7ff faba 	bl	8007d04 <__retarget_lock_release_recursive>
 8008790:	89ab      	ldrh	r3, [r5, #12]
 8008792:	065b      	lsls	r3, r3, #25
 8008794:	f53f af12 	bmi.w	80085bc <_vfiprintf_r+0x4c>
 8008798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800879a:	e711      	b.n	80085c0 <_vfiprintf_r+0x50>
 800879c:	ab03      	add	r3, sp, #12
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	462a      	mov	r2, r5
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <_vfiprintf_r+0x258>)
 80087a4:	a904      	add	r1, sp, #16
 80087a6:	4630      	mov	r0, r6
 80087a8:	f7fd fff0 	bl	800678c <_printf_i>
 80087ac:	e7e4      	b.n	8008778 <_vfiprintf_r+0x208>
 80087ae:	bf00      	nop
 80087b0:	08009f38 	.word	0x08009f38
 80087b4:	08009f58 	.word	0x08009f58
 80087b8:	08009f18 	.word	0x08009f18
 80087bc:	0800a0d4 	.word	0x0800a0d4
 80087c0:	0800a0de 	.word	0x0800a0de
 80087c4:	08006245 	.word	0x08006245
 80087c8:	0800854d 	.word	0x0800854d
 80087cc:	0800a0da 	.word	0x0800a0da

080087d0 <__sread>:
 80087d0:	b510      	push	{r4, lr}
 80087d2:	460c      	mov	r4, r1
 80087d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d8:	f000 f8d6 	bl	8008988 <_read_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	bfab      	itete	ge
 80087e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087e2:	89a3      	ldrhlt	r3, [r4, #12]
 80087e4:	181b      	addge	r3, r3, r0
 80087e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087ea:	bfac      	ite	ge
 80087ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80087ee:	81a3      	strhlt	r3, [r4, #12]
 80087f0:	bd10      	pop	{r4, pc}

080087f2 <__swrite>:
 80087f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	461f      	mov	r7, r3
 80087f8:	898b      	ldrh	r3, [r1, #12]
 80087fa:	05db      	lsls	r3, r3, #23
 80087fc:	4605      	mov	r5, r0
 80087fe:	460c      	mov	r4, r1
 8008800:	4616      	mov	r6, r2
 8008802:	d505      	bpl.n	8008810 <__swrite+0x1e>
 8008804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008808:	2302      	movs	r3, #2
 800880a:	2200      	movs	r2, #0
 800880c:	f000 f898 	bl	8008940 <_lseek_r>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	4632      	mov	r2, r6
 800881e:	463b      	mov	r3, r7
 8008820:	4628      	mov	r0, r5
 8008822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	f000 b817 	b.w	8008858 <_write_r>

0800882a <__sseek>:
 800882a:	b510      	push	{r4, lr}
 800882c:	460c      	mov	r4, r1
 800882e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008832:	f000 f885 	bl	8008940 <_lseek_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	bf15      	itete	ne
 800883c:	6560      	strne	r0, [r4, #84]	; 0x54
 800883e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008846:	81a3      	strheq	r3, [r4, #12]
 8008848:	bf18      	it	ne
 800884a:	81a3      	strhne	r3, [r4, #12]
 800884c:	bd10      	pop	{r4, pc}

0800884e <__sclose>:
 800884e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008852:	f000 b831 	b.w	80088b8 <_close_r>
	...

08008858 <_write_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d07      	ldr	r5, [pc, #28]	; (8008878 <_write_r+0x20>)
 800885c:	4604      	mov	r4, r0
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	2200      	movs	r2, #0
 8008864:	602a      	str	r2, [r5, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	f7f9 fe7c 	bl	8002564 <_write>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_write_r+0x1e>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_write_r+0x1e>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20000500 	.word	0x20000500

0800887c <__assert_func>:
 800887c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800887e:	4614      	mov	r4, r2
 8008880:	461a      	mov	r2, r3
 8008882:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <__assert_func+0x2c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4605      	mov	r5, r0
 8008888:	68d8      	ldr	r0, [r3, #12]
 800888a:	b14c      	cbz	r4, 80088a0 <__assert_func+0x24>
 800888c:	4b07      	ldr	r3, [pc, #28]	; (80088ac <__assert_func+0x30>)
 800888e:	9100      	str	r1, [sp, #0]
 8008890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008894:	4906      	ldr	r1, [pc, #24]	; (80088b0 <__assert_func+0x34>)
 8008896:	462b      	mov	r3, r5
 8008898:	f000 f81e 	bl	80088d8 <fiprintf>
 800889c:	f000 f893 	bl	80089c6 <abort>
 80088a0:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <__assert_func+0x38>)
 80088a2:	461c      	mov	r4, r3
 80088a4:	e7f3      	b.n	800888e <__assert_func+0x12>
 80088a6:	bf00      	nop
 80088a8:	2000000c 	.word	0x2000000c
 80088ac:	0800a0e5 	.word	0x0800a0e5
 80088b0:	0800a0f2 	.word	0x0800a0f2
 80088b4:	0800a120 	.word	0x0800a120

080088b8 <_close_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	; (80088d4 <_close_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7fa f825 	bl	8002912 <_close>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_close_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_close_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20000500 	.word	0x20000500

080088d8 <fiprintf>:
 80088d8:	b40e      	push	{r1, r2, r3}
 80088da:	b503      	push	{r0, r1, lr}
 80088dc:	4601      	mov	r1, r0
 80088de:	ab03      	add	r3, sp, #12
 80088e0:	4805      	ldr	r0, [pc, #20]	; (80088f8 <fiprintf+0x20>)
 80088e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e6:	6800      	ldr	r0, [r0, #0]
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	f7ff fe41 	bl	8008570 <_vfiprintf_r>
 80088ee:	b002      	add	sp, #8
 80088f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f4:	b003      	add	sp, #12
 80088f6:	4770      	bx	lr
 80088f8:	2000000c 	.word	0x2000000c

080088fc <_fstat_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d07      	ldr	r5, [pc, #28]	; (800891c <_fstat_r+0x20>)
 8008900:	2300      	movs	r3, #0
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	4611      	mov	r1, r2
 8008908:	602b      	str	r3, [r5, #0]
 800890a:	f7fa f80e 	bl	800292a <_fstat>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	d102      	bne.n	8008918 <_fstat_r+0x1c>
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	b103      	cbz	r3, 8008918 <_fstat_r+0x1c>
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	bf00      	nop
 800891c:	20000500 	.word	0x20000500

08008920 <_isatty_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4d06      	ldr	r5, [pc, #24]	; (800893c <_isatty_r+0x1c>)
 8008924:	2300      	movs	r3, #0
 8008926:	4604      	mov	r4, r0
 8008928:	4608      	mov	r0, r1
 800892a:	602b      	str	r3, [r5, #0]
 800892c:	f7fa f80d 	bl	800294a <_isatty>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d102      	bne.n	800893a <_isatty_r+0x1a>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	b103      	cbz	r3, 800893a <_isatty_r+0x1a>
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	20000500 	.word	0x20000500

08008940 <_lseek_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	4d07      	ldr	r5, [pc, #28]	; (8008960 <_lseek_r+0x20>)
 8008944:	4604      	mov	r4, r0
 8008946:	4608      	mov	r0, r1
 8008948:	4611      	mov	r1, r2
 800894a:	2200      	movs	r2, #0
 800894c:	602a      	str	r2, [r5, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	f7fa f806 	bl	8002960 <_lseek>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_lseek_r+0x1e>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_lseek_r+0x1e>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	20000500 	.word	0x20000500

08008964 <__ascii_mbtowc>:
 8008964:	b082      	sub	sp, #8
 8008966:	b901      	cbnz	r1, 800896a <__ascii_mbtowc+0x6>
 8008968:	a901      	add	r1, sp, #4
 800896a:	b142      	cbz	r2, 800897e <__ascii_mbtowc+0x1a>
 800896c:	b14b      	cbz	r3, 8008982 <__ascii_mbtowc+0x1e>
 800896e:	7813      	ldrb	r3, [r2, #0]
 8008970:	600b      	str	r3, [r1, #0]
 8008972:	7812      	ldrb	r2, [r2, #0]
 8008974:	1e10      	subs	r0, r2, #0
 8008976:	bf18      	it	ne
 8008978:	2001      	movne	r0, #1
 800897a:	b002      	add	sp, #8
 800897c:	4770      	bx	lr
 800897e:	4610      	mov	r0, r2
 8008980:	e7fb      	b.n	800897a <__ascii_mbtowc+0x16>
 8008982:	f06f 0001 	mvn.w	r0, #1
 8008986:	e7f8      	b.n	800897a <__ascii_mbtowc+0x16>

08008988 <_read_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d07      	ldr	r5, [pc, #28]	; (80089a8 <_read_r+0x20>)
 800898c:	4604      	mov	r4, r0
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	2200      	movs	r2, #0
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f7f9 ff9e 	bl	80028d8 <_read>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_read_r+0x1e>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_read_r+0x1e>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000500 	.word	0x20000500

080089ac <__ascii_wctomb>:
 80089ac:	b149      	cbz	r1, 80089c2 <__ascii_wctomb+0x16>
 80089ae:	2aff      	cmp	r2, #255	; 0xff
 80089b0:	bf85      	ittet	hi
 80089b2:	238a      	movhi	r3, #138	; 0x8a
 80089b4:	6003      	strhi	r3, [r0, #0]
 80089b6:	700a      	strbls	r2, [r1, #0]
 80089b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80089bc:	bf98      	it	ls
 80089be:	2001      	movls	r0, #1
 80089c0:	4770      	bx	lr
 80089c2:	4608      	mov	r0, r1
 80089c4:	4770      	bx	lr

080089c6 <abort>:
 80089c6:	b508      	push	{r3, lr}
 80089c8:	2006      	movs	r0, #6
 80089ca:	f000 f82b 	bl	8008a24 <raise>
 80089ce:	2001      	movs	r0, #1
 80089d0:	f7f9 ff78 	bl	80028c4 <_exit>

080089d4 <_raise_r>:
 80089d4:	291f      	cmp	r1, #31
 80089d6:	b538      	push	{r3, r4, r5, lr}
 80089d8:	4604      	mov	r4, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	d904      	bls.n	80089e8 <_raise_r+0x14>
 80089de:	2316      	movs	r3, #22
 80089e0:	6003      	str	r3, [r0, #0]
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089ea:	b112      	cbz	r2, 80089f2 <_raise_r+0x1e>
 80089ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089f0:	b94b      	cbnz	r3, 8008a06 <_raise_r+0x32>
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f830 	bl	8008a58 <_getpid_r>
 80089f8:	462a      	mov	r2, r5
 80089fa:	4601      	mov	r1, r0
 80089fc:	4620      	mov	r0, r4
 80089fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a02:	f000 b817 	b.w	8008a34 <_kill_r>
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d00a      	beq.n	8008a20 <_raise_r+0x4c>
 8008a0a:	1c59      	adds	r1, r3, #1
 8008a0c:	d103      	bne.n	8008a16 <_raise_r+0x42>
 8008a0e:	2316      	movs	r3, #22
 8008a10:	6003      	str	r3, [r0, #0]
 8008a12:	2001      	movs	r0, #1
 8008a14:	e7e7      	b.n	80089e6 <_raise_r+0x12>
 8008a16:	2400      	movs	r4, #0
 8008a18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	4798      	blx	r3
 8008a20:	2000      	movs	r0, #0
 8008a22:	e7e0      	b.n	80089e6 <_raise_r+0x12>

08008a24 <raise>:
 8008a24:	4b02      	ldr	r3, [pc, #8]	; (8008a30 <raise+0xc>)
 8008a26:	4601      	mov	r1, r0
 8008a28:	6818      	ldr	r0, [r3, #0]
 8008a2a:	f7ff bfd3 	b.w	80089d4 <_raise_r>
 8008a2e:	bf00      	nop
 8008a30:	2000000c 	.word	0x2000000c

08008a34 <_kill_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	; (8008a54 <_kill_r+0x20>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f7f9 ff2f 	bl	80028a4 <_kill>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d102      	bne.n	8008a50 <_kill_r+0x1c>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b103      	cbz	r3, 8008a50 <_kill_r+0x1c>
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	20000500 	.word	0x20000500

08008a58 <_getpid_r>:
 8008a58:	f7f9 bf1c 	b.w	8002894 <_getpid>
 8008a5c:	0000      	movs	r0, r0
	...

08008a60 <cos>:
 8008a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a62:	ec53 2b10 	vmov	r2, r3, d0
 8008a66:	4824      	ldr	r0, [pc, #144]	; (8008af8 <cos+0x98>)
 8008a68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a6c:	4281      	cmp	r1, r0
 8008a6e:	dc06      	bgt.n	8008a7e <cos+0x1e>
 8008a70:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8008af0 <cos+0x90>
 8008a74:	f000 fb8c 	bl	8009190 <__kernel_cos>
 8008a78:	ec51 0b10 	vmov	r0, r1, d0
 8008a7c:	e007      	b.n	8008a8e <cos+0x2e>
 8008a7e:	481f      	ldr	r0, [pc, #124]	; (8008afc <cos+0x9c>)
 8008a80:	4281      	cmp	r1, r0
 8008a82:	dd09      	ble.n	8008a98 <cos+0x38>
 8008a84:	ee10 0a10 	vmov	r0, s0
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f7f7 fc1d 	bl	80002c8 <__aeabi_dsub>
 8008a8e:	ec41 0b10 	vmov	d0, r0, r1
 8008a92:	b005      	add	sp, #20
 8008a94:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a98:	4668      	mov	r0, sp
 8008a9a:	f000 f8b9 	bl	8008c10 <__ieee754_rem_pio2>
 8008a9e:	f000 0003 	and.w	r0, r0, #3
 8008aa2:	2801      	cmp	r0, #1
 8008aa4:	d007      	beq.n	8008ab6 <cos+0x56>
 8008aa6:	2802      	cmp	r0, #2
 8008aa8:	d012      	beq.n	8008ad0 <cos+0x70>
 8008aaa:	b9c0      	cbnz	r0, 8008ade <cos+0x7e>
 8008aac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ab0:	ed9d 0b00 	vldr	d0, [sp]
 8008ab4:	e7de      	b.n	8008a74 <cos+0x14>
 8008ab6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008aba:	ed9d 0b00 	vldr	d0, [sp]
 8008abe:	f000 ff6f 	bl	80099a0 <__kernel_sin>
 8008ac2:	ec53 2b10 	vmov	r2, r3, d0
 8008ac6:	ee10 0a10 	vmov	r0, s0
 8008aca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ace:	e7de      	b.n	8008a8e <cos+0x2e>
 8008ad0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ad4:	ed9d 0b00 	vldr	d0, [sp]
 8008ad8:	f000 fb5a 	bl	8009190 <__kernel_cos>
 8008adc:	e7f1      	b.n	8008ac2 <cos+0x62>
 8008ade:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ae2:	ed9d 0b00 	vldr	d0, [sp]
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	f000 ff5a 	bl	80099a0 <__kernel_sin>
 8008aec:	e7c4      	b.n	8008a78 <cos+0x18>
 8008aee:	bf00      	nop
	...
 8008af8:	3fe921fb 	.word	0x3fe921fb
 8008afc:	7fefffff 	.word	0x7fefffff

08008b00 <sin>:
 8008b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b02:	ec53 2b10 	vmov	r2, r3, d0
 8008b06:	4826      	ldr	r0, [pc, #152]	; (8008ba0 <sin+0xa0>)
 8008b08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b0c:	4281      	cmp	r1, r0
 8008b0e:	dc07      	bgt.n	8008b20 <sin+0x20>
 8008b10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008b98 <sin+0x98>
 8008b14:	2000      	movs	r0, #0
 8008b16:	f000 ff43 	bl	80099a0 <__kernel_sin>
 8008b1a:	ec51 0b10 	vmov	r0, r1, d0
 8008b1e:	e007      	b.n	8008b30 <sin+0x30>
 8008b20:	4820      	ldr	r0, [pc, #128]	; (8008ba4 <sin+0xa4>)
 8008b22:	4281      	cmp	r1, r0
 8008b24:	dd09      	ble.n	8008b3a <sin+0x3a>
 8008b26:	ee10 0a10 	vmov	r0, s0
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	f7f7 fbcc 	bl	80002c8 <__aeabi_dsub>
 8008b30:	ec41 0b10 	vmov	d0, r0, r1
 8008b34:	b005      	add	sp, #20
 8008b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b3a:	4668      	mov	r0, sp
 8008b3c:	f000 f868 	bl	8008c10 <__ieee754_rem_pio2>
 8008b40:	f000 0003 	and.w	r0, r0, #3
 8008b44:	2801      	cmp	r0, #1
 8008b46:	d008      	beq.n	8008b5a <sin+0x5a>
 8008b48:	2802      	cmp	r0, #2
 8008b4a:	d00d      	beq.n	8008b68 <sin+0x68>
 8008b4c:	b9d0      	cbnz	r0, 8008b84 <sin+0x84>
 8008b4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b52:	ed9d 0b00 	vldr	d0, [sp]
 8008b56:	2001      	movs	r0, #1
 8008b58:	e7dd      	b.n	8008b16 <sin+0x16>
 8008b5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b5e:	ed9d 0b00 	vldr	d0, [sp]
 8008b62:	f000 fb15 	bl	8009190 <__kernel_cos>
 8008b66:	e7d8      	b.n	8008b1a <sin+0x1a>
 8008b68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b6c:	ed9d 0b00 	vldr	d0, [sp]
 8008b70:	2001      	movs	r0, #1
 8008b72:	f000 ff15 	bl	80099a0 <__kernel_sin>
 8008b76:	ec53 2b10 	vmov	r2, r3, d0
 8008b7a:	ee10 0a10 	vmov	r0, s0
 8008b7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008b82:	e7d5      	b.n	8008b30 <sin+0x30>
 8008b84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b88:	ed9d 0b00 	vldr	d0, [sp]
 8008b8c:	f000 fb00 	bl	8009190 <__kernel_cos>
 8008b90:	e7f1      	b.n	8008b76 <sin+0x76>
 8008b92:	bf00      	nop
 8008b94:	f3af 8000 	nop.w
	...
 8008ba0:	3fe921fb 	.word	0x3fe921fb
 8008ba4:	7fefffff 	.word	0x7fefffff

08008ba8 <sqrt>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	ed2d 8b02 	vpush	{d8}
 8008bae:	ec55 4b10 	vmov	r4, r5, d0
 8008bb2:	f000 fa37 	bl	8009024 <__ieee754_sqrt>
 8008bb6:	4b15      	ldr	r3, [pc, #84]	; (8008c0c <sqrt+0x64>)
 8008bb8:	eeb0 8a40 	vmov.f32	s16, s0
 8008bbc:	eef0 8a60 	vmov.f32	s17, s1
 8008bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	d019      	beq.n	8008bfc <sqrt+0x54>
 8008bc8:	4622      	mov	r2, r4
 8008bca:	462b      	mov	r3, r5
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4629      	mov	r1, r5
 8008bd0:	f7f7 ffcc 	bl	8000b6c <__aeabi_dcmpun>
 8008bd4:	b990      	cbnz	r0, 8008bfc <sqrt+0x54>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4620      	mov	r0, r4
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f7f7 ff9d 	bl	8000b1c <__aeabi_dcmplt>
 8008be2:	b158      	cbz	r0, 8008bfc <sqrt+0x54>
 8008be4:	f7fd f9aa 	bl	8005f3c <__errno>
 8008be8:	2321      	movs	r3, #33	; 0x21
 8008bea:	6003      	str	r3, [r0, #0]
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	f7f7 fe4a 	bl	800088c <__aeabi_ddiv>
 8008bf8:	ec41 0b18 	vmov	d8, r0, r1
 8008bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8008c00:	eef0 0a68 	vmov.f32	s1, s17
 8008c04:	ecbd 8b02 	vpop	{d8}
 8008c08:	bd38      	pop	{r3, r4, r5, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200001dc 	.word	0x200001dc

08008c10 <__ieee754_rem_pio2>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	ed2d 8b02 	vpush	{d8}
 8008c18:	ec55 4b10 	vmov	r4, r5, d0
 8008c1c:	4bca      	ldr	r3, [pc, #808]	; (8008f48 <__ieee754_rem_pio2+0x338>)
 8008c1e:	b08b      	sub	sp, #44	; 0x2c
 8008c20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008c24:	4598      	cmp	r8, r3
 8008c26:	4682      	mov	sl, r0
 8008c28:	9502      	str	r5, [sp, #8]
 8008c2a:	dc08      	bgt.n	8008c3e <__ieee754_rem_pio2+0x2e>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	ed80 0b00 	vstr	d0, [r0]
 8008c34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008c38:	f04f 0b00 	mov.w	fp, #0
 8008c3c:	e028      	b.n	8008c90 <__ieee754_rem_pio2+0x80>
 8008c3e:	4bc3      	ldr	r3, [pc, #780]	; (8008f4c <__ieee754_rem_pio2+0x33c>)
 8008c40:	4598      	cmp	r8, r3
 8008c42:	dc78      	bgt.n	8008d36 <__ieee754_rem_pio2+0x126>
 8008c44:	9b02      	ldr	r3, [sp, #8]
 8008c46:	4ec2      	ldr	r6, [pc, #776]	; (8008f50 <__ieee754_rem_pio2+0x340>)
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	ee10 0a10 	vmov	r0, s0
 8008c4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008f10 <__ieee754_rem_pio2+0x300>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	4629      	mov	r1, r5
 8008c56:	dd39      	ble.n	8008ccc <__ieee754_rem_pio2+0xbc>
 8008c58:	f7f7 fb36 	bl	80002c8 <__aeabi_dsub>
 8008c5c:	45b0      	cmp	r8, r6
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	d01b      	beq.n	8008c9c <__ieee754_rem_pio2+0x8c>
 8008c64:	a3ac      	add	r3, pc, #688	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fb2d 	bl	80002c8 <__aeabi_dsub>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	e9ca 2300 	strd	r2, r3, [sl]
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f7 fb25 	bl	80002c8 <__aeabi_dsub>
 8008c7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 fb20 	bl	80002c8 <__aeabi_dsub>
 8008c88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c8c:	f04f 0b01 	mov.w	fp, #1
 8008c90:	4658      	mov	r0, fp
 8008c92:	b00b      	add	sp, #44	; 0x2c
 8008c94:	ecbd 8b02 	vpop	{d8}
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008f20 <__ieee754_rem_pio2+0x310>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fb11 	bl	80002c8 <__aeabi_dsub>
 8008ca6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	4604      	mov	r4, r0
 8008cae:	460d      	mov	r5, r1
 8008cb0:	f7f7 fb0a 	bl	80002c8 <__aeabi_dsub>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	e9ca 2300 	strd	r2, r3, [sl]
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	f7f7 fb02 	bl	80002c8 <__aeabi_dsub>
 8008cc4:	a398      	add	r3, pc, #608	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	e7db      	b.n	8008c84 <__ieee754_rem_pio2+0x74>
 8008ccc:	f7f7 fafe 	bl	80002cc <__adddf3>
 8008cd0:	45b0      	cmp	r8, r6
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	d016      	beq.n	8008d06 <__ieee754_rem_pio2+0xf6>
 8008cd8:	a38f      	add	r3, pc, #572	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f7f7 faf5 	bl	80002cc <__adddf3>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9ca 2300 	strd	r2, r3, [sl]
 8008cea:	4620      	mov	r0, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	f7f7 faeb 	bl	80002c8 <__aeabi_dsub>
 8008cf2:	a389      	add	r3, pc, #548	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fae8 	bl	80002cc <__adddf3>
 8008cfc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008d00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d04:	e7c4      	b.n	8008c90 <__ieee754_rem_pio2+0x80>
 8008d06:	a386      	add	r3, pc, #536	; (adr r3, 8008f20 <__ieee754_rem_pio2+0x310>)
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f7f7 fade 	bl	80002cc <__adddf3>
 8008d10:	a385      	add	r3, pc, #532	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	4604      	mov	r4, r0
 8008d18:	460d      	mov	r5, r1
 8008d1a:	f7f7 fad7 	bl	80002cc <__adddf3>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	e9ca 2300 	strd	r2, r3, [sl]
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 facd 	bl	80002c8 <__aeabi_dsub>
 8008d2e:	a37e      	add	r3, pc, #504	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	e7e0      	b.n	8008cf8 <__ieee754_rem_pio2+0xe8>
 8008d36:	4b87      	ldr	r3, [pc, #540]	; (8008f54 <__ieee754_rem_pio2+0x344>)
 8008d38:	4598      	cmp	r8, r3
 8008d3a:	f300 80d9 	bgt.w	8008ef0 <__ieee754_rem_pio2+0x2e0>
 8008d3e:	f000 feed 	bl	8009b1c <fabs>
 8008d42:	ec55 4b10 	vmov	r4, r5, d0
 8008d46:	ee10 0a10 	vmov	r0, s0
 8008d4a:	a379      	add	r3, pc, #484	; (adr r3, 8008f30 <__ieee754_rem_pio2+0x320>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 fc71 	bl	8000638 <__aeabi_dmul>
 8008d56:	4b80      	ldr	r3, [pc, #512]	; (8008f58 <__ieee754_rem_pio2+0x348>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f7f7 fab7 	bl	80002cc <__adddf3>
 8008d5e:	f7f7 ff1b 	bl	8000b98 <__aeabi_d2iz>
 8008d62:	4683      	mov	fp, r0
 8008d64:	f7f7 fbfe 	bl	8000564 <__aeabi_i2d>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	ec43 2b18 	vmov	d8, r2, r3
 8008d70:	a367      	add	r3, pc, #412	; (adr r3, 8008f10 <__ieee754_rem_pio2+0x300>)
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f7f7 fc5f 	bl	8000638 <__aeabi_dmul>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 faa1 	bl	80002c8 <__aeabi_dsub>
 8008d86:	a364      	add	r3, pc, #400	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	460f      	mov	r7, r1
 8008d90:	ec51 0b18 	vmov	r0, r1, d8
 8008d94:	f7f7 fc50 	bl	8000638 <__aeabi_dmul>
 8008d98:	f1bb 0f1f 	cmp.w	fp, #31
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	dc0d      	bgt.n	8008dbe <__ieee754_rem_pio2+0x1ae>
 8008da2:	4b6e      	ldr	r3, [pc, #440]	; (8008f5c <__ieee754_rem_pio2+0x34c>)
 8008da4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dac:	4543      	cmp	r3, r8
 8008dae:	d006      	beq.n	8008dbe <__ieee754_rem_pio2+0x1ae>
 8008db0:	4622      	mov	r2, r4
 8008db2:	462b      	mov	r3, r5
 8008db4:	4630      	mov	r0, r6
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 fa86 	bl	80002c8 <__aeabi_dsub>
 8008dbc:	e00f      	b.n	8008dde <__ieee754_rem_pio2+0x1ce>
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	f7f7 fa7f 	bl	80002c8 <__aeabi_dsub>
 8008dca:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008dd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008dd8:	f1b8 0f10 	cmp.w	r8, #16
 8008ddc:	dc02      	bgt.n	8008de4 <__ieee754_rem_pio2+0x1d4>
 8008dde:	e9ca 0100 	strd	r0, r1, [sl]
 8008de2:	e039      	b.n	8008e58 <__ieee754_rem_pio2+0x248>
 8008de4:	a34e      	add	r3, pc, #312	; (adr r3, 8008f20 <__ieee754_rem_pio2+0x310>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	ec51 0b18 	vmov	r0, r1, d8
 8008dee:	f7f7 fc23 	bl	8000638 <__aeabi_dmul>
 8008df2:	4604      	mov	r4, r0
 8008df4:	460d      	mov	r5, r1
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	f7f7 fa63 	bl	80002c8 <__aeabi_dsub>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4680      	mov	r8, r0
 8008e08:	4689      	mov	r9, r1
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	f7f7 fa5b 	bl	80002c8 <__aeabi_dsub>
 8008e12:	4622      	mov	r2, r4
 8008e14:	462b      	mov	r3, r5
 8008e16:	f7f7 fa57 	bl	80002c8 <__aeabi_dsub>
 8008e1a:	a343      	add	r3, pc, #268	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	ec51 0b18 	vmov	r0, r1, d8
 8008e28:	f7f7 fc06 	bl	8000638 <__aeabi_dmul>
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	462b      	mov	r3, r5
 8008e30:	f7f7 fa4a 	bl	80002c8 <__aeabi_dsub>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4649      	mov	r1, r9
 8008e40:	f7f7 fa42 	bl	80002c8 <__aeabi_dsub>
 8008e44:	9a03      	ldr	r2, [sp, #12]
 8008e46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b31      	cmp	r3, #49	; 0x31
 8008e4e:	dc24      	bgt.n	8008e9a <__ieee754_rem_pio2+0x28a>
 8008e50:	e9ca 0100 	strd	r0, r1, [sl]
 8008e54:	4646      	mov	r6, r8
 8008e56:	464f      	mov	r7, r9
 8008e58:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4642      	mov	r2, r8
 8008e60:	464b      	mov	r3, r9
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 fa30 	bl	80002c8 <__aeabi_dsub>
 8008e68:	462b      	mov	r3, r5
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	f7f7 fa2c 	bl	80002c8 <__aeabi_dsub>
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e78:	f6bf af0a 	bge.w	8008c90 <__ieee754_rem_pio2+0x80>
 8008e7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e80:	f8ca 3004 	str.w	r3, [sl, #4]
 8008e84:	f8ca 8000 	str.w	r8, [sl]
 8008e88:	f8ca 0008 	str.w	r0, [sl, #8]
 8008e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e90:	f8ca 300c 	str.w	r3, [sl, #12]
 8008e94:	f1cb 0b00 	rsb	fp, fp, #0
 8008e98:	e6fa      	b.n	8008c90 <__ieee754_rem_pio2+0x80>
 8008e9a:	a327      	add	r3, pc, #156	; (adr r3, 8008f38 <__ieee754_rem_pio2+0x328>)
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	ec51 0b18 	vmov	r0, r1, d8
 8008ea4:	f7f7 fbc8 	bl	8000638 <__aeabi_dmul>
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	460d      	mov	r5, r1
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 fa08 	bl	80002c8 <__aeabi_dsub>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	f7f7 fa00 	bl	80002c8 <__aeabi_dsub>
 8008ec8:	4622      	mov	r2, r4
 8008eca:	462b      	mov	r3, r5
 8008ecc:	f7f7 f9fc 	bl	80002c8 <__aeabi_dsub>
 8008ed0:	a31b      	add	r3, pc, #108	; (adr r3, 8008f40 <__ieee754_rem_pio2+0x330>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460d      	mov	r5, r1
 8008eda:	ec51 0b18 	vmov	r0, r1, d8
 8008ede:	f7f7 fbab 	bl	8000638 <__aeabi_dmul>
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	462b      	mov	r3, r5
 8008ee6:	f7f7 f9ef 	bl	80002c8 <__aeabi_dsub>
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	e75f      	b.n	8008db0 <__ieee754_rem_pio2+0x1a0>
 8008ef0:	4b1b      	ldr	r3, [pc, #108]	; (8008f60 <__ieee754_rem_pio2+0x350>)
 8008ef2:	4598      	cmp	r8, r3
 8008ef4:	dd36      	ble.n	8008f64 <__ieee754_rem_pio2+0x354>
 8008ef6:	ee10 2a10 	vmov	r2, s0
 8008efa:	462b      	mov	r3, r5
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 f9e2 	bl	80002c8 <__aeabi_dsub>
 8008f04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f08:	e9ca 0100 	strd	r0, r1, [sl]
 8008f0c:	e694      	b.n	8008c38 <__ieee754_rem_pio2+0x28>
 8008f0e:	bf00      	nop
 8008f10:	54400000 	.word	0x54400000
 8008f14:	3ff921fb 	.word	0x3ff921fb
 8008f18:	1a626331 	.word	0x1a626331
 8008f1c:	3dd0b461 	.word	0x3dd0b461
 8008f20:	1a600000 	.word	0x1a600000
 8008f24:	3dd0b461 	.word	0x3dd0b461
 8008f28:	2e037073 	.word	0x2e037073
 8008f2c:	3ba3198a 	.word	0x3ba3198a
 8008f30:	6dc9c883 	.word	0x6dc9c883
 8008f34:	3fe45f30 	.word	0x3fe45f30
 8008f38:	2e000000 	.word	0x2e000000
 8008f3c:	3ba3198a 	.word	0x3ba3198a
 8008f40:	252049c1 	.word	0x252049c1
 8008f44:	397b839a 	.word	0x397b839a
 8008f48:	3fe921fb 	.word	0x3fe921fb
 8008f4c:	4002d97b 	.word	0x4002d97b
 8008f50:	3ff921fb 	.word	0x3ff921fb
 8008f54:	413921fb 	.word	0x413921fb
 8008f58:	3fe00000 	.word	0x3fe00000
 8008f5c:	0800a22c 	.word	0x0800a22c
 8008f60:	7fefffff 	.word	0x7fefffff
 8008f64:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008f68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008f6c:	ee10 0a10 	vmov	r0, s0
 8008f70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008f74:	ee10 6a10 	vmov	r6, s0
 8008f78:	460f      	mov	r7, r1
 8008f7a:	f7f7 fe0d 	bl	8000b98 <__aeabi_d2iz>
 8008f7e:	f7f7 faf1 	bl	8000564 <__aeabi_i2d>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f8e:	f7f7 f99b 	bl	80002c8 <__aeabi_dsub>
 8008f92:	4b22      	ldr	r3, [pc, #136]	; (800901c <__ieee754_rem_pio2+0x40c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	f7f7 fb4f 	bl	8000638 <__aeabi_dmul>
 8008f9a:	460f      	mov	r7, r1
 8008f9c:	4606      	mov	r6, r0
 8008f9e:	f7f7 fdfb 	bl	8000b98 <__aeabi_d2iz>
 8008fa2:	f7f7 fadf 	bl	8000564 <__aeabi_i2d>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4630      	mov	r0, r6
 8008fac:	4639      	mov	r1, r7
 8008fae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fb2:	f7f7 f989 	bl	80002c8 <__aeabi_dsub>
 8008fb6:	4b19      	ldr	r3, [pc, #100]	; (800901c <__ieee754_rem_pio2+0x40c>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f7f7 fb3d 	bl	8000638 <__aeabi_dmul>
 8008fbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fc2:	ad04      	add	r5, sp, #16
 8008fc4:	f04f 0803 	mov.w	r8, #3
 8008fc8:	46a9      	mov	r9, r5
 8008fca:	2600      	movs	r6, #0
 8008fcc:	2700      	movs	r7, #0
 8008fce:	4632      	mov	r2, r6
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008fd6:	46c3      	mov	fp, r8
 8008fd8:	3d08      	subs	r5, #8
 8008fda:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008fde:	f7f7 fd93 	bl	8000b08 <__aeabi_dcmpeq>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d1f3      	bne.n	8008fce <__ieee754_rem_pio2+0x3be>
 8008fe6:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <__ieee754_rem_pio2+0x410>)
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	2302      	movs	r3, #2
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	4622      	mov	r2, r4
 8008ff0:	465b      	mov	r3, fp
 8008ff2:	4651      	mov	r1, sl
 8008ff4:	4648      	mov	r0, r9
 8008ff6:	f000 f993 	bl	8009320 <__kernel_rem_pio2>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	4683      	mov	fp, r0
 8009000:	f6bf ae46 	bge.w	8008c90 <__ieee754_rem_pio2+0x80>
 8009004:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009008:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800900c:	f8ca 3004 	str.w	r3, [sl, #4]
 8009010:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009014:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009018:	e73a      	b.n	8008e90 <__ieee754_rem_pio2+0x280>
 800901a:	bf00      	nop
 800901c:	41700000 	.word	0x41700000
 8009020:	0800a2ac 	.word	0x0800a2ac

08009024 <__ieee754_sqrt>:
 8009024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009028:	ec55 4b10 	vmov	r4, r5, d0
 800902c:	4e56      	ldr	r6, [pc, #344]	; (8009188 <__ieee754_sqrt+0x164>)
 800902e:	43ae      	bics	r6, r5
 8009030:	ee10 0a10 	vmov	r0, s0
 8009034:	ee10 3a10 	vmov	r3, s0
 8009038:	4629      	mov	r1, r5
 800903a:	462a      	mov	r2, r5
 800903c:	d110      	bne.n	8009060 <__ieee754_sqrt+0x3c>
 800903e:	ee10 2a10 	vmov	r2, s0
 8009042:	462b      	mov	r3, r5
 8009044:	f7f7 faf8 	bl	8000638 <__aeabi_dmul>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 f93c 	bl	80002cc <__adddf3>
 8009054:	4604      	mov	r4, r0
 8009056:	460d      	mov	r5, r1
 8009058:	ec45 4b10 	vmov	d0, r4, r5
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009060:	2d00      	cmp	r5, #0
 8009062:	dc10      	bgt.n	8009086 <__ieee754_sqrt+0x62>
 8009064:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009068:	4330      	orrs	r0, r6
 800906a:	d0f5      	beq.n	8009058 <__ieee754_sqrt+0x34>
 800906c:	b15d      	cbz	r5, 8009086 <__ieee754_sqrt+0x62>
 800906e:	ee10 2a10 	vmov	r2, s0
 8009072:	462b      	mov	r3, r5
 8009074:	ee10 0a10 	vmov	r0, s0
 8009078:	f7f7 f926 	bl	80002c8 <__aeabi_dsub>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	f7f7 fc04 	bl	800088c <__aeabi_ddiv>
 8009084:	e7e6      	b.n	8009054 <__ieee754_sqrt+0x30>
 8009086:	1509      	asrs	r1, r1, #20
 8009088:	d076      	beq.n	8009178 <__ieee754_sqrt+0x154>
 800908a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800908e:	07ce      	lsls	r6, r1, #31
 8009090:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009094:	bf5e      	ittt	pl
 8009096:	0fda      	lsrpl	r2, r3, #31
 8009098:	005b      	lslpl	r3, r3, #1
 800909a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800909e:	0fda      	lsrs	r2, r3, #31
 80090a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80090a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80090a8:	2000      	movs	r0, #0
 80090aa:	106d      	asrs	r5, r5, #1
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	f04f 0e16 	mov.w	lr, #22
 80090b2:	4684      	mov	ip, r0
 80090b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090b8:	eb0c 0401 	add.w	r4, ip, r1
 80090bc:	4294      	cmp	r4, r2
 80090be:	bfde      	ittt	le
 80090c0:	1b12      	suble	r2, r2, r4
 80090c2:	eb04 0c01 	addle.w	ip, r4, r1
 80090c6:	1840      	addle	r0, r0, r1
 80090c8:	0052      	lsls	r2, r2, #1
 80090ca:	f1be 0e01 	subs.w	lr, lr, #1
 80090ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80090d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80090d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090da:	d1ed      	bne.n	80090b8 <__ieee754_sqrt+0x94>
 80090dc:	4671      	mov	r1, lr
 80090de:	2720      	movs	r7, #32
 80090e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80090e4:	4562      	cmp	r2, ip
 80090e6:	eb04 060e 	add.w	r6, r4, lr
 80090ea:	dc02      	bgt.n	80090f2 <__ieee754_sqrt+0xce>
 80090ec:	d113      	bne.n	8009116 <__ieee754_sqrt+0xf2>
 80090ee:	429e      	cmp	r6, r3
 80090f0:	d811      	bhi.n	8009116 <__ieee754_sqrt+0xf2>
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	eb06 0e04 	add.w	lr, r6, r4
 80090f8:	da43      	bge.n	8009182 <__ieee754_sqrt+0x15e>
 80090fa:	f1be 0f00 	cmp.w	lr, #0
 80090fe:	db40      	blt.n	8009182 <__ieee754_sqrt+0x15e>
 8009100:	f10c 0801 	add.w	r8, ip, #1
 8009104:	eba2 020c 	sub.w	r2, r2, ip
 8009108:	429e      	cmp	r6, r3
 800910a:	bf88      	it	hi
 800910c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009110:	1b9b      	subs	r3, r3, r6
 8009112:	4421      	add	r1, r4
 8009114:	46c4      	mov	ip, r8
 8009116:	0052      	lsls	r2, r2, #1
 8009118:	3f01      	subs	r7, #1
 800911a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800911e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009122:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009126:	d1dd      	bne.n	80090e4 <__ieee754_sqrt+0xc0>
 8009128:	4313      	orrs	r3, r2
 800912a:	d006      	beq.n	800913a <__ieee754_sqrt+0x116>
 800912c:	1c4c      	adds	r4, r1, #1
 800912e:	bf13      	iteet	ne
 8009130:	3101      	addne	r1, #1
 8009132:	3001      	addeq	r0, #1
 8009134:	4639      	moveq	r1, r7
 8009136:	f021 0101 	bicne.w	r1, r1, #1
 800913a:	1043      	asrs	r3, r0, #1
 800913c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009140:	0849      	lsrs	r1, r1, #1
 8009142:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009146:	07c2      	lsls	r2, r0, #31
 8009148:	bf48      	it	mi
 800914a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800914e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009152:	460c      	mov	r4, r1
 8009154:	463d      	mov	r5, r7
 8009156:	e77f      	b.n	8009058 <__ieee754_sqrt+0x34>
 8009158:	0ada      	lsrs	r2, r3, #11
 800915a:	3815      	subs	r0, #21
 800915c:	055b      	lsls	r3, r3, #21
 800915e:	2a00      	cmp	r2, #0
 8009160:	d0fa      	beq.n	8009158 <__ieee754_sqrt+0x134>
 8009162:	02d7      	lsls	r7, r2, #11
 8009164:	d50a      	bpl.n	800917c <__ieee754_sqrt+0x158>
 8009166:	f1c1 0420 	rsb	r4, r1, #32
 800916a:	fa23 f404 	lsr.w	r4, r3, r4
 800916e:	1e4d      	subs	r5, r1, #1
 8009170:	408b      	lsls	r3, r1
 8009172:	4322      	orrs	r2, r4
 8009174:	1b41      	subs	r1, r0, r5
 8009176:	e788      	b.n	800908a <__ieee754_sqrt+0x66>
 8009178:	4608      	mov	r0, r1
 800917a:	e7f0      	b.n	800915e <__ieee754_sqrt+0x13a>
 800917c:	0052      	lsls	r2, r2, #1
 800917e:	3101      	adds	r1, #1
 8009180:	e7ef      	b.n	8009162 <__ieee754_sqrt+0x13e>
 8009182:	46e0      	mov	r8, ip
 8009184:	e7be      	b.n	8009104 <__ieee754_sqrt+0xe0>
 8009186:	bf00      	nop
 8009188:	7ff00000 	.word	0x7ff00000
 800918c:	00000000 	.word	0x00000000

08009190 <__kernel_cos>:
 8009190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	ec57 6b10 	vmov	r6, r7, d0
 8009198:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800919c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80091a0:	ed8d 1b00 	vstr	d1, [sp]
 80091a4:	da07      	bge.n	80091b6 <__kernel_cos+0x26>
 80091a6:	ee10 0a10 	vmov	r0, s0
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 fcf4 	bl	8000b98 <__aeabi_d2iz>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	f000 8088 	beq.w	80092c6 <__kernel_cos+0x136>
 80091b6:	4632      	mov	r2, r6
 80091b8:	463b      	mov	r3, r7
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 fa3b 	bl	8000638 <__aeabi_dmul>
 80091c2:	4b51      	ldr	r3, [pc, #324]	; (8009308 <__kernel_cos+0x178>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	460d      	mov	r5, r1
 80091ca:	f7f7 fa35 	bl	8000638 <__aeabi_dmul>
 80091ce:	a340      	add	r3, pc, #256	; (adr r3, 80092d0 <__kernel_cos+0x140>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	4682      	mov	sl, r0
 80091d6:	468b      	mov	fp, r1
 80091d8:	4620      	mov	r0, r4
 80091da:	4629      	mov	r1, r5
 80091dc:	f7f7 fa2c 	bl	8000638 <__aeabi_dmul>
 80091e0:	a33d      	add	r3, pc, #244	; (adr r3, 80092d8 <__kernel_cos+0x148>)
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f7f7 f871 	bl	80002cc <__adddf3>
 80091ea:	4622      	mov	r2, r4
 80091ec:	462b      	mov	r3, r5
 80091ee:	f7f7 fa23 	bl	8000638 <__aeabi_dmul>
 80091f2:	a33b      	add	r3, pc, #236	; (adr r3, 80092e0 <__kernel_cos+0x150>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 f866 	bl	80002c8 <__aeabi_dsub>
 80091fc:	4622      	mov	r2, r4
 80091fe:	462b      	mov	r3, r5
 8009200:	f7f7 fa1a 	bl	8000638 <__aeabi_dmul>
 8009204:	a338      	add	r3, pc, #224	; (adr r3, 80092e8 <__kernel_cos+0x158>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 f85f 	bl	80002cc <__adddf3>
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	f7f7 fa11 	bl	8000638 <__aeabi_dmul>
 8009216:	a336      	add	r3, pc, #216	; (adr r3, 80092f0 <__kernel_cos+0x160>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f7f7 f854 	bl	80002c8 <__aeabi_dsub>
 8009220:	4622      	mov	r2, r4
 8009222:	462b      	mov	r3, r5
 8009224:	f7f7 fa08 	bl	8000638 <__aeabi_dmul>
 8009228:	a333      	add	r3, pc, #204	; (adr r3, 80092f8 <__kernel_cos+0x168>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f7 f84d 	bl	80002cc <__adddf3>
 8009232:	4622      	mov	r2, r4
 8009234:	462b      	mov	r3, r5
 8009236:	f7f7 f9ff 	bl	8000638 <__aeabi_dmul>
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	f7f7 f9fb 	bl	8000638 <__aeabi_dmul>
 8009242:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 f9f3 	bl	8000638 <__aeabi_dmul>
 8009252:	460b      	mov	r3, r1
 8009254:	4602      	mov	r2, r0
 8009256:	4629      	mov	r1, r5
 8009258:	4620      	mov	r0, r4
 800925a:	f7f7 f835 	bl	80002c8 <__aeabi_dsub>
 800925e:	4b2b      	ldr	r3, [pc, #172]	; (800930c <__kernel_cos+0x17c>)
 8009260:	4598      	cmp	r8, r3
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	dc10      	bgt.n	800928a <__kernel_cos+0xfa>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4650      	mov	r0, sl
 800926e:	4659      	mov	r1, fp
 8009270:	f7f7 f82a 	bl	80002c8 <__aeabi_dsub>
 8009274:	460b      	mov	r3, r1
 8009276:	4926      	ldr	r1, [pc, #152]	; (8009310 <__kernel_cos+0x180>)
 8009278:	4602      	mov	r2, r0
 800927a:	2000      	movs	r0, #0
 800927c:	f7f7 f824 	bl	80002c8 <__aeabi_dsub>
 8009280:	ec41 0b10 	vmov	d0, r0, r1
 8009284:	b003      	add	sp, #12
 8009286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	4b22      	ldr	r3, [pc, #136]	; (8009314 <__kernel_cos+0x184>)
 800928c:	4920      	ldr	r1, [pc, #128]	; (8009310 <__kernel_cos+0x180>)
 800928e:	4598      	cmp	r8, r3
 8009290:	bfcc      	ite	gt
 8009292:	4d21      	ldrgt	r5, [pc, #132]	; (8009318 <__kernel_cos+0x188>)
 8009294:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009298:	2400      	movs	r4, #0
 800929a:	4622      	mov	r2, r4
 800929c:	462b      	mov	r3, r5
 800929e:	2000      	movs	r0, #0
 80092a0:	f7f7 f812 	bl	80002c8 <__aeabi_dsub>
 80092a4:	4622      	mov	r2, r4
 80092a6:	4680      	mov	r8, r0
 80092a8:	4689      	mov	r9, r1
 80092aa:	462b      	mov	r3, r5
 80092ac:	4650      	mov	r0, sl
 80092ae:	4659      	mov	r1, fp
 80092b0:	f7f7 f80a 	bl	80002c8 <__aeabi_dsub>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	f7f7 f806 	bl	80002c8 <__aeabi_dsub>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4640      	mov	r0, r8
 80092c2:	4649      	mov	r1, r9
 80092c4:	e7da      	b.n	800927c <__kernel_cos+0xec>
 80092c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009300 <__kernel_cos+0x170>
 80092ca:	e7db      	b.n	8009284 <__kernel_cos+0xf4>
 80092cc:	f3af 8000 	nop.w
 80092d0:	be8838d4 	.word	0xbe8838d4
 80092d4:	bda8fae9 	.word	0xbda8fae9
 80092d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80092dc:	3e21ee9e 	.word	0x3e21ee9e
 80092e0:	809c52ad 	.word	0x809c52ad
 80092e4:	3e927e4f 	.word	0x3e927e4f
 80092e8:	19cb1590 	.word	0x19cb1590
 80092ec:	3efa01a0 	.word	0x3efa01a0
 80092f0:	16c15177 	.word	0x16c15177
 80092f4:	3f56c16c 	.word	0x3f56c16c
 80092f8:	5555554c 	.word	0x5555554c
 80092fc:	3fa55555 	.word	0x3fa55555
 8009300:	00000000 	.word	0x00000000
 8009304:	3ff00000 	.word	0x3ff00000
 8009308:	3fe00000 	.word	0x3fe00000
 800930c:	3fd33332 	.word	0x3fd33332
 8009310:	3ff00000 	.word	0x3ff00000
 8009314:	3fe90000 	.word	0x3fe90000
 8009318:	3fd20000 	.word	0x3fd20000
 800931c:	00000000 	.word	0x00000000

08009320 <__kernel_rem_pio2>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	ed2d 8b02 	vpush	{d8}
 8009328:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800932c:	f112 0f14 	cmn.w	r2, #20
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	9101      	str	r1, [sp, #4]
 8009334:	4bc6      	ldr	r3, [pc, #792]	; (8009650 <__kernel_rem_pio2+0x330>)
 8009336:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009338:	9009      	str	r0, [sp, #36]	; 0x24
 800933a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	9b08      	ldr	r3, [sp, #32]
 8009342:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009346:	bfa8      	it	ge
 8009348:	1ed4      	subge	r4, r2, #3
 800934a:	9306      	str	r3, [sp, #24]
 800934c:	bfb2      	itee	lt
 800934e:	2400      	movlt	r4, #0
 8009350:	2318      	movge	r3, #24
 8009352:	fb94 f4f3 	sdivge	r4, r4, r3
 8009356:	f06f 0317 	mvn.w	r3, #23
 800935a:	fb04 3303 	mla	r3, r4, r3, r3
 800935e:	eb03 0a02 	add.w	sl, r3, r2
 8009362:	9b04      	ldr	r3, [sp, #16]
 8009364:	9a06      	ldr	r2, [sp, #24]
 8009366:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009640 <__kernel_rem_pio2+0x320>
 800936a:	eb03 0802 	add.w	r8, r3, r2
 800936e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009370:	1aa7      	subs	r7, r4, r2
 8009372:	ae20      	add	r6, sp, #128	; 0x80
 8009374:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009378:	2500      	movs	r5, #0
 800937a:	4545      	cmp	r5, r8
 800937c:	dd18      	ble.n	80093b0 <__kernel_rem_pio2+0x90>
 800937e:	9b08      	ldr	r3, [sp, #32]
 8009380:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009384:	aa20      	add	r2, sp, #128	; 0x80
 8009386:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009640 <__kernel_rem_pio2+0x320>
 800938a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800938e:	f1c3 0301 	rsb	r3, r3, #1
 8009392:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	9b07      	ldr	r3, [sp, #28]
 800939a:	9a04      	ldr	r2, [sp, #16]
 800939c:	4443      	add	r3, r8
 800939e:	429a      	cmp	r2, r3
 80093a0:	db2f      	blt.n	8009402 <__kernel_rem_pio2+0xe2>
 80093a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80093aa:	462f      	mov	r7, r5
 80093ac:	2600      	movs	r6, #0
 80093ae:	e01b      	b.n	80093e8 <__kernel_rem_pio2+0xc8>
 80093b0:	42ef      	cmn	r7, r5
 80093b2:	d407      	bmi.n	80093c4 <__kernel_rem_pio2+0xa4>
 80093b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80093b8:	f7f7 f8d4 	bl	8000564 <__aeabi_i2d>
 80093bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80093c0:	3501      	adds	r5, #1
 80093c2:	e7da      	b.n	800937a <__kernel_rem_pio2+0x5a>
 80093c4:	ec51 0b18 	vmov	r0, r1, d8
 80093c8:	e7f8      	b.n	80093bc <__kernel_rem_pio2+0x9c>
 80093ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80093d2:	f7f7 f931 	bl	8000638 <__aeabi_dmul>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093de:	f7f6 ff75 	bl	80002cc <__adddf3>
 80093e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e6:	3601      	adds	r6, #1
 80093e8:	9b06      	ldr	r3, [sp, #24]
 80093ea:	429e      	cmp	r6, r3
 80093ec:	f1a7 0708 	sub.w	r7, r7, #8
 80093f0:	ddeb      	ble.n	80093ca <__kernel_rem_pio2+0xaa>
 80093f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093f6:	3508      	adds	r5, #8
 80093f8:	ecab 7b02 	vstmia	fp!, {d7}
 80093fc:	f108 0801 	add.w	r8, r8, #1
 8009400:	e7ca      	b.n	8009398 <__kernel_rem_pio2+0x78>
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	aa0c      	add	r2, sp, #48	; 0x30
 8009406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800940a:	930b      	str	r3, [sp, #44]	; 0x2c
 800940c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800940e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009412:	9c04      	ldr	r4, [sp, #16]
 8009414:	930a      	str	r3, [sp, #40]	; 0x28
 8009416:	ab98      	add	r3, sp, #608	; 0x260
 8009418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800941c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009420:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009424:	f8cd b008 	str.w	fp, [sp, #8]
 8009428:	4625      	mov	r5, r4
 800942a:	2d00      	cmp	r5, #0
 800942c:	dc78      	bgt.n	8009520 <__kernel_rem_pio2+0x200>
 800942e:	ec47 6b10 	vmov	d0, r6, r7
 8009432:	4650      	mov	r0, sl
 8009434:	f000 fbfc 	bl	8009c30 <scalbn>
 8009438:	ec57 6b10 	vmov	r6, r7, d0
 800943c:	2200      	movs	r2, #0
 800943e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009442:	ee10 0a10 	vmov	r0, s0
 8009446:	4639      	mov	r1, r7
 8009448:	f7f7 f8f6 	bl	8000638 <__aeabi_dmul>
 800944c:	ec41 0b10 	vmov	d0, r0, r1
 8009450:	f000 fb6e 	bl	8009b30 <floor>
 8009454:	4b7f      	ldr	r3, [pc, #508]	; (8009654 <__kernel_rem_pio2+0x334>)
 8009456:	ec51 0b10 	vmov	r0, r1, d0
 800945a:	2200      	movs	r2, #0
 800945c:	f7f7 f8ec 	bl	8000638 <__aeabi_dmul>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	f7f6 ff2e 	bl	80002c8 <__aeabi_dsub>
 800946c:	460f      	mov	r7, r1
 800946e:	4606      	mov	r6, r0
 8009470:	f7f7 fb92 	bl	8000b98 <__aeabi_d2iz>
 8009474:	9007      	str	r0, [sp, #28]
 8009476:	f7f7 f875 	bl	8000564 <__aeabi_i2d>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f6 ff21 	bl	80002c8 <__aeabi_dsub>
 8009486:	f1ba 0f00 	cmp.w	sl, #0
 800948a:	4606      	mov	r6, r0
 800948c:	460f      	mov	r7, r1
 800948e:	dd70      	ble.n	8009572 <__kernel_rem_pio2+0x252>
 8009490:	1e62      	subs	r2, r4, #1
 8009492:	ab0c      	add	r3, sp, #48	; 0x30
 8009494:	9d07      	ldr	r5, [sp, #28]
 8009496:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800949a:	f1ca 0118 	rsb	r1, sl, #24
 800949e:	fa40 f301 	asr.w	r3, r0, r1
 80094a2:	441d      	add	r5, r3
 80094a4:	408b      	lsls	r3, r1
 80094a6:	1ac0      	subs	r0, r0, r3
 80094a8:	ab0c      	add	r3, sp, #48	; 0x30
 80094aa:	9507      	str	r5, [sp, #28]
 80094ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80094b0:	f1ca 0317 	rsb	r3, sl, #23
 80094b4:	fa40 f303 	asr.w	r3, r0, r3
 80094b8:	9302      	str	r3, [sp, #8]
 80094ba:	9b02      	ldr	r3, [sp, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dd66      	ble.n	800958e <__kernel_rem_pio2+0x26e>
 80094c0:	9b07      	ldr	r3, [sp, #28]
 80094c2:	2200      	movs	r2, #0
 80094c4:	3301      	adds	r3, #1
 80094c6:	9307      	str	r3, [sp, #28]
 80094c8:	4615      	mov	r5, r2
 80094ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80094ce:	4294      	cmp	r4, r2
 80094d0:	f300 8099 	bgt.w	8009606 <__kernel_rem_pio2+0x2e6>
 80094d4:	f1ba 0f00 	cmp.w	sl, #0
 80094d8:	dd07      	ble.n	80094ea <__kernel_rem_pio2+0x1ca>
 80094da:	f1ba 0f01 	cmp.w	sl, #1
 80094de:	f000 80a5 	beq.w	800962c <__kernel_rem_pio2+0x30c>
 80094e2:	f1ba 0f02 	cmp.w	sl, #2
 80094e6:	f000 80c1 	beq.w	800966c <__kernel_rem_pio2+0x34c>
 80094ea:	9b02      	ldr	r3, [sp, #8]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d14e      	bne.n	800958e <__kernel_rem_pio2+0x26e>
 80094f0:	4632      	mov	r2, r6
 80094f2:	463b      	mov	r3, r7
 80094f4:	4958      	ldr	r1, [pc, #352]	; (8009658 <__kernel_rem_pio2+0x338>)
 80094f6:	2000      	movs	r0, #0
 80094f8:	f7f6 fee6 	bl	80002c8 <__aeabi_dsub>
 80094fc:	4606      	mov	r6, r0
 80094fe:	460f      	mov	r7, r1
 8009500:	2d00      	cmp	r5, #0
 8009502:	d044      	beq.n	800958e <__kernel_rem_pio2+0x26e>
 8009504:	4650      	mov	r0, sl
 8009506:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009648 <__kernel_rem_pio2+0x328>
 800950a:	f000 fb91 	bl	8009c30 <scalbn>
 800950e:	4630      	mov	r0, r6
 8009510:	4639      	mov	r1, r7
 8009512:	ec53 2b10 	vmov	r2, r3, d0
 8009516:	f7f6 fed7 	bl	80002c8 <__aeabi_dsub>
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	e036      	b.n	800958e <__kernel_rem_pio2+0x26e>
 8009520:	4b4e      	ldr	r3, [pc, #312]	; (800965c <__kernel_rem_pio2+0x33c>)
 8009522:	2200      	movs	r2, #0
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f7 f886 	bl	8000638 <__aeabi_dmul>
 800952c:	f7f7 fb34 	bl	8000b98 <__aeabi_d2iz>
 8009530:	f7f7 f818 	bl	8000564 <__aeabi_i2d>
 8009534:	4b4a      	ldr	r3, [pc, #296]	; (8009660 <__kernel_rem_pio2+0x340>)
 8009536:	2200      	movs	r2, #0
 8009538:	4680      	mov	r8, r0
 800953a:	4689      	mov	r9, r1
 800953c:	f7f7 f87c 	bl	8000638 <__aeabi_dmul>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4630      	mov	r0, r6
 8009546:	4639      	mov	r1, r7
 8009548:	f7f6 febe 	bl	80002c8 <__aeabi_dsub>
 800954c:	f7f7 fb24 	bl	8000b98 <__aeabi_d2iz>
 8009550:	9b02      	ldr	r3, [sp, #8]
 8009552:	f843 0b04 	str.w	r0, [r3], #4
 8009556:	3d01      	subs	r5, #1
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	ab70      	add	r3, sp, #448	; 0x1c0
 800955c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	4640      	mov	r0, r8
 8009566:	4649      	mov	r1, r9
 8009568:	f7f6 feb0 	bl	80002cc <__adddf3>
 800956c:	4606      	mov	r6, r0
 800956e:	460f      	mov	r7, r1
 8009570:	e75b      	b.n	800942a <__kernel_rem_pio2+0x10a>
 8009572:	d105      	bne.n	8009580 <__kernel_rem_pio2+0x260>
 8009574:	1e63      	subs	r3, r4, #1
 8009576:	aa0c      	add	r2, sp, #48	; 0x30
 8009578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800957c:	15c3      	asrs	r3, r0, #23
 800957e:	e79b      	b.n	80094b8 <__kernel_rem_pio2+0x198>
 8009580:	4b38      	ldr	r3, [pc, #224]	; (8009664 <__kernel_rem_pio2+0x344>)
 8009582:	2200      	movs	r2, #0
 8009584:	f7f7 fade 	bl	8000b44 <__aeabi_dcmpge>
 8009588:	2800      	cmp	r0, #0
 800958a:	d139      	bne.n	8009600 <__kernel_rem_pio2+0x2e0>
 800958c:	9002      	str	r0, [sp, #8]
 800958e:	2200      	movs	r2, #0
 8009590:	2300      	movs	r3, #0
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f7 fab7 	bl	8000b08 <__aeabi_dcmpeq>
 800959a:	2800      	cmp	r0, #0
 800959c:	f000 80b4 	beq.w	8009708 <__kernel_rem_pio2+0x3e8>
 80095a0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80095a4:	465b      	mov	r3, fp
 80095a6:	2200      	movs	r2, #0
 80095a8:	9904      	ldr	r1, [sp, #16]
 80095aa:	428b      	cmp	r3, r1
 80095ac:	da65      	bge.n	800967a <__kernel_rem_pio2+0x35a>
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	d07b      	beq.n	80096aa <__kernel_rem_pio2+0x38a>
 80095b2:	ab0c      	add	r3, sp, #48	; 0x30
 80095b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80095b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80a0 	beq.w	8009702 <__kernel_rem_pio2+0x3e2>
 80095c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009648 <__kernel_rem_pio2+0x328>
 80095c6:	4650      	mov	r0, sl
 80095c8:	f000 fb32 	bl	8009c30 <scalbn>
 80095cc:	4f23      	ldr	r7, [pc, #140]	; (800965c <__kernel_rem_pio2+0x33c>)
 80095ce:	ec55 4b10 	vmov	r4, r5, d0
 80095d2:	46d8      	mov	r8, fp
 80095d4:	2600      	movs	r6, #0
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	f280 80cf 	bge.w	800977c <__kernel_rem_pio2+0x45c>
 80095de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009640 <__kernel_rem_pio2+0x320>
 80095e2:	465f      	mov	r7, fp
 80095e4:	f04f 0800 	mov.w	r8, #0
 80095e8:	2f00      	cmp	r7, #0
 80095ea:	f2c0 80fd 	blt.w	80097e8 <__kernel_rem_pio2+0x4c8>
 80095ee:	ab70      	add	r3, sp, #448	; 0x1c0
 80095f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009668 <__kernel_rem_pio2+0x348>
 80095f4:	ec55 4b18 	vmov	r4, r5, d8
 80095f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80095fc:	2600      	movs	r6, #0
 80095fe:	e0e5      	b.n	80097cc <__kernel_rem_pio2+0x4ac>
 8009600:	2302      	movs	r3, #2
 8009602:	9302      	str	r3, [sp, #8]
 8009604:	e75c      	b.n	80094c0 <__kernel_rem_pio2+0x1a0>
 8009606:	f8db 3000 	ldr.w	r3, [fp]
 800960a:	b955      	cbnz	r5, 8009622 <__kernel_rem_pio2+0x302>
 800960c:	b123      	cbz	r3, 8009618 <__kernel_rem_pio2+0x2f8>
 800960e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009612:	f8cb 3000 	str.w	r3, [fp]
 8009616:	2301      	movs	r3, #1
 8009618:	3201      	adds	r2, #1
 800961a:	f10b 0b04 	add.w	fp, fp, #4
 800961e:	461d      	mov	r5, r3
 8009620:	e755      	b.n	80094ce <__kernel_rem_pio2+0x1ae>
 8009622:	1acb      	subs	r3, r1, r3
 8009624:	f8cb 3000 	str.w	r3, [fp]
 8009628:	462b      	mov	r3, r5
 800962a:	e7f5      	b.n	8009618 <__kernel_rem_pio2+0x2f8>
 800962c:	1e62      	subs	r2, r4, #1
 800962e:	ab0c      	add	r3, sp, #48	; 0x30
 8009630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009634:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009638:	a90c      	add	r1, sp, #48	; 0x30
 800963a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800963e:	e754      	b.n	80094ea <__kernel_rem_pio2+0x1ca>
	...
 800964c:	3ff00000 	.word	0x3ff00000
 8009650:	0800a3f8 	.word	0x0800a3f8
 8009654:	40200000 	.word	0x40200000
 8009658:	3ff00000 	.word	0x3ff00000
 800965c:	3e700000 	.word	0x3e700000
 8009660:	41700000 	.word	0x41700000
 8009664:	3fe00000 	.word	0x3fe00000
 8009668:	0800a3b8 	.word	0x0800a3b8
 800966c:	1e62      	subs	r2, r4, #1
 800966e:	ab0c      	add	r3, sp, #48	; 0x30
 8009670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009674:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009678:	e7de      	b.n	8009638 <__kernel_rem_pio2+0x318>
 800967a:	a90c      	add	r1, sp, #48	; 0x30
 800967c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009680:	3b01      	subs	r3, #1
 8009682:	430a      	orrs	r2, r1
 8009684:	e790      	b.n	80095a8 <__kernel_rem_pio2+0x288>
 8009686:	3301      	adds	r3, #1
 8009688:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800968c:	2900      	cmp	r1, #0
 800968e:	d0fa      	beq.n	8009686 <__kernel_rem_pio2+0x366>
 8009690:	9a08      	ldr	r2, [sp, #32]
 8009692:	18e3      	adds	r3, r4, r3
 8009694:	18a6      	adds	r6, r4, r2
 8009696:	aa20      	add	r2, sp, #128	; 0x80
 8009698:	1c65      	adds	r5, r4, #1
 800969a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800969e:	9302      	str	r3, [sp, #8]
 80096a0:	9b02      	ldr	r3, [sp, #8]
 80096a2:	42ab      	cmp	r3, r5
 80096a4:	da04      	bge.n	80096b0 <__kernel_rem_pio2+0x390>
 80096a6:	461c      	mov	r4, r3
 80096a8:	e6b5      	b.n	8009416 <__kernel_rem_pio2+0xf6>
 80096aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096ac:	2301      	movs	r3, #1
 80096ae:	e7eb      	b.n	8009688 <__kernel_rem_pio2+0x368>
 80096b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096b6:	f7f6 ff55 	bl	8000564 <__aeabi_i2d>
 80096ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80096be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c0:	46b3      	mov	fp, r6
 80096c2:	461c      	mov	r4, r3
 80096c4:	2700      	movs	r7, #0
 80096c6:	f04f 0800 	mov.w	r8, #0
 80096ca:	f04f 0900 	mov.w	r9, #0
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	429f      	cmp	r7, r3
 80096d2:	dd06      	ble.n	80096e2 <__kernel_rem_pio2+0x3c2>
 80096d4:	ab70      	add	r3, sp, #448	; 0x1c0
 80096d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80096da:	e9c3 8900 	strd	r8, r9, [r3]
 80096de:	3501      	adds	r5, #1
 80096e0:	e7de      	b.n	80096a0 <__kernel_rem_pio2+0x380>
 80096e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80096e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80096ea:	f7f6 ffa5 	bl	8000638 <__aeabi_dmul>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	f7f6 fde9 	bl	80002cc <__adddf3>
 80096fa:	3701      	adds	r7, #1
 80096fc:	4680      	mov	r8, r0
 80096fe:	4689      	mov	r9, r1
 8009700:	e7e5      	b.n	80096ce <__kernel_rem_pio2+0x3ae>
 8009702:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009706:	e754      	b.n	80095b2 <__kernel_rem_pio2+0x292>
 8009708:	ec47 6b10 	vmov	d0, r6, r7
 800970c:	f1ca 0000 	rsb	r0, sl, #0
 8009710:	f000 fa8e 	bl	8009c30 <scalbn>
 8009714:	ec57 6b10 	vmov	r6, r7, d0
 8009718:	4b9f      	ldr	r3, [pc, #636]	; (8009998 <__kernel_rem_pio2+0x678>)
 800971a:	ee10 0a10 	vmov	r0, s0
 800971e:	2200      	movs	r2, #0
 8009720:	4639      	mov	r1, r7
 8009722:	f7f7 fa0f 	bl	8000b44 <__aeabi_dcmpge>
 8009726:	b300      	cbz	r0, 800976a <__kernel_rem_pio2+0x44a>
 8009728:	4b9c      	ldr	r3, [pc, #624]	; (800999c <__kernel_rem_pio2+0x67c>)
 800972a:	2200      	movs	r2, #0
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 ff82 	bl	8000638 <__aeabi_dmul>
 8009734:	f7f7 fa30 	bl	8000b98 <__aeabi_d2iz>
 8009738:	4605      	mov	r5, r0
 800973a:	f7f6 ff13 	bl	8000564 <__aeabi_i2d>
 800973e:	4b96      	ldr	r3, [pc, #600]	; (8009998 <__kernel_rem_pio2+0x678>)
 8009740:	2200      	movs	r2, #0
 8009742:	f7f6 ff79 	bl	8000638 <__aeabi_dmul>
 8009746:	460b      	mov	r3, r1
 8009748:	4602      	mov	r2, r0
 800974a:	4639      	mov	r1, r7
 800974c:	4630      	mov	r0, r6
 800974e:	f7f6 fdbb 	bl	80002c8 <__aeabi_dsub>
 8009752:	f7f7 fa21 	bl	8000b98 <__aeabi_d2iz>
 8009756:	f104 0b01 	add.w	fp, r4, #1
 800975a:	ab0c      	add	r3, sp, #48	; 0x30
 800975c:	f10a 0a18 	add.w	sl, sl, #24
 8009760:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009764:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009768:	e72b      	b.n	80095c2 <__kernel_rem_pio2+0x2a2>
 800976a:	4630      	mov	r0, r6
 800976c:	4639      	mov	r1, r7
 800976e:	f7f7 fa13 	bl	8000b98 <__aeabi_d2iz>
 8009772:	ab0c      	add	r3, sp, #48	; 0x30
 8009774:	46a3      	mov	fp, r4
 8009776:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800977a:	e722      	b.n	80095c2 <__kernel_rem_pio2+0x2a2>
 800977c:	ab70      	add	r3, sp, #448	; 0x1c0
 800977e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009782:	ab0c      	add	r3, sp, #48	; 0x30
 8009784:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009788:	f7f6 feec 	bl	8000564 <__aeabi_i2d>
 800978c:	4622      	mov	r2, r4
 800978e:	462b      	mov	r3, r5
 8009790:	f7f6 ff52 	bl	8000638 <__aeabi_dmul>
 8009794:	4632      	mov	r2, r6
 8009796:	e9c9 0100 	strd	r0, r1, [r9]
 800979a:	463b      	mov	r3, r7
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 ff4a 	bl	8000638 <__aeabi_dmul>
 80097a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80097a8:	4604      	mov	r4, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	e713      	b.n	80095d6 <__kernel_rem_pio2+0x2b6>
 80097ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80097b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80097b6:	f7f6 ff3f 	bl	8000638 <__aeabi_dmul>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4620      	mov	r0, r4
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7f6 fd83 	bl	80002cc <__adddf3>
 80097c6:	3601      	adds	r6, #1
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	429e      	cmp	r6, r3
 80097d0:	dc01      	bgt.n	80097d6 <__kernel_rem_pio2+0x4b6>
 80097d2:	45b0      	cmp	r8, r6
 80097d4:	daeb      	bge.n	80097ae <__kernel_rem_pio2+0x48e>
 80097d6:	ab48      	add	r3, sp, #288	; 0x120
 80097d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80097dc:	e9c3 4500 	strd	r4, r5, [r3]
 80097e0:	3f01      	subs	r7, #1
 80097e2:	f108 0801 	add.w	r8, r8, #1
 80097e6:	e6ff      	b.n	80095e8 <__kernel_rem_pio2+0x2c8>
 80097e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	dc0b      	bgt.n	8009806 <__kernel_rem_pio2+0x4e6>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dc6e      	bgt.n	80098d0 <__kernel_rem_pio2+0x5b0>
 80097f2:	d045      	beq.n	8009880 <__kernel_rem_pio2+0x560>
 80097f4:	9b07      	ldr	r3, [sp, #28]
 80097f6:	f003 0007 	and.w	r0, r3, #7
 80097fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80097fe:	ecbd 8b02 	vpop	{d8}
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009808:	2b03      	cmp	r3, #3
 800980a:	d1f3      	bne.n	80097f4 <__kernel_rem_pio2+0x4d4>
 800980c:	ab48      	add	r3, sp, #288	; 0x120
 800980e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009812:	46d0      	mov	r8, sl
 8009814:	46d9      	mov	r9, fp
 8009816:	f1b9 0f00 	cmp.w	r9, #0
 800981a:	f1a8 0808 	sub.w	r8, r8, #8
 800981e:	dc64      	bgt.n	80098ea <__kernel_rem_pio2+0x5ca>
 8009820:	465c      	mov	r4, fp
 8009822:	2c01      	cmp	r4, #1
 8009824:	f1aa 0a08 	sub.w	sl, sl, #8
 8009828:	dc7e      	bgt.n	8009928 <__kernel_rem_pio2+0x608>
 800982a:	2000      	movs	r0, #0
 800982c:	2100      	movs	r1, #0
 800982e:	f1bb 0f01 	cmp.w	fp, #1
 8009832:	f300 8097 	bgt.w	8009964 <__kernel_rem_pio2+0x644>
 8009836:	9b02      	ldr	r3, [sp, #8]
 8009838:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800983c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 8099 	bne.w	8009978 <__kernel_rem_pio2+0x658>
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	e9c3 5600 	strd	r5, r6, [r3]
 800984c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009850:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009854:	e7ce      	b.n	80097f4 <__kernel_rem_pio2+0x4d4>
 8009856:	ab48      	add	r3, sp, #288	; 0x120
 8009858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f7f6 fd34 	bl	80002cc <__adddf3>
 8009864:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009868:	f1bb 0f00 	cmp.w	fp, #0
 800986c:	daf3      	bge.n	8009856 <__kernel_rem_pio2+0x536>
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	b113      	cbz	r3, 8009878 <__kernel_rem_pio2+0x558>
 8009872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009876:	4619      	mov	r1, r3
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	e9c3 0100 	strd	r0, r1, [r3]
 800987e:	e7b9      	b.n	80097f4 <__kernel_rem_pio2+0x4d4>
 8009880:	2000      	movs	r0, #0
 8009882:	2100      	movs	r1, #0
 8009884:	e7f0      	b.n	8009868 <__kernel_rem_pio2+0x548>
 8009886:	ab48      	add	r3, sp, #288	; 0x120
 8009888:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f7f6 fd1c 	bl	80002cc <__adddf3>
 8009894:	3c01      	subs	r4, #1
 8009896:	2c00      	cmp	r4, #0
 8009898:	daf5      	bge.n	8009886 <__kernel_rem_pio2+0x566>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	b1e3      	cbz	r3, 80098d8 <__kernel_rem_pio2+0x5b8>
 800989e:	4602      	mov	r2, r0
 80098a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098a4:	9c01      	ldr	r4, [sp, #4]
 80098a6:	e9c4 2300 	strd	r2, r3, [r4]
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80098b2:	f7f6 fd09 	bl	80002c8 <__aeabi_dsub>
 80098b6:	ad4a      	add	r5, sp, #296	; 0x128
 80098b8:	2401      	movs	r4, #1
 80098ba:	45a3      	cmp	fp, r4
 80098bc:	da0f      	bge.n	80098de <__kernel_rem_pio2+0x5be>
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	b113      	cbz	r3, 80098c8 <__kernel_rem_pio2+0x5a8>
 80098c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098c6:	4619      	mov	r1, r3
 80098c8:	9b01      	ldr	r3, [sp, #4]
 80098ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80098ce:	e791      	b.n	80097f4 <__kernel_rem_pio2+0x4d4>
 80098d0:	465c      	mov	r4, fp
 80098d2:	2000      	movs	r0, #0
 80098d4:	2100      	movs	r1, #0
 80098d6:	e7de      	b.n	8009896 <__kernel_rem_pio2+0x576>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	e7e2      	b.n	80098a4 <__kernel_rem_pio2+0x584>
 80098de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80098e2:	f7f6 fcf3 	bl	80002cc <__adddf3>
 80098e6:	3401      	adds	r4, #1
 80098e8:	e7e7      	b.n	80098ba <__kernel_rem_pio2+0x59a>
 80098ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 80098ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80098f2:	4620      	mov	r0, r4
 80098f4:	4632      	mov	r2, r6
 80098f6:	463b      	mov	r3, r7
 80098f8:	4629      	mov	r1, r5
 80098fa:	f7f6 fce7 	bl	80002cc <__adddf3>
 80098fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	f7f6 fcdd 	bl	80002c8 <__aeabi_dsub>
 800990e:	4632      	mov	r2, r6
 8009910:	463b      	mov	r3, r7
 8009912:	f7f6 fcdb 	bl	80002cc <__adddf3>
 8009916:	ed9d 7b04 	vldr	d7, [sp, #16]
 800991a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800991e:	ed88 7b00 	vstr	d7, [r8]
 8009922:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009926:	e776      	b.n	8009816 <__kernel_rem_pio2+0x4f6>
 8009928:	e9da 8900 	ldrd	r8, r9, [sl]
 800992c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009930:	4640      	mov	r0, r8
 8009932:	4632      	mov	r2, r6
 8009934:	463b      	mov	r3, r7
 8009936:	4649      	mov	r1, r9
 8009938:	f7f6 fcc8 	bl	80002cc <__adddf3>
 800993c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f6 fcbe 	bl	80002c8 <__aeabi_dsub>
 800994c:	4632      	mov	r2, r6
 800994e:	463b      	mov	r3, r7
 8009950:	f7f6 fcbc 	bl	80002cc <__adddf3>
 8009954:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009958:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800995c:	ed8a 7b00 	vstr	d7, [sl]
 8009960:	3c01      	subs	r4, #1
 8009962:	e75e      	b.n	8009822 <__kernel_rem_pio2+0x502>
 8009964:	ab48      	add	r3, sp, #288	; 0x120
 8009966:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f7f6 fcad 	bl	80002cc <__adddf3>
 8009972:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009976:	e75a      	b.n	800982e <__kernel_rem_pio2+0x50e>
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	601d      	str	r5, [r3, #0]
 800997e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009982:	605c      	str	r4, [r3, #4]
 8009984:	609f      	str	r7, [r3, #8]
 8009986:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800998a:	60d3      	str	r3, [r2, #12]
 800998c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009990:	6110      	str	r0, [r2, #16]
 8009992:	6153      	str	r3, [r2, #20]
 8009994:	e72e      	b.n	80097f4 <__kernel_rem_pio2+0x4d4>
 8009996:	bf00      	nop
 8009998:	41700000 	.word	0x41700000
 800999c:	3e700000 	.word	0x3e700000

080099a0 <__kernel_sin>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	ed2d 8b04 	vpush	{d8-d9}
 80099a8:	eeb0 8a41 	vmov.f32	s16, s2
 80099ac:	eef0 8a61 	vmov.f32	s17, s3
 80099b0:	ec55 4b10 	vmov	r4, r5, d0
 80099b4:	b083      	sub	sp, #12
 80099b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80099ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80099be:	9001      	str	r0, [sp, #4]
 80099c0:	da06      	bge.n	80099d0 <__kernel_sin+0x30>
 80099c2:	ee10 0a10 	vmov	r0, s0
 80099c6:	4629      	mov	r1, r5
 80099c8:	f7f7 f8e6 	bl	8000b98 <__aeabi_d2iz>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d051      	beq.n	8009a74 <__kernel_sin+0xd4>
 80099d0:	4622      	mov	r2, r4
 80099d2:	462b      	mov	r3, r5
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f6 fe2e 	bl	8000638 <__aeabi_dmul>
 80099dc:	4682      	mov	sl, r0
 80099de:	468b      	mov	fp, r1
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fe26 	bl	8000638 <__aeabi_dmul>
 80099ec:	a341      	add	r3, pc, #260	; (adr r3, 8009af4 <__kernel_sin+0x154>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	4680      	mov	r8, r0
 80099f4:	4689      	mov	r9, r1
 80099f6:	4650      	mov	r0, sl
 80099f8:	4659      	mov	r1, fp
 80099fa:	f7f6 fe1d 	bl	8000638 <__aeabi_dmul>
 80099fe:	a33f      	add	r3, pc, #252	; (adr r3, 8009afc <__kernel_sin+0x15c>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7f6 fc60 	bl	80002c8 <__aeabi_dsub>
 8009a08:	4652      	mov	r2, sl
 8009a0a:	465b      	mov	r3, fp
 8009a0c:	f7f6 fe14 	bl	8000638 <__aeabi_dmul>
 8009a10:	a33c      	add	r3, pc, #240	; (adr r3, 8009b04 <__kernel_sin+0x164>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fc59 	bl	80002cc <__adddf3>
 8009a1a:	4652      	mov	r2, sl
 8009a1c:	465b      	mov	r3, fp
 8009a1e:	f7f6 fe0b 	bl	8000638 <__aeabi_dmul>
 8009a22:	a33a      	add	r3, pc, #232	; (adr r3, 8009b0c <__kernel_sin+0x16c>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f6 fc4e 	bl	80002c8 <__aeabi_dsub>
 8009a2c:	4652      	mov	r2, sl
 8009a2e:	465b      	mov	r3, fp
 8009a30:	f7f6 fe02 	bl	8000638 <__aeabi_dmul>
 8009a34:	a337      	add	r3, pc, #220	; (adr r3, 8009b14 <__kernel_sin+0x174>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f6 fc47 	bl	80002cc <__adddf3>
 8009a3e:	9b01      	ldr	r3, [sp, #4]
 8009a40:	4606      	mov	r6, r0
 8009a42:	460f      	mov	r7, r1
 8009a44:	b9eb      	cbnz	r3, 8009a82 <__kernel_sin+0xe2>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	f7f6 fdf3 	bl	8000638 <__aeabi_dmul>
 8009a52:	a325      	add	r3, pc, #148	; (adr r3, 8009ae8 <__kernel_sin+0x148>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fc36 	bl	80002c8 <__aeabi_dsub>
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	464b      	mov	r3, r9
 8009a60:	f7f6 fdea 	bl	8000638 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fc2e 	bl	80002cc <__adddf3>
 8009a70:	4604      	mov	r4, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	ec45 4b10 	vmov	d0, r4, r5
 8009a78:	b003      	add	sp, #12
 8009a7a:	ecbd 8b04 	vpop	{d8-d9}
 8009a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a82:	4b1b      	ldr	r3, [pc, #108]	; (8009af0 <__kernel_sin+0x150>)
 8009a84:	ec51 0b18 	vmov	r0, r1, d8
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f7f6 fdd5 	bl	8000638 <__aeabi_dmul>
 8009a8e:	4632      	mov	r2, r6
 8009a90:	ec41 0b19 	vmov	d9, r0, r1
 8009a94:	463b      	mov	r3, r7
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f6 fdcd 	bl	8000638 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	ec51 0b19 	vmov	r0, r1, d9
 8009aa6:	f7f6 fc0f 	bl	80002c8 <__aeabi_dsub>
 8009aaa:	4652      	mov	r2, sl
 8009aac:	465b      	mov	r3, fp
 8009aae:	f7f6 fdc3 	bl	8000638 <__aeabi_dmul>
 8009ab2:	ec53 2b18 	vmov	r2, r3, d8
 8009ab6:	f7f6 fc07 	bl	80002c8 <__aeabi_dsub>
 8009aba:	a30b      	add	r3, pc, #44	; (adr r3, 8009ae8 <__kernel_sin+0x148>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	460f      	mov	r7, r1
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	f7f6 fdb6 	bl	8000638 <__aeabi_dmul>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	f7f6 fbfa 	bl	80002cc <__adddf3>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4620      	mov	r0, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fbf2 	bl	80002c8 <__aeabi_dsub>
 8009ae4:	e7c4      	b.n	8009a70 <__kernel_sin+0xd0>
 8009ae6:	bf00      	nop
 8009ae8:	55555549 	.word	0x55555549
 8009aec:	3fc55555 	.word	0x3fc55555
 8009af0:	3fe00000 	.word	0x3fe00000
 8009af4:	5acfd57c 	.word	0x5acfd57c
 8009af8:	3de5d93a 	.word	0x3de5d93a
 8009afc:	8a2b9ceb 	.word	0x8a2b9ceb
 8009b00:	3e5ae5e6 	.word	0x3e5ae5e6
 8009b04:	57b1fe7d 	.word	0x57b1fe7d
 8009b08:	3ec71de3 	.word	0x3ec71de3
 8009b0c:	19c161d5 	.word	0x19c161d5
 8009b10:	3f2a01a0 	.word	0x3f2a01a0
 8009b14:	1110f8a6 	.word	0x1110f8a6
 8009b18:	3f811111 	.word	0x3f811111

08009b1c <fabs>:
 8009b1c:	ec51 0b10 	vmov	r0, r1, d0
 8009b20:	ee10 2a10 	vmov	r2, s0
 8009b24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b28:	ec43 2b10 	vmov	d0, r2, r3
 8009b2c:	4770      	bx	lr
	...

08009b30 <floor>:
 8009b30:	ec51 0b10 	vmov	r0, r1, d0
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009b3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009b40:	2e13      	cmp	r6, #19
 8009b42:	ee10 5a10 	vmov	r5, s0
 8009b46:	ee10 8a10 	vmov	r8, s0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	dc32      	bgt.n	8009bb4 <floor+0x84>
 8009b4e:	2e00      	cmp	r6, #0
 8009b50:	da14      	bge.n	8009b7c <floor+0x4c>
 8009b52:	a333      	add	r3, pc, #204	; (adr r3, 8009c20 <floor+0xf0>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 fbb8 	bl	80002cc <__adddf3>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f7f6 fffa 	bl	8000b58 <__aeabi_dcmpgt>
 8009b64:	b138      	cbz	r0, 8009b76 <floor+0x46>
 8009b66:	2c00      	cmp	r4, #0
 8009b68:	da57      	bge.n	8009c1a <floor+0xea>
 8009b6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009b6e:	431d      	orrs	r5, r3
 8009b70:	d001      	beq.n	8009b76 <floor+0x46>
 8009b72:	4c2d      	ldr	r4, [pc, #180]	; (8009c28 <floor+0xf8>)
 8009b74:	2500      	movs	r5, #0
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	e025      	b.n	8009bc8 <floor+0x98>
 8009b7c:	4f2b      	ldr	r7, [pc, #172]	; (8009c2c <floor+0xfc>)
 8009b7e:	4137      	asrs	r7, r6
 8009b80:	ea01 0307 	and.w	r3, r1, r7
 8009b84:	4303      	orrs	r3, r0
 8009b86:	d01f      	beq.n	8009bc8 <floor+0x98>
 8009b88:	a325      	add	r3, pc, #148	; (adr r3, 8009c20 <floor+0xf0>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 fb9d 	bl	80002cc <__adddf3>
 8009b92:	2200      	movs	r2, #0
 8009b94:	2300      	movs	r3, #0
 8009b96:	f7f6 ffdf 	bl	8000b58 <__aeabi_dcmpgt>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d0eb      	beq.n	8009b76 <floor+0x46>
 8009b9e:	2c00      	cmp	r4, #0
 8009ba0:	bfbe      	ittt	lt
 8009ba2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009ba6:	fa43 f606 	asrlt.w	r6, r3, r6
 8009baa:	19a4      	addlt	r4, r4, r6
 8009bac:	ea24 0407 	bic.w	r4, r4, r7
 8009bb0:	2500      	movs	r5, #0
 8009bb2:	e7e0      	b.n	8009b76 <floor+0x46>
 8009bb4:	2e33      	cmp	r6, #51	; 0x33
 8009bb6:	dd0b      	ble.n	8009bd0 <floor+0xa0>
 8009bb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009bbc:	d104      	bne.n	8009bc8 <floor+0x98>
 8009bbe:	ee10 2a10 	vmov	r2, s0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	f7f6 fb82 	bl	80002cc <__adddf3>
 8009bc8:	ec41 0b10 	vmov	d0, r0, r1
 8009bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bd8:	fa23 f707 	lsr.w	r7, r3, r7
 8009bdc:	4207      	tst	r7, r0
 8009bde:	d0f3      	beq.n	8009bc8 <floor+0x98>
 8009be0:	a30f      	add	r3, pc, #60	; (adr r3, 8009c20 <floor+0xf0>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f7f6 fb71 	bl	80002cc <__adddf3>
 8009bea:	2200      	movs	r2, #0
 8009bec:	2300      	movs	r3, #0
 8009bee:	f7f6 ffb3 	bl	8000b58 <__aeabi_dcmpgt>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0bf      	beq.n	8009b76 <floor+0x46>
 8009bf6:	2c00      	cmp	r4, #0
 8009bf8:	da02      	bge.n	8009c00 <floor+0xd0>
 8009bfa:	2e14      	cmp	r6, #20
 8009bfc:	d103      	bne.n	8009c06 <floor+0xd6>
 8009bfe:	3401      	adds	r4, #1
 8009c00:	ea25 0507 	bic.w	r5, r5, r7
 8009c04:	e7b7      	b.n	8009b76 <floor+0x46>
 8009c06:	2301      	movs	r3, #1
 8009c08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009c0c:	fa03 f606 	lsl.w	r6, r3, r6
 8009c10:	4435      	add	r5, r6
 8009c12:	4545      	cmp	r5, r8
 8009c14:	bf38      	it	cc
 8009c16:	18e4      	addcc	r4, r4, r3
 8009c18:	e7f2      	b.n	8009c00 <floor+0xd0>
 8009c1a:	2500      	movs	r5, #0
 8009c1c:	462c      	mov	r4, r5
 8009c1e:	e7aa      	b.n	8009b76 <floor+0x46>
 8009c20:	8800759c 	.word	0x8800759c
 8009c24:	7e37e43c 	.word	0x7e37e43c
 8009c28:	bff00000 	.word	0xbff00000
 8009c2c:	000fffff 	.word	0x000fffff

08009c30 <scalbn>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	ec55 4b10 	vmov	r4, r5, d0
 8009c36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	b99a      	cbnz	r2, 8009c68 <scalbn+0x38>
 8009c40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c44:	4323      	orrs	r3, r4
 8009c46:	d036      	beq.n	8009cb6 <scalbn+0x86>
 8009c48:	4b39      	ldr	r3, [pc, #228]	; (8009d30 <scalbn+0x100>)
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	ee10 0a10 	vmov	r0, s0
 8009c50:	2200      	movs	r2, #0
 8009c52:	f7f6 fcf1 	bl	8000638 <__aeabi_dmul>
 8009c56:	4b37      	ldr	r3, [pc, #220]	; (8009d34 <scalbn+0x104>)
 8009c58:	429e      	cmp	r6, r3
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	460d      	mov	r5, r1
 8009c5e:	da10      	bge.n	8009c82 <scalbn+0x52>
 8009c60:	a32b      	add	r3, pc, #172	; (adr r3, 8009d10 <scalbn+0xe0>)
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	e03a      	b.n	8009cde <scalbn+0xae>
 8009c68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009c6c:	428a      	cmp	r2, r1
 8009c6e:	d10c      	bne.n	8009c8a <scalbn+0x5a>
 8009c70:	ee10 2a10 	vmov	r2, s0
 8009c74:	4620      	mov	r0, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	f7f6 fb28 	bl	80002cc <__adddf3>
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	460d      	mov	r5, r1
 8009c80:	e019      	b.n	8009cb6 <scalbn+0x86>
 8009c82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009c86:	460b      	mov	r3, r1
 8009c88:	3a36      	subs	r2, #54	; 0x36
 8009c8a:	4432      	add	r2, r6
 8009c8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009c90:	428a      	cmp	r2, r1
 8009c92:	dd08      	ble.n	8009ca6 <scalbn+0x76>
 8009c94:	2d00      	cmp	r5, #0
 8009c96:	a120      	add	r1, pc, #128	; (adr r1, 8009d18 <scalbn+0xe8>)
 8009c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c9c:	da1c      	bge.n	8009cd8 <scalbn+0xa8>
 8009c9e:	a120      	add	r1, pc, #128	; (adr r1, 8009d20 <scalbn+0xf0>)
 8009ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ca4:	e018      	b.n	8009cd8 <scalbn+0xa8>
 8009ca6:	2a00      	cmp	r2, #0
 8009ca8:	dd08      	ble.n	8009cbc <scalbn+0x8c>
 8009caa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009cb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009cb6:	ec45 4b10 	vmov	d0, r4, r5
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009cc0:	da19      	bge.n	8009cf6 <scalbn+0xc6>
 8009cc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009cc6:	429e      	cmp	r6, r3
 8009cc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009ccc:	dd0a      	ble.n	8009ce4 <scalbn+0xb4>
 8009cce:	a112      	add	r1, pc, #72	; (adr r1, 8009d18 <scalbn+0xe8>)
 8009cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e2      	bne.n	8009c9e <scalbn+0x6e>
 8009cd8:	a30f      	add	r3, pc, #60	; (adr r3, 8009d18 <scalbn+0xe8>)
 8009cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cde:	f7f6 fcab 	bl	8000638 <__aeabi_dmul>
 8009ce2:	e7cb      	b.n	8009c7c <scalbn+0x4c>
 8009ce4:	a10a      	add	r1, pc, #40	; (adr r1, 8009d10 <scalbn+0xe0>)
 8009ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0b8      	beq.n	8009c60 <scalbn+0x30>
 8009cee:	a10e      	add	r1, pc, #56	; (adr r1, 8009d28 <scalbn+0xf8>)
 8009cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cf4:	e7b4      	b.n	8009c60 <scalbn+0x30>
 8009cf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cfa:	3236      	adds	r2, #54	; 0x36
 8009cfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009d04:	4620      	mov	r0, r4
 8009d06:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <scalbn+0x108>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	e7e8      	b.n	8009cde <scalbn+0xae>
 8009d0c:	f3af 8000 	nop.w
 8009d10:	c2f8f359 	.word	0xc2f8f359
 8009d14:	01a56e1f 	.word	0x01a56e1f
 8009d18:	8800759c 	.word	0x8800759c
 8009d1c:	7e37e43c 	.word	0x7e37e43c
 8009d20:	8800759c 	.word	0x8800759c
 8009d24:	fe37e43c 	.word	0xfe37e43c
 8009d28:	c2f8f359 	.word	0xc2f8f359
 8009d2c:	81a56e1f 	.word	0x81a56e1f
 8009d30:	43500000 	.word	0x43500000
 8009d34:	ffff3cb0 	.word	0xffff3cb0
 8009d38:	3c900000 	.word	0x3c900000

08009d3c <_init>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	bf00      	nop
 8009d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d42:	bc08      	pop	{r3}
 8009d44:	469e      	mov	lr, r3
 8009d46:	4770      	bx	lr

08009d48 <_fini>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	bf00      	nop
 8009d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4e:	bc08      	pop	{r3}
 8009d50:	469e      	mov	lr, r3
 8009d52:	4770      	bx	lr
