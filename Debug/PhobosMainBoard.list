
PhobosMainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800b5c8  0800b5c8  0001b5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd08  0800bd08  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd08  0800bd08  0001bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd10  0800bd10  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd10  0800bd10  0001bd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd14  0800bd14  0001bd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200001e0  0800bef8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  0800bef8  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c35  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343f  00000000  00000000  00038e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0003c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  0003d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b23  00000000  00000000  0003e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015575  00000000  00000000  00062ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d35ee  00000000  00000000  00078218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005648  00000000  00000000  0014b85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b5ac 	.word	0x0800b5ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b5ac 	.word	0x0800b5ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <bezier_new>:
#include "bezier.h"


Bezier* bezier_new(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b091      	sub	sp, #68	; 0x44
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000f8a:	edc7 0a08 	vstr	s1, [r7, #32]
 8000f8e:	ed87 1a07 	vstr	s2, [r7, #28]
 8000f92:	edc7 1a06 	vstr	s3, [r7, #24]
 8000f96:	ed87 2a05 	vstr	s4, [r7, #20]
 8000f9a:	edc7 2a04 	vstr	s5, [r7, #16]
 8000f9e:	ed87 3a03 	vstr	s6, [r7, #12]
 8000fa2:	edc7 3a02 	vstr	s7, [r7, #8]
 8000fa6:	6078      	str	r0, [r7, #4]
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f006 f869 	bl	8007080 <malloc>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
    b->p1 = vector2_new(x1, y1);
 8000fb2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000fb4:	edd7 0a08 	vldr	s1, [r7, #32]
 8000fb8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000fbc:	f001 fa74 	bl	80024a8 <vector2_new>
 8000fc0:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc4:	eef0 7a60 	vmov.f32	s15, s1
 8000fc8:	ed84 7a00 	vstr	s14, [r4]
 8000fcc:	edc4 7a01 	vstr	s15, [r4, #4]
    b->p2 = vector2_new(x2, y2);
 8000fd0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000fd2:	edd7 0a06 	vldr	s1, [r7, #24]
 8000fd6:	ed97 0a07 	vldr	s0, [r7, #28]
 8000fda:	f001 fa65 	bl	80024a8 <vector2_new>
 8000fde:	eeb0 7a40 	vmov.f32	s14, s0
 8000fe2:	eef0 7a60 	vmov.f32	s15, s1
 8000fe6:	ed84 7a02 	vstr	s14, [r4, #8]
 8000fea:	edc4 7a03 	vstr	s15, [r4, #12]
    b->p3 = vector2_new(x3, y3);
 8000fee:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000ff0:	edd7 0a04 	vldr	s1, [r7, #16]
 8000ff4:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ff8:	f001 fa56 	bl	80024a8 <vector2_new>
 8000ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8001000:	eef0 7a60 	vmov.f32	s15, s1
 8001004:	ed84 7a04 	vstr	s14, [r4, #16]
 8001008:	edc4 7a05 	vstr	s15, [r4, #20]
    b->p4 = vector2_new(x4, y4);
 800100c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800100e:	edd7 0a02 	vldr	s1, [r7, #8]
 8001012:	ed97 0a03 	vldr	s0, [r7, #12]
 8001016:	f001 fa47 	bl	80024a8 <vector2_new>
 800101a:	eeb0 7a40 	vmov.f32	s14, s0
 800101e:	eef0 7a60 	vmov.f32	s15, s1
 8001022:	ed84 7a06 	vstr	s14, [r4, #24]
 8001026:	edc4 7a07 	vstr	s15, [r4, #28]
    b->lutLength = lutLength;
 800102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
    b->lut = (Vector2*) malloc(sizeof(Vector2) * b->lutLength);
 8001030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4618      	mov	r0, r3
 8001038:	f006 f822 	bl	8007080 <malloc>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001042:	621a      	str	r2, [r3, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001048:	e02b      	b.n	80010a2 <bezier_new+0x122>
        float t = (float) i/(b->lutLength-1);
 800104a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	3b01      	subs	r3, #1
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Vector2 eval = bezier_eval(b, t);
 800106a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800106e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001070:	f000 f821 	bl	80010b6 <bezier_eval>
 8001074:	eeb0 7a40 	vmov.f32	s14, s0
 8001078:	eef0 7a60 	vmov.f32	s15, s1
 800107c:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8001080:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        b->lut[i] = eval;
 8001084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	461a      	mov	r2, r3
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001098:	e882 0003 	stmia.w	r2, {r0, r1}
    for (int i=0; i<b->lutLength; i++) {
 800109c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800109e:	3301      	adds	r3, #1
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbce      	blt.n	800104a <bezier_new+0xca>
    }
    return b;
 80010ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3744      	adds	r7, #68	; 0x44
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}

080010b6 <bezier_eval>:
    vector2_display(b->p4);
    printf("}\r\n");
}


Vector2 bezier_eval(Bezier* b, float t) {
 80010b6:	b480      	push	{r7}
 80010b8:	b08d      	sub	sp, #52	; 0x34
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 80010c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = b->p1.x * u*u*u + b->p2.x * 3*u*u*t + b->p3.x * 3*u*t*t + b->p4.x * t*t*t;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010f6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80010fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80010fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001102:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001106:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800110a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001120:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001124:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001128:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800112c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001130:	edd7 7a02 	vldr	s15, [r7, #8]
 8001134:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001138:	edd7 7a02 	vldr	s15, [r7, #8]
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	edd3 6a06 	vldr	s13, [r3, #24]
 800114a:	edd7 7a02 	vldr	s15, [r7, #8]
 800114e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001152:	edd7 7a02 	vldr	s15, [r7, #8]
 8001156:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800115a:	edd7 7a02 	vldr	s15, [r7, #8]
 800115e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001166:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = b->p1.y * u*u*u + b->p2.y * 3*u*u*t + b->p3.y * 3*u*t*t + b->p4.y * t*t*t;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001170:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800117c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001180:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	edd3 7a03 	vldr	s15, [r3, #12]
 800118e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001192:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001196:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800119a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800119e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80011b8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80011bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80011c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edd3 6a07 	vldr	s13, [r3, #28]
 80011e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	61bb      	str	r3, [r7, #24]
    return eval;
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	f107 0214 	add.w	r2, r7, #20
 8001212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001216:	e883 0003 	stmia.w	r3, {r0, r1}
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	ee07 2a10 	vmov	s14, r2
 8001222:	ee07 3a90 	vmov	s15, r3
}
 8001226:	eeb0 0a47 	vmov.f32	s0, s14
 800122a:	eef0 0a67 	vmov.f32	s1, s15
 800122e:	3734      	adds	r7, #52	; 0x34
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <bezier_deriv1>:
    int i = round(t*(b->lutLength-1));
    return b->lut[i];
}


Vector2 bezier_deriv1(Bezier* b, float t) {
 8001238:	b480      	push	{r7}
 800123a:	b08d      	sub	sp, #52	; 0x34
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8001244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001248:	edd7 7a02 	vldr	s15, [r7, #8]
 800124c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001250:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p2.x - b->p1.x) * 3*u*u + (b->p3.x - b->p2.x) * 6*u*t + (b->p4.x - b->p3.x) * 3*t*t;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	ed93 7a02 	vldr	s14, [r3, #8]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001264:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001268:	ee27 7a87 	vmul.f32	s14, s15, s14
 800126c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001274:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	edd3 7a02 	vldr	s15, [r3, #8]
 8001288:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800128c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001290:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001294:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001298:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800129c:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edd3 6a06 	vldr	s13, [r3, #24]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012b8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80012bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p2.y - b->p1.y) * 3*u*u + (b->p3.y - b->p2.y) * 6*u*t + (b->p4.y - b->p3.y) * 3*t*t;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	ed93 7a03 	vldr	s14, [r3, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80012ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	edd3 6a05 	vldr	s13, [r3, #20]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	edd3 7a03 	vldr	s15, [r3, #12]
 800130c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001310:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001314:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800131c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001320:	edd7 7a02 	vldr	s15, [r7, #8]
 8001324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	edd3 7a05 	vldr	s15, [r3, #20]
 8001338:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800133c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001340:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001344:	edd7 7a02 	vldr	s15, [r7, #8]
 8001348:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800134c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	61bb      	str	r3, [r7, #24]
    return eval;
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	f107 0214 	add.w	r2, r7, #20
 800136c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001370:	e883 0003 	stmia.w	r3, {r0, r1}
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	ee07 2a10 	vmov	s14, r2
 800137c:	ee07 3a90 	vmov	s15, r3
}
 8001380:	eeb0 0a47 	vmov.f32	s0, s14
 8001384:	eef0 0a67 	vmov.f32	s1, s15
 8001388:	3734      	adds	r7, #52	; 0x34
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <bezier_deriv2>:


Vector2 bezier_deriv2(Bezier* b, float t) {
 8001392:	b480      	push	{r7}
 8001394:	b08d      	sub	sp, #52	; 0x34
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 800139e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p3.x - 2*b->p2.x + b->p1.x) * 6*u + (b->p4.x - 2*b->p3.x + b->p2.x) * 6*t;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edd3 6a06 	vldr	s13, [r3, #24]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80013e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80013fa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80013fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001402:	edd7 7a02 	vldr	s15, [r7, #8]
 8001406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p3.y - 2*b->p2.y + b->p1.y) * 6*u + (b->p4.y - 2*b->p3.y + b->p2.y) * 6*t;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	ed93 7a05 	vldr	s14, [r3, #20]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edd3 7a03 	vldr	s15, [r3, #12]
 800141e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001422:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 7a01 	vldr	s15, [r3, #4]
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001434:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001438:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800143c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	edd3 6a07 	vldr	s13, [r3, #28]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	edd3 7a05 	vldr	s15, [r3, #20]
 800144c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001450:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edd3 7a03 	vldr	s15, [r3, #12]
 800145a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800145e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001462:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001466:	edd7 7a02 	vldr	s15, [r7, #8]
 800146a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	61bb      	str	r3, [r7, #24]
    return eval;
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	f107 0214 	add.w	r2, r7, #20
 8001486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148a:	e883 0003 	stmia.w	r3, {r0, r1}
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	ee07 2a10 	vmov	s14, r2
 8001496:	ee07 3a90 	vmov	s15, r3
}
 800149a:	eeb0 0a47 	vmov.f32	s0, s14
 800149e:	eef0 0a67 	vmov.f32	s1, s15
 80014a2:	3734      	adds	r7, #52	; 0x34
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <bezier_curvature>:


float bezier_curvature(Bezier* b, float t) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	ed87 0a00 	vstr	s0, [r7]
    Vector2 diff1 = bezier_deriv1(b, t); // B'(t)
 80014b8:	ed97 0a00 	vldr	s0, [r7]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff febb 	bl	8001238 <bezier_deriv1>
 80014c2:	eeb0 7a40 	vmov.f32	s14, s0
 80014c6:	eef0 7a60 	vmov.f32	s15, s1
 80014ca:	ed87 7a04 	vstr	s14, [r7, #16]
 80014ce:	edc7 7a05 	vstr	s15, [r7, #20]
    Vector2 diff2 = bezier_deriv2(b, t); // B''(t)
 80014d2:	ed97 0a00 	vldr	s0, [r7]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff5b 	bl	8001392 <bezier_deriv2>
 80014dc:	eeb0 7a40 	vmov.f32	s14, s0
 80014e0:	eef0 7a60 	vmov.f32	s15, s1
 80014e4:	ed87 7a02 	vstr	s14, [r7, #8]
 80014e8:	edc7 7a03 	vstr	s15, [r7, #12]
    float num = vector2_cross(diff1, diff2);
 80014ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80014f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80014f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fc:	eeb0 1a46 	vmov.f32	s2, s12
 8001500:	eef0 1a66 	vmov.f32	s3, s13
 8001504:	eeb0 0a47 	vmov.f32	s0, s14
 8001508:	eef0 0a67 	vmov.f32	s1, s15
 800150c:	f001 f8bc 	bl	8002688 <vector2_cross>
 8001510:	ed87 0a07 	vstr	s0, [r7, #28]
    float den = vector2_norm(diff1);
 8001514:	ed97 7a04 	vldr	s14, [r7, #16]
 8001518:	edd7 7a05 	vldr	s15, [r7, #20]
 800151c:	eeb0 0a47 	vmov.f32	s0, s14
 8001520:	eef0 0a67 	vmov.f32	s1, s15
 8001524:	f000 ffe2 	bl	80024ec <vector2_norm>
 8001528:	ed87 0a06 	vstr	s0, [r7, #24]
    if (den == 0)
 800152c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001530:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	d102      	bne.n	8001540 <bezier_curvature+0x94>
        return INFINITY;
 800153a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001568 <bezier_curvature+0xbc>
 800153e:	e00b      	b.n	8001558 <bezier_curvature+0xac>
    return num/(den*den*den);
 8001540:	edd7 7a06 	vldr	s15, [r7, #24]
 8001544:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001548:	edd7 7a06 	vldr	s15, [r7, #24]
 800154c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001550:	ed97 7a07 	vldr	s14, [r7, #28]
 8001554:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001558:	eef0 7a66 	vmov.f32	s15, s13
}
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	7f800000 	.word	0x7f800000

0800156c <bezier_projectLut>:


float bezier_projectLut(Bezier* b, Vector2 p) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	eeb0 7a40 	vmov.f32	s14, s0
 8001578:	eef0 7a60 	vmov.f32	s15, s1
 800157c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001580:	edc7 7a02 	vstr	s15, [r7, #8]
    float minDist = INFINITY;
 8001584:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    float minIndex = 0;
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	e02d      	b.n	80015f2 <bezier_projectLut+0x86>
        float dist = vector2_dist2(p, b->lut[i]);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	ed93 6a00 	vldr	s12, [r3]
 80015a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80015a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b0:	eeb0 1a46 	vmov.f32	s2, s12
 80015b4:	eef0 1a66 	vmov.f32	s3, s13
 80015b8:	eeb0 0a47 	vmov.f32	s0, s14
 80015bc:	eef0 0a67 	vmov.f32	s1, s15
 80015c0:	f000 fff0 	bl	80025a4 <vector2_dist2>
 80015c4:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < minDist) {
 80015c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	d508      	bpl.n	80015ec <bezier_projectLut+0x80>
            minDist = dist;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
            minIndex = i;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	3301      	adds	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbcc      	blt.n	8001596 <bezier_projectLut+0x2a>
        }
    }
    float tLut = (float) minIndex/(b->lutLength-1);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	3b01      	subs	r3, #1
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160a:	edd7 6a08 	vldr	s13, [r7, #32]
 800160e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001612:	edc7 7a06 	vstr	s15, [r7, #24]
    return tLut;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	ee07 3a90 	vmov	s15, r3
}
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <bezier_project>:


float bezier_project(Bezier* b, Vector2 p, float precision) {
 8001628:	b580      	push	{r7, lr}
 800162a:	ed2d 8b02 	vpush	{d8}
 800162e:	b08c      	sub	sp, #48	; 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	eeb0 7a40 	vmov.f32	s14, s0
 8001638:	eef0 7a60 	vmov.f32	s15, s1
 800163c:	ed87 1a00 	vstr	s2, [r7]
 8001640:	ed87 7a01 	vstr	s14, [r7, #4]
 8001644:	edc7 7a02 	vstr	s15, [r7, #8]
    float tLut = bezier_projectLut(b, p);
 8001648:	ed97 7a01 	vldr	s14, [r7, #4]
 800164c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001650:	eeb0 0a47 	vmov.f32	s0, s14
 8001654:	eef0 0a67 	vmov.f32	s1, s15
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff ff87 	bl	800156c <bezier_projectLut>
 800165e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    float halfWidth = 1.0/(b->lutLength-1);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	3b01      	subs	r3, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff7b 	bl	8000564 <__aeabi_i2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	495b      	ldr	r1, [pc, #364]	; (80017e4 <bezier_project+0x1bc>)
 8001678:	f7ff f908 	bl	800088c <__aeabi_ddiv>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fab0 	bl	8000be8 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	623b      	str	r3, [r7, #32]

    float t_a = tLut - halfWidth;
 800168c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001690:	edd7 7a08 	vldr	s15, [r7, #32]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t_a = (t_a<0)?0:t_a;
 800169c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d502      	bpl.n	80016b0 <bezier_project+0x88>
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e000      	b.n	80016b2 <bezier_project+0x8a>
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    float t_b = tLut + halfWidth;
 80016b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t_b = (t_b>1)?1:t_b;
 80016c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dd02      	ble.n	80016dc <bezier_project+0xb4>
 80016d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016da:	e000      	b.n	80016de <bezier_project+0xb6>
 80016dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28

    Vector2 p_a, p_b;

    while (t_b - t_a > precision) {
 80016e0:	e05f      	b.n	80017a2 <bezier_project+0x17a>
        p_a = bezier_eval(b, t_a);
 80016e2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff fce5 	bl	80010b6 <bezier_eval>
 80016ec:	eeb0 7a40 	vmov.f32	s14, s0
 80016f0:	eef0 7a60 	vmov.f32	s15, s1
 80016f4:	ed87 7a06 	vstr	s14, [r7, #24]
 80016f8:	edc7 7a07 	vstr	s15, [r7, #28]
        p_b = bezier_eval(b, t_b);
 80016fc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff fcd8 	bl	80010b6 <bezier_eval>
 8001706:	eeb0 7a40 	vmov.f32	s14, s0
 800170a:	eef0 7a60 	vmov.f32	s15, s1
 800170e:	ed87 7a04 	vstr	s14, [r7, #16]
 8001712:	edc7 7a05 	vstr	s15, [r7, #20]
        if (vector2_dist2(p, p_a) < vector2_dist2(p, p_b))
 8001716:	ed97 6a06 	vldr	s12, [r7, #24]
 800171a:	edd7 6a07 	vldr	s13, [r7, #28]
 800171e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001722:	edd7 7a02 	vldr	s15, [r7, #8]
 8001726:	eeb0 1a46 	vmov.f32	s2, s12
 800172a:	eef0 1a66 	vmov.f32	s3, s13
 800172e:	eeb0 0a47 	vmov.f32	s0, s14
 8001732:	eef0 0a67 	vmov.f32	s1, s15
 8001736:	f000 ff35 	bl	80025a4 <vector2_dist2>
 800173a:	eeb0 8a40 	vmov.f32	s16, s0
 800173e:	ed97 6a04 	vldr	s12, [r7, #16]
 8001742:	edd7 6a05 	vldr	s13, [r7, #20]
 8001746:	ed97 7a01 	vldr	s14, [r7, #4]
 800174a:	edd7 7a02 	vldr	s15, [r7, #8]
 800174e:	eeb0 1a46 	vmov.f32	s2, s12
 8001752:	eef0 1a66 	vmov.f32	s3, s13
 8001756:	eeb0 0a47 	vmov.f32	s0, s14
 800175a:	eef0 0a67 	vmov.f32	s1, s15
 800175e:	f000 ff21 	bl	80025a4 <vector2_dist2>
 8001762:	eef0 7a40 	vmov.f32	s15, s0
 8001766:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d50c      	bpl.n	800178a <bezier_project+0x162>
            t_b = (t_a + t_b)/2;
 8001770:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001774:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001784:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001788:	e00b      	b.n	80017a2 <bezier_project+0x17a>
        else
            t_a = (t_a + t_b)/2;
 800178a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800178e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001796:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800179a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while (t_b - t_a > precision) {
 80017a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80017a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ae:	ed97 7a00 	vldr	s14, [r7]
 80017b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	d492      	bmi.n	80016e2 <bezier_project+0xba>
    }
    return (t_a + t_b)/2;
 80017bc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80017d4:	eeb0 0a67 	vmov.f32	s0, s15
 80017d8:	3730      	adds	r7, #48	; 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	ecbd 8b02 	vpop	{d8}
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	3ff00000 	.word	0x3ff00000

080017e8 <drv8825_init>:


void drv8825_init(Stepper *stepper, uint16_t enablePin, 
                  GPIO_TypeDef* enableGPIO, uint16_t dirPin, 
                  GPIO_TypeDef *dirGPIO, TIM_HandleTypeDef *timer, 
                  uint8_t channel) {
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	460b      	mov	r3, r1
 80017f6:	817b      	strh	r3, [r7, #10]
 80017f8:	4613      	mov	r3, r2
 80017fa:	813b      	strh	r3, [r7, #8]
	stepper->enablePin = enablePin;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	897a      	ldrh	r2, [r7, #10]
 8001800:	801a      	strh	r2, [r3, #0]
	stepper->enableGPIO = enableGPIO;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]

	stepper->dirPin = dirPin;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	893a      	ldrh	r2, [r7, #8]
 800180c:	811a      	strh	r2, [r3, #8]
	stepper->dirGPIO = dirGPIO;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]

	stepper->timer = timer;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	611a      	str	r2, [r3, #16]
	stepper->channel = channel;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001820:	751a      	strb	r2, [r3, #20]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <drv8825_setDirection>:


void drv8825_setDirection(Stepper *stepper, StepperDirection direction) {
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(stepper->dirGPIO, stepper->dirPin, (uint8_t) direction);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68d8      	ldr	r0, [r3, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	891b      	ldrh	r3, [r3, #8]
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	4619      	mov	r1, r3
 8001846:	f002 fd0f 	bl	8004268 <HAL_GPIO_WritePin>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <drv8825_enable>:


void drv8825_enable(Stepper *stepper) {
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6858      	ldr	r0, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	4619      	mov	r1, r3
 8001866:	f002 fcff 	bl	8004268 <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin, 
		(uint8_t) ACTIVE
	);
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <drv8825_setPWMFrequency>:
		(uint8_t) PASSIVE
	);
}


void drv8825_setPWMFrequency(Stepper* stepper, uint16_t frequency) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if (frequency != 0) {
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <drv8825_setPWMFrequency+0x2a>
		stepper->timer->Init.Prescaler = 179;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	22b3      	movs	r2, #179	; 0xb3
 800188c:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = (uint32_t)1000000/frequency;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4945      	ldr	r1, [pc, #276]	; (80019ac <drv8825_setPWMFrequency+0x138>)
 8001896:	fbb1 f2f2 	udiv	r2, r1, r2
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	e009      	b.n	80018b2 <drv8825_setPWMFrequency+0x3e>
	} else {
		stepper->timer->Init.Prescaler = 0xFFFE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018a6:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = 0xFFFE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018b0:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(stepper->timer) != HAL_OK) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 faaa 	bl	8004e10 <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <drv8825_setPWMFrequency+0x52>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 80018c2:	f001 fa05 	bl	8002cd0 <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(stepper->timer) != HAL_OK) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fbc8 	bl	8005060 <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <drv8825_setPWMFrequency+0x66>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 80018d6:	f001 f9fb 	bl	8002cd0 <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(stepper->timer, stepper->channel);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7d1b      	ldrb	r3, [r3, #20]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f003 fc15 	bl	8005114 <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch (stepper->channel) {
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7d1b      	ldrb	r3, [r3, #20]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d858      	bhi.n	80019a4 <drv8825_setPWMFrequency+0x130>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <drv8825_setPWMFrequency+0x84>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	0800192d 	.word	0x0800192d
 80018fc:	080019a5 	.word	0x080019a5
 8001900:	080019a5 	.word	0x080019a5
 8001904:	080019a5 	.word	0x080019a5
 8001908:	0800194b 	.word	0x0800194b
 800190c:	080019a5 	.word	0x080019a5
 8001910:	080019a5 	.word	0x080019a5
 8001914:	080019a5 	.word	0x080019a5
 8001918:	08001969 	.word	0x08001969
 800191c:	080019a5 	.word	0x080019a5
 8001920:	080019a5 	.word	0x080019a5
 8001924:	080019a5 	.word	0x080019a5
 8001928:	08001987 	.word	0x08001987
		case (TIM_CHANNEL_1):
			stepper->timer->Instance->CCR1 = (50*stepper->timer->Init.Period)/100;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2232      	movs	r2, #50	; 0x32
 8001934:	fb02 f203 	mul.w	r2, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	491c      	ldr	r1, [pc, #112]	; (80019b0 <drv8825_setPWMFrequency+0x13c>)
 8001940:	fba1 1202 	umull	r1, r2, r1, r2
 8001944:	0952      	lsrs	r2, r2, #5
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001948:	e02c      	b.n	80019a4 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_2):
			stepper->timer->Instance->CCR2 = (50*stepper->timer->Init.Period)/100;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2232      	movs	r2, #50	; 0x32
 8001952:	fb02 f203 	mul.w	r2, r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4914      	ldr	r1, [pc, #80]	; (80019b0 <drv8825_setPWMFrequency+0x13c>)
 800195e:	fba1 1202 	umull	r1, r2, r1, r2
 8001962:	0952      	lsrs	r2, r2, #5
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001966:	e01d      	b.n	80019a4 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_3):
			stepper->timer->Instance->CCR3 = (50*stepper->timer->Init.Period)/100;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2232      	movs	r2, #50	; 0x32
 8001970:	fb02 f203 	mul.w	r2, r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	490d      	ldr	r1, [pc, #52]	; (80019b0 <drv8825_setPWMFrequency+0x13c>)
 800197c:	fba1 1202 	umull	r1, r2, r1, r2
 8001980:	0952      	lsrs	r2, r2, #5
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001984:	e00e      	b.n	80019a4 <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_4):
			stepper->timer->Instance->CCR4 = (50*stepper->timer->Init.Period)/100;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2232      	movs	r2, #50	; 0x32
 800198e:	fb02 f203 	mul.w	r2, r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4905      	ldr	r1, [pc, #20]	; (80019b0 <drv8825_setPWMFrequency+0x13c>)
 800199a:	fba1 1202 	umull	r1, r2, r1, r2
 800199e:	0952      	lsrs	r2, r2, #5
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80019a2:	bf00      	nop
	}
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	000f4240 	.word	0x000f4240
 80019b0:	51eb851f 	.word	0x51eb851f

080019b4 <drv8825_setRotationSpeed>:


void drv8825_setRotationSpeed(Stepper *stepper, float rpm) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	ed87 0a00 	vstr	s0, [r7]
	uint16_t f = (rpm / 60) * STEPS_PER_REV * MICROSTEPS;
 80019c0:	ed97 7a00 	vldr	s14, [r7]
 80019c4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80019f8 <drv8825_setRotationSpeed+0x44>
 80019c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019cc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80019fc <drv8825_setRotationSpeed+0x48>
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a00 <drv8825_setRotationSpeed+0x4c>
 80019d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e0:	ee17 3a90 	vmov	r3, s15
 80019e4:	81fb      	strh	r3, [r7, #14]
	drv8825_setPWMFrequency(stepper, f);
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff42 	bl	8001874 <drv8825_setPWMFrequency>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	42700000 	.word	0x42700000
 80019fc:	43480000 	.word	0x43480000
 8001a00:	42000000 	.word	0x42000000

08001a04 <getRightEncoderCount>:


extern Robot robot;


int16_t getRightEncoderCount(){
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
	int16_t count = (int16_t) R_ENCODER.Instance->CNT;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <getRightEncoderCount+0x28>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	80fb      	strh	r3, [r7, #6]
	R_ENCODER.Instance->CNT = 0;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <getRightEncoderCount+0x28>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8001a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200003d8 	.word	0x200003d8

08001a30 <getLeftEncoderCount>:


int16_t getLeftEncoderCount(){
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
	int16_t count = -1 * (int16_t) L_ENCODER.Instance->CNT;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <getLeftEncoderCount+0x2c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	425b      	negs	r3, r3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	80fb      	strh	r3, [r7, #6]
	L_ENCODER.Instance->CNT = 0;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <getLeftEncoderCount+0x2c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8001a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	20000300 	.word	0x20000300

08001a60 <odometry_updatePosition>:

//float leftTotal = 0;
//float rightTotal = 0;

void odometry_updatePosition(){
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
	//printf("x: %.1fmm, y: %.1fmm, angle: %.1f\r\n", robot.position.x, robot.position.y, robot.angle/2/M_PI*360);

	float coeff = M_TWOPI * ODOMETRY_RADIUS / TICKS_PER_REV;
 8001a66:	4b90      	ldr	r3, [pc, #576]	; (8001ca8 <odometry_updatePosition+0x248>)
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
	float leftMov = getLeftEncoderCount() * coeff;
 8001a6a:	f7ff ffe1 	bl	8001a30 <getLeftEncoderCount>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	edc7 7a08 	vstr	s15, [r7, #32]
	float rightMov = getRightEncoderCount() * coeff;
 8001a84:	f7ff ffbe 	bl	8001a04 <getRightEncoderCount>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a92:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9a:	edc7 7a07 	vstr	s15, [r7, #28]
	//leftTotal += leftMov;
	//rightTotal += rightMov;

	//printf("left: %.1fmm, right: %.1fmm\n", leftTotal, rightTotal);

	float r =  (leftMov + rightMov)/2;
 8001a9e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aa2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aaa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab2:	edc7 7a06 	vstr	s15, [r7, #24]
	float alpha = (leftMov - rightMov)/ENTRAXE_ODOMETRY;
 8001ab6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac2:	ee17 0a90 	vmov	r0, s15
 8001ac6:	f7fe fd5f 	bl	8000588 <__aeabi_f2d>
 8001aca:	a36f      	add	r3, pc, #444	; (adr r3, 8001c88 <odometry_updatePosition+0x228>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fedc 	bl	800088c <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f884 	bl	8000be8 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	617b      	str	r3, [r7, #20]

	float deltaX = r * cos(robot.angle + alpha/2);
 8001ae4:	69b8      	ldr	r0, [r7, #24]
 8001ae6:	f7fe fd4f 	bl	8000588 <__aeabi_f2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <odometry_updatePosition+0x24c>)
 8001af0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001af4:	edd7 6a05 	vldr	s13, [r7, #20]
 8001af8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001afc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b04:	ee17 0a90 	vmov	r0, s15
 8001b08:	f7fe fd3e 	bl	8000588 <__aeabi_f2d>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	ec43 2b10 	vmov	d0, r2, r3
 8001b14:	f008 f9bc 	bl	8009e90 <cos>
 8001b18:	ec53 2b10 	vmov	r2, r3, d0
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fd8a 	bl	8000638 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff f85c 	bl	8000be8 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	613b      	str	r3, [r7, #16]
	float deltaY = r * sin(robot.angle + alpha/2);
 8001b34:	69b8      	ldr	r0, [r7, #24]
 8001b36:	f7fe fd27 	bl	8000588 <__aeabi_f2d>
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	460d      	mov	r5, r1
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <odometry_updatePosition+0x24c>)
 8001b40:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b44:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b48:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001b4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	ee17 0a90 	vmov	r0, s15
 8001b58:	f7fe fd16 	bl	8000588 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	ec43 2b10 	vmov	d0, r2, r3
 8001b64:	f008 f9f0 	bl	8009f48 <sin>
 8001b68:	ec53 2b10 	vmov	r2, r3, d0
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fd62 	bl	8000638 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f834 	bl	8000be8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]

	robot.position.x += deltaX;
 8001b84:	4b49      	ldr	r3, [pc, #292]	; (8001cac <odometry_updatePosition+0x24c>)
 8001b86:	ed93 7a00 	vldr	s14, [r3]
 8001b8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b92:	4b46      	ldr	r3, [pc, #280]	; (8001cac <odometry_updatePosition+0x24c>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]
	robot.position.y += deltaY;
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <odometry_updatePosition+0x24c>)
 8001b9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <odometry_updatePosition+0x24c>)
 8001ba8:	edc3 7a01 	vstr	s15, [r3, #4]
	robot.angle += alpha;
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <odometry_updatePosition+0x24c>)
 8001bae:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <odometry_updatePosition+0x24c>)
 8001bbc:	edc3 7a02 	vstr	s15, [r3, #8]
	robot.measuredSpeed = vector2_norm(vector2_new(deltaX, deltaY));
 8001bc0:	edd7 0a03 	vldr	s1, [r7, #12]
 8001bc4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001bc8:	f000 fc6e 	bl	80024a8 <vector2_new>
 8001bcc:	eeb0 7a40 	vmov.f32	s14, s0
 8001bd0:	eef0 7a60 	vmov.f32	s15, s1
 8001bd4:	ed87 7a01 	vstr	s14, [r7, #4]
 8001bd8:	edc7 7a02 	vstr	s15, [r7, #8]
 8001bdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001be0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be4:	eeb0 0a47 	vmov.f32	s0, s14
 8001be8:	eef0 0a67 	vmov.f32	s1, s15
 8001bec:	f000 fc7e 	bl	80024ec <vector2_norm>
 8001bf0:	eef0 7a40 	vmov.f32	s15, s0
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <odometry_updatePosition+0x24c>)
 8001bf6:	edc3 7a07 	vstr	s15, [r3, #28]

	if (robot.angle > M_PI)
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <odometry_updatePosition+0x24c>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fcc2 	bl	8000588 <__aeabi_f2d>
 8001c04:	a322      	add	r3, pc, #136	; (adr r3, 8001c90 <odometry_updatePosition+0x230>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe ffa5 	bl	8000b58 <__aeabi_dcmpgt>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <odometry_updatePosition+0x1dc>
		robot.angle = robot.angle - M_TWOPI;
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <odometry_updatePosition+0x24c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcb5 	bl	8000588 <__aeabi_f2d>
 8001c1e:	a31e      	add	r3, pc, #120	; (adr r3, 8001c98 <odometry_updatePosition+0x238>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb50 	bl	80002c8 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7fe ffda 	bl	8000be8 <__aeabi_d2f>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <odometry_updatePosition+0x24c>)
 8001c38:	6093      	str	r3, [r2, #8]
	else if (robot.angle < -M_PI)
		robot.angle = robot.angle + M_TWOPI;
}
 8001c3a:	e020      	b.n	8001c7e <odometry_updatePosition+0x21e>
	else if (robot.angle < -M_PI)
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <odometry_updatePosition+0x24c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fca1 	bl	8000588 <__aeabi_f2d>
 8001c46:	a316      	add	r3, pc, #88	; (adr r3, 8001ca0 <odometry_updatePosition+0x240>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe ff66 	bl	8000b1c <__aeabi_dcmplt>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d100      	bne.n	8001c58 <odometry_updatePosition+0x1f8>
}
 8001c56:	e012      	b.n	8001c7e <odometry_updatePosition+0x21e>
		robot.angle = robot.angle + M_TWOPI;
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <odometry_updatePosition+0x24c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc93 	bl	8000588 <__aeabi_f2d>
 8001c62:	a30d      	add	r3, pc, #52	; (adr r3, 8001c98 <odometry_updatePosition+0x238>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fb30 	bl	80002cc <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ffb8 	bl	8000be8 <__aeabi_d2f>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <odometry_updatePosition+0x24c>)
 8001c7c:	6093      	str	r3, [r2, #8]
}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bdb0      	pop	{r4, r5, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	9999999a 	.word	0x9999999a
 8001c8c:	4066d999 	.word	0x4066d999
 8001c90:	54442d18 	.word	0x54442d18
 8001c94:	400921fb 	.word	0x400921fb
 8001c98:	54442d18 	.word	0x54442d18
 8001c9c:	401921fb 	.word	0x401921fb
 8001ca0:	54442d18 	.word	0x54442d18
 8001ca4:	c00921fb 	.word	0xc00921fb
 8001ca8:	3cab2f75 	.word	0x3cab2f75
 8001cac:	20000208 	.word	0x20000208

08001cb0 <odometry_setPosition>:


void odometry_setPosition(float x, float y){
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cba:	edc7 0a00 	vstr	s1, [r7]
	robot.position.x = x;
 8001cbe:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <odometry_setPosition+0x28>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6013      	str	r3, [r2, #0]
	robot.position.y = y;
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <odometry_setPosition+0x28>)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6053      	str	r3, [r2, #4]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000208 	.word	0x20000208

08001cdc <odometry_setAngle>:


void odometry_setAngle(float angle){
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	ed87 0a01 	vstr	s0, [r7, #4]
	robot.angle = angle;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <odometry_setAngle+0x1c>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6093      	str	r3, [r2, #8]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000208 	.word	0x20000208

08001cfc <propulsion_initialize>:


extern Robot robot;


void propulsion_initialize() {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af04      	add	r7, sp, #16
	robot.leftMotor = (Stepper*) malloc(sizeof(Stepper));
 8001d02:	2018      	movs	r0, #24
 8001d04:	f005 f9bc 	bl	8007080 <malloc>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <propulsion_initialize+0x60>)
 8001d0e:	60da      	str	r2, [r3, #12]
	robot.rightMotor = (Stepper*) malloc(sizeof(Stepper));
 8001d10:	2018      	movs	r0, #24
 8001d12:	f005 f9b5 	bl	8007080 <malloc>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <propulsion_initialize+0x60>)
 8001d1c:	615a      	str	r2, [r3, #20]

	drv8825_init(
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <propulsion_initialize+0x60>)
 8001d20:	68d8      	ldr	r0, [r3, #12]
 8001d22:	2300      	movs	r3, #0
 8001d24:	9302      	str	r3, [sp, #8]
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <propulsion_initialize+0x64>)
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <propulsion_initialize+0x68>)
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2304      	movs	r3, #4
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <propulsion_initialize+0x68>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	f7ff fd58 	bl	80017e8 <drv8825_init>
		robot.leftMotor,
		L_MOTOR_EN_Pin, L_MOTOR_EN_GPIO_Port, 
		L_MOTOR_DIR_Pin, L_MOTOR_DIR_GPIO_Port, 
		&L_MOTOR_TIMER, TIM_CHANNEL_1
	);
	drv8825_init(
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <propulsion_initialize+0x60>)
 8001d3a:	6958      	ldr	r0, [r3, #20]
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <propulsion_initialize+0x6c>)
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <propulsion_initialize+0x68>)
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d4c:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <propulsion_initialize+0x68>)
 8001d4e:	2102      	movs	r1, #2
 8001d50:	f7ff fd4a 	bl	80017e8 <drv8825_init>
		robot.rightMotor,
		R_MOTOR_EN_Pin, R_MOTOR_EN_GPIO_Port, 
		R_MOTOR_DIR_Pin, R_MOTOR_DIR_GPIO_Port, 
		&R_MOTOR_TIMER, TIM_CHANNEL_4
	);
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000208 	.word	0x20000208
 8001d60:	20000348 	.word	0x20000348
 8001d64:	40020800 	.word	0x40020800
 8001d68:	20000228 	.word	0x20000228

08001d6c <propulsion_enableMotors>:


void propulsion_enableMotors() {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	drv8825_enable(robot.leftMotor);
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <propulsion_enableMotors+0x1c>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fd6c 	bl	8001852 <drv8825_enable>
	drv8825_enable(robot.rightMotor);
 8001d7a:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <propulsion_enableMotors+0x1c>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fd67 	bl	8001852 <drv8825_enable>
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000208 	.word	0x20000208
 8001d8c:	00000000 	.word	0x00000000

08001d90 <propulsion_setSpeeds>:
	drv8825_disable(robot.leftMotor);
	drv8825_disable(robot.rightMotor);
}


void propulsion_setSpeeds(float left, float right) {
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d9a:	edc7 0a00 	vstr	s1, [r7]
	robot.leftSpeed = left;
 8001d9e:	4a3a      	ldr	r2, [pc, #232]	; (8001e88 <propulsion_setSpeeds+0xf8>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6113      	str	r3, [r2, #16]
	drv8825_setDirection(robot.leftMotor, (left < 0)?NEGATIVE:POSITIVE);
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <propulsion_setSpeeds+0xf8>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	bf4c      	ite	mi
 8001db6:	2301      	movmi	r3, #1
 8001db8:	2300      	movpl	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f083 0301 	eor.w	r3, r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	f7ff fd31 	bl	800182e <drv8825_setDirection>
	drv8825_setRotationSpeed(robot.leftMotor, 60 * fabsf(left) / (2*M_PI*WHEEL_RADIUS));
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <propulsion_setSpeeds+0xf8>)
 8001dce:	68dc      	ldr	r4, [r3, #12]
 8001dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd4:	eef0 7ae7 	vabs.f32	s15, s15
 8001dd8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001e8c <propulsion_setSpeeds+0xfc>
 8001ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de0:	ee17 0a90 	vmov	r0, s15
 8001de4:	f7fe fbd0 	bl	8000588 <__aeabi_f2d>
 8001de8:	a325      	add	r3, pc, #148	; (adr r3, 8001e80 <propulsion_setSpeeds+0xf0>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fd4d 	bl	800088c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fef5 	bl	8000be8 <__aeabi_d2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	ee00 3a10 	vmov	s0, r3
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff fdd5 	bl	80019b4 <drv8825_setRotationSpeed>

	robot.rightSpeed = right;
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <propulsion_setSpeeds+0xf8>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6193      	str	r3, [r2, #24]
    drv8825_setDirection(robot.rightMotor, (right < 0)?NEGATIVE:POSITIVE);
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <propulsion_setSpeeds+0xf8>)
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	edd7 7a00 	vldr	s15, [r7]
 8001e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e20:	bf4c      	ite	mi
 8001e22:	2301      	movmi	r3, #1
 8001e24:	2300      	movpl	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f083 0301 	eor.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7ff fcfb 	bl	800182e <drv8825_setDirection>
	drv8825_setRotationSpeed(robot.rightMotor, 60 * fabsf(right) / (2*M_PI*WHEEL_RADIUS));
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <propulsion_setSpeeds+0xf8>)
 8001e3a:	695c      	ldr	r4, [r3, #20]
 8001e3c:	edd7 7a00 	vldr	s15, [r7]
 8001e40:	eef0 7ae7 	vabs.f32	s15, s15
 8001e44:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e8c <propulsion_setSpeeds+0xfc>
 8001e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4c:	ee17 0a90 	vmov	r0, s15
 8001e50:	f7fe fb9a 	bl	8000588 <__aeabi_f2d>
 8001e54:	a30a      	add	r3, pc, #40	; (adr r3, 8001e80 <propulsion_setSpeeds+0xf0>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fd17 	bl	800088c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f7fe febf 	bl	8000be8 <__aeabi_d2f>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	ee00 3a10 	vmov	s0, r3
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fd9f 	bl	80019b4 <drv8825_setRotationSpeed>
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	d64b7175 	.word	0xd64b7175
 8001e84:	406552d4 	.word	0x406552d4
 8001e88:	20000208 	.word	0x20000208
 8001e8c:	42700000 	.word	0x42700000

08001e90 <propulsion_followBezier>:
		robot.angle = robot.angle - M_TWOPI;
	else if (robot.angle < -M_PI)
		robot.angle = robot.angle + M_TWOPI;
}

float propulsion_followBezier(Bezier* b, Direction dir) {
 8001e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e94:	ed2d 8b02 	vpush	{d8}
 8001e98:	b0a0      	sub	sp, #128	; 0x80
 8001e9a:	af0a      	add	r7, sp, #40	; 0x28
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	72fb      	strb	r3, [r7, #11]
	// Paramètre qui correspond au point de la courbe le plus proche du robot
	// Autrement dit, la valeur t qui minimise distance(b(t), robot.position)
    float t = bezier_project(b, robot.position, 0.0001);
 8001ea2:	4bcb      	ldr	r3, [pc, #812]	; (80021d0 <propulsion_followBezier+0x340>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eac:	ed9f 1ac9 	vldr	s2, [pc, #804]	; 80021d4 <propulsion_followBezier+0x344>
 8001eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb4:	eef0 0a67 	vmov.f32	s1, s15
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff fbb5 	bl	8001628 <bezier_project>
 8001ebe:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c

    // Le point de la courbe le plus proche du robot, b(t)
    Vector2 pointOnCurve = bezier_eval(b, t);
 8001ec2:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f7ff f8f5 	bl	80010b6 <bezier_eval>
 8001ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed0:	eef0 7a60 	vmov.f32	s15, s1
 8001ed4:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001ed8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    // La tangente à la courbe en b(t)
    Vector2 tangent = bezier_deriv1(b, t);
 8001edc:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff f9a9 	bl	8001238 <bezier_deriv1>
 8001ee6:	eeb0 7a40 	vmov.f32	s14, s0
 8001eea:	eef0 7a60 	vmov.f32	s15, s1
 8001eee:	ed87 7a07 	vstr	s14, [r7, #28]
 8001ef2:	edc7 7a08 	vstr	s15, [r7, #32]

    // L'écart entre le robot et b(t)
    Vector2 displacement = vector2_diff(robot.position, pointOnCurve);
 8001ef6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8001efa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001efe:	4bb4      	ldr	r3, [pc, #720]	; (80021d0 <propulsion_followBezier+0x340>)
 8001f00:	ed93 7a00 	vldr	s14, [r3]
 8001f04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f08:	eeb0 1a46 	vmov.f32	s2, s12
 8001f0c:	eef0 1a66 	vmov.f32	s3, s13
 8001f10:	eeb0 0a47 	vmov.f32	s0, s14
 8001f14:	eef0 0a67 	vmov.f32	s1, s15
 8001f18:	f000 fb7c 	bl	8002614 <vector2_diff>
 8001f1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f20:	eef0 7a60 	vmov.f32	s15, s1
 8001f24:	ed87 7a05 	vstr	s14, [r7, #20]
 8001f28:	edc7 7a06 	vstr	s15, [r7, #24]

    // Le côté de la courbe du quel le robot se trouve
    float sign = vector2_cross(displacement, tangent);
 8001f2c:	ed97 6a07 	vldr	s12, [r7, #28]
 8001f30:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f34:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f3c:	eeb0 1a46 	vmov.f32	s2, s12
 8001f40:	eef0 1a66 	vmov.f32	s3, s13
 8001f44:	eeb0 0a47 	vmov.f32	s0, s14
 8001f48:	eef0 0a67 	vmov.f32	s1, s15
 8001f4c:	f000 fb9c 	bl	8002688 <vector2_cross>
 8001f50:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    // Distance signée à la courbe (négatif d'un coté, positif de l'autre)
    float signedDistance;
    if (sign == 0)
 8001f54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f60:	d103      	bne.n	8001f6a <propulsion_followBezier+0xda>
    	signedDistance = 0;
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	657b      	str	r3, [r7, #84]	; 0x54
 8001f68:	e033      	b.n	8001fd2 <propulsion_followBezier+0x142>
    else
    	signedDistance = sign / fabs(sign) * vector2_norm(displacement);
 8001f6a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f6c:	f7fe fb0c 	bl	8000588 <__aeabi_f2d>
 8001f70:	4680      	mov	r8, r0
 8001f72:	4689      	mov	r9, r1
 8001f74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f78:	eef0 7ae7 	vabs.f32	s15, s15
 8001f7c:	ee17 0a90 	vmov	r0, s15
 8001f80:	f7fe fb02 	bl	8000588 <__aeabi_f2d>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4640      	mov	r0, r8
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	f7fe fc7e 	bl	800088c <__aeabi_ddiv>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4690      	mov	r8, r2
 8001f96:	4699      	mov	r9, r3
 8001f98:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fa0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa4:	eef0 0a67 	vmov.f32	s1, s15
 8001fa8:	f000 faa0 	bl	80024ec <vector2_norm>
 8001fac:	ee10 3a10 	vmov	r3, s0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fae9 	bl	8000588 <__aeabi_f2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4640      	mov	r0, r8
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	f7fe fb3b 	bl	8000638 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fe0d 	bl	8000be8 <__aeabi_d2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	657b      	str	r3, [r7, #84]	; 0x54

    //
    float angleError = (vector2_angle(tangent) - atan(signedDistance / 400.0)) - (robot.angle + (dir==BACKWARD?M_PI:0));
 8001fd2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fda:	eeb0 0a47 	vmov.f32	s0, s14
 8001fde:	eef0 0a67 	vmov.f32	s1, s15
 8001fe2:	f000 fab4 	bl	800254e <vector2_angle>
 8001fe6:	ee10 3a10 	vmov	r3, s0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe facc 	bl	8000588 <__aeabi_f2d>
 8001ff0:	4680      	mov	r8, r0
 8001ff2:	4689      	mov	r9, r1
 8001ff4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ff6:	f7fe fac7 	bl	8000588 <__aeabi_f2d>
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <propulsion_followBezier+0x348>)
 8002000:	f7fe fc44 	bl	800088c <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	ec43 2b17 	vmov	d7, r2, r3
 800200c:	eeb0 0a47 	vmov.f32	s0, s14
 8002010:	eef0 0a67 	vmov.f32	s1, s15
 8002014:	f007 fd9c 	bl	8009b50 <atan>
 8002018:	ec53 2b10 	vmov	r2, r3, d0
 800201c:	4640      	mov	r0, r8
 800201e:	4649      	mov	r1, r9
 8002020:	f7fe f952 	bl	80002c8 <__aeabi_dsub>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4690      	mov	r8, r2
 800202a:	4699      	mov	r9, r3
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <propulsion_followBezier+0x340>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe faa9 	bl	8000588 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800203e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002042:	d103      	bne.n	800204c <propulsion_followBezier+0x1bc>
 8002044:	a15e      	add	r1, pc, #376	; (adr r1, 80021c0 <propulsion_followBezier+0x330>)
 8002046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800204a:	e003      	b.n	8002054 <propulsion_followBezier+0x1c4>
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	f7fe f93a 	bl	80002cc <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4640      	mov	r0, r8
 800205e:	4649      	mov	r1, r9
 8002060:	f7fe f932 	bl	80002c8 <__aeabi_dsub>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fdbc 	bl	8000be8 <__aeabi_d2f>
 8002070:	4603      	mov	r3, r0
 8002072:	647b      	str	r3, [r7, #68]	; 0x44
    angleError = standardAngle(angleError);
 8002074:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8002078:	f000 f9ca 	bl	8002410 <standardAngle>
 800207c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

    //printf("t = %f, e = %.1f, rel-dist = %.1f \n", t, signedAngleError, signedDistance);

    if (t > 0.999) {
 8002080:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002082:	f7fe fa81 	bl	8000588 <__aeabi_f2d>
 8002086:	a350      	add	r3, pc, #320	; (adr r3, 80021c8 <propulsion_followBezier+0x338>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe fd64 	bl	8000b58 <__aeabi_dcmpgt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <propulsion_followBezier+0x216>
    	propulsion_setSpeeds(0, 0);
 8002096:	eddf 0a51 	vldr	s1, [pc, #324]	; 80021dc <propulsion_followBezier+0x34c>
 800209a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80021dc <propulsion_followBezier+0x34c>
 800209e:	f7ff fe77 	bl	8001d90 <propulsion_setSpeeds>
    	return t;
 80020a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a4:	e194      	b.n	80023d0 <propulsion_followBezier+0x540>
    }

    float k = bezier_curvature(b, t);
 80020a6:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7ff f9fe 	bl	80014ac <bezier_curvature>
 80020b0:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

    float correctionSlowDownFactor = 1 - fabs(angleError/M_PI)*10;
 80020b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80020b6:	f7fe fa67 	bl	8000588 <__aeabi_f2d>
 80020ba:	a341      	add	r3, pc, #260	; (adr r3, 80021c0 <propulsion_followBezier+0x330>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe fbe4 	bl	800088c <__aeabi_ddiv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4614      	mov	r4, r2
 80020ca:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <propulsion_followBezier+0x350>)
 80020d4:	4620      	mov	r0, r4
 80020d6:	4629      	mov	r1, r5
 80020d8:	f7fe faae 	bl	8000638 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	f04f 0000 	mov.w	r0, #0
 80020e4:	493f      	ldr	r1, [pc, #252]	; (80021e4 <propulsion_followBezier+0x354>)
 80020e6:	f7fe f8ef 	bl	80002c8 <__aeabi_dsub>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fd79 	bl	8000be8 <__aeabi_d2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    correctionSlowDownFactor = correctionSlowDownFactor>0?correctionSlowDownFactor:0;
 80020fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	dd01      	ble.n	800210c <propulsion_followBezier+0x27c>
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	e001      	b.n	8002110 <propulsion_followBezier+0x280>
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c

    float v = (4*(1-t) + 80*t*(1-t)*(1-t) + 50*t*t*(1-t) + 3*t) * 15;
 8002112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002116:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800211a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002122:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002126:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800212a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80021e8 <propulsion_followBezier+0x358>
 800212e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002132:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002136:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800213a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800213e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002142:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002146:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800214a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002156:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800215a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80021ec <propulsion_followBezier+0x35c>
 800215e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002162:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002166:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800216a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800216e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002172:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002182:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002186:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800218a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002196:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    v *= correctionSlowDownFactor;
 800219a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800219e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80021a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    v *= (dir==BACKWARD?-1:1);
 80021aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b2:	d11d      	bne.n	80021f0 <propulsion_followBezier+0x360>
 80021b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80021b8:	e01c      	b.n	80021f4 <propulsion_followBezier+0x364>
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w
 80021c0:	54442d18 	.word	0x54442d18
 80021c4:	400921fb 	.word	0x400921fb
 80021c8:	d916872b 	.word	0xd916872b
 80021cc:	3feff7ce 	.word	0x3feff7ce
 80021d0:	20000208 	.word	0x20000208
 80021d4:	38d1b717 	.word	0x38d1b717
 80021d8:	40790000 	.word	0x40790000
 80021dc:	00000000 	.word	0x00000000
 80021e0:	40240000 	.word	0x40240000
 80021e4:	3ff00000 	.word	0x3ff00000
 80021e8:	42a00000 	.word	0x42a00000
 80021ec:	42480000 	.word	0x42480000
 80021f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80021f4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80021f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    //	v = (robot.measuredSpeed + 5) * fabs(v) / v;
    //}

    //printf("v: %f, sdf: %f, ae: %f\r\n", v, correctionSlowDownFactor, angleError);

    float v_g = v*(1+ENTRAXE_MOTOR*k/2);
 8002200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002202:	f7fe f9c1 	bl	8000588 <__aeabi_f2d>
 8002206:	4604      	mov	r4, r0
 8002208:	460d      	mov	r5, r1
 800220a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800220c:	f7fe f9bc 	bl	8000588 <__aeabi_f2d>
 8002210:	a375      	add	r3, pc, #468	; (adr r3, 80023e8 <propulsion_followBezier+0x558>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe fa0f 	bl	8000638 <__aeabi_dmul>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222a:	f7fe fb2f 	bl	800088c <__aeabi_ddiv>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <propulsion_followBezier+0x568>)
 800223c:	f7fe f846 	bl	80002cc <__adddf3>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	f7fe f9f6 	bl	8000638 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fcc8 	bl	8000be8 <__aeabi_d2f>
 8002258:	4603      	mov	r3, r0
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
    float v_d = v*(1-ENTRAXE_MOTOR*k/2);
 800225c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800225e:	f7fe f993 	bl	8000588 <__aeabi_f2d>
 8002262:	4604      	mov	r4, r0
 8002264:	460d      	mov	r5, r1
 8002266:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002268:	f7fe f98e 	bl	8000588 <__aeabi_f2d>
 800226c:	a35e      	add	r3, pc, #376	; (adr r3, 80023e8 <propulsion_followBezier+0x558>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe f9e1 	bl	8000638 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002286:	f7fe fb01 	bl	800088c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	4959      	ldr	r1, [pc, #356]	; (80023f8 <propulsion_followBezier+0x568>)
 8002294:	f7fe f818 	bl	80002c8 <__aeabi_dsub>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4620      	mov	r0, r4
 800229e:	4629      	mov	r1, r5
 80022a0:	f7fe f9ca 	bl	8000638 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fc9c 	bl	8000be8 <__aeabi_d2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30

    float maxCorrection = 40;
 80022b4:	4b51      	ldr	r3, [pc, #324]	; (80023fc <propulsion_followBezier+0x56c>)
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    float correction = -angleError*100;
 80022b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022bc:	eef1 7a67 	vneg.f32	s15, s15
 80022c0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002400 <propulsion_followBezier+0x570>
 80022c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    if (fabs(correction) > maxCorrection) {
 80022cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80022d0:	eef0 7ae7 	vabs.f32	s15, s15
 80022d4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80022d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	d516      	bpl.n	8002310 <propulsion_followBezier+0x480>
    	correction = maxCorrection * correction / abs(correction);
 80022e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80022e6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80022ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80022ee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80022f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f6:	ee17 3a90 	vmov	r3, s15
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bfb8      	it	lt
 80022fe:	425b      	neglt	r3, r3
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    }

    printf("t = %f, x: %.1fmm, y: %.1fmm, angle: %.1fdeg, dist: %fmm, corr: %.2f\r\n", t, robot.position.x, robot.position.y, robot.angle / M_PI / 2 * 360, signedDistance, correction);
 8002310:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002312:	f7fe f939 	bl	8000588 <__aeabi_f2d>
 8002316:	e9c7 0100 	strd	r0, r1, [r7]
 800231a:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <propulsion_followBezier+0x574>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f932 	bl	8000588 <__aeabi_f2d>
 8002324:	4604      	mov	r4, r0
 8002326:	460d      	mov	r5, r1
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <propulsion_followBezier+0x574>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f92b 	bl	8000588 <__aeabi_f2d>
 8002332:	4680      	mov	r8, r0
 8002334:	4689      	mov	r9, r1
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <propulsion_followBezier+0x574>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f924 	bl	8000588 <__aeabi_f2d>
 8002340:	a32b      	add	r3, pc, #172	; (adr r3, 80023f0 <propulsion_followBezier+0x560>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe faa1 	bl	800088c <__aeabi_ddiv>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800235a:	f7fe fa97 	bl	800088c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <propulsion_followBezier+0x578>)
 800236c:	f7fe f964 	bl	8000638 <__aeabi_dmul>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	ec43 2b18 	vmov	d8, r2, r3
 8002378:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800237a:	f7fe f905 	bl	8000588 <__aeabi_f2d>
 800237e:	4682      	mov	sl, r0
 8002380:	468b      	mov	fp, r1
 8002382:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002384:	f7fe f900 	bl	8000588 <__aeabi_f2d>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002390:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002394:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002398:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800239c:	e9cd 4500 	strd	r4, r5, [sp]
 80023a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023a4:	4819      	ldr	r0, [pc, #100]	; (800240c <propulsion_followBezier+0x57c>)
 80023a6:	f005 fb8f 	bl	8007ac8 <iprintf>
    //printf("angle: %.1fdeg, corr: %.2f\r\n", robot.angle / M_PI / 2 * 360, correction);


    propulsion_setSpeeds(v_g - correction, v_d + correction);
 80023aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80023ae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80023b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80023ba:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80023be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c2:	eef0 0a67 	vmov.f32	s1, s15
 80023c6:	eeb0 0a66 	vmov.f32	s0, s13
 80023ca:	f7ff fce1 	bl	8001d90 <propulsion_setSpeeds>
    //printf("v_g: %.1fmm/s, v_d: %.2fmm/s\r\n", v_g, v_d);
    //propulsion_setSpeeds(v_g, v_d);

    //propulsion_setSpeeds(-50, -50);

    return t;
 80023ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d0:	ee07 3a90 	vmov	s15, r3
}
 80023d4:	eeb0 0a67 	vmov.f32	s0, s15
 80023d8:	3758      	adds	r7, #88	; 0x58
 80023da:	46bd      	mov	sp, r7
 80023dc:	ecbd 8b02 	vpop	{d8}
 80023e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e4:	f3af 8000 	nop.w
 80023e8:	e147ae14 	.word	0xe147ae14
 80023ec:	405c147a 	.word	0x405c147a
 80023f0:	54442d18 	.word	0x54442d18
 80023f4:	400921fb 	.word	0x400921fb
 80023f8:	3ff00000 	.word	0x3ff00000
 80023fc:	42200000 	.word	0x42200000
 8002400:	42c80000 	.word	0x42c80000
 8002404:	20000208 	.word	0x20000208
 8002408:	40768000 	.word	0x40768000
 800240c:	0800b5c8 	.word	0x0800b5c8

08002410 <standardAngle>:

float standardAngle(float angle) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	ed87 0a01 	vstr	s0, [r7, #4]
	return fmod(fmod(angle + M_PI, M_TWOPI) + M_TWOPI, M_TWOPI) - M_PI;
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe f8b4 	bl	8000588 <__aeabi_f2d>
 8002420:	a31f      	add	r3, pc, #124	; (adr r3, 80024a0 <standardAngle+0x90>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fd ff51 	bl	80002cc <__adddf3>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	ec43 2b17 	vmov	d7, r2, r3
 8002432:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8002498 <standardAngle+0x88>
 8002436:	eeb0 0a47 	vmov.f32	s0, s14
 800243a:	eef0 0a67 	vmov.f32	s1, s15
 800243e:	f007 fdd9 	bl	8009ff4 <fmod>
 8002442:	ec51 0b10 	vmov	r0, r1, d0
 8002446:	a314      	add	r3, pc, #80	; (adr r3, 8002498 <standardAngle+0x88>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fd ff3e 	bl	80002cc <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	ec43 2b17 	vmov	d7, r2, r3
 8002458:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002498 <standardAngle+0x88>
 800245c:	eeb0 0a47 	vmov.f32	s0, s14
 8002460:	eef0 0a67 	vmov.f32	s1, s15
 8002464:	f007 fdc6 	bl	8009ff4 <fmod>
 8002468:	ec51 0b10 	vmov	r0, r1, d0
 800246c:	a30c      	add	r3, pc, #48	; (adr r3, 80024a0 <standardAngle+0x90>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fd ff29 	bl	80002c8 <__aeabi_dsub>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fbb3 	bl	8000be8 <__aeabi_d2f>
 8002482:	4603      	mov	r3, r0
 8002484:	ee07 3a90 	vmov	s15, r3
}
 8002488:	eeb0 0a67 	vmov.f32	s0, s15
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	f3af 8000 	nop.w
 8002498:	54442d18 	.word	0x54442d18
 800249c:	401921fb 	.word	0x401921fb
 80024a0:	54442d18 	.word	0x54442d18
 80024a4:	400921fb 	.word	0x400921fb

080024a8 <vector2_new>:
#include "vector2.h"


Vector2 vector2_new(float x, float y) {
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80024b2:	edc7 0a02 	vstr	s1, [r7, #8]
    Vector2 u = { x, y };
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	617b      	str	r3, [r7, #20]
    return u;
 80024be:	f107 0318 	add.w	r3, r7, #24
 80024c2:	f107 0210 	add.w	r2, r7, #16
 80024c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	ee07 2a10 	vmov	s14, r2
 80024d6:	ee07 3a90 	vmov	s15, r3
}
 80024da:	eeb0 0a47 	vmov.f32	s0, s14
 80024de:	eef0 0a67 	vmov.f32	s1, s15
 80024e2:	3724      	adds	r7, #36	; 0x24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <vector2_norm>:
void vector2_display(Vector2 u) {
    printf("{ x: %f, y: %f }\r\n", u.x, u.y);
}


float vector2_norm(Vector2 u) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	eeb0 7a40 	vmov.f32	s14, s0
 80024f6:	eef0 7a60 	vmov.f32	s15, s1
 80024fa:	ed87 7a00 	vstr	s14, [r7]
 80024fe:	edc7 7a01 	vstr	s15, [r7, #4]
    return sqrt(u.x*u.x + u.y*u.y);
 8002502:	ed97 7a00 	vldr	s14, [r7]
 8002506:	edd7 7a00 	vldr	s15, [r7]
 800250a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002512:	edd7 7a01 	vldr	s15, [r7, #4]
 8002516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	ee17 0a90 	vmov	r0, s15
 8002522:	f7fe f831 	bl	8000588 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	ec43 2b10 	vmov	d0, r2, r3
 800252e:	f007 fd9d 	bl	800a06c <sqrt>
 8002532:	ec53 2b10 	vmov	r2, r3, d0
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f7fe fb55 	bl	8000be8 <__aeabi_d2f>
 800253e:	4603      	mov	r3, r0
 8002540:	ee07 3a90 	vmov	s15, r3
}
 8002544:	eeb0 0a67 	vmov.f32	s0, s15
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <vector2_angle>:


float vector2_angle(Vector2 u) {
 800254e:	b5b0      	push	{r4, r5, r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	eeb0 7a40 	vmov.f32	s14, s0
 8002558:	eef0 7a60 	vmov.f32	s15, s1
 800255c:	ed87 7a00 	vstr	s14, [r7]
 8002560:	edc7 7a01 	vstr	s15, [r7, #4]
    return atan2(u.y, u.x);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f80e 	bl	8000588 <__aeabi_f2d>
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe f808 	bl	8000588 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	ec43 2b11 	vmov	d1, r2, r3
 8002580:	ec45 4b10 	vmov	d0, r4, r5
 8002584:	f007 fd34 	bl	8009ff0 <atan2>
 8002588:	ec53 2b10 	vmov	r2, r3, d0
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f7fe fb2a 	bl	8000be8 <__aeabi_d2f>
 8002594:	4603      	mov	r3, r0
 8002596:	ee07 3a90 	vmov	s15, r3
}
 800259a:	eeb0 0a67 	vmov.f32	s0, s15
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bdb0      	pop	{r4, r5, r7, pc}

080025a4 <vector2_dist2>:
    Vector2 diff = { v.x - u.x, v.y - u.y };
    return vector2_norm(diff);
}


float vector2_dist2(Vector2 u, Vector2 v) {
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	eeb0 6a40 	vmov.f32	s12, s0
 80025ae:	eef0 6a60 	vmov.f32	s13, s1
 80025b2:	eeb0 7a41 	vmov.f32	s14, s2
 80025b6:	eef0 7a61 	vmov.f32	s15, s3
 80025ba:	ed87 6a02 	vstr	s12, [r7, #8]
 80025be:	edc7 6a03 	vstr	s13, [r7, #12]
 80025c2:	ed87 7a00 	vstr	s14, [r7]
 80025c6:	edc7 7a01 	vstr	s15, [r7, #4]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 80025ca:	ed97 7a00 	vldr	s14, [r7]
 80025ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d6:	edc7 7a04 	vstr	s15, [r7, #16]
 80025da:	ed97 7a01 	vldr	s14, [r7, #4]
 80025de:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e6:	edc7 7a05 	vstr	s15, [r7, #20]
    return diff.x*diff.x + diff.y*diff.y;
 80025ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80025ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80025fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80025fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002606:	eeb0 0a67 	vmov.f32	s0, s15
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <vector2_diff>:
    Vector2 sum = { v.x + u.x, v.y + u.y };
    return sum;
}


Vector2 vector2_diff(Vector2 u, Vector2 v) {
 8002614:	b480      	push	{r7}
 8002616:	b08b      	sub	sp, #44	; 0x2c
 8002618:	af00      	add	r7, sp, #0
 800261a:	eeb0 6a40 	vmov.f32	s12, s0
 800261e:	eef0 6a60 	vmov.f32	s13, s1
 8002622:	eeb0 7a41 	vmov.f32	s14, s2
 8002626:	eef0 7a61 	vmov.f32	s15, s3
 800262a:	ed87 6a04 	vstr	s12, [r7, #16]
 800262e:	edc7 6a05 	vstr	s13, [r7, #20]
 8002632:	ed87 7a02 	vstr	s14, [r7, #8]
 8002636:	edc7 7a03 	vstr	s15, [r7, #12]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 800263a:	ed97 7a02 	vldr	s14, [r7, #8]
 800263e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002646:	edc7 7a06 	vstr	s15, [r7, #24]
 800264a:	ed97 7a03 	vldr	s14, [r7, #12]
 800264e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002656:	edc7 7a07 	vstr	s15, [r7, #28]
    return diff;
 800265a:	f107 0320 	add.w	r3, r7, #32
 800265e:	f107 0218 	add.w	r2, r7, #24
 8002662:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002666:	e883 0003 	stmia.w	r3, {r0, r1}
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	ee07 2a10 	vmov	s14, r2
 8002672:	ee07 3a90 	vmov	s15, r3
}
 8002676:	eeb0 0a47 	vmov.f32	s0, s14
 800267a:	eef0 0a67 	vmov.f32	s1, s15
 800267e:	372c      	adds	r7, #44	; 0x2c
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <vector2_cross>:
float vector2_dot(Vector2 u, Vector2 v) {
    return u.x * v.x + u.y * v.y;
}


float vector2_cross(Vector2 u, Vector2 v) {
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	eeb0 6a40 	vmov.f32	s12, s0
 8002692:	eef0 6a60 	vmov.f32	s13, s1
 8002696:	eeb0 7a41 	vmov.f32	s14, s2
 800269a:	eef0 7a61 	vmov.f32	s15, s3
 800269e:	ed87 6a02 	vstr	s12, [r7, #8]
 80026a2:	edc7 6a03 	vstr	s13, [r7, #12]
 80026a6:	ed87 7a00 	vstr	s14, [r7]
 80026aa:	edc7 7a01 	vstr	s15, [r7, #4]
    return u.x * v.y - u.y * v.x;
 80026ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80026b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ba:	edd7 6a03 	vldr	s13, [r7, #12]
 80026be:	edd7 7a00 	vldr	s15, [r7]
 80026c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c6:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80026ca:	eeb0 0a67 	vmov.f32	s0, s15
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	f107 030c 	add.w	r3, r7, #12
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <MX_GPIO_Init+0xc4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <MX_GPIO_Init+0xc4>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b27      	ldr	r3, [pc, #156]	; (800279c <MX_GPIO_Init+0xc4>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <MX_GPIO_Init+0xc4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <MX_GPIO_Init+0xc4>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <MX_GPIO_Init+0xc4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <MX_GPIO_Init+0xc4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a1b      	ldr	r2, [pc, #108]	; (800279c <MX_GPIO_Init+0xc4>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <MX_GPIO_Init+0xc4>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f640 0107 	movw	r1, #2055	; 0x807
 8002748:	4815      	ldr	r0, [pc, #84]	; (80027a0 <MX_GPIO_Init+0xc8>)
 800274a:	f001 fd8d 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	2120      	movs	r1, #32
 8002752:	4814      	ldr	r0, [pc, #80]	; (80027a4 <MX_GPIO_Init+0xcc>)
 8002754:	f001 fd88 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin;
 8002758:	f640 0307 	movw	r3, #2055	; 0x807
 800275c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275e:	2301      	movs	r3, #1
 8002760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	4619      	mov	r1, r3
 8002770:	480b      	ldr	r0, [pc, #44]	; (80027a0 <MX_GPIO_Init+0xc8>)
 8002772:	f001 fbe5 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002776:	2320      	movs	r3, #32
 8002778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277a:	2301      	movs	r3, #1
 800277c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	4619      	mov	r1, r3
 800278c:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_GPIO_Init+0xcc>)
 800278e:	f001 fbd7 	bl	8003f40 <HAL_GPIO_Init>

}
 8002792:	bf00      	nop
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020800 	.word	0x40020800
 80027a4:	40020000 	.word	0x40020000

080027a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e00b      	b.n	80027d2 <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	1c4b      	adds	r3, r1, #1
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c4:	2201      	movs	r2, #1
 80027c6:	4807      	ldr	r0, [pc, #28]	; (80027e4 <_write+0x3c>)
 80027c8:	f003 fd15 	bl	80061f6 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3301      	adds	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	dbef      	blt.n	80027ba <_write+0x12>
	}
	return len;
 80027da:	687b      	ldr	r3, [r7, #4]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200004f4 	.word	0x200004f4

080027e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ee:	f001 f96d 	bl	8003acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027f2:	f000 f9f9 	bl	8002be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f6:	f7ff ff6f 	bl	80026d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80027fa:	f000 fbcb 	bl	8002f94 <MX_TIM1_Init>
  MX_TIM8_Init();
 80027fe:	f000 fdc9 	bl	8003394 <MX_TIM8_Init>
  MX_TIM11_Init();
 8002802:	f000 fe67 	bl	80034d4 <MX_TIM11_Init>
  MX_TIM3_Init();
 8002806:	f000 fc6b 	bl	80030e0 <MX_TIM3_Init>
  MX_TIM7_Init();
 800280a:	f000 fd8d 	bl	8003328 <MX_TIM7_Init>
  MX_TIM2_Init();
 800280e:	f000 fc19 	bl	8003044 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002812:	f000 fd53 	bl	80032bc <MX_TIM6_Init>
  MX_TIM4_Init();
 8002816:	f000 fcb7 	bl	8003188 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800281a:	f001 f853 	bl	80038c4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800281e:	f000 fcff 	bl	8003220 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8002822:	f001 f879 	bl	8003918 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8002826:	48b0      	ldr	r0, [pc, #704]	; (8002ae8 <main+0x300>)
 8002828:	f002 fb42 	bl	8004eb0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800282c:	48af      	ldr	r0, [pc, #700]	; (8002aec <main+0x304>)
 800282e:	f002 fb3f 	bl	8004eb0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8002832:	48af      	ldr	r0, [pc, #700]	; (8002af0 <main+0x308>)
 8002834:	f002 fba4 	bl	8004f80 <HAL_TIM_Base_Start_IT>

  //char test[] = "Hello, World!\r\n";

  //serial_send(test, 15);

  printf("Initializing propulsion system.\r\n");
 8002838:	48ae      	ldr	r0, [pc, #696]	; (8002af4 <main+0x30c>)
 800283a:	f005 f9cb 	bl	8007bd4 <puts>
  propulsion_initialize();
 800283e:	f7ff fa5d 	bl	8001cfc <propulsion_initialize>

  printf("Enabling propulsion system.\r\n");
 8002842:	48ad      	ldr	r0, [pc, #692]	; (8002af8 <main+0x310>)
 8002844:	f005 f9c6 	bl	8007bd4 <puts>
  propulsion_enableMotors();
 8002848:	f7ff fa90 	bl	8001d6c <propulsion_enableMotors>

  HAL_Delay(2000);
 800284c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002850:	f001 f9ae 	bl	8003bb0 <HAL_Delay>

  odometry_updatePosition();
 8002854:	f7ff f904 	bl	8001a60 <odometry_updatePosition>
  //curves[1] = bezier_new(500, 0, 500, 200, 500, 300, 500, 500, 30);
  //curves[2] = bezier_new(500, 500, 700, 500, 800, 500, 1000, 500, 30);
  //curves[3] = bezier_new(1000, 500, 1000, 300, 700, 0, 500, 0, 30);
  //curves[4] = bezier_new(500, 0, 300, 0, 200, 0, 0, 0, 30);

  Bezier** curves = (Bezier**) malloc(sizeof(Bezier*) * 10);
 8002858:	2028      	movs	r0, #40	; 0x28
 800285a:	f004 fc11 	bl	8007080 <malloc>
 800285e:	4603      	mov	r3, r0
 8002860:	607b      	str	r3, [r7, #4]
  curves[0] = bezier_new(2002, 1803, 2002, 1348, 2012, 1052, 1503, 1045, 30);
 8002862:	201e      	movs	r0, #30
 8002864:	eddf 3aa5 	vldr	s7, [pc, #660]	; 8002afc <main+0x314>
 8002868:	ed9f 3aa5 	vldr	s6, [pc, #660]	; 8002b00 <main+0x318>
 800286c:	eddf 2aa5 	vldr	s5, [pc, #660]	; 8002b04 <main+0x31c>
 8002870:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 8002b08 <main+0x320>
 8002874:	eddf 1aa5 	vldr	s3, [pc, #660]	; 8002b0c <main+0x324>
 8002878:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 8002b10 <main+0x328>
 800287c:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8002b14 <main+0x32c>
 8002880:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8002b10 <main+0x328>
 8002884:	f7fe fb7c 	bl	8000f80 <bezier_new>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	601a      	str	r2, [r3, #0]
  curves[1] = bezier_new(1503, 1045, 994, 1038, 995, 1083, 997, 1318, 30);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	1d1c      	adds	r4, r3, #4
 8002892:	201e      	movs	r0, #30
 8002894:	eddf 3aa0 	vldr	s7, [pc, #640]	; 8002b18 <main+0x330>
 8002898:	ed9f 3aa0 	vldr	s6, [pc, #640]	; 8002b1c <main+0x334>
 800289c:	eddf 2aa0 	vldr	s5, [pc, #640]	; 8002b20 <main+0x338>
 80028a0:	ed9f 2aa0 	vldr	s4, [pc, #640]	; 8002b24 <main+0x33c>
 80028a4:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8002b28 <main+0x340>
 80028a8:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8002b2c <main+0x344>
 80028ac:	eddf 0a93 	vldr	s1, [pc, #588]	; 8002afc <main+0x314>
 80028b0:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8002b00 <main+0x318>
 80028b4:	f7fe fb64 	bl	8000f80 <bezier_new>
 80028b8:	4603      	mov	r3, r0
 80028ba:	6023      	str	r3, [r4, #0]
  curves[2] = bezier_new(997, 1318, 1000, 1553, 922, 1641, 667, 1645, 30);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f103 0408 	add.w	r4, r3, #8
 80028c2:	201e      	movs	r0, #30
 80028c4:	eddf 3a9a 	vldr	s7, [pc, #616]	; 8002b30 <main+0x348>
 80028c8:	ed9f 3a9a 	vldr	s6, [pc, #616]	; 8002b34 <main+0x34c>
 80028cc:	eddf 2a9a 	vldr	s5, [pc, #616]	; 8002b38 <main+0x350>
 80028d0:	ed9f 2a9a 	vldr	s4, [pc, #616]	; 8002b3c <main+0x354>
 80028d4:	eddf 1a9a 	vldr	s3, [pc, #616]	; 8002b40 <main+0x358>
 80028d8:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002b44 <main+0x35c>
 80028dc:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8002b18 <main+0x330>
 80028e0:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8002b1c <main+0x334>
 80028e4:	f7fe fb4c 	bl	8000f80 <bezier_new>
 80028e8:	4603      	mov	r3, r0
 80028ea:	6023      	str	r3, [r4, #0]
  curves[3] = bezier_new(667, 1645, 412, 1648, 401, 1512, 401, 1242, 30);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f103 040c 	add.w	r4, r3, #12
 80028f2:	201e      	movs	r0, #30
 80028f4:	eddf 3a94 	vldr	s7, [pc, #592]	; 8002b48 <main+0x360>
 80028f8:	ed9f 3a94 	vldr	s6, [pc, #592]	; 8002b4c <main+0x364>
 80028fc:	eddf 2a94 	vldr	s5, [pc, #592]	; 8002b50 <main+0x368>
 8002900:	ed9f 2a92 	vldr	s4, [pc, #584]	; 8002b4c <main+0x364>
 8002904:	eddf 1a93 	vldr	s3, [pc, #588]	; 8002b54 <main+0x36c>
 8002908:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8002b58 <main+0x370>
 800290c:	eddf 0a88 	vldr	s1, [pc, #544]	; 8002b30 <main+0x348>
 8002910:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002b34 <main+0x34c>
 8002914:	f7fe fb34 	bl	8000f80 <bezier_new>
 8002918:	4603      	mov	r3, r0
 800291a:	6023      	str	r3, [r4, #0]
  curves[4] = bezier_new(401, 1242, 401, 973, 505, 887, 796, 890, 30);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f103 0410 	add.w	r4, r3, #16
 8002922:	201e      	movs	r0, #30
 8002924:	eddf 3a8d 	vldr	s7, [pc, #564]	; 8002b5c <main+0x374>
 8002928:	ed9f 3a8d 	vldr	s6, [pc, #564]	; 8002b60 <main+0x378>
 800292c:	eddf 2a8d 	vldr	s5, [pc, #564]	; 8002b64 <main+0x37c>
 8002930:	ed9f 2a8d 	vldr	s4, [pc, #564]	; 8002b68 <main+0x380>
 8002934:	eddf 1a8d 	vldr	s3, [pc, #564]	; 8002b6c <main+0x384>
 8002938:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8002b4c <main+0x364>
 800293c:	eddf 0a82 	vldr	s1, [pc, #520]	; 8002b48 <main+0x360>
 8002940:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8002b4c <main+0x364>
 8002944:	f7fe fb1c 	bl	8000f80 <bezier_new>
 8002948:	4603      	mov	r3, r0
 800294a:	6023      	str	r3, [r4, #0]
  curves[5] = bezier_new(796, 890, 1087, 894, 1089, 1124, 1082, 1409, 30);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0414 	add.w	r4, r3, #20
 8002952:	201e      	movs	r0, #30
 8002954:	eddf 3a86 	vldr	s7, [pc, #536]	; 8002b70 <main+0x388>
 8002958:	ed9f 3a86 	vldr	s6, [pc, #536]	; 8002b74 <main+0x38c>
 800295c:	eddf 2a86 	vldr	s5, [pc, #536]	; 8002b78 <main+0x390>
 8002960:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8002b7c <main+0x394>
 8002964:	eddf 1a86 	vldr	s3, [pc, #536]	; 8002b80 <main+0x398>
 8002968:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8002b84 <main+0x39c>
 800296c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8002b5c <main+0x374>
 8002970:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8002b60 <main+0x378>
 8002974:	f7fe fb04 	bl	8000f80 <bezier_new>
 8002978:	4603      	mov	r3, r0
 800297a:	6023      	str	r3, [r4, #0]
  curves[6] = bezier_new(1082, 1409, 1075, 1693, 719, 1695, 637, 1692, 30);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f103 0418 	add.w	r4, r3, #24
 8002982:	201e      	movs	r0, #30
 8002984:	eddf 3a80 	vldr	s7, [pc, #512]	; 8002b88 <main+0x3a0>
 8002988:	ed9f 3a80 	vldr	s6, [pc, #512]	; 8002b8c <main+0x3a4>
 800298c:	eddf 2a80 	vldr	s5, [pc, #512]	; 8002b90 <main+0x3a8>
 8002990:	ed9f 2a80 	vldr	s4, [pc, #512]	; 8002b94 <main+0x3ac>
 8002994:	eddf 1a80 	vldr	s3, [pc, #512]	; 8002b98 <main+0x3b0>
 8002998:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8002b9c <main+0x3b4>
 800299c:	eddf 0a74 	vldr	s1, [pc, #464]	; 8002b70 <main+0x388>
 80029a0:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8002b74 <main+0x38c>
 80029a4:	f7fe faec 	bl	8000f80 <bezier_new>
 80029a8:	4603      	mov	r3, r0
 80029aa:	6023      	str	r3, [r4, #0]
  curves[7] = bezier_new(637, 1692, 555, 1690, 456, 1679, 458, 1177, 30);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f103 041c 	add.w	r4, r3, #28
 80029b2:	201e      	movs	r0, #30
 80029b4:	eddf 3a7a 	vldr	s7, [pc, #488]	; 8002ba0 <main+0x3b8>
 80029b8:	ed9f 3a7a 	vldr	s6, [pc, #488]	; 8002ba4 <main+0x3bc>
 80029bc:	eddf 2a7a 	vldr	s5, [pc, #488]	; 8002ba8 <main+0x3c0>
 80029c0:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8002bac <main+0x3c4>
 80029c4:	eddf 1a7a 	vldr	s3, [pc, #488]	; 8002bb0 <main+0x3c8>
 80029c8:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8002bb4 <main+0x3cc>
 80029cc:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8002b88 <main+0x3a0>
 80029d0:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8002b8c <main+0x3a4>
 80029d4:	f7fe fad4 	bl	8000f80 <bezier_new>
 80029d8:	4603      	mov	r3, r0
 80029da:	6023      	str	r3, [r4, #0]
  curves[8] = bezier_new(458, 1177, 461, 675, 1996, 1545, 1985, 1113, 30);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0420 	add.w	r4, r3, #32
 80029e2:	201e      	movs	r0, #30
 80029e4:	eddf 3a74 	vldr	s7, [pc, #464]	; 8002bb8 <main+0x3d0>
 80029e8:	ed9f 3a74 	vldr	s6, [pc, #464]	; 8002bbc <main+0x3d4>
 80029ec:	eddf 2a74 	vldr	s5, [pc, #464]	; 8002bc0 <main+0x3d8>
 80029f0:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8002bc4 <main+0x3dc>
 80029f4:	eddf 1a74 	vldr	s3, [pc, #464]	; 8002bc8 <main+0x3e0>
 80029f8:	ed9f 1a74 	vldr	s2, [pc, #464]	; 8002bcc <main+0x3e4>
 80029fc:	eddf 0a68 	vldr	s1, [pc, #416]	; 8002ba0 <main+0x3b8>
 8002a00:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8002ba4 <main+0x3bc>
 8002a04:	f7fe fabc 	bl	8000f80 <bezier_new>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	6023      	str	r3, [r4, #0]
  curves[9] = bezier_new(1985, 1113, 1974, 1300, 2002, 1802, 2002, 1803, 30);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002a12:	201e      	movs	r0, #30
 8002a14:	eddf 3a3f 	vldr	s7, [pc, #252]	; 8002b14 <main+0x32c>
 8002a18:	ed9f 3a3d 	vldr	s6, [pc, #244]	; 8002b10 <main+0x328>
 8002a1c:	eddf 2a6c 	vldr	s5, [pc, #432]	; 8002bd0 <main+0x3e8>
 8002a20:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8002b10 <main+0x328>
 8002a24:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8002bd4 <main+0x3ec>
 8002a28:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8002bd8 <main+0x3f0>
 8002a2c:	eddf 0a62 	vldr	s1, [pc, #392]	; 8002bb8 <main+0x3d0>
 8002a30:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002bbc <main+0x3d4>
 8002a34:	f7fe faa4 	bl	8000f80 <bezier_new>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	6023      	str	r3, [r4, #0]

  //Bezier* b = bezier_new(0, 0, 200, 0, 300, 0, 500, 0, 30);
  //Bezier* b = bezier_new(125, 849, 799, 843, 1698, 1654, 1698, 202, 30);
  odometry_setPosition(curves[0]->p1.x, curves[0]->p1.y);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a4c:	eef0 0a47 	vmov.f32	s1, s14
 8002a50:	eeb0 0a67 	vmov.f32	s0, s15
 8002a54:	f7ff f92c 	bl	8001cb0 <odometry_setPosition>
  //odometry_setPosition(0, 0);
  odometry_setAngle(-M_PI/2);
 8002a58:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8002bdc <main+0x3f4>
 8002a5c:	f7ff f93e 	bl	8001cdc <odometry_setAngle>
  robot.measuredSpeed = 0;
 8002a60:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <main+0x3f8>)
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	61da      	str	r2, [r3, #28]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int curveIndex = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  float t = 0;
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
	  //HAL_UART_Transmit(&huart6, (uint8_t *) ptr, 15, HAL_MAX_DELAY);
	  //HAL_Delay(20);

	  //updateRobotPosition();

	  if (curveIndex == 9) {
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d10c      	bne.n	8002a92 <main+0x2aa>
		  t = propulsion_followBezier(curves[curveIndex], BACKWARD);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fa02 	bl	8001e90 <propulsion_followBezier>
 8002a8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a90:	e00a      	b.n	8002aa8 <main+0x2c0>
	  } else {
		  t = propulsion_followBezier(curves[curveIndex], FORWARD);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f9f6 	bl	8001e90 <propulsion_followBezier>
 8002aa4:	ed87 0a02 	vstr	s0, [r7, #8]
	  }

	  if (t > 0.99) {
 8002aa8:	68b8      	ldr	r0, [r7, #8]
 8002aaa:	f7fd fd6d 	bl	8000588 <__aeabi_f2d>
 8002aae:	a30c      	add	r3, pc, #48	; (adr r3, 8002ae0 <main+0x2f8>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fe f850 	bl	8000b58 <__aeabi_dcmpgt>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <main+0x2f2>
	    curveIndex = (curveIndex + 1) % 10;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <main+0x3fc>)
 8002ac4:	fb83 1302 	smull	r1, r3, r3, r2
 8002ac8:	1099      	asrs	r1, r3, #2
 8002aca:	17d3      	asrs	r3, r2, #31
 8002acc:	1ac9      	subs	r1, r1, r3
 8002ace:	460b      	mov	r3, r1
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	60fb      	str	r3, [r7, #12]
	  if (curveIndex == 9) {
 8002ada:	e7ca      	b.n	8002a72 <main+0x28a>
 8002adc:	f3af 8000 	nop.w
 8002ae0:	7ae147ae 	.word	0x7ae147ae
 8002ae4:	3fefae14 	.word	0x3fefae14
 8002ae8:	200003d8 	.word	0x200003d8
 8002aec:	20000300 	.word	0x20000300
 8002af0:	200002b8 	.word	0x200002b8
 8002af4:	0800b610 	.word	0x0800b610
 8002af8:	0800b634 	.word	0x0800b634
 8002afc:	4482a000 	.word	0x4482a000
 8002b00:	44bbe000 	.word	0x44bbe000
 8002b04:	44838000 	.word	0x44838000
 8002b08:	44fb8000 	.word	0x44fb8000
 8002b0c:	44a88000 	.word	0x44a88000
 8002b10:	44fa4000 	.word	0x44fa4000
 8002b14:	44e16000 	.word	0x44e16000
 8002b18:	44a4c000 	.word	0x44a4c000
 8002b1c:	44794000 	.word	0x44794000
 8002b20:	44876000 	.word	0x44876000
 8002b24:	4478c000 	.word	0x4478c000
 8002b28:	4481c000 	.word	0x4481c000
 8002b2c:	44788000 	.word	0x44788000
 8002b30:	44cda000 	.word	0x44cda000
 8002b34:	4426c000 	.word	0x4426c000
 8002b38:	44cd2000 	.word	0x44cd2000
 8002b3c:	44668000 	.word	0x44668000
 8002b40:	44c22000 	.word	0x44c22000
 8002b44:	447a0000 	.word	0x447a0000
 8002b48:	449b4000 	.word	0x449b4000
 8002b4c:	43c88000 	.word	0x43c88000
 8002b50:	44bd0000 	.word	0x44bd0000
 8002b54:	44ce0000 	.word	0x44ce0000
 8002b58:	43ce0000 	.word	0x43ce0000
 8002b5c:	445e8000 	.word	0x445e8000
 8002b60:	44470000 	.word	0x44470000
 8002b64:	445dc000 	.word	0x445dc000
 8002b68:	43fc8000 	.word	0x43fc8000
 8002b6c:	44734000 	.word	0x44734000
 8002b70:	44b02000 	.word	0x44b02000
 8002b74:	44874000 	.word	0x44874000
 8002b78:	448c8000 	.word	0x448c8000
 8002b7c:	44882000 	.word	0x44882000
 8002b80:	445f8000 	.word	0x445f8000
 8002b84:	4487e000 	.word	0x4487e000
 8002b88:	44d38000 	.word	0x44d38000
 8002b8c:	441f4000 	.word	0x441f4000
 8002b90:	44d3e000 	.word	0x44d3e000
 8002b94:	4433c000 	.word	0x4433c000
 8002b98:	44d3a000 	.word	0x44d3a000
 8002b9c:	44866000 	.word	0x44866000
 8002ba0:	44932000 	.word	0x44932000
 8002ba4:	43e50000 	.word	0x43e50000
 8002ba8:	44d1e000 	.word	0x44d1e000
 8002bac:	43e40000 	.word	0x43e40000
 8002bb0:	44d34000 	.word	0x44d34000
 8002bb4:	440ac000 	.word	0x440ac000
 8002bb8:	448b2000 	.word	0x448b2000
 8002bbc:	44f82000 	.word	0x44f82000
 8002bc0:	44c12000 	.word	0x44c12000
 8002bc4:	44f98000 	.word	0x44f98000
 8002bc8:	4428c000 	.word	0x4428c000
 8002bcc:	43e68000 	.word	0x43e68000
 8002bd0:	44e14000 	.word	0x44e14000
 8002bd4:	44a28000 	.word	0x44a28000
 8002bd8:	44f6c000 	.word	0x44f6c000
 8002bdc:	bfc90fdb 	.word	0xbfc90fdb
 8002be0:	20000208 	.word	0x20000208
 8002be4:	66666667 	.word	0x66666667

08002be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b094      	sub	sp, #80	; 0x50
 8002bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	2234      	movs	r2, #52	; 0x34
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 fa4a 	bl	8007090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <SystemClock_Config+0xe0>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <SystemClock_Config+0xe0>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <SystemClock_Config+0xe0>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <SystemClock_Config+0xe4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <SystemClock_Config+0xe4>)
 8002c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <SystemClock_Config+0xe4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c44:	2302      	movs	r3, #2
 8002c46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c50:	2302      	movs	r3, #2
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c54:	2300      	movs	r3, #0
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002c58:	2310      	movs	r3, #16
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002c5c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002c60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c62:	2302      	movs	r3, #2
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 fe2e 	bl	80048d4 <HAL_RCC_OscConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c7e:	f000 f827 	bl	8002cd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c82:	f001 fb0b 	bl	800429c <HAL_PWREx_EnableOverDrive>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002c8c:	f000 f820 	bl	8002cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c90:	230f      	movs	r3, #15
 8002c92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c94:	2302      	movs	r3, #2
 8002c96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ca0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	2105      	movs	r1, #5
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 fb44 	bl	800433c <HAL_RCC_ClockConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002cba:	f000 f809 	bl	8002cd0 <Error_Handler>
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3750      	adds	r7, #80	; 0x50
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd4:	b672      	cpsid	i
}
 8002cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("A runtime error occurred.\r\n");
 8002cd8:	4801      	ldr	r0, [pc, #4]	; (8002ce0 <Error_Handler+0x10>)
 8002cda:	f004 ff7b 	bl	8007bd4 <puts>
  while (1) {
 8002cde:	e7fe      	b.n	8002cde <Error_Handler+0xe>
 8002ce0:	0800b654 	.word	0x0800b654

08002ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_MspInit+0x4c>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_MspInit+0x4c>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <NMI_Handler+0x4>
	...

08002d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("A hard fault occurred.\r\n");
 8002d40:	4801      	ldr	r0, [pc, #4]	; (8002d48 <HardFault_Handler+0xc>)
 8002d42:	f004 ff47 	bl	8007bd4 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <HardFault_Handler+0xa>
 8002d48:	0800b670 	.word	0x0800b670

08002d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  printf("A memory management fault occurred.\r\n");
 8002d50:	4801      	ldr	r0, [pc, #4]	; (8002d58 <MemManage_Handler+0xc>)
 8002d52:	f004 ff3f 	bl	8007bd4 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <MemManage_Handler+0xa>
 8002d58:	0800b688 	.word	0x0800b688

08002d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <BusFault_Handler+0x4>

08002d62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <UsageFault_Handler+0x4>

08002d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d96:	f000 feeb 	bl	8003b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <TIM2_IRQHandler+0x10>)
 8002da6:	f002 fb23 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000420 	.word	0x20000420

08002db4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <TIM4_IRQHandler+0x10>)
 8002dba:	f002 fb19 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000270 	.word	0x20000270

08002dc8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  //propulsion_updatePosition(0.01);
  odometry_updatePosition();
 8002dcc:	f7fe fe48 	bl	8001a60 <odometry_updatePosition>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <TIM5_IRQHandler+0x14>)
 8002dd2:	f002 fb0d 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200002b8 	.word	0x200002b8

08002de0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <TIM6_DAC_IRQHandler+0x10>)
 8002de6:	f002 fb03 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000390 	.word	0x20000390

08002df4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <TIM7_IRQHandler+0x10>)
 8002dfa:	f002 faf9 	bl	80053f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000468 	.word	0x20000468

08002e08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <USART6_IRQHandler+0x10>)
 8002e0e:	f003 fa85 	bl	800631c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200004b0 	.word	0x200004b0

08002e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
	return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_kill>:

int _kill(int pid, int sig)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e36:	f004 f8f9 	bl	800702c <__errno>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2216      	movs	r2, #22
 8002e3e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_exit>:

void _exit (int status)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ffe7 	bl	8002e2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e5e:	e7fe      	b.n	8002e5e <_exit+0x12>

08002e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e00a      	b.n	8002e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e72:	f3af 8000 	nop.w
 8002e76:	4601      	mov	r1, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	60ba      	str	r2, [r7, #8]
 8002e7e:	b2ca      	uxtb	r2, r1
 8002e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	dbf0      	blt.n	8002e72 <_read+0x12>
	}

return len;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <_isatty>:

int _isatty(int file)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
	return 1;
 8002eda:	2301      	movs	r3, #1
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <_sbrk+0x5c>)
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_sbrk+0x60>)
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <_sbrk+0x64>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <_sbrk+0x68>)
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f34:	f004 f87a 	bl	800702c <__errno>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f42:	e009      	b.n	8002f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <_sbrk+0x64>)
 8002f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20020000 	.word	0x20020000
 8002f64:	00000400 	.word	0x00000400
 8002f68:	200001fc 	.word	0x200001fc
 8002f6c:	20000550 	.word	0x20000550

08002f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <SystemInit+0x20>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <SystemInit+0x20>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	; 0x30
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 f874 	bl	8007090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <MX_TIM1_Init+0xa8>)
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <MX_TIM1_Init+0xac>)
 8002fb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <MX_TIM1_Init+0xa8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <MX_TIM1_Init+0xa8>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <MX_TIM1_Init+0xa8>)
 8002fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <MX_TIM1_Init+0xa8>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <MX_TIM1_Init+0xa8>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <MX_TIM1_Init+0xa8>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002fec:	230a      	movs	r3, #10
 8002fee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003000:	f107 030c 	add.w	r3, r7, #12
 8003004:	4619      	mov	r1, r3
 8003006:	480d      	ldr	r0, [pc, #52]	; (800303c <MX_TIM1_Init+0xa8>)
 8003008:	f002 f94c 	bl	80052a4 <HAL_TIM_Encoder_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003012:	f7ff fe5d 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4806      	ldr	r0, [pc, #24]	; (800303c <MX_TIM1_Init+0xa8>)
 8003024:	f002 ffb8 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800302e:	f7ff fe4f 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	3730      	adds	r7, #48	; 0x30
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200003d8 	.word	0x200003d8
 8003040:	40010000 	.word	0x40010000

08003044 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304a:	f107 0308 	add.w	r3, r7, #8
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003058:	463b      	mov	r3, r7
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <MX_TIM2_Init+0x98>)
 8003062:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003066:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <MX_TIM2_Init+0x98>)
 800306a:	f640 227e 	movw	r2, #2686	; 0xa7e
 800306e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <MX_TIM2_Init+0x98>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <MX_TIM2_Init+0x98>)
 8003078:	f240 32e7 	movw	r2, #999	; 0x3e7
 800307c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800307e:	4b17      	ldr	r3, [pc, #92]	; (80030dc <MX_TIM2_Init+0x98>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <MX_TIM2_Init+0x98>)
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800308a:	4814      	ldr	r0, [pc, #80]	; (80030dc <MX_TIM2_Init+0x98>)
 800308c:	f001 fec0 	bl	8004e10 <HAL_TIM_Base_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003096:	f7ff fe1b 	bl	8002cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800309a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800309e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	4619      	mov	r1, r3
 80030a6:	480d      	ldr	r0, [pc, #52]	; (80030dc <MX_TIM2_Init+0x98>)
 80030a8:	f002 fb6c 	bl	8005784 <HAL_TIM_ConfigClockSource>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80030b2:	f7ff fe0d 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030be:	463b      	mov	r3, r7
 80030c0:	4619      	mov	r1, r3
 80030c2:	4806      	ldr	r0, [pc, #24]	; (80030dc <MX_TIM2_Init+0x98>)
 80030c4:	f002 ff68 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80030ce:	f7ff fdff 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000420 	.word	0x20000420

080030e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	; 0x30
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 ffce 	bl	8007090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f4:	1d3b      	adds	r3, r7, #4
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <MX_TIM3_Init+0xa0>)
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <MX_TIM3_Init+0xa4>)
 8003100:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003102:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <MX_TIM3_Init+0xa0>)
 8003104:	2200      	movs	r2, #0
 8003106:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <MX_TIM3_Init+0xa0>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <MX_TIM3_Init+0xa0>)
 8003110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003114:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <MX_TIM3_Init+0xa0>)
 8003118:	2200      	movs	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <MX_TIM3_Init+0xa0>)
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003122:	2303      	movs	r3, #3
 8003124:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800312a:	2301      	movs	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003136:	2300      	movs	r3, #0
 8003138:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800313a:	2301      	movs	r3, #1
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800313e:	2300      	movs	r3, #0
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	4619      	mov	r1, r3
 800314c:	480c      	ldr	r0, [pc, #48]	; (8003180 <MX_TIM3_Init+0xa0>)
 800314e:	f002 f8a9 	bl	80052a4 <HAL_TIM_Encoder_Init>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003158:	f7ff fdba 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315c:	2300      	movs	r3, #0
 800315e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4805      	ldr	r0, [pc, #20]	; (8003180 <MX_TIM3_Init+0xa0>)
 800316a:	f002 ff15 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003174:	f7ff fdac 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003178:	bf00      	nop
 800317a:	3730      	adds	r7, #48	; 0x30
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000300 	.word	0x20000300
 8003184:	40000400 	.word	0x40000400

08003188 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319c:	463b      	mov	r3, r7
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031a4:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <MX_TIM4_Init+0x90>)
 80031a6:	4a1d      	ldr	r2, [pc, #116]	; (800321c <MX_TIM4_Init+0x94>)
 80031a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <MX_TIM4_Init+0x90>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <MX_TIM4_Init+0x90>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <MX_TIM4_Init+0x90>)
 80031b8:	225a      	movs	r2, #90	; 0x5a
 80031ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <MX_TIM4_Init+0x90>)
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <MX_TIM4_Init+0x90>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80031c8:	4813      	ldr	r0, [pc, #76]	; (8003218 <MX_TIM4_Init+0x90>)
 80031ca:	f001 fe21 	bl	8004e10 <HAL_TIM_Base_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80031d4:	f7ff fd7c 	bl	8002cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	4619      	mov	r1, r3
 80031e4:	480c      	ldr	r0, [pc, #48]	; (8003218 <MX_TIM4_Init+0x90>)
 80031e6:	f002 facd 	bl	8005784 <HAL_TIM_ConfigClockSource>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80031f0:	f7ff fd6e 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f4:	2300      	movs	r3, #0
 80031f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031fc:	463b      	mov	r3, r7
 80031fe:	4619      	mov	r1, r3
 8003200:	4805      	ldr	r0, [pc, #20]	; (8003218 <MX_TIM4_Init+0x90>)
 8003202:	f002 fec9 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800320c:	f7ff fd60 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003210:	bf00      	nop
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000270 	.word	0x20000270
 800321c:	40000800 	.word	0x40000800

08003220 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003234:	463b      	mov	r3, r7
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800323c:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <MX_TIM5_Init+0x90>)
 800323e:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <MX_TIM5_Init+0x94>)
 8003240:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8003242:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <MX_TIM5_Init+0x90>)
 8003244:	2209      	movs	r2, #9
 8003246:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <MX_TIM5_Init+0x90>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90000;
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <MX_TIM5_Init+0x90>)
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <MX_TIM5_Init+0x98>)
 8003252:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003254:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <MX_TIM5_Init+0x90>)
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <MX_TIM5_Init+0x90>)
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003260:	4813      	ldr	r0, [pc, #76]	; (80032b0 <MX_TIM5_Init+0x90>)
 8003262:	f001 fdd5 	bl	8004e10 <HAL_TIM_Base_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 800326c:	f7ff fd30 	bl	8002cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	4619      	mov	r1, r3
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <MX_TIM5_Init+0x90>)
 800327e:	f002 fa81 	bl	8005784 <HAL_TIM_ConfigClockSource>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8003288:	f7ff fd22 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800328c:	2300      	movs	r3, #0
 800328e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003294:	463b      	mov	r3, r7
 8003296:	4619      	mov	r1, r3
 8003298:	4805      	ldr	r0, [pc, #20]	; (80032b0 <MX_TIM5_Init+0x90>)
 800329a:	f002 fe7d 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80032a4:	f7ff fd14 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80032a8:	bf00      	nop
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	200002b8 	.word	0x200002b8
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	00015f90 	.word	0x00015f90

080032bc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c2:	463b      	mov	r3, r7
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <MX_TIM6_Init+0x64>)
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <MX_TIM6_Init+0x68>)
 80032ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <MX_TIM6_Init+0x64>)
 80032d2:	f242 3227 	movw	r2, #8999	; 0x2327
 80032d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <MX_TIM6_Init+0x64>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <MX_TIM6_Init+0x64>)
 80032e0:	2263      	movs	r2, #99	; 0x63
 80032e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <MX_TIM6_Init+0x64>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80032ea:	480d      	ldr	r0, [pc, #52]	; (8003320 <MX_TIM6_Init+0x64>)
 80032ec:	f001 fd90 	bl	8004e10 <HAL_TIM_Base_Init>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80032f6:	f7ff fceb 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003302:	463b      	mov	r3, r7
 8003304:	4619      	mov	r1, r3
 8003306:	4806      	ldr	r0, [pc, #24]	; (8003320 <MX_TIM6_Init+0x64>)
 8003308:	f002 fe46 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003312:	f7ff fcdd 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000390 	.word	0x20000390
 8003324:	40001000 	.word	0x40001000

08003328 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332e:	463b      	mov	r3, r7
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <MX_TIM7_Init+0x64>)
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <MX_TIM7_Init+0x68>)
 800333a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <MX_TIM7_Init+0x64>)
 800333e:	f242 3227 	movw	r2, #8999	; 0x2327
 8003342:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <MX_TIM7_Init+0x64>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <MX_TIM7_Init+0x64>)
 800334c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003350:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <MX_TIM7_Init+0x64>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <MX_TIM7_Init+0x64>)
 800335a:	f001 fd59 	bl	8004e10 <HAL_TIM_Base_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003364:	f7ff fcb4 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003368:	2300      	movs	r3, #0
 800336a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003370:	463b      	mov	r3, r7
 8003372:	4619      	mov	r1, r3
 8003374:	4805      	ldr	r0, [pc, #20]	; (800338c <MX_TIM7_Init+0x64>)
 8003376:	f002 fe0f 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003380:	f7ff fca6 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000468 	.word	0x20000468
 8003390:	40001400 	.word	0x40001400

08003394 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b096      	sub	sp, #88	; 0x58
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800339a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	615a      	str	r2, [r3, #20]
 80033c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2220      	movs	r2, #32
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f003 fe5f 	bl	8007090 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033d2:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <MX_TIM8_Init+0x138>)
 80033d4:	4a3e      	ldr	r2, [pc, #248]	; (80034d0 <MX_TIM8_Init+0x13c>)
 80033d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 80033d8:	4b3c      	ldr	r3, [pc, #240]	; (80034cc <MX_TIM8_Init+0x138>)
 80033da:	22b3      	movs	r2, #179	; 0xb3
 80033dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <MX_TIM8_Init+0x138>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80033e4:	4b39      	ldr	r3, [pc, #228]	; (80034cc <MX_TIM8_Init+0x138>)
 80033e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ec:	4b37      	ldr	r3, [pc, #220]	; (80034cc <MX_TIM8_Init+0x138>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80033f2:	4b36      	ldr	r3, [pc, #216]	; (80034cc <MX_TIM8_Init+0x138>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <MX_TIM8_Init+0x138>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80033fe:	4833      	ldr	r0, [pc, #204]	; (80034cc <MX_TIM8_Init+0x138>)
 8003400:	f001 fd06 	bl	8004e10 <HAL_TIM_Base_Init>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800340a:	f7ff fc61 	bl	8002cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800340e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003412:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003414:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003418:	4619      	mov	r1, r3
 800341a:	482c      	ldr	r0, [pc, #176]	; (80034cc <MX_TIM8_Init+0x138>)
 800341c:	f002 f9b2 	bl	8005784 <HAL_TIM_ConfigClockSource>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003426:	f7ff fc53 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800342a:	4828      	ldr	r0, [pc, #160]	; (80034cc <MX_TIM8_Init+0x138>)
 800342c:	f001 fe18 	bl	8005060 <HAL_TIM_PWM_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003436:	f7ff fc4b 	bl	8002cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800343e:	2300      	movs	r3, #0
 8003440:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003442:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003446:	4619      	mov	r1, r3
 8003448:	4820      	ldr	r0, [pc, #128]	; (80034cc <MX_TIM8_Init+0x138>)
 800344a:	f002 fda5 	bl	8005f98 <HAL_TIMEx_MasterConfigSynchronization>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003454:	f7ff fc3c 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003458:	2360      	movs	r3, #96	; 0x60
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800345c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003462:	2300      	movs	r3, #0
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003476:	220c      	movs	r2, #12
 8003478:	4619      	mov	r1, r3
 800347a:	4814      	ldr	r0, [pc, #80]	; (80034cc <MX_TIM8_Init+0x138>)
 800347c:	f002 f8c0 	bl	8005600 <HAL_TIM_PWM_ConfigChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003486:	f7ff fc23 	bl	8002cd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800349e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4807      	ldr	r0, [pc, #28]	; (80034cc <MX_TIM8_Init+0x138>)
 80034ae:	f002 fdef 	bl	8006090 <HAL_TIMEx_ConfigBreakDeadTime>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80034b8:	f7ff fc0a 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80034bc:	4803      	ldr	r0, [pc, #12]	; (80034cc <MX_TIM8_Init+0x138>)
 80034be:	f000 f99d 	bl	80037fc <HAL_TIM_MspPostInit>

}
 80034c2:	bf00      	nop
 80034c4:	3758      	adds	r7, #88	; 0x58
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000228 	.word	0x20000228
 80034d0:	40010400 	.word	0x40010400

080034d4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
 80034e8:	615a      	str	r2, [r3, #20]
 80034ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <MX_TIM11_Init+0x94>)
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <MX_TIM11_Init+0x98>)
 80034f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <MX_TIM11_Init+0x94>)
 80034f4:	22b3      	movs	r2, #179	; 0xb3
 80034f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <MX_TIM11_Init+0x94>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <MX_TIM11_Init+0x94>)
 8003500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003504:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <MX_TIM11_Init+0x94>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <MX_TIM11_Init+0x94>)
 800350e:	2200      	movs	r2, #0
 8003510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003512:	4815      	ldr	r0, [pc, #84]	; (8003568 <MX_TIM11_Init+0x94>)
 8003514:	f001 fc7c 	bl	8004e10 <HAL_TIM_Base_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800351e:	f7ff fbd7 	bl	8002cd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003522:	4811      	ldr	r0, [pc, #68]	; (8003568 <MX_TIM11_Init+0x94>)
 8003524:	f001 fd9c 	bl	8005060 <HAL_TIM_PWM_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800352e:	f7ff fbcf 	bl	8002cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003532:	2360      	movs	r3, #96	; 0x60
 8003534:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	2200      	movs	r2, #0
 8003546:	4619      	mov	r1, r3
 8003548:	4807      	ldr	r0, [pc, #28]	; (8003568 <MX_TIM11_Init+0x94>)
 800354a:	f002 f859 	bl	8005600 <HAL_TIM_PWM_ConfigChannel>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003554:	f7ff fbbc 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003558:	4803      	ldr	r0, [pc, #12]	; (8003568 <MX_TIM11_Init+0x94>)
 800355a:	f000 f94f 	bl	80037fc <HAL_TIM_MspPostInit>

}
 800355e:	bf00      	nop
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000348 	.word	0x20000348
 800356c:	40014800 	.word	0x40014800

08003570 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	; 0x30
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 031c 	add.w	r3, r7, #28
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a32      	ldr	r2, [pc, #200]	; (8003658 <HAL_TIM_Encoder_MspInit+0xe8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d12d      	bne.n	80035ee <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4a30      	ldr	r2, [pc, #192]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6453      	str	r3, [r2, #68]	; 0x44
 80035a2:	4b2e      	ldr	r3, [pc, #184]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a29      	ldr	r2, [pc, #164]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = R_ENCODER_A_Pin|R_ENCODER_B_Pin;
 80035ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2302      	movs	r3, #2
 80035d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	2300      	movs	r3, #0
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035dc:	2301      	movs	r3, #1
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	f107 031c 	add.w	r3, r7, #28
 80035e4:	4619      	mov	r1, r3
 80035e6:	481e      	ldr	r0, [pc, #120]	; (8003660 <HAL_TIM_Encoder_MspInit+0xf0>)
 80035e8:	f000 fcaa 	bl	8003f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80035ec:	e030      	b.n	8003650 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <HAL_TIM_Encoder_MspInit+0xf4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d12b      	bne.n	8003650 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a16      	ldr	r2, [pc, #88]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4a0f      	ldr	r2, [pc, #60]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6313      	str	r3, [r2, #48]	; 0x30
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_TIM_Encoder_MspInit+0xec>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_ENCODER_A_Pin|L_ENCODER_B_Pin;
 8003630:	23c0      	movs	r3, #192	; 0xc0
 8003632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003640:	2302      	movs	r3, #2
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4619      	mov	r1, r3
 800364a:	4805      	ldr	r0, [pc, #20]	; (8003660 <HAL_TIM_Encoder_MspInit+0xf0>)
 800364c:	f000 fc78 	bl	8003f40 <HAL_GPIO_Init>
}
 8003650:	bf00      	nop
 8003652:	3730      	adds	r7, #48	; 0x30
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40010000 	.word	0x40010000
 800365c:	40023800 	.word	0x40023800
 8003660:	40020000 	.word	0x40020000
 8003664:	40000400 	.word	0x40000400

08003668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08a      	sub	sp, #40	; 0x28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d116      	bne.n	80036a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	4b58      	ldr	r3, [pc, #352]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a57      	ldr	r2, [pc, #348]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b55      	ldr	r3, [pc, #340]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	201c      	movs	r0, #28
 800369c:	f000 fb87 	bl	8003dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036a0:	201c      	movs	r0, #28
 80036a2:	f000 fba0 	bl	8003de6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80036a6:	e096      	b.n	80037d6 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a4d      	ldr	r2, [pc, #308]	; (80037e4 <HAL_TIM_Base_MspInit+0x17c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d116      	bne.n	80036e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	4a49      	ldr	r2, [pc, #292]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6413      	str	r3, [r2, #64]	; 0x40
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	201e      	movs	r0, #30
 80036d4:	f000 fb6b 	bl	8003dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036d8:	201e      	movs	r0, #30
 80036da:	f000 fb84 	bl	8003de6 <HAL_NVIC_EnableIRQ>
}
 80036de:	e07a      	b.n	80037d6 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a40      	ldr	r2, [pc, #256]	; (80037e8 <HAL_TIM_Base_MspInit+0x180>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d116      	bne.n	8003718 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80036f4:	f043 0308 	orr.w	r3, r3, #8
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	2032      	movs	r0, #50	; 0x32
 800370c:	f000 fb4f 	bl	8003dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003710:	2032      	movs	r0, #50	; 0x32
 8003712:	f000 fb68 	bl	8003de6 <HAL_NVIC_EnableIRQ>
}
 8003716:	e05e      	b.n	80037d6 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a33      	ldr	r2, [pc, #204]	; (80037ec <HAL_TIM_Base_MspInit+0x184>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d116      	bne.n	8003750 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	6413      	str	r3, [r2, #64]	; 0x40
 8003732:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	2036      	movs	r0, #54	; 0x36
 8003744:	f000 fb33 	bl	8003dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003748:	2036      	movs	r0, #54	; 0x36
 800374a:	f000 fb4c 	bl	8003de6 <HAL_NVIC_EnableIRQ>
}
 800374e:	e042      	b.n	80037d6 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM7)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a26      	ldr	r2, [pc, #152]	; (80037f0 <HAL_TIM_Base_MspInit+0x188>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d116      	bne.n	8003788 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 8003764:	f043 0320 	orr.w	r3, r3, #32
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2102      	movs	r1, #2
 800377a:	2037      	movs	r0, #55	; 0x37
 800377c:	f000 fb17 	bl	8003dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003780:	2037      	movs	r0, #55	; 0x37
 8003782:	f000 fb30 	bl	8003de6 <HAL_NVIC_EnableIRQ>
}
 8003786:	e026      	b.n	80037d6 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM8)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <HAL_TIM_Base_MspInit+0x18c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	4a11      	ldr	r2, [pc, #68]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6453      	str	r3, [r2, #68]	; 0x44
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]
}
 80037ae:	e012      	b.n	80037d6 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM11)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <HAL_TIM_Base_MspInit+0x190>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10d      	bne.n	80037d6 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80037c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_TIM_Base_MspInit+0x178>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
}
 80037d6:	bf00      	nop
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00
 80037ec:	40001000 	.word	0x40001000
 80037f0:	40001400 	.word	0x40001400
 80037f4:	40010400 	.word	0x40010400
 80037f8:	40014800 	.word	0x40014800

080037fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <HAL_TIM_MspPostInit+0xb4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d11f      	bne.n	800385e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_TIM_MspPostInit+0xb8>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a23      	ldr	r2, [pc, #140]	; (80038b4 <HAL_TIM_MspPostInit+0xb8>)
 8003828:	f043 0304 	orr.w	r3, r3, #4
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_TIM_MspPostInit+0xb8>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800383a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800383e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800384c:	2303      	movs	r3, #3
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	4619      	mov	r1, r3
 8003856:	4818      	ldr	r0, [pc, #96]	; (80038b8 <HAL_TIM_MspPostInit+0xbc>)
 8003858:	f000 fb72 	bl	8003f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800385c:	e023      	b.n	80038a6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <HAL_TIM_MspPostInit+0xc0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d11e      	bne.n	80038a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_TIM_MspPostInit+0xb8>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <HAL_TIM_MspPostInit+0xb8>)
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	6313      	str	r3, [r2, #48]	; 0x30
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_TIM_MspPostInit+0xb8>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	2302      	movs	r3, #2
 800388c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003896:	2303      	movs	r3, #3
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	4619      	mov	r1, r3
 80038a0:	4807      	ldr	r0, [pc, #28]	; (80038c0 <HAL_TIM_MspPostInit+0xc4>)
 80038a2:	f000 fb4d 	bl	8003f40 <HAL_GPIO_Init>
}
 80038a6:	bf00      	nop
 80038a8:	3728      	adds	r7, #40	; 0x28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40010400 	.word	0x40010400
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40020800 	.word	0x40020800
 80038bc:	40014800 	.word	0x40014800
 80038c0:	40020400 	.word	0x40020400

080038c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <MX_USART2_UART_Init+0x50>)
 80038cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038ea:	220c      	movs	r2, #12
 80038ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038fa:	4805      	ldr	r0, [pc, #20]	; (8003910 <MX_USART2_UART_Init+0x4c>)
 80038fc:	f002 fc2e 	bl	800615c <HAL_UART_Init>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003906:	f7ff f9e3 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200004f4 	.word	0x200004f4
 8003914:	40004400 	.word	0x40004400

08003918 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <MX_USART6_UART_Init+0x50>)
 8003920:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 8003924:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003928:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 800393e:	220c      	movs	r2, #12
 8003940:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 8003944:	2200      	movs	r2, #0
 8003946:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 800394a:	2200      	movs	r2, #0
 800394c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800394e:	4805      	ldr	r0, [pc, #20]	; (8003964 <MX_USART6_UART_Init+0x4c>)
 8003950:	f002 fc04 	bl	800615c <HAL_UART_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800395a:	f7ff f9b9 	bl	8002cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200004b0 	.word	0x200004b0
 8003968:	40011400 	.word	0x40011400

0800396c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	; 0x30
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003974:	f107 031c 	add.w	r3, r7, #28
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	60da      	str	r2, [r3, #12]
 8003982:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a36      	ldr	r2, [pc, #216]	; (8003a64 <HAL_UART_MspInit+0xf8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d12c      	bne.n	80039e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a34      	ldr	r2, [pc, #208]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a2d      	ldr	r2, [pc, #180]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039c6:	230c      	movs	r3, #12
 80039c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039d6:	2307      	movs	r3, #7
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039da:	f107 031c 	add.w	r3, r7, #28
 80039de:	4619      	mov	r1, r3
 80039e0:	4822      	ldr	r0, [pc, #136]	; (8003a6c <HAL_UART_MspInit+0x100>)
 80039e2:	f000 faad 	bl	8003f40 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80039e6:	e038      	b.n	8003a5a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a20      	ldr	r2, [pc, #128]	; (8003a70 <HAL_UART_MspInit+0x104>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d133      	bne.n	8003a5a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 80039fc:	f043 0320 	orr.w	r3, r3, #32
 8003a00:	6453      	str	r3, [r2, #68]	; 0x44
 8003a02:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_UART_MspInit+0xfc>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a2a:	23c0      	movs	r3, #192	; 0xc0
 8003a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a36:	2303      	movs	r3, #3
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3e:	f107 031c 	add.w	r3, r7, #28
 8003a42:	4619      	mov	r1, r3
 8003a44:	480b      	ldr	r0, [pc, #44]	; (8003a74 <HAL_UART_MspInit+0x108>)
 8003a46:	f000 fa7b 	bl	8003f40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	2047      	movs	r0, #71	; 0x47
 8003a50:	f000 f9ad 	bl	8003dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a54:	2047      	movs	r0, #71	; 0x47
 8003a56:	f000 f9c6 	bl	8003de6 <HAL_NVIC_EnableIRQ>
}
 8003a5a:	bf00      	nop
 8003a5c:	3730      	adds	r7, #48	; 0x30
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40004400 	.word	0x40004400
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	40011400 	.word	0x40011400
 8003a74:	40020800 	.word	0x40020800

08003a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a7c:	480d      	ldr	r0, [pc, #52]	; (8003ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a7e:	490e      	ldr	r1, [pc, #56]	; (8003ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a80:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a84:	e002      	b.n	8003a8c <LoopCopyDataInit>

08003a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a8a:	3304      	adds	r3, #4

08003a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a90:	d3f9      	bcc.n	8003a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a92:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a94:	4c0b      	ldr	r4, [pc, #44]	; (8003ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a98:	e001      	b.n	8003a9e <LoopFillZerobss>

08003a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a9c:	3204      	adds	r2, #4

08003a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa0:	d3fb      	bcc.n	8003a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003aa2:	f7ff fa65 	bl	8002f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aa6:	f003 fac7 	bl	8007038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aaa:	f7fe fe9d 	bl	80027e8 <main>
  bx  lr    
 8003aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003abc:	0800bd18 	.word	0x0800bd18
  ldr r2, =_sbss
 8003ac0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003ac4:	2000054c 	.word	0x2000054c

08003ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ac8:	e7fe      	b.n	8003ac8 <ADC_IRQHandler>
	...

08003acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_Init+0x40>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <HAL_Init+0x40>)
 8003ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_Init+0x40>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <HAL_Init+0x40>)
 8003ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_Init+0x40>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <HAL_Init+0x40>)
 8003aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003af4:	2003      	movs	r0, #3
 8003af6:	f000 f94f 	bl	8003d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003afa:	2000      	movs	r0, #0
 8003afc:	f000 f808 	bl	8003b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b00:	f7ff f8f0 	bl	8002ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023c00 	.word	0x40023c00

08003b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_InitTick+0x54>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_InitTick+0x58>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f967 	bl	8003e02 <HAL_SYSTICK_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00e      	b.n	8003b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b0f      	cmp	r3, #15
 8003b42:	d80a      	bhi.n	8003b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b44:	2200      	movs	r2, #0
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b4c:	f000 f92f 	bl	8003dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b50:	4a06      	ldr	r2, [pc, #24]	; (8003b6c <HAL_InitTick+0x5c>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e000      	b.n	8003b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000000 	.word	0x20000000
 8003b68:	20000008 	.word	0x20000008
 8003b6c:	20000004 	.word	0x20000004

08003b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_IncTick+0x20>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_IncTick+0x24>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4413      	add	r3, r2
 8003b80:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <HAL_IncTick+0x24>)
 8003b82:	6013      	str	r3, [r2, #0]
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000008 	.word	0x20000008
 8003b94:	20000538 	.word	0x20000538

08003b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_GetTick+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000538 	.word	0x20000538

08003bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb8:	f7ff ffee 	bl	8003b98 <HAL_GetTick>
 8003bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc8:	d005      	beq.n	8003bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_Delay+0x44>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bd6:	bf00      	nop
 8003bd8:	f7ff ffde 	bl	8003b98 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d8f7      	bhi.n	8003bd8 <HAL_Delay+0x28>
  {
  }
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000008 	.word	0x20000008

08003bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <__NVIC_SetPriorityGrouping+0x44>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c14:	4013      	ands	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2a:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <__NVIC_SetPriorityGrouping+0x44>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	60d3      	str	r3, [r2, #12]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <__NVIC_GetPriorityGrouping+0x18>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	0a1b      	lsrs	r3, r3, #8
 8003c4a:	f003 0307 	and.w	r3, r3, #7
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	db0b      	blt.n	8003c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	f003 021f 	and.w	r2, r3, #31
 8003c74:	4907      	ldr	r1, [pc, #28]	; (8003c94 <__NVIC_EnableIRQ+0x38>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000e100 	.word	0xe000e100

08003c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	6039      	str	r1, [r7, #0]
 8003ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	db0a      	blt.n	8003cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	490c      	ldr	r1, [pc, #48]	; (8003ce4 <__NVIC_SetPriority+0x4c>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	440b      	add	r3, r1
 8003cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc0:	e00a      	b.n	8003cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	4908      	ldr	r1, [pc, #32]	; (8003ce8 <__NVIC_SetPriority+0x50>)
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	0112      	lsls	r2, r2, #4
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	761a      	strb	r2, [r3, #24]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000e100 	.word	0xe000e100
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b089      	sub	sp, #36	; 0x24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f1c3 0307 	rsb	r3, r3, #7
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	bf28      	it	cs
 8003d0a:	2304      	movcs	r3, #4
 8003d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3304      	adds	r3, #4
 8003d12:	2b06      	cmp	r3, #6
 8003d14:	d902      	bls.n	8003d1c <NVIC_EncodePriority+0x30>
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3b03      	subs	r3, #3
 8003d1a:	e000      	b.n	8003d1e <NVIC_EncodePriority+0x32>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	401a      	ands	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	43d9      	mvns	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	4313      	orrs	r3, r2
         );
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3724      	adds	r7, #36	; 0x24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d64:	d301      	bcc.n	8003d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d66:	2301      	movs	r3, #1
 8003d68:	e00f      	b.n	8003d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <SysTick_Config+0x40>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d72:	210f      	movs	r1, #15
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d78:	f7ff ff8e 	bl	8003c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <SysTick_Config+0x40>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d82:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <SysTick_Config+0x40>)
 8003d84:	2207      	movs	r2, #7
 8003d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	e000e010 	.word	0xe000e010

08003d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff29 	bl	8003bf8 <__NVIC_SetPriorityGrouping>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc0:	f7ff ff3e 	bl	8003c40 <__NVIC_GetPriorityGrouping>
 8003dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	6978      	ldr	r0, [r7, #20]
 8003dcc:	f7ff ff8e 	bl	8003cec <NVIC_EncodePriority>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff5d 	bl	8003c98 <__NVIC_SetPriority>
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff31 	bl	8003c5c <__NVIC_EnableIRQ>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ffa2 	bl	8003d54 <SysTick_Config>
 8003e10:	4603      	mov	r3, r0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e28:	f7ff feb6 	bl	8003b98 <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d008      	beq.n	8003e4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e052      	b.n	8003ef2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0216 	bic.w	r2, r2, #22
 8003e5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <HAL_DMA_Abort+0x62>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0208 	bic.w	r2, r2, #8
 8003e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9c:	e013      	b.n	8003ec6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e9e:	f7ff fe7b 	bl	8003b98 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d90c      	bls.n	8003ec6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e015      	b.n	8003ef2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e4      	bne.n	8003e9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	223f      	movs	r2, #63	; 0x3f
 8003eda:	409a      	lsls	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d004      	beq.n	8003f18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e00c      	b.n	8003f32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2205      	movs	r2, #5
 8003f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	; 0x24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e165      	b.n	8004228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	f040 8154 	bne.w	8004222 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d005      	beq.n	8003f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d130      	bne.n	8003ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fc8:	2201      	movs	r2, #1
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 0201 	and.w	r2, r3, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d017      	beq.n	8004030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2203      	movs	r2, #3
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d123      	bne.n	8004084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	08da      	lsrs	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3208      	adds	r2, #8
 8004044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	220f      	movs	r2, #15
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	08da      	lsrs	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3208      	adds	r2, #8
 800407e:	69b9      	ldr	r1, [r7, #24]
 8004080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0203 	and.w	r2, r3, #3
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80ae 	beq.w	8004222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b5d      	ldr	r3, [pc, #372]	; (8004240 <HAL_GPIO_Init+0x300>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	4a5c      	ldr	r2, [pc, #368]	; (8004240 <HAL_GPIO_Init+0x300>)
 80040d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040d4:	6453      	str	r3, [r2, #68]	; 0x44
 80040d6:	4b5a      	ldr	r3, [pc, #360]	; (8004240 <HAL_GPIO_Init+0x300>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040e2:	4a58      	ldr	r2, [pc, #352]	; (8004244 <HAL_GPIO_Init+0x304>)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	3302      	adds	r3, #2
 80040ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	220f      	movs	r2, #15
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4013      	ands	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4f      	ldr	r2, [pc, #316]	; (8004248 <HAL_GPIO_Init+0x308>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d025      	beq.n	800415a <HAL_GPIO_Init+0x21a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4e      	ldr	r2, [pc, #312]	; (800424c <HAL_GPIO_Init+0x30c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01f      	beq.n	8004156 <HAL_GPIO_Init+0x216>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4d      	ldr	r2, [pc, #308]	; (8004250 <HAL_GPIO_Init+0x310>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d019      	beq.n	8004152 <HAL_GPIO_Init+0x212>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4c      	ldr	r2, [pc, #304]	; (8004254 <HAL_GPIO_Init+0x314>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_GPIO_Init+0x20e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4b      	ldr	r2, [pc, #300]	; (8004258 <HAL_GPIO_Init+0x318>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00d      	beq.n	800414a <HAL_GPIO_Init+0x20a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_GPIO_Init+0x31c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <HAL_GPIO_Init+0x206>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a49      	ldr	r2, [pc, #292]	; (8004260 <HAL_GPIO_Init+0x320>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <HAL_GPIO_Init+0x202>
 800413e:	2306      	movs	r3, #6
 8004140:	e00c      	b.n	800415c <HAL_GPIO_Init+0x21c>
 8004142:	2307      	movs	r3, #7
 8004144:	e00a      	b.n	800415c <HAL_GPIO_Init+0x21c>
 8004146:	2305      	movs	r3, #5
 8004148:	e008      	b.n	800415c <HAL_GPIO_Init+0x21c>
 800414a:	2304      	movs	r3, #4
 800414c:	e006      	b.n	800415c <HAL_GPIO_Init+0x21c>
 800414e:	2303      	movs	r3, #3
 8004150:	e004      	b.n	800415c <HAL_GPIO_Init+0x21c>
 8004152:	2302      	movs	r3, #2
 8004154:	e002      	b.n	800415c <HAL_GPIO_Init+0x21c>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_GPIO_Init+0x21c>
 800415a:	2300      	movs	r3, #0
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	f002 0203 	and.w	r2, r2, #3
 8004162:	0092      	lsls	r2, r2, #2
 8004164:	4093      	lsls	r3, r2
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800416c:	4935      	ldr	r1, [pc, #212]	; (8004244 <HAL_GPIO_Init+0x304>)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	3302      	adds	r3, #2
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800417a:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_GPIO_Init+0x324>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800419e:	4a31      	ldr	r2, [pc, #196]	; (8004264 <HAL_GPIO_Init+0x324>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_GPIO_Init+0x324>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041c8:	4a26      	ldr	r2, [pc, #152]	; (8004264 <HAL_GPIO_Init+0x324>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ce:	4b25      	ldr	r3, [pc, #148]	; (8004264 <HAL_GPIO_Init+0x324>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041f2:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <HAL_GPIO_Init+0x324>)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041f8:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_GPIO_Init+0x324>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800421c:	4a11      	ldr	r2, [pc, #68]	; (8004264 <HAL_GPIO_Init+0x324>)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3301      	adds	r3, #1
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	f67f ae96 	bls.w	8003f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3724      	adds	r7, #36	; 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800
 8004244:	40013800 	.word	0x40013800
 8004248:	40020000 	.word	0x40020000
 800424c:	40020400 	.word	0x40020400
 8004250:	40020800 	.word	0x40020800
 8004254:	40020c00 	.word	0x40020c00
 8004258:	40021000 	.word	0x40021000
 800425c:	40021400 	.word	0x40021400
 8004260:	40021800 	.word	0x40021800
 8004264:	40013c00 	.word	0x40013c00

08004268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
 8004274:	4613      	mov	r3, r2
 8004276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004284:	e003      	b.n	800428e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b4:	6413      	str	r3, [r2, #64]	; 0x40
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_PWREx_EnableOverDrive+0x90>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042c2:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_PWREx_EnableOverDrive+0x94>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042c8:	f7ff fc66 	bl	8003b98 <HAL_GetTick>
 80042cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ce:	e009      	b.n	80042e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d0:	f7ff fc62 	bl	8003b98 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042de:	d901      	bls.n	80042e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e01f      	b.n	8004324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d1ee      	bne.n	80042d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042f8:	f7ff fc4e 	bl	8003b98 <HAL_GetTick>
 80042fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042fe:	e009      	b.n	8004314 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004300:	f7ff fc4a 	bl	8003b98 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430e:	d901      	bls.n	8004314 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e007      	b.n	8004324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_PWREx_EnableOverDrive+0x98>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004320:	d1ee      	bne.n	8004300 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	420e0040 	.word	0x420e0040
 8004334:	40007000 	.word	0x40007000
 8004338:	420e0044 	.word	0x420e0044

0800433c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0cc      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d90c      	bls.n	8004378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0b8      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004390:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a58      	ldr	r2, [pc, #352]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a8:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	494d      	ldr	r1, [pc, #308]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d044      	beq.n	800445c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d119      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e06f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e067      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4934      	ldr	r1, [pc, #208]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800442c:	f7ff fbb4 	bl	8003b98 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7ff fbb0 	bl	8003b98 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e04f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d20c      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e032      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4916      	ldr	r1, [pc, #88]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	490e      	ldr	r1, [pc, #56]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c2:	f000 f855 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 80044c6:	4602      	mov	r2, r0
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	490a      	ldr	r1, [pc, #40]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	5ccb      	ldrb	r3, [r1, r3]
 80044d6:	fa22 f303 	lsr.w	r3, r2, r3
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fb14 	bl	8003b10 <HAL_InitTick>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023c00 	.word	0x40023c00
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0800b6b0 	.word	0x0800b6b0
 8004500:	20000000 	.word	0x20000000
 8004504:	20000004 	.word	0x20000004

08004508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <HAL_RCC_GetHCLKFreq+0x14>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000000 	.word	0x20000000

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004524:	f7ff fff0 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40023800 	.word	0x40023800
 8004544:	0800b6c0 	.word	0x0800b6c0

08004548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800454c:	f7ff ffdc 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0b5b      	lsrs	r3, r3, #13
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	; (800456c <HAL_RCC_GetPCLK2Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40023800 	.word	0x40023800
 800456c:	0800b6c0 	.word	0x0800b6c0

08004570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004574:	b088      	sub	sp, #32
 8004576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800458c:	4bce      	ldr	r3, [pc, #824]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b0c      	cmp	r3, #12
 8004596:	f200 818d 	bhi.w	80048b4 <HAL_RCC_GetSysClockFreq+0x344>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <HAL_RCC_GetSysClockFreq+0x30>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045d5 	.word	0x080045d5
 80045a4:	080048b5 	.word	0x080048b5
 80045a8:	080048b5 	.word	0x080048b5
 80045ac:	080048b5 	.word	0x080048b5
 80045b0:	080045db 	.word	0x080045db
 80045b4:	080048b5 	.word	0x080048b5
 80045b8:	080048b5 	.word	0x080048b5
 80045bc:	080048b5 	.word	0x080048b5
 80045c0:	080045e1 	.word	0x080045e1
 80045c4:	080048b5 	.word	0x080048b5
 80045c8:	080048b5 	.word	0x080048b5
 80045cc:	080048b5 	.word	0x080048b5
 80045d0:	08004755 	.word	0x08004755
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d4:	4bbd      	ldr	r3, [pc, #756]	; (80048cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80045d6:	61bb      	str	r3, [r7, #24]
       break;
 80045d8:	e16f      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045da:	4bbd      	ldr	r3, [pc, #756]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x360>)
 80045dc:	61bb      	str	r3, [r7, #24]
      break;
 80045de:	e16c      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e0:	4bb9      	ldr	r3, [pc, #740]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ea:	4bb7      	ldr	r3, [pc, #732]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d053      	beq.n	800469e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f6:	4bb4      	ldr	r3, [pc, #720]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	461a      	mov	r2, r3
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	ea02 0400 	and.w	r4, r2, r0
 800460e:	603c      	str	r4, [r7, #0]
 8004610:	400b      	ands	r3, r1
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004618:	4620      	mov	r0, r4
 800461a:	4629      	mov	r1, r5
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	014b      	lsls	r3, r1, #5
 8004626:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800462a:	0142      	lsls	r2, r0, #5
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	4623      	mov	r3, r4
 8004632:	1ac0      	subs	r0, r0, r3
 8004634:	462b      	mov	r3, r5
 8004636:	eb61 0103 	sbc.w	r1, r1, r3
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	018b      	lsls	r3, r1, #6
 8004644:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004648:	0182      	lsls	r2, r0, #6
 800464a:	1a12      	subs	r2, r2, r0
 800464c:	eb63 0301 	sbc.w	r3, r3, r1
 8004650:	f04f 0000 	mov.w	r0, #0
 8004654:	f04f 0100 	mov.w	r1, #0
 8004658:	00d9      	lsls	r1, r3, #3
 800465a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800465e:	00d0      	lsls	r0, r2, #3
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4621      	mov	r1, r4
 8004666:	1852      	adds	r2, r2, r1
 8004668:	4629      	mov	r1, r5
 800466a:	eb43 0101 	adc.w	r1, r3, r1
 800466e:	460b      	mov	r3, r1
 8004670:	f04f 0000 	mov.w	r0, #0
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	0259      	lsls	r1, r3, #9
 800467a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800467e:	0250      	lsls	r0, r2, #9
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	461a      	mov	r2, r3
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	f7fc fafa 	bl	8000c88 <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4613      	mov	r3, r2
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	e04c      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469e:	4b8a      	ldr	r3, [pc, #552]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	461a      	mov	r2, r3
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	ea02 0a00 	and.w	sl, r2, r0
 80046b6:	ea03 0b01 	and.w	fp, r3, r1
 80046ba:	4650      	mov	r0, sl
 80046bc:	4659      	mov	r1, fp
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	014b      	lsls	r3, r1, #5
 80046c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046cc:	0142      	lsls	r2, r0, #5
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	ebb0 000a 	subs.w	r0, r0, sl
 80046d6:	eb61 010b 	sbc.w	r1, r1, fp
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	018b      	lsls	r3, r1, #6
 80046e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046e8:	0182      	lsls	r2, r0, #6
 80046ea:	1a12      	subs	r2, r2, r0
 80046ec:	eb63 0301 	sbc.w	r3, r3, r1
 80046f0:	f04f 0000 	mov.w	r0, #0
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	00d9      	lsls	r1, r3, #3
 80046fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046fe:	00d0      	lsls	r0, r2, #3
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	eb12 020a 	adds.w	r2, r2, sl
 8004708:	eb43 030b 	adc.w	r3, r3, fp
 800470c:	f04f 0000 	mov.w	r0, #0
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	0299      	lsls	r1, r3, #10
 8004716:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800471a:	0290      	lsls	r0, r2, #10
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	461a      	mov	r2, r3
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	f7fc faac 	bl	8000c88 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4613      	mov	r3, r2
 8004736:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004738:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	3301      	adds	r3, #1
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	61bb      	str	r3, [r7, #24]
      break;
 8004752:	e0b2      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004754:	4b5c      	ldr	r3, [pc, #368]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800475c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800475e:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d04d      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800476a:	4b57      	ldr	r3, [pc, #348]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	099b      	lsrs	r3, r3, #6
 8004770:	461a      	mov	r2, r3
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	f240 10ff 	movw	r0, #511	; 0x1ff
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	ea02 0800 	and.w	r8, r2, r0
 8004782:	ea03 0901 	and.w	r9, r3, r1
 8004786:	4640      	mov	r0, r8
 8004788:	4649      	mov	r1, r9
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	014b      	lsls	r3, r1, #5
 8004794:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004798:	0142      	lsls	r2, r0, #5
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	ebb0 0008 	subs.w	r0, r0, r8
 80047a2:	eb61 0109 	sbc.w	r1, r1, r9
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	018b      	lsls	r3, r1, #6
 80047b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047b4:	0182      	lsls	r2, r0, #6
 80047b6:	1a12      	subs	r2, r2, r0
 80047b8:	eb63 0301 	sbc.w	r3, r3, r1
 80047bc:	f04f 0000 	mov.w	r0, #0
 80047c0:	f04f 0100 	mov.w	r1, #0
 80047c4:	00d9      	lsls	r1, r3, #3
 80047c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047ca:	00d0      	lsls	r0, r2, #3
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	eb12 0208 	adds.w	r2, r2, r8
 80047d4:	eb43 0309 	adc.w	r3, r3, r9
 80047d8:	f04f 0000 	mov.w	r0, #0
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	0259      	lsls	r1, r3, #9
 80047e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047e6:	0250      	lsls	r0, r2, #9
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4610      	mov	r0, r2
 80047ee:	4619      	mov	r1, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	f7fc fa46 	bl	8000c88 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	e04a      	b.n	800489c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004806:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	461a      	mov	r2, r3
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004816:	f04f 0100 	mov.w	r1, #0
 800481a:	ea02 0400 	and.w	r4, r2, r0
 800481e:	ea03 0501 	and.w	r5, r3, r1
 8004822:	4620      	mov	r0, r4
 8004824:	4629      	mov	r1, r5
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	014b      	lsls	r3, r1, #5
 8004830:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004834:	0142      	lsls	r2, r0, #5
 8004836:	4610      	mov	r0, r2
 8004838:	4619      	mov	r1, r3
 800483a:	1b00      	subs	r0, r0, r4
 800483c:	eb61 0105 	sbc.w	r1, r1, r5
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	018b      	lsls	r3, r1, #6
 800484a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800484e:	0182      	lsls	r2, r0, #6
 8004850:	1a12      	subs	r2, r2, r0
 8004852:	eb63 0301 	sbc.w	r3, r3, r1
 8004856:	f04f 0000 	mov.w	r0, #0
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	00d9      	lsls	r1, r3, #3
 8004860:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004864:	00d0      	lsls	r0, r2, #3
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	1912      	adds	r2, r2, r4
 800486c:	eb45 0303 	adc.w	r3, r5, r3
 8004870:	f04f 0000 	mov.w	r0, #0
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	0299      	lsls	r1, r3, #10
 800487a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800487e:	0290      	lsls	r0, r2, #10
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	461a      	mov	r2, r3
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	f7fc f9fa 	bl	8000c88 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4613      	mov	r3, r2
 800489a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x358>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0f1b      	lsrs	r3, r3, #28
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	61bb      	str	r3, [r7, #24]
      break;
 80048b2:	e002      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80048b6:	61bb      	str	r3, [r7, #24]
      break;
 80048b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ba:	69bb      	ldr	r3, [r7, #24]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	007a1200 	.word	0x007a1200

080048d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e28d      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 8083 	beq.w	80049fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048f4:	4b94      	ldr	r3, [pc, #592]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d019      	beq.n	8004934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004900:	4b91      	ldr	r3, [pc, #580]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004908:	2b08      	cmp	r3, #8
 800490a:	d106      	bne.n	800491a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800490c:	4b8e      	ldr	r3, [pc, #568]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004918:	d00c      	beq.n	8004934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800491a:	4b8b      	ldr	r3, [pc, #556]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004922:	2b0c      	cmp	r3, #12
 8004924:	d112      	bne.n	800494c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004932:	d10b      	bne.n	800494c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	4b84      	ldr	r3, [pc, #528]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d05b      	beq.n	80049f8 <HAL_RCC_OscConfig+0x124>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d157      	bne.n	80049f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e25a      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d106      	bne.n	8004964 <HAL_RCC_OscConfig+0x90>
 8004956:	4b7c      	ldr	r3, [pc, #496]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a7b      	ldr	r2, [pc, #492]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e01d      	b.n	80049a0 <HAL_RCC_OscConfig+0xcc>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800496c:	d10c      	bne.n	8004988 <HAL_RCC_OscConfig+0xb4>
 800496e:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a75      	ldr	r2, [pc, #468]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b73      	ldr	r3, [pc, #460]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a72      	ldr	r2, [pc, #456]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e00b      	b.n	80049a0 <HAL_RCC_OscConfig+0xcc>
 8004988:	4b6f      	ldr	r3, [pc, #444]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a6e      	ldr	r2, [pc, #440]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 800498e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b6c      	ldr	r3, [pc, #432]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a6b      	ldr	r2, [pc, #428]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 800499a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d013      	beq.n	80049d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7ff f8f6 	bl	8003b98 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b0:	f7ff f8f2 	bl	8003b98 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e21f      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	4b61      	ldr	r3, [pc, #388]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0xdc>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7ff f8e2 	bl	8003b98 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d8:	f7ff f8de 	bl	8003b98 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e20b      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ea:	4b57      	ldr	r3, [pc, #348]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x104>
 80049f6:	e000      	b.n	80049fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d06f      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a06:	4b50      	ldr	r3, [pc, #320]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d017      	beq.n	8004a42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a12:	4b4d      	ldr	r3, [pc, #308]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d105      	bne.n	8004a2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a1e:	4b4a      	ldr	r3, [pc, #296]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b47      	ldr	r3, [pc, #284]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d11c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a36:	4b44      	ldr	r3, [pc, #272]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d116      	bne.n	8004a70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a42:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_RCC_OscConfig+0x186>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e1d3      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4937      	ldr	r1, [pc, #220]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6e:	e03a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d020      	beq.n	8004aba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a78:	4b34      	ldr	r3, [pc, #208]	; (8004b4c <HAL_RCC_OscConfig+0x278>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7ff f88b 	bl	8003b98 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a86:	f7ff f887 	bl	8003b98 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e1b4      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a98:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4925      	ldr	r1, [pc, #148]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]
 8004ab8:	e015      	b.n	8004ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aba:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_RCC_OscConfig+0x278>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7ff f86a 	bl	8003b98 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac8:	f7ff f866 	bl	8003b98 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e193      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d036      	beq.n	8004b60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b00:	f7ff f84a 	bl	8003b98 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b08:	f7ff f846 	bl	8003b98 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e173      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x234>
 8004b26:	e01b      	b.n	8004b60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2e:	f7ff f833 	bl	8003b98 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b34:	e00e      	b.n	8004b54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b36:	f7ff f82f 	bl	8003b98 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d907      	bls.n	8004b54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e15c      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	42470000 	.word	0x42470000
 8004b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b54:	4b8a      	ldr	r3, [pc, #552]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ea      	bne.n	8004b36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8097 	beq.w	8004c9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b72:	4b83      	ldr	r3, [pc, #524]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10f      	bne.n	8004b9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	4b7f      	ldr	r3, [pc, #508]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a7e      	ldr	r2, [pc, #504]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8e:	4b7c      	ldr	r3, [pc, #496]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9e:	4b79      	ldr	r3, [pc, #484]	; (8004d84 <HAL_RCC_OscConfig+0x4b0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d118      	bne.n	8004bdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004baa:	4b76      	ldr	r3, [pc, #472]	; (8004d84 <HAL_RCC_OscConfig+0x4b0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a75      	ldr	r2, [pc, #468]	; (8004d84 <HAL_RCC_OscConfig+0x4b0>)
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb6:	f7fe ffef 	bl	8003b98 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbe:	f7fe ffeb 	bl	8003b98 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e118      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	4b6c      	ldr	r3, [pc, #432]	; (8004d84 <HAL_RCC_OscConfig+0x4b0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x31e>
 8004be4:	4b66      	ldr	r3, [pc, #408]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a65      	ldr	r2, [pc, #404]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf0:	e01c      	b.n	8004c2c <HAL_RCC_OscConfig+0x358>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x340>
 8004bfa:	4b61      	ldr	r3, [pc, #388]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a60      	ldr	r2, [pc, #384]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c00:	f043 0304 	orr.w	r3, r3, #4
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70
 8004c06:	4b5e      	ldr	r3, [pc, #376]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a5d      	ldr	r2, [pc, #372]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6713      	str	r3, [r2, #112]	; 0x70
 8004c12:	e00b      	b.n	8004c2c <HAL_RCC_OscConfig+0x358>
 8004c14:	4b5a      	ldr	r3, [pc, #360]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a59      	ldr	r2, [pc, #356]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a56      	ldr	r2, [pc, #344]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c26:	f023 0304 	bic.w	r3, r3, #4
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d015      	beq.n	8004c60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fe ffb0 	bl	8003b98 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c3c:	f7fe ffac 	bl	8003b98 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e0d7      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c52:	4b4b      	ldr	r3, [pc, #300]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ee      	beq.n	8004c3c <HAL_RCC_OscConfig+0x368>
 8004c5e:	e014      	b.n	8004c8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fe ff9a 	bl	8003b98 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fe ff96 	bl	8003b98 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0c1      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7e:	4b40      	ldr	r3, [pc, #256]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1ee      	bne.n	8004c68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d105      	bne.n	8004c9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c90:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	4a3a      	ldr	r2, [pc, #232]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80ad 	beq.w	8004e00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ca6:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d060      	beq.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d145      	bne.n	8004d46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cba:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <HAL_RCC_OscConfig+0x4b4>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fe ff6a 	bl	8003b98 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fe ff66 	bl	8003b98 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e093      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cda:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	061b      	lsls	r3, r3, #24
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	071b      	lsls	r3, r3, #28
 8004d12:	491b      	ldr	r1, [pc, #108]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x4b4>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1e:	f7fe ff3b 	bl	8003b98 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d26:	f7fe ff37 	bl	8003b98 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e064      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x452>
 8004d44:	e05c      	b.n	8004e00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <HAL_RCC_OscConfig+0x4b4>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fe ff24 	bl	8003b98 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fe ff20 	bl	8003b98 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e04d      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCC_OscConfig+0x4ac>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x480>
 8004d72:	e045      	b.n	8004e00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e040      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40007000 	.word	0x40007000
 8004d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_RCC_OscConfig+0x538>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d030      	beq.n	8004dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d129      	bne.n	8004dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d122      	bne.n	8004dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d119      	bne.n	8004dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d10f      	bne.n	8004dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800

08004e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e041      	b.n	8004ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fe fc16 	bl	8003668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 fd92 	bl	8005978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d001      	beq.n	8004ec8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e046      	b.n	8004f56 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a23      	ldr	r2, [pc, #140]	; (8004f64 <HAL_TIM_Base_Start+0xb4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d022      	beq.n	8004f20 <HAL_TIM_Base_Start+0x70>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee2:	d01d      	beq.n	8004f20 <HAL_TIM_Base_Start+0x70>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <HAL_TIM_Base_Start+0xb8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d018      	beq.n	8004f20 <HAL_TIM_Base_Start+0x70>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <HAL_TIM_Base_Start+0xbc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <HAL_TIM_Base_Start+0x70>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <HAL_TIM_Base_Start+0xc0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <HAL_TIM_Base_Start+0x70>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <HAL_TIM_Base_Start+0xc4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_TIM_Base_Start+0x70>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <HAL_TIM_Base_Start+0xc8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_TIM_Base_Start+0x70>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_TIM_Base_Start+0xcc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b06      	cmp	r3, #6
 8004f30:	d010      	beq.n	8004f54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	e007      	b.n	8004f54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40001800 	.word	0x40001800

08004f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d001      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e04e      	b.n	8005036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d01d      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_TIM_Base_Start_IT+0xcc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	; (8005058 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d111      	bne.n	8005024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d010      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	e007      	b.n	8005034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40001800 	.word	0x40001800

08005060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e041      	b.n	80050f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f839 	bl	80050fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f000 fc6a 	bl	8005978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <HAL_TIM_PWM_Start+0x24>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e022      	b.n	800517e <HAL_TIM_PWM_Start+0x6a>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b04      	cmp	r3, #4
 800513c:	d109      	bne.n	8005152 <HAL_TIM_PWM_Start+0x3e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e015      	b.n	800517e <HAL_TIM_PWM_Start+0x6a>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d109      	bne.n	800516c <HAL_TIM_PWM_Start+0x58>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e008      	b.n	800517e <HAL_TIM_PWM_Start+0x6a>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e07c      	b.n	8005280 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0x82>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005194:	e013      	b.n	80051be <HAL_TIM_PWM_Start+0xaa>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0x92>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a4:	e00b      	b.n	80051be <HAL_TIM_PWM_Start+0xaa>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start+0xa2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b4:	e003      	b.n	80051be <HAL_TIM_PWM_Start+0xaa>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fec0 	bl	8005f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2d      	ldr	r2, [pc, #180]	; (8005288 <HAL_TIM_PWM_Start+0x174>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_PWM_Start+0xcc>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a2c      	ldr	r2, [pc, #176]	; (800528c <HAL_TIM_PWM_Start+0x178>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d101      	bne.n	80051e4 <HAL_TIM_PWM_Start+0xd0>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <HAL_TIM_PWM_Start+0xd2>
 80051e4:	2300      	movs	r3, #0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a22      	ldr	r2, [pc, #136]	; (8005288 <HAL_TIM_PWM_Start+0x174>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d022      	beq.n	800524a <HAL_TIM_PWM_Start+0x136>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d01d      	beq.n	800524a <HAL_TIM_PWM_Start+0x136>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_TIM_PWM_Start+0x17c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d018      	beq.n	800524a <HAL_TIM_PWM_Start+0x136>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_TIM_PWM_Start+0x180>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_TIM_PWM_Start+0x136>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_TIM_PWM_Start+0x184>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_TIM_PWM_Start+0x136>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <HAL_TIM_PWM_Start+0x178>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_TIM_PWM_Start+0x136>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a18      	ldr	r2, [pc, #96]	; (800529c <HAL_TIM_PWM_Start+0x188>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_TIM_PWM_Start+0x136>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <HAL_TIM_PWM_Start+0x18c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d111      	bne.n	800526e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b06      	cmp	r3, #6
 800525a:	d010      	beq.n	800527e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526c:	e007      	b.n	800527e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40014000 	.word	0x40014000
 80052a0:	40001800 	.word	0x40001800

080052a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e097      	b.n	80053e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fe f94f 	bl	8003570 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e8:	f023 0307 	bic.w	r3, r3, #7
 80052ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3304      	adds	r3, #4
 80052f6:	4619      	mov	r1, r3
 80052f8:	4610      	mov	r0, r2
 80052fa:	f000 fb3d 	bl	8005978 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	4313      	orrs	r3, r2
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005344:	f023 030c 	bic.w	r3, r3, #12
 8005348:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	4313      	orrs	r3, r2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	011a      	lsls	r2, r3, #4
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	031b      	lsls	r3, r3, #12
 8005374:	4313      	orrs	r3, r2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	4313      	orrs	r3, r2
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b02      	cmp	r3, #2
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0202 	mvn.w	r2, #2
 800541c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa81 	bl	800593a <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa73 	bl	8005926 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fa84 	bl	800594e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b04      	cmp	r3, #4
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0204 	mvn.w	r2, #4
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa57 	bl	800593a <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa49 	bl	8005926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fa5a 	bl	800594e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0208 	mvn.w	r2, #8
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa2d 	bl	800593a <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa1f 	bl	8005926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fa30 	bl	800594e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b10      	cmp	r3, #16
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa03 	bl	800593a <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f9f5 	bl	8005926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa06 	bl	800594e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0201 	mvn.w	r2, #1
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9cf 	bl	8005912 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fdd4 	bl	8006148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d10e      	bne.n	80055cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d107      	bne.n	80055cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9cb 	bl	8005962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d10e      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d107      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0220 	mvn.w	r2, #32
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fd9e 	bl	8006134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800561a:	2302      	movs	r3, #2
 800561c:	e0ae      	b.n	800577c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b0c      	cmp	r3, #12
 800562a:	f200 809f 	bhi.w	800576c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005669 	.word	0x08005669
 8005638:	0800576d 	.word	0x0800576d
 800563c:	0800576d 	.word	0x0800576d
 8005640:	0800576d 	.word	0x0800576d
 8005644:	080056a9 	.word	0x080056a9
 8005648:	0800576d 	.word	0x0800576d
 800564c:	0800576d 	.word	0x0800576d
 8005650:	0800576d 	.word	0x0800576d
 8005654:	080056eb 	.word	0x080056eb
 8005658:	0800576d 	.word	0x0800576d
 800565c:	0800576d 	.word	0x0800576d
 8005660:	0800576d 	.word	0x0800576d
 8005664:	0800572b 	.word	0x0800572b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa22 	bl	8005ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	619a      	str	r2, [r3, #24]
      break;
 80056a6:	e064      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fa72 	bl	8005b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]
      break;
 80056e8:	e043      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fac7 	bl	8005c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0208 	orr.w	r2, r2, #8
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0204 	bic.w	r2, r2, #4
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]
      break;
 8005728:	e023      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fb1b 	bl	8005d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69d9      	ldr	r1, [r3, #28]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	021a      	lsls	r2, r3, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	61da      	str	r2, [r3, #28]
      break;
 800576a:	e002      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	75fb      	strb	r3, [r7, #23]
      break;
 8005770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_ConfigClockSource+0x1c>
 800579c:	2302      	movs	r3, #2
 800579e:	e0b4      	b.n	800590a <HAL_TIM_ConfigClockSource+0x186>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d8:	d03e      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0xd4>
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057de:	f200 8087 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	f000 8086 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x172>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d87f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b70      	cmp	r3, #112	; 0x70
 80057f2:	d01a      	beq.n	800582a <HAL_TIM_ConfigClockSource+0xa6>
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d87b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b60      	cmp	r3, #96	; 0x60
 80057fa:	d050      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x11a>
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d877      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b50      	cmp	r3, #80	; 0x50
 8005802:	d03c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xfa>
 8005804:	2b50      	cmp	r3, #80	; 0x50
 8005806:	d873      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d058      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x13a>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d86f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	d064      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x15a>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d86b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b20      	cmp	r3, #32
 800581a:	d060      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x15a>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d867      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d05c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x15a>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d05a      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x15a>
 8005828:	e062      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6899      	ldr	r1, [r3, #8]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f000 fb67 	bl	8005f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800584c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	609a      	str	r2, [r3, #8]
      break;
 8005856:	e04f      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f000 fb50 	bl	8005f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587a:	609a      	str	r2, [r3, #8]
      break;
 800587c:	e03c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	461a      	mov	r2, r3
 800588c:	f000 fac4 	bl	8005e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2150      	movs	r1, #80	; 0x50
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fb1d 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 800589c:	e02c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 fae3 	bl	8005e76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2160      	movs	r1, #96	; 0x60
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fb0d 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80058bc:	e01c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 faa4 	bl	8005e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fafd 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80058dc:	e00c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f000 faf4 	bl	8005ed6 <TIM_ITRx_SetConfig>
      break;
 80058ee:	e003      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
      break;
 80058f4:	e000      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a40      	ldr	r2, [pc, #256]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005996:	d00f      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <TIM_Base_SetConfig+0x118>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3c      	ldr	r2, [pc, #240]	; (8005a94 <TIM_Base_SetConfig+0x11c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a3b      	ldr	r2, [pc, #236]	; (8005a98 <TIM_Base_SetConfig+0x120>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3a      	ldr	r2, [pc, #232]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d108      	bne.n	80059ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2f      	ldr	r2, [pc, #188]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d02b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	d027      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2c      	ldr	r2, [pc, #176]	; (8005a90 <TIM_Base_SetConfig+0x118>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d023      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2b      	ldr	r2, [pc, #172]	; (8005a94 <TIM_Base_SetConfig+0x11c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <TIM_Base_SetConfig+0x120>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d017      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <TIM_Base_SetConfig+0x128>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <TIM_Base_SetConfig+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <TIM_Base_SetConfig+0x130>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <TIM_Base_SetConfig+0x134>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a24      	ldr	r2, [pc, #144]	; (8005ab0 <TIM_Base_SetConfig+0x138>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a23      	ldr	r2, [pc, #140]	; (8005ab4 <TIM_Base_SetConfig+0x13c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0xf8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d103      	bne.n	8005a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	615a      	str	r2, [r3, #20]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800
 8005aac:	40001800 	.word	0x40001800
 8005ab0:	40001c00 	.word	0x40001c00
 8005ab4:	40002000 	.word	0x40002000

08005ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f023 0302 	bic.w	r3, r3, #2
 8005b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a20      	ldr	r2, [pc, #128]	; (8005b90 <TIM_OC1_SetConfig+0xd8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC1_SetConfig+0x64>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a1f      	ldr	r2, [pc, #124]	; (8005b94 <TIM_OC1_SetConfig+0xdc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d10c      	bne.n	8005b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0308 	bic.w	r3, r3, #8
 8005b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f023 0304 	bic.w	r3, r3, #4
 8005b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <TIM_OC1_SetConfig+0xd8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC1_SetConfig+0x8e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <TIM_OC1_SetConfig+0xdc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d111      	bne.n	8005b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40010400 	.word	0x40010400

08005b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0210 	bic.w	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0320 	bic.w	r3, r3, #32
 8005be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <TIM_OC2_SetConfig+0xe4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC2_SetConfig+0x68>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <TIM_OC2_SetConfig+0xe8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10d      	bne.n	8005c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <TIM_OC2_SetConfig+0xe4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_OC2_SetConfig+0x94>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <TIM_OC2_SetConfig+0xe8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d113      	bne.n	8005c54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <TIM_OC3_SetConfig+0xe0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d003      	beq.n	8005cea <TIM_OC3_SetConfig+0x66>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <TIM_OC3_SetConfig+0xe4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10d      	bne.n	8005d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <TIM_OC3_SetConfig+0xe0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC3_SetConfig+0x92>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <TIM_OC3_SetConfig+0xe4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d113      	bne.n	8005d3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40010000 	.word	0x40010000
 8005d68:	40010400 	.word	0x40010400

08005d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a12      	ldr	r2, [pc, #72]	; (8005e10 <TIM_OC4_SetConfig+0xa4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x68>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a11      	ldr	r2, [pc, #68]	; (8005e14 <TIM_OC4_SetConfig+0xa8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d109      	bne.n	8005de8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	019b      	lsls	r3, r3, #6
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40010400 	.word	0x40010400

08005e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f023 0201 	bic.w	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 030a 	bic.w	r3, r3, #10
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0210 	bic.w	r2, r3, #16
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f043 0307 	orr.w	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	021a      	lsls	r2, r3, #8
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 031f 	and.w	r3, r3, #31
 8005f5e:	2201      	movs	r2, #1
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	401a      	ands	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e05a      	b.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d022      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d01d      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1d      	ldr	r2, [pc, #116]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d018      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1b      	ldr	r2, [pc, #108]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1a      	ldr	r2, [pc, #104]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a15      	ldr	r2, [pc, #84]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d10c      	bne.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	4313      	orrs	r3, r2
 800604a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40010000 	.word	0x40010000
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40010400 	.word	0x40010400
 8006088:	40014000 	.word	0x40014000
 800608c:	40001800 	.word	0x40001800

08006090 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e03d      	b.n	8006128 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e03f      	b.n	80061ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fd fbf2 	bl	800396c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2224      	movs	r2, #36	; 0x24
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800619e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fd7b 	bl	8006c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b08a      	sub	sp, #40	; 0x28
 80061fa:	af02      	add	r7, sp, #8
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	603b      	str	r3, [r7, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b20      	cmp	r3, #32
 8006214:	d17c      	bne.n	8006310 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_UART_Transmit+0x2c>
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e075      	b.n	8006312 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_UART_Transmit+0x3e>
 8006230:	2302      	movs	r3, #2
 8006232:	e06e      	b.n	8006312 <HAL_UART_Transmit+0x11c>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2221      	movs	r2, #33	; 0x21
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800624a:	f7fd fca5 	bl	8003b98 <HAL_GetTick>
 800624e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006264:	d108      	bne.n	8006278 <HAL_UART_Transmit+0x82>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	e003      	b.n	8006280 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006288:	e02a      	b.n	80062e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2200      	movs	r2, #0
 8006292:	2180      	movs	r1, #128	; 0x80
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 faf9 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e036      	b.n	8006312 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	3302      	adds	r3, #2
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	e007      	b.n	80062d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	781a      	ldrb	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	3301      	adds	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1cf      	bne.n	800628a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	2140      	movs	r1, #64	; 0x40
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fac9 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e006      	b.n	8006312 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3720      	adds	r7, #32
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b0ba      	sub	sp, #232	; 0xe8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006342:	2300      	movs	r3, #0
 8006344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800635a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10f      	bne.n	8006382 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_UART_IRQHandler+0x66>
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fbd3 	bl	8006b26 <UART_Receive_IT>
      return;
 8006380:	e256      	b.n	8006830 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 80de 	beq.w	8006548 <HAL_UART_IRQHandler+0x22c>
 800638c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 80d1 	beq.w	8006548 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <HAL_UART_IRQHandler+0xae>
 80063b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <HAL_UART_IRQHandler+0xd2>
 80063d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f043 0202 	orr.w	r2, r3, #2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00b      	beq.n	8006412 <HAL_UART_IRQHandler+0xf6>
 80063fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f043 0204 	orr.w	r2, r3, #4
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d011      	beq.n	8006442 <HAL_UART_IRQHandler+0x126>
 800641e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800642a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	f043 0208 	orr.w	r2, r3, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 81ed 	beq.w	8006826 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800644c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_UART_IRQHandler+0x14e>
 8006458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fb5e 	bl	8006b26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <HAL_UART_IRQHandler+0x17a>
 800648e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04f      	beq.n	8006536 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa66 	bl	8006968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d141      	bne.n	800652e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3314      	adds	r3, #20
 80064b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1d9      	bne.n	80064aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d013      	beq.n	8006526 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	4a7d      	ldr	r2, [pc, #500]	; (80066f8 <HAL_UART_IRQHandler+0x3dc>)
 8006504:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	4618      	mov	r0, r3
 800650c:	f7fd fcf5 	bl	8003efa <HAL_DMA_Abort_IT>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00e      	b.n	8006544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f99a 	bl	8006860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e00a      	b.n	8006544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f996 	bl	8006860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	e006      	b.n	8006544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f992 	bl	8006860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006542:	e170      	b.n	8006826 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	bf00      	nop
    return;
 8006546:	e16e      	b.n	8006826 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 814a 	bne.w	80067e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 8143 	beq.w	80067e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 813c 	beq.w	80067e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	f040 80b4 	bne.w	80066fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8140 	beq.w	800682a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b2:	429a      	cmp	r2, r3
 80065b4:	f080 8139 	bcs.w	800682a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ca:	f000 8088 	beq.w	80066de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	330c      	adds	r3, #12
 80065f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1d9      	bne.n	80065ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800662a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3314      	adds	r3, #20
 800663a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800663e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e1      	bne.n	800661a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3314      	adds	r3, #20
 800665c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3314      	adds	r3, #20
 8006676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800667a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800667c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e3      	bne.n	8006656 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ae:	f023 0310 	bic.w	r3, r3, #16
 80066b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80066c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e3      	bne.n	800669c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fd fb9e 	bl	8003e1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f8c0 	bl	8006874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066f4:	e099      	b.n	800682a <HAL_UART_IRQHandler+0x50e>
 80066f6:	bf00      	nop
 80066f8:	08006a2f 	.word	0x08006a2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006704:	b29b      	uxth	r3, r3
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 808b 	beq.w	800682e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8086 	beq.w	800682e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	330c      	adds	r3, #12
 8006728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006746:	647a      	str	r2, [r7, #68]	; 0x44
 8006748:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800674c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e3      	bne.n	8006722 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	623b      	str	r3, [r7, #32]
   return(result);
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3314      	adds	r3, #20
 800677a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800677e:	633a      	str	r2, [r7, #48]	; 0x30
 8006780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e3      	bne.n	800675a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0310 	bic.w	r3, r3, #16
 80067b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	330c      	adds	r3, #12
 80067c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067c4:	61fa      	str	r2, [r7, #28]
 80067c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	69b9      	ldr	r1, [r7, #24]
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	617b      	str	r3, [r7, #20]
   return(result);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e3      	bne.n	80067a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f848 	bl	8006874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067e4:	e023      	b.n	800682e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <HAL_UART_IRQHandler+0x4ea>
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f929 	bl	8006a56 <UART_Transmit_IT>
    return;
 8006804:	e014      	b.n	8006830 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00e      	beq.n	8006830 <HAL_UART_IRQHandler+0x514>
 8006812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d008      	beq.n	8006830 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f969 	bl	8006af6 <UART_EndTransmit_IT>
    return;
 8006824:	e004      	b.n	8006830 <HAL_UART_IRQHandler+0x514>
    return;
 8006826:	bf00      	nop
 8006828:	e002      	b.n	8006830 <HAL_UART_IRQHandler+0x514>
      return;
 800682a:	bf00      	nop
 800682c:	e000      	b.n	8006830 <HAL_UART_IRQHandler+0x514>
      return;
 800682e:	bf00      	nop
  }
}
 8006830:	37e8      	adds	r7, #232	; 0xe8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop

08006838 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b090      	sub	sp, #64	; 0x40
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689c:	e050      	b.n	8006940 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a4:	d04c      	beq.n	8006940 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <UART_WaitOnFlagUntilTimeout+0x30>
 80068ac:	f7fd f974 	bl	8003b98 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d241      	bcs.n	8006940 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068dc:	637a      	str	r2, [r7, #52]	; 0x34
 80068de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e5      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3314      	adds	r3, #20
 80068f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f023 0301 	bic.w	r3, r3, #1
 8006906:	63bb      	str	r3, [r7, #56]	; 0x38
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3314      	adds	r3, #20
 800690e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006910:	623a      	str	r2, [r7, #32]
 8006912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	69f9      	ldr	r1, [r7, #28]
 8006916:	6a3a      	ldr	r2, [r7, #32]
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	61bb      	str	r3, [r7, #24]
   return(result);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e5      	bne.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e00f      	b.n	8006960 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	4013      	ands	r3, r2
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	bf0c      	ite	eq
 8006950:	2301      	moveq	r3, #1
 8006952:	2300      	movne	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	461a      	mov	r2, r3
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	429a      	cmp	r2, r3
 800695c:	d09f      	beq.n	800689e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3740      	adds	r7, #64	; 0x40
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006968:	b480      	push	{r7}
 800696a:	b095      	sub	sp, #84	; 0x54
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	330c      	adds	r3, #12
 8006976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006990:	643a      	str	r2, [r7, #64]	; 0x40
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e5      	bne.n	8006970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3314      	adds	r3, #20
 80069aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3314      	adds	r3, #20
 80069c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e5      	bne.n	80069a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d119      	bne.n	8006a14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	330c      	adds	r3, #12
 80069e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f023 0310 	bic.w	r3, r3, #16
 80069f6:	647b      	str	r3, [r7, #68]	; 0x44
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	330c      	adds	r3, #12
 80069fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a00:	61ba      	str	r2, [r7, #24]
 8006a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6979      	ldr	r1, [r7, #20]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e5      	bne.n	80069e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a22:	bf00      	nop
 8006a24:	3754      	adds	r7, #84	; 0x54
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7ff ff09 	bl	8006860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b21      	cmp	r3, #33	; 0x21
 8006a68:	d13e      	bne.n	8006ae8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	d114      	bne.n	8006a9e <UART_Transmit_IT+0x48>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d110      	bne.n	8006a9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	1c9a      	adds	r2, r3, #2
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	621a      	str	r2, [r3, #32]
 8006a9c:	e008      	b.n	8006ab0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	1c59      	adds	r1, r3, #1
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6211      	str	r1, [r2, #32]
 8006aa8:	781a      	ldrb	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4619      	mov	r1, r3
 8006abe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10f      	bne.n	8006ae4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e000      	b.n	8006aea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff fe8e 	bl	8006838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b08c      	sub	sp, #48	; 0x30
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b22      	cmp	r3, #34	; 0x22
 8006b38:	f040 80ab 	bne.w	8006c92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b44:	d117      	bne.n	8006b76 <UART_Receive_IT+0x50>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d113      	bne.n	8006b76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	1c9a      	adds	r2, r3, #2
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28
 8006b74:	e026      	b.n	8006bc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b88:	d007      	beq.n	8006b9a <UART_Receive_IT+0x74>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <UART_Receive_IT+0x82>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	e008      	b.n	8006bba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d15a      	bne.n	8006c8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0220 	bic.w	r2, r2, #32
 8006be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d135      	bne.n	8006c84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f023 0310 	bic.w	r3, r3, #16
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3e:	623a      	str	r2, [r7, #32]
 8006c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	69f9      	ldr	r1, [r7, #28]
 8006c44:	6a3a      	ldr	r2, [r7, #32]
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d10a      	bne.n	8006c76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff fdf9 	bl	8006874 <HAL_UARTEx_RxEventCallback>
 8006c82:	e002      	b.n	8006c8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff fde1 	bl	800684c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e002      	b.n	8006c94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e000      	b.n	8006c94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
  }
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3730      	adds	r7, #48	; 0x30
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	b09f      	sub	sp, #124	; 0x7c
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb2:	68d9      	ldr	r1, [r3, #12]
 8006cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	ea40 0301 	orr.w	r3, r0, r1
 8006cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ce0:	f021 010c 	bic.w	r1, r1, #12
 8006ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cea:	430b      	orrs	r3, r1
 8006cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfa:	6999      	ldr	r1, [r3, #24]
 8006cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	ea40 0301 	orr.w	r3, r0, r1
 8006d04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4bc5      	ldr	r3, [pc, #788]	; (8007020 <UART_SetConfig+0x384>)
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d004      	beq.n	8006d1a <UART_SetConfig+0x7e>
 8006d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	4bc3      	ldr	r3, [pc, #780]	; (8007024 <UART_SetConfig+0x388>)
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d103      	bne.n	8006d22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d1a:	f7fd fc15 	bl	8004548 <HAL_RCC_GetPCLK2Freq>
 8006d1e:	6778      	str	r0, [r7, #116]	; 0x74
 8006d20:	e002      	b.n	8006d28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d22:	f7fd fbfd 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8006d26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d30:	f040 80b6 	bne.w	8006ea0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d36:	461c      	mov	r4, r3
 8006d38:	f04f 0500 	mov.w	r5, #0
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	462b      	mov	r3, r5
 8006d40:	1891      	adds	r1, r2, r2
 8006d42:	6439      	str	r1, [r7, #64]	; 0x40
 8006d44:	415b      	adcs	r3, r3
 8006d46:	647b      	str	r3, [r7, #68]	; 0x44
 8006d48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d4c:	1912      	adds	r2, r2, r4
 8006d4e:	eb45 0303 	adc.w	r3, r5, r3
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f04f 0100 	mov.w	r1, #0
 8006d5a:	00d9      	lsls	r1, r3, #3
 8006d5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d60:	00d0      	lsls	r0, r2, #3
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	1911      	adds	r1, r2, r4
 8006d68:	6639      	str	r1, [r7, #96]	; 0x60
 8006d6a:	416b      	adcs	r3, r5
 8006d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	1891      	adds	r1, r2, r2
 8006d7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d7c:	415b      	adcs	r3, r3
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d88:	f7f9 ff7e 	bl	8000c88 <__aeabi_uldivmod>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4ba5      	ldr	r3, [pc, #660]	; (8007028 <UART_SetConfig+0x38c>)
 8006d92:	fba3 2302 	umull	r2, r3, r3, r2
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	011e      	lsls	r6, r3, #4
 8006d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d9c:	461c      	mov	r4, r3
 8006d9e:	f04f 0500 	mov.w	r5, #0
 8006da2:	4622      	mov	r2, r4
 8006da4:	462b      	mov	r3, r5
 8006da6:	1891      	adds	r1, r2, r2
 8006da8:	6339      	str	r1, [r7, #48]	; 0x30
 8006daa:	415b      	adcs	r3, r3
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
 8006dae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006db2:	1912      	adds	r2, r2, r4
 8006db4:	eb45 0303 	adc.w	r3, r5, r3
 8006db8:	f04f 0000 	mov.w	r0, #0
 8006dbc:	f04f 0100 	mov.w	r1, #0
 8006dc0:	00d9      	lsls	r1, r3, #3
 8006dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dc6:	00d0      	lsls	r0, r2, #3
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	1911      	adds	r1, r2, r4
 8006dce:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dd0:	416b      	adcs	r3, r5
 8006dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	1891      	adds	r1, r2, r2
 8006de0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006de2:	415b      	adcs	r3, r3
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006dee:	f7f9 ff4b 	bl	8000c88 <__aeabi_uldivmod>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4b8c      	ldr	r3, [pc, #560]	; (8007028 <UART_SetConfig+0x38c>)
 8006df8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	2164      	movs	r1, #100	; 0x64
 8006e00:	fb01 f303 	mul.w	r3, r1, r3
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	3332      	adds	r3, #50	; 0x32
 8006e0a:	4a87      	ldr	r2, [pc, #540]	; (8007028 <UART_SetConfig+0x38c>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e18:	441e      	add	r6, r3
 8006e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f04f 0100 	mov.w	r1, #0
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	1894      	adds	r4, r2, r2
 8006e28:	623c      	str	r4, [r7, #32]
 8006e2a:	415b      	adcs	r3, r3
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e32:	1812      	adds	r2, r2, r0
 8006e34:	eb41 0303 	adc.w	r3, r1, r3
 8006e38:	f04f 0400 	mov.w	r4, #0
 8006e3c:	f04f 0500 	mov.w	r5, #0
 8006e40:	00dd      	lsls	r5, r3, #3
 8006e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e46:	00d4      	lsls	r4, r2, #3
 8006e48:	4622      	mov	r2, r4
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	1814      	adds	r4, r2, r0
 8006e4e:	653c      	str	r4, [r7, #80]	; 0x50
 8006e50:	414b      	adcs	r3, r1
 8006e52:	657b      	str	r3, [r7, #84]	; 0x54
 8006e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	1891      	adds	r1, r2, r2
 8006e60:	61b9      	str	r1, [r7, #24]
 8006e62:	415b      	adcs	r3, r3
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e6e:	f7f9 ff0b 	bl	8000c88 <__aeabi_uldivmod>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4b6c      	ldr	r3, [pc, #432]	; (8007028 <UART_SetConfig+0x38c>)
 8006e78:	fba3 1302 	umull	r1, r3, r3, r2
 8006e7c:	095b      	lsrs	r3, r3, #5
 8006e7e:	2164      	movs	r1, #100	; 0x64
 8006e80:	fb01 f303 	mul.w	r3, r1, r3
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	3332      	adds	r3, #50	; 0x32
 8006e8a:	4a67      	ldr	r2, [pc, #412]	; (8007028 <UART_SetConfig+0x38c>)
 8006e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	f003 0207 	and.w	r2, r3, #7
 8006e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4432      	add	r2, r6
 8006e9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e9e:	e0b9      	b.n	8007014 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea2:	461c      	mov	r4, r3
 8006ea4:	f04f 0500 	mov.w	r5, #0
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	462b      	mov	r3, r5
 8006eac:	1891      	adds	r1, r2, r2
 8006eae:	6139      	str	r1, [r7, #16]
 8006eb0:	415b      	adcs	r3, r3
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006eb8:	1912      	adds	r2, r2, r4
 8006eba:	eb45 0303 	adc.w	r3, r5, r3
 8006ebe:	f04f 0000 	mov.w	r0, #0
 8006ec2:	f04f 0100 	mov.w	r1, #0
 8006ec6:	00d9      	lsls	r1, r3, #3
 8006ec8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ecc:	00d0      	lsls	r0, r2, #3
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	eb12 0804 	adds.w	r8, r2, r4
 8006ed6:	eb43 0905 	adc.w	r9, r3, r5
 8006eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f04f 0100 	mov.w	r1, #0
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	008b      	lsls	r3, r1, #2
 8006eee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ef2:	0082      	lsls	r2, r0, #2
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 fec6 	bl	8000c88 <__aeabi_uldivmod>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4b49      	ldr	r3, [pc, #292]	; (8007028 <UART_SetConfig+0x38c>)
 8006f02:	fba3 2302 	umull	r2, r3, r3, r2
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	011e      	lsls	r6, r3, #4
 8006f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f04f 0100 	mov.w	r1, #0
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	1894      	adds	r4, r2, r2
 8006f18:	60bc      	str	r4, [r7, #8]
 8006f1a:	415b      	adcs	r3, r3
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f22:	1812      	adds	r2, r2, r0
 8006f24:	eb41 0303 	adc.w	r3, r1, r3
 8006f28:	f04f 0400 	mov.w	r4, #0
 8006f2c:	f04f 0500 	mov.w	r5, #0
 8006f30:	00dd      	lsls	r5, r3, #3
 8006f32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f36:	00d4      	lsls	r4, r2, #3
 8006f38:	4622      	mov	r2, r4
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	1814      	adds	r4, r2, r0
 8006f3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f40:	414b      	adcs	r3, r1
 8006f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f04f 0100 	mov.w	r1, #0
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	008b      	lsls	r3, r1, #2
 8006f58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f5c:	0082      	lsls	r2, r0, #2
 8006f5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f62:	f7f9 fe91 	bl	8000c88 <__aeabi_uldivmod>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <UART_SetConfig+0x38c>)
 8006f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	2164      	movs	r1, #100	; 0x64
 8006f74:	fb01 f303 	mul.w	r3, r1, r3
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	3332      	adds	r3, #50	; 0x32
 8006f7e:	4a2a      	ldr	r2, [pc, #168]	; (8007028 <UART_SetConfig+0x38c>)
 8006f80:	fba2 2303 	umull	r2, r3, r2, r3
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f8a:	441e      	add	r6, r3
 8006f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f04f 0100 	mov.w	r1, #0
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	1894      	adds	r4, r2, r2
 8006f9a:	603c      	str	r4, [r7, #0]
 8006f9c:	415b      	adcs	r3, r3
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa4:	1812      	adds	r2, r2, r0
 8006fa6:	eb41 0303 	adc.w	r3, r1, r3
 8006faa:	f04f 0400 	mov.w	r4, #0
 8006fae:	f04f 0500 	mov.w	r5, #0
 8006fb2:	00dd      	lsls	r5, r3, #3
 8006fb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fb8:	00d4      	lsls	r4, r2, #3
 8006fba:	4622      	mov	r2, r4
 8006fbc:	462b      	mov	r3, r5
 8006fbe:	eb12 0a00 	adds.w	sl, r2, r0
 8006fc2:	eb43 0b01 	adc.w	fp, r3, r1
 8006fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f04f 0100 	mov.w	r1, #0
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	008b      	lsls	r3, r1, #2
 8006fda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fde:	0082      	lsls	r2, r0, #2
 8006fe0:	4650      	mov	r0, sl
 8006fe2:	4659      	mov	r1, fp
 8006fe4:	f7f9 fe50 	bl	8000c88 <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <UART_SetConfig+0x38c>)
 8006fee:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	2164      	movs	r1, #100	; 0x64
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	3332      	adds	r3, #50	; 0x32
 8007000:	4a09      	ldr	r2, [pc, #36]	; (8007028 <UART_SetConfig+0x38c>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	f003 020f 	and.w	r2, r3, #15
 800700c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4432      	add	r2, r6
 8007012:	609a      	str	r2, [r3, #8]
}
 8007014:	bf00      	nop
 8007016:	377c      	adds	r7, #124	; 0x7c
 8007018:	46bd      	mov	sp, r7
 800701a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701e:	bf00      	nop
 8007020:	40011000 	.word	0x40011000
 8007024:	40011400 	.word	0x40011400
 8007028:	51eb851f 	.word	0x51eb851f

0800702c <__errno>:
 800702c:	4b01      	ldr	r3, [pc, #4]	; (8007034 <__errno+0x8>)
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	2000000c 	.word	0x2000000c

08007038 <__libc_init_array>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	4d0d      	ldr	r5, [pc, #52]	; (8007070 <__libc_init_array+0x38>)
 800703c:	4c0d      	ldr	r4, [pc, #52]	; (8007074 <__libc_init_array+0x3c>)
 800703e:	1b64      	subs	r4, r4, r5
 8007040:	10a4      	asrs	r4, r4, #2
 8007042:	2600      	movs	r6, #0
 8007044:	42a6      	cmp	r6, r4
 8007046:	d109      	bne.n	800705c <__libc_init_array+0x24>
 8007048:	4d0b      	ldr	r5, [pc, #44]	; (8007078 <__libc_init_array+0x40>)
 800704a:	4c0c      	ldr	r4, [pc, #48]	; (800707c <__libc_init_array+0x44>)
 800704c:	f004 faae 	bl	800b5ac <_init>
 8007050:	1b64      	subs	r4, r4, r5
 8007052:	10a4      	asrs	r4, r4, #2
 8007054:	2600      	movs	r6, #0
 8007056:	42a6      	cmp	r6, r4
 8007058:	d105      	bne.n	8007066 <__libc_init_array+0x2e>
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007060:	4798      	blx	r3
 8007062:	3601      	adds	r6, #1
 8007064:	e7ee      	b.n	8007044 <__libc_init_array+0xc>
 8007066:	f855 3b04 	ldr.w	r3, [r5], #4
 800706a:	4798      	blx	r3
 800706c:	3601      	adds	r6, #1
 800706e:	e7f2      	b.n	8007056 <__libc_init_array+0x1e>
 8007070:	0800bd10 	.word	0x0800bd10
 8007074:	0800bd10 	.word	0x0800bd10
 8007078:	0800bd10 	.word	0x0800bd10
 800707c:	0800bd14 	.word	0x0800bd14

08007080 <malloc>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <malloc+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f000 b85b 	b.w	8007140 <_malloc_r>
 800708a:	bf00      	nop
 800708c:	2000000c 	.word	0x2000000c

08007090 <memset>:
 8007090:	4402      	add	r2, r0
 8007092:	4603      	mov	r3, r0
 8007094:	4293      	cmp	r3, r2
 8007096:	d100      	bne.n	800709a <memset+0xa>
 8007098:	4770      	bx	lr
 800709a:	f803 1b01 	strb.w	r1, [r3], #1
 800709e:	e7f9      	b.n	8007094 <memset+0x4>

080070a0 <_free_r>:
 80070a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070a2:	2900      	cmp	r1, #0
 80070a4:	d048      	beq.n	8007138 <_free_r+0x98>
 80070a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070aa:	9001      	str	r0, [sp, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f1a1 0404 	sub.w	r4, r1, #4
 80070b2:	bfb8      	it	lt
 80070b4:	18e4      	addlt	r4, r4, r3
 80070b6:	f001 ff11 	bl	8008edc <__malloc_lock>
 80070ba:	4a20      	ldr	r2, [pc, #128]	; (800713c <_free_r+0x9c>)
 80070bc:	9801      	ldr	r0, [sp, #4]
 80070be:	6813      	ldr	r3, [r2, #0]
 80070c0:	4615      	mov	r5, r2
 80070c2:	b933      	cbnz	r3, 80070d2 <_free_r+0x32>
 80070c4:	6063      	str	r3, [r4, #4]
 80070c6:	6014      	str	r4, [r2, #0]
 80070c8:	b003      	add	sp, #12
 80070ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070ce:	f001 bf0b 	b.w	8008ee8 <__malloc_unlock>
 80070d2:	42a3      	cmp	r3, r4
 80070d4:	d90b      	bls.n	80070ee <_free_r+0x4e>
 80070d6:	6821      	ldr	r1, [r4, #0]
 80070d8:	1862      	adds	r2, r4, r1
 80070da:	4293      	cmp	r3, r2
 80070dc:	bf04      	itt	eq
 80070de:	681a      	ldreq	r2, [r3, #0]
 80070e0:	685b      	ldreq	r3, [r3, #4]
 80070e2:	6063      	str	r3, [r4, #4]
 80070e4:	bf04      	itt	eq
 80070e6:	1852      	addeq	r2, r2, r1
 80070e8:	6022      	streq	r2, [r4, #0]
 80070ea:	602c      	str	r4, [r5, #0]
 80070ec:	e7ec      	b.n	80070c8 <_free_r+0x28>
 80070ee:	461a      	mov	r2, r3
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	b10b      	cbz	r3, 80070f8 <_free_r+0x58>
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	d9fa      	bls.n	80070ee <_free_r+0x4e>
 80070f8:	6811      	ldr	r1, [r2, #0]
 80070fa:	1855      	adds	r5, r2, r1
 80070fc:	42a5      	cmp	r5, r4
 80070fe:	d10b      	bne.n	8007118 <_free_r+0x78>
 8007100:	6824      	ldr	r4, [r4, #0]
 8007102:	4421      	add	r1, r4
 8007104:	1854      	adds	r4, r2, r1
 8007106:	42a3      	cmp	r3, r4
 8007108:	6011      	str	r1, [r2, #0]
 800710a:	d1dd      	bne.n	80070c8 <_free_r+0x28>
 800710c:	681c      	ldr	r4, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	6053      	str	r3, [r2, #4]
 8007112:	4421      	add	r1, r4
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	e7d7      	b.n	80070c8 <_free_r+0x28>
 8007118:	d902      	bls.n	8007120 <_free_r+0x80>
 800711a:	230c      	movs	r3, #12
 800711c:	6003      	str	r3, [r0, #0]
 800711e:	e7d3      	b.n	80070c8 <_free_r+0x28>
 8007120:	6825      	ldr	r5, [r4, #0]
 8007122:	1961      	adds	r1, r4, r5
 8007124:	428b      	cmp	r3, r1
 8007126:	bf04      	itt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	6063      	str	r3, [r4, #4]
 800712e:	bf04      	itt	eq
 8007130:	1949      	addeq	r1, r1, r5
 8007132:	6021      	streq	r1, [r4, #0]
 8007134:	6054      	str	r4, [r2, #4]
 8007136:	e7c7      	b.n	80070c8 <_free_r+0x28>
 8007138:	b003      	add	sp, #12
 800713a:	bd30      	pop	{r4, r5, pc}
 800713c:	20000200 	.word	0x20000200

08007140 <_malloc_r>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	1ccd      	adds	r5, r1, #3
 8007144:	f025 0503 	bic.w	r5, r5, #3
 8007148:	3508      	adds	r5, #8
 800714a:	2d0c      	cmp	r5, #12
 800714c:	bf38      	it	cc
 800714e:	250c      	movcc	r5, #12
 8007150:	2d00      	cmp	r5, #0
 8007152:	4606      	mov	r6, r0
 8007154:	db01      	blt.n	800715a <_malloc_r+0x1a>
 8007156:	42a9      	cmp	r1, r5
 8007158:	d903      	bls.n	8007162 <_malloc_r+0x22>
 800715a:	230c      	movs	r3, #12
 800715c:	6033      	str	r3, [r6, #0]
 800715e:	2000      	movs	r0, #0
 8007160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007162:	f001 febb 	bl	8008edc <__malloc_lock>
 8007166:	4921      	ldr	r1, [pc, #132]	; (80071ec <_malloc_r+0xac>)
 8007168:	680a      	ldr	r2, [r1, #0]
 800716a:	4614      	mov	r4, r2
 800716c:	b99c      	cbnz	r4, 8007196 <_malloc_r+0x56>
 800716e:	4f20      	ldr	r7, [pc, #128]	; (80071f0 <_malloc_r+0xb0>)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	b923      	cbnz	r3, 800717e <_malloc_r+0x3e>
 8007174:	4621      	mov	r1, r4
 8007176:	4630      	mov	r0, r6
 8007178:	f000 fd34 	bl	8007be4 <_sbrk_r>
 800717c:	6038      	str	r0, [r7, #0]
 800717e:	4629      	mov	r1, r5
 8007180:	4630      	mov	r0, r6
 8007182:	f000 fd2f 	bl	8007be4 <_sbrk_r>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d123      	bne.n	80071d2 <_malloc_r+0x92>
 800718a:	230c      	movs	r3, #12
 800718c:	6033      	str	r3, [r6, #0]
 800718e:	4630      	mov	r0, r6
 8007190:	f001 feaa 	bl	8008ee8 <__malloc_unlock>
 8007194:	e7e3      	b.n	800715e <_malloc_r+0x1e>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	1b5b      	subs	r3, r3, r5
 800719a:	d417      	bmi.n	80071cc <_malloc_r+0x8c>
 800719c:	2b0b      	cmp	r3, #11
 800719e:	d903      	bls.n	80071a8 <_malloc_r+0x68>
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	441c      	add	r4, r3
 80071a4:	6025      	str	r5, [r4, #0]
 80071a6:	e004      	b.n	80071b2 <_malloc_r+0x72>
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	42a2      	cmp	r2, r4
 80071ac:	bf0c      	ite	eq
 80071ae:	600b      	streq	r3, [r1, #0]
 80071b0:	6053      	strne	r3, [r2, #4]
 80071b2:	4630      	mov	r0, r6
 80071b4:	f001 fe98 	bl	8008ee8 <__malloc_unlock>
 80071b8:	f104 000b 	add.w	r0, r4, #11
 80071bc:	1d23      	adds	r3, r4, #4
 80071be:	f020 0007 	bic.w	r0, r0, #7
 80071c2:	1ac2      	subs	r2, r0, r3
 80071c4:	d0cc      	beq.n	8007160 <_malloc_r+0x20>
 80071c6:	1a1b      	subs	r3, r3, r0
 80071c8:	50a3      	str	r3, [r4, r2]
 80071ca:	e7c9      	b.n	8007160 <_malloc_r+0x20>
 80071cc:	4622      	mov	r2, r4
 80071ce:	6864      	ldr	r4, [r4, #4]
 80071d0:	e7cc      	b.n	800716c <_malloc_r+0x2c>
 80071d2:	1cc4      	adds	r4, r0, #3
 80071d4:	f024 0403 	bic.w	r4, r4, #3
 80071d8:	42a0      	cmp	r0, r4
 80071da:	d0e3      	beq.n	80071a4 <_malloc_r+0x64>
 80071dc:	1a21      	subs	r1, r4, r0
 80071de:	4630      	mov	r0, r6
 80071e0:	f000 fd00 	bl	8007be4 <_sbrk_r>
 80071e4:	3001      	adds	r0, #1
 80071e6:	d1dd      	bne.n	80071a4 <_malloc_r+0x64>
 80071e8:	e7cf      	b.n	800718a <_malloc_r+0x4a>
 80071ea:	bf00      	nop
 80071ec:	20000200 	.word	0x20000200
 80071f0:	20000204 	.word	0x20000204

080071f4 <__cvt>:
 80071f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	ec55 4b10 	vmov	r4, r5, d0
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	460e      	mov	r6, r1
 8007200:	4619      	mov	r1, r3
 8007202:	462b      	mov	r3, r5
 8007204:	bfbb      	ittet	lt
 8007206:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800720a:	461d      	movlt	r5, r3
 800720c:	2300      	movge	r3, #0
 800720e:	232d      	movlt	r3, #45	; 0x2d
 8007210:	700b      	strb	r3, [r1, #0]
 8007212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007214:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007218:	4691      	mov	r9, r2
 800721a:	f023 0820 	bic.w	r8, r3, #32
 800721e:	bfbc      	itt	lt
 8007220:	4622      	movlt	r2, r4
 8007222:	4614      	movlt	r4, r2
 8007224:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007228:	d005      	beq.n	8007236 <__cvt+0x42>
 800722a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800722e:	d100      	bne.n	8007232 <__cvt+0x3e>
 8007230:	3601      	adds	r6, #1
 8007232:	2102      	movs	r1, #2
 8007234:	e000      	b.n	8007238 <__cvt+0x44>
 8007236:	2103      	movs	r1, #3
 8007238:	ab03      	add	r3, sp, #12
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	ab02      	add	r3, sp, #8
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	ec45 4b10 	vmov	d0, r4, r5
 8007244:	4653      	mov	r3, sl
 8007246:	4632      	mov	r2, r6
 8007248:	f000 fe2a 	bl	8007ea0 <_dtoa_r>
 800724c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007250:	4607      	mov	r7, r0
 8007252:	d102      	bne.n	800725a <__cvt+0x66>
 8007254:	f019 0f01 	tst.w	r9, #1
 8007258:	d022      	beq.n	80072a0 <__cvt+0xac>
 800725a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800725e:	eb07 0906 	add.w	r9, r7, r6
 8007262:	d110      	bne.n	8007286 <__cvt+0x92>
 8007264:	783b      	ldrb	r3, [r7, #0]
 8007266:	2b30      	cmp	r3, #48	; 0x30
 8007268:	d10a      	bne.n	8007280 <__cvt+0x8c>
 800726a:	2200      	movs	r2, #0
 800726c:	2300      	movs	r3, #0
 800726e:	4620      	mov	r0, r4
 8007270:	4629      	mov	r1, r5
 8007272:	f7f9 fc49 	bl	8000b08 <__aeabi_dcmpeq>
 8007276:	b918      	cbnz	r0, 8007280 <__cvt+0x8c>
 8007278:	f1c6 0601 	rsb	r6, r6, #1
 800727c:	f8ca 6000 	str.w	r6, [sl]
 8007280:	f8da 3000 	ldr.w	r3, [sl]
 8007284:	4499      	add	r9, r3
 8007286:	2200      	movs	r2, #0
 8007288:	2300      	movs	r3, #0
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	f7f9 fc3b 	bl	8000b08 <__aeabi_dcmpeq>
 8007292:	b108      	cbz	r0, 8007298 <__cvt+0xa4>
 8007294:	f8cd 900c 	str.w	r9, [sp, #12]
 8007298:	2230      	movs	r2, #48	; 0x30
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	454b      	cmp	r3, r9
 800729e:	d307      	bcc.n	80072b0 <__cvt+0xbc>
 80072a0:	9b03      	ldr	r3, [sp, #12]
 80072a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072a4:	1bdb      	subs	r3, r3, r7
 80072a6:	4638      	mov	r0, r7
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	b004      	add	sp, #16
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	1c59      	adds	r1, r3, #1
 80072b2:	9103      	str	r1, [sp, #12]
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	e7f0      	b.n	800729a <__cvt+0xa6>

080072b8 <__exponent>:
 80072b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072ba:	4603      	mov	r3, r0
 80072bc:	2900      	cmp	r1, #0
 80072be:	bfb8      	it	lt
 80072c0:	4249      	neglt	r1, r1
 80072c2:	f803 2b02 	strb.w	r2, [r3], #2
 80072c6:	bfb4      	ite	lt
 80072c8:	222d      	movlt	r2, #45	; 0x2d
 80072ca:	222b      	movge	r2, #43	; 0x2b
 80072cc:	2909      	cmp	r1, #9
 80072ce:	7042      	strb	r2, [r0, #1]
 80072d0:	dd2a      	ble.n	8007328 <__exponent+0x70>
 80072d2:	f10d 0407 	add.w	r4, sp, #7
 80072d6:	46a4      	mov	ip, r4
 80072d8:	270a      	movs	r7, #10
 80072da:	46a6      	mov	lr, r4
 80072dc:	460a      	mov	r2, r1
 80072de:	fb91 f6f7 	sdiv	r6, r1, r7
 80072e2:	fb07 1516 	mls	r5, r7, r6, r1
 80072e6:	3530      	adds	r5, #48	; 0x30
 80072e8:	2a63      	cmp	r2, #99	; 0x63
 80072ea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80072ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072f2:	4631      	mov	r1, r6
 80072f4:	dcf1      	bgt.n	80072da <__exponent+0x22>
 80072f6:	3130      	adds	r1, #48	; 0x30
 80072f8:	f1ae 0502 	sub.w	r5, lr, #2
 80072fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007300:	1c44      	adds	r4, r0, #1
 8007302:	4629      	mov	r1, r5
 8007304:	4561      	cmp	r1, ip
 8007306:	d30a      	bcc.n	800731e <__exponent+0x66>
 8007308:	f10d 0209 	add.w	r2, sp, #9
 800730c:	eba2 020e 	sub.w	r2, r2, lr
 8007310:	4565      	cmp	r5, ip
 8007312:	bf88      	it	hi
 8007314:	2200      	movhi	r2, #0
 8007316:	4413      	add	r3, r2
 8007318:	1a18      	subs	r0, r3, r0
 800731a:	b003      	add	sp, #12
 800731c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007322:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007326:	e7ed      	b.n	8007304 <__exponent+0x4c>
 8007328:	2330      	movs	r3, #48	; 0x30
 800732a:	3130      	adds	r1, #48	; 0x30
 800732c:	7083      	strb	r3, [r0, #2]
 800732e:	70c1      	strb	r1, [r0, #3]
 8007330:	1d03      	adds	r3, r0, #4
 8007332:	e7f1      	b.n	8007318 <__exponent+0x60>

08007334 <_printf_float>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	ed2d 8b02 	vpush	{d8}
 800733c:	b08d      	sub	sp, #52	; 0x34
 800733e:	460c      	mov	r4, r1
 8007340:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007344:	4616      	mov	r6, r2
 8007346:	461f      	mov	r7, r3
 8007348:	4605      	mov	r5, r0
 800734a:	f001 fd4d 	bl	8008de8 <_localeconv_r>
 800734e:	f8d0 a000 	ldr.w	sl, [r0]
 8007352:	4650      	mov	r0, sl
 8007354:	f7f8 ff5c 	bl	8000210 <strlen>
 8007358:	2300      	movs	r3, #0
 800735a:	930a      	str	r3, [sp, #40]	; 0x28
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	f8d8 3000 	ldr.w	r3, [r8]
 8007364:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007368:	3307      	adds	r3, #7
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	f103 0208 	add.w	r2, r3, #8
 8007372:	f8c8 2000 	str.w	r2, [r8]
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800737e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007386:	9307      	str	r3, [sp, #28]
 8007388:	f8cd 8018 	str.w	r8, [sp, #24]
 800738c:	ee08 0a10 	vmov	s16, r0
 8007390:	4b9f      	ldr	r3, [pc, #636]	; (8007610 <_printf_float+0x2dc>)
 8007392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800739a:	f7f9 fbe7 	bl	8000b6c <__aeabi_dcmpun>
 800739e:	bb88      	cbnz	r0, 8007404 <_printf_float+0xd0>
 80073a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073a4:	4b9a      	ldr	r3, [pc, #616]	; (8007610 <_printf_float+0x2dc>)
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073aa:	f7f9 fbc1 	bl	8000b30 <__aeabi_dcmple>
 80073ae:	bb48      	cbnz	r0, 8007404 <_printf_float+0xd0>
 80073b0:	2200      	movs	r2, #0
 80073b2:	2300      	movs	r3, #0
 80073b4:	4640      	mov	r0, r8
 80073b6:	4649      	mov	r1, r9
 80073b8:	f7f9 fbb0 	bl	8000b1c <__aeabi_dcmplt>
 80073bc:	b110      	cbz	r0, 80073c4 <_printf_float+0x90>
 80073be:	232d      	movs	r3, #45	; 0x2d
 80073c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c4:	4b93      	ldr	r3, [pc, #588]	; (8007614 <_printf_float+0x2e0>)
 80073c6:	4894      	ldr	r0, [pc, #592]	; (8007618 <_printf_float+0x2e4>)
 80073c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073cc:	bf94      	ite	ls
 80073ce:	4698      	movls	r8, r3
 80073d0:	4680      	movhi	r8, r0
 80073d2:	2303      	movs	r3, #3
 80073d4:	6123      	str	r3, [r4, #16]
 80073d6:	9b05      	ldr	r3, [sp, #20]
 80073d8:	f023 0204 	bic.w	r2, r3, #4
 80073dc:	6022      	str	r2, [r4, #0]
 80073de:	f04f 0900 	mov.w	r9, #0
 80073e2:	9700      	str	r7, [sp, #0]
 80073e4:	4633      	mov	r3, r6
 80073e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80073e8:	4621      	mov	r1, r4
 80073ea:	4628      	mov	r0, r5
 80073ec:	f000 f9d8 	bl	80077a0 <_printf_common>
 80073f0:	3001      	adds	r0, #1
 80073f2:	f040 8090 	bne.w	8007516 <_printf_float+0x1e2>
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073fa:	b00d      	add	sp, #52	; 0x34
 80073fc:	ecbd 8b02 	vpop	{d8}
 8007400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007404:	4642      	mov	r2, r8
 8007406:	464b      	mov	r3, r9
 8007408:	4640      	mov	r0, r8
 800740a:	4649      	mov	r1, r9
 800740c:	f7f9 fbae 	bl	8000b6c <__aeabi_dcmpun>
 8007410:	b140      	cbz	r0, 8007424 <_printf_float+0xf0>
 8007412:	464b      	mov	r3, r9
 8007414:	2b00      	cmp	r3, #0
 8007416:	bfbc      	itt	lt
 8007418:	232d      	movlt	r3, #45	; 0x2d
 800741a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800741e:	487f      	ldr	r0, [pc, #508]	; (800761c <_printf_float+0x2e8>)
 8007420:	4b7f      	ldr	r3, [pc, #508]	; (8007620 <_printf_float+0x2ec>)
 8007422:	e7d1      	b.n	80073c8 <_printf_float+0x94>
 8007424:	6863      	ldr	r3, [r4, #4]
 8007426:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800742a:	9206      	str	r2, [sp, #24]
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	d13f      	bne.n	80074b0 <_printf_float+0x17c>
 8007430:	2306      	movs	r3, #6
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	9b05      	ldr	r3, [sp, #20]
 8007436:	6861      	ldr	r1, [r4, #4]
 8007438:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800743c:	2300      	movs	r3, #0
 800743e:	9303      	str	r3, [sp, #12]
 8007440:	ab0a      	add	r3, sp, #40	; 0x28
 8007442:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007446:	ab09      	add	r3, sp, #36	; 0x24
 8007448:	ec49 8b10 	vmov	d0, r8, r9
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	6022      	str	r2, [r4, #0]
 8007450:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007454:	4628      	mov	r0, r5
 8007456:	f7ff fecd 	bl	80071f4 <__cvt>
 800745a:	9b06      	ldr	r3, [sp, #24]
 800745c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800745e:	2b47      	cmp	r3, #71	; 0x47
 8007460:	4680      	mov	r8, r0
 8007462:	d108      	bne.n	8007476 <_printf_float+0x142>
 8007464:	1cc8      	adds	r0, r1, #3
 8007466:	db02      	blt.n	800746e <_printf_float+0x13a>
 8007468:	6863      	ldr	r3, [r4, #4]
 800746a:	4299      	cmp	r1, r3
 800746c:	dd41      	ble.n	80074f2 <_printf_float+0x1be>
 800746e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007472:	fa5f fb8b 	uxtb.w	fp, fp
 8007476:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800747a:	d820      	bhi.n	80074be <_printf_float+0x18a>
 800747c:	3901      	subs	r1, #1
 800747e:	465a      	mov	r2, fp
 8007480:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007484:	9109      	str	r1, [sp, #36]	; 0x24
 8007486:	f7ff ff17 	bl	80072b8 <__exponent>
 800748a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748c:	1813      	adds	r3, r2, r0
 800748e:	2a01      	cmp	r2, #1
 8007490:	4681      	mov	r9, r0
 8007492:	6123      	str	r3, [r4, #16]
 8007494:	dc02      	bgt.n	800749c <_printf_float+0x168>
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	07d2      	lsls	r2, r2, #31
 800749a:	d501      	bpl.n	80074a0 <_printf_float+0x16c>
 800749c:	3301      	adds	r3, #1
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d09c      	beq.n	80073e2 <_printf_float+0xae>
 80074a8:	232d      	movs	r3, #45	; 0x2d
 80074aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ae:	e798      	b.n	80073e2 <_printf_float+0xae>
 80074b0:	9a06      	ldr	r2, [sp, #24]
 80074b2:	2a47      	cmp	r2, #71	; 0x47
 80074b4:	d1be      	bne.n	8007434 <_printf_float+0x100>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1bc      	bne.n	8007434 <_printf_float+0x100>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7b9      	b.n	8007432 <_printf_float+0xfe>
 80074be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074c2:	d118      	bne.n	80074f6 <_printf_float+0x1c2>
 80074c4:	2900      	cmp	r1, #0
 80074c6:	6863      	ldr	r3, [r4, #4]
 80074c8:	dd0b      	ble.n	80074e2 <_printf_float+0x1ae>
 80074ca:	6121      	str	r1, [r4, #16]
 80074cc:	b913      	cbnz	r3, 80074d4 <_printf_float+0x1a0>
 80074ce:	6822      	ldr	r2, [r4, #0]
 80074d0:	07d0      	lsls	r0, r2, #31
 80074d2:	d502      	bpl.n	80074da <_printf_float+0x1a6>
 80074d4:	3301      	adds	r3, #1
 80074d6:	440b      	add	r3, r1
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	65a1      	str	r1, [r4, #88]	; 0x58
 80074dc:	f04f 0900 	mov.w	r9, #0
 80074e0:	e7de      	b.n	80074a0 <_printf_float+0x16c>
 80074e2:	b913      	cbnz	r3, 80074ea <_printf_float+0x1b6>
 80074e4:	6822      	ldr	r2, [r4, #0]
 80074e6:	07d2      	lsls	r2, r2, #31
 80074e8:	d501      	bpl.n	80074ee <_printf_float+0x1ba>
 80074ea:	3302      	adds	r3, #2
 80074ec:	e7f4      	b.n	80074d8 <_printf_float+0x1a4>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e7f2      	b.n	80074d8 <_printf_float+0x1a4>
 80074f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f8:	4299      	cmp	r1, r3
 80074fa:	db05      	blt.n	8007508 <_printf_float+0x1d4>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	6121      	str	r1, [r4, #16]
 8007500:	07d8      	lsls	r0, r3, #31
 8007502:	d5ea      	bpl.n	80074da <_printf_float+0x1a6>
 8007504:	1c4b      	adds	r3, r1, #1
 8007506:	e7e7      	b.n	80074d8 <_printf_float+0x1a4>
 8007508:	2900      	cmp	r1, #0
 800750a:	bfd4      	ite	le
 800750c:	f1c1 0202 	rsble	r2, r1, #2
 8007510:	2201      	movgt	r2, #1
 8007512:	4413      	add	r3, r2
 8007514:	e7e0      	b.n	80074d8 <_printf_float+0x1a4>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	055a      	lsls	r2, r3, #21
 800751a:	d407      	bmi.n	800752c <_printf_float+0x1f8>
 800751c:	6923      	ldr	r3, [r4, #16]
 800751e:	4642      	mov	r2, r8
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	d12c      	bne.n	8007584 <_printf_float+0x250>
 800752a:	e764      	b.n	80073f6 <_printf_float+0xc2>
 800752c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007530:	f240 80e0 	bls.w	80076f4 <_printf_float+0x3c0>
 8007534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007538:	2200      	movs	r2, #0
 800753a:	2300      	movs	r3, #0
 800753c:	f7f9 fae4 	bl	8000b08 <__aeabi_dcmpeq>
 8007540:	2800      	cmp	r0, #0
 8007542:	d034      	beq.n	80075ae <_printf_float+0x27a>
 8007544:	4a37      	ldr	r2, [pc, #220]	; (8007624 <_printf_float+0x2f0>)
 8007546:	2301      	movs	r3, #1
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	f43f af51 	beq.w	80073f6 <_printf_float+0xc2>
 8007554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007558:	429a      	cmp	r2, r3
 800755a:	db02      	blt.n	8007562 <_printf_float+0x22e>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	07d8      	lsls	r0, r3, #31
 8007560:	d510      	bpl.n	8007584 <_printf_float+0x250>
 8007562:	ee18 3a10 	vmov	r3, s16
 8007566:	4652      	mov	r2, sl
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f af41 	beq.w	80073f6 <_printf_float+0xc2>
 8007574:	f04f 0800 	mov.w	r8, #0
 8007578:	f104 091a 	add.w	r9, r4, #26
 800757c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800757e:	3b01      	subs	r3, #1
 8007580:	4543      	cmp	r3, r8
 8007582:	dc09      	bgt.n	8007598 <_printf_float+0x264>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	079b      	lsls	r3, r3, #30
 8007588:	f100 8105 	bmi.w	8007796 <_printf_float+0x462>
 800758c:	68e0      	ldr	r0, [r4, #12]
 800758e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007590:	4298      	cmp	r0, r3
 8007592:	bfb8      	it	lt
 8007594:	4618      	movlt	r0, r3
 8007596:	e730      	b.n	80073fa <_printf_float+0xc6>
 8007598:	2301      	movs	r3, #1
 800759a:	464a      	mov	r2, r9
 800759c:	4631      	mov	r1, r6
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	f43f af27 	beq.w	80073f6 <_printf_float+0xc2>
 80075a8:	f108 0801 	add.w	r8, r8, #1
 80075ac:	e7e6      	b.n	800757c <_printf_float+0x248>
 80075ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	dc39      	bgt.n	8007628 <_printf_float+0x2f4>
 80075b4:	4a1b      	ldr	r2, [pc, #108]	; (8007624 <_printf_float+0x2f0>)
 80075b6:	2301      	movs	r3, #1
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	f43f af19 	beq.w	80073f6 <_printf_float+0xc2>
 80075c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075c8:	4313      	orrs	r3, r2
 80075ca:	d102      	bne.n	80075d2 <_printf_float+0x29e>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	07d9      	lsls	r1, r3, #31
 80075d0:	d5d8      	bpl.n	8007584 <_printf_float+0x250>
 80075d2:	ee18 3a10 	vmov	r3, s16
 80075d6:	4652      	mov	r2, sl
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f af09 	beq.w	80073f6 <_printf_float+0xc2>
 80075e4:	f04f 0900 	mov.w	r9, #0
 80075e8:	f104 0a1a 	add.w	sl, r4, #26
 80075ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ee:	425b      	negs	r3, r3
 80075f0:	454b      	cmp	r3, r9
 80075f2:	dc01      	bgt.n	80075f8 <_printf_float+0x2c4>
 80075f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f6:	e792      	b.n	800751e <_printf_float+0x1ea>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4652      	mov	r2, sl
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f aef7 	beq.w	80073f6 <_printf_float+0xc2>
 8007608:	f109 0901 	add.w	r9, r9, #1
 800760c:	e7ee      	b.n	80075ec <_printf_float+0x2b8>
 800760e:	bf00      	nop
 8007610:	7fefffff 	.word	0x7fefffff
 8007614:	0800b6cc 	.word	0x0800b6cc
 8007618:	0800b6d0 	.word	0x0800b6d0
 800761c:	0800b6d8 	.word	0x0800b6d8
 8007620:	0800b6d4 	.word	0x0800b6d4
 8007624:	0800b6dc 	.word	0x0800b6dc
 8007628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800762a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800762c:	429a      	cmp	r2, r3
 800762e:	bfa8      	it	ge
 8007630:	461a      	movge	r2, r3
 8007632:	2a00      	cmp	r2, #0
 8007634:	4691      	mov	r9, r2
 8007636:	dc37      	bgt.n	80076a8 <_printf_float+0x374>
 8007638:	f04f 0b00 	mov.w	fp, #0
 800763c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007640:	f104 021a 	add.w	r2, r4, #26
 8007644:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007646:	9305      	str	r3, [sp, #20]
 8007648:	eba3 0309 	sub.w	r3, r3, r9
 800764c:	455b      	cmp	r3, fp
 800764e:	dc33      	bgt.n	80076b8 <_printf_float+0x384>
 8007650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007654:	429a      	cmp	r2, r3
 8007656:	db3b      	blt.n	80076d0 <_printf_float+0x39c>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	07da      	lsls	r2, r3, #31
 800765c:	d438      	bmi.n	80076d0 <_printf_float+0x39c>
 800765e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007660:	9b05      	ldr	r3, [sp, #20]
 8007662:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	eba2 0901 	sub.w	r9, r2, r1
 800766a:	4599      	cmp	r9, r3
 800766c:	bfa8      	it	ge
 800766e:	4699      	movge	r9, r3
 8007670:	f1b9 0f00 	cmp.w	r9, #0
 8007674:	dc35      	bgt.n	80076e2 <_printf_float+0x3ae>
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800767e:	f104 0a1a 	add.w	sl, r4, #26
 8007682:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	eba3 0309 	sub.w	r3, r3, r9
 800768c:	4543      	cmp	r3, r8
 800768e:	f77f af79 	ble.w	8007584 <_printf_float+0x250>
 8007692:	2301      	movs	r3, #1
 8007694:	4652      	mov	r2, sl
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	f43f aeaa 	beq.w	80073f6 <_printf_float+0xc2>
 80076a2:	f108 0801 	add.w	r8, r8, #1
 80076a6:	e7ec      	b.n	8007682 <_printf_float+0x34e>
 80076a8:	4613      	mov	r3, r2
 80076aa:	4631      	mov	r1, r6
 80076ac:	4642      	mov	r2, r8
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	d1c0      	bne.n	8007638 <_printf_float+0x304>
 80076b6:	e69e      	b.n	80073f6 <_printf_float+0xc2>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4631      	mov	r1, r6
 80076bc:	4628      	mov	r0, r5
 80076be:	9205      	str	r2, [sp, #20]
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f ae97 	beq.w	80073f6 <_printf_float+0xc2>
 80076c8:	9a05      	ldr	r2, [sp, #20]
 80076ca:	f10b 0b01 	add.w	fp, fp, #1
 80076ce:	e7b9      	b.n	8007644 <_printf_float+0x310>
 80076d0:	ee18 3a10 	vmov	r3, s16
 80076d4:	4652      	mov	r2, sl
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	d1be      	bne.n	800765e <_printf_float+0x32a>
 80076e0:	e689      	b.n	80073f6 <_printf_float+0xc2>
 80076e2:	9a05      	ldr	r2, [sp, #20]
 80076e4:	464b      	mov	r3, r9
 80076e6:	4442      	add	r2, r8
 80076e8:	4631      	mov	r1, r6
 80076ea:	4628      	mov	r0, r5
 80076ec:	47b8      	blx	r7
 80076ee:	3001      	adds	r0, #1
 80076f0:	d1c1      	bne.n	8007676 <_printf_float+0x342>
 80076f2:	e680      	b.n	80073f6 <_printf_float+0xc2>
 80076f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076f6:	2a01      	cmp	r2, #1
 80076f8:	dc01      	bgt.n	80076fe <_printf_float+0x3ca>
 80076fa:	07db      	lsls	r3, r3, #31
 80076fc:	d538      	bpl.n	8007770 <_printf_float+0x43c>
 80076fe:	2301      	movs	r3, #1
 8007700:	4642      	mov	r2, r8
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	f43f ae74 	beq.w	80073f6 <_printf_float+0xc2>
 800770e:	ee18 3a10 	vmov	r3, s16
 8007712:	4652      	mov	r2, sl
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f ae6b 	beq.w	80073f6 <_printf_float+0xc2>
 8007720:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007724:	2200      	movs	r2, #0
 8007726:	2300      	movs	r3, #0
 8007728:	f7f9 f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 800772c:	b9d8      	cbnz	r0, 8007766 <_printf_float+0x432>
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	f108 0201 	add.w	r2, r8, #1
 8007734:	3b01      	subs	r3, #1
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	d10e      	bne.n	800775e <_printf_float+0x42a>
 8007740:	e659      	b.n	80073f6 <_printf_float+0xc2>
 8007742:	2301      	movs	r3, #1
 8007744:	4652      	mov	r2, sl
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f ae52 	beq.w	80073f6 <_printf_float+0xc2>
 8007752:	f108 0801 	add.w	r8, r8, #1
 8007756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007758:	3b01      	subs	r3, #1
 800775a:	4543      	cmp	r3, r8
 800775c:	dcf1      	bgt.n	8007742 <_printf_float+0x40e>
 800775e:	464b      	mov	r3, r9
 8007760:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007764:	e6dc      	b.n	8007520 <_printf_float+0x1ec>
 8007766:	f04f 0800 	mov.w	r8, #0
 800776a:	f104 0a1a 	add.w	sl, r4, #26
 800776e:	e7f2      	b.n	8007756 <_printf_float+0x422>
 8007770:	2301      	movs	r3, #1
 8007772:	4642      	mov	r2, r8
 8007774:	e7df      	b.n	8007736 <_printf_float+0x402>
 8007776:	2301      	movs	r3, #1
 8007778:	464a      	mov	r2, r9
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	47b8      	blx	r7
 8007780:	3001      	adds	r0, #1
 8007782:	f43f ae38 	beq.w	80073f6 <_printf_float+0xc2>
 8007786:	f108 0801 	add.w	r8, r8, #1
 800778a:	68e3      	ldr	r3, [r4, #12]
 800778c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800778e:	1a5b      	subs	r3, r3, r1
 8007790:	4543      	cmp	r3, r8
 8007792:	dcf0      	bgt.n	8007776 <_printf_float+0x442>
 8007794:	e6fa      	b.n	800758c <_printf_float+0x258>
 8007796:	f04f 0800 	mov.w	r8, #0
 800779a:	f104 0919 	add.w	r9, r4, #25
 800779e:	e7f4      	b.n	800778a <_printf_float+0x456>

080077a0 <_printf_common>:
 80077a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	4616      	mov	r6, r2
 80077a6:	4699      	mov	r9, r3
 80077a8:	688a      	ldr	r2, [r1, #8]
 80077aa:	690b      	ldr	r3, [r1, #16]
 80077ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077b0:	4293      	cmp	r3, r2
 80077b2:	bfb8      	it	lt
 80077b4:	4613      	movlt	r3, r2
 80077b6:	6033      	str	r3, [r6, #0]
 80077b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077bc:	4607      	mov	r7, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	b10a      	cbz	r2, 80077c6 <_printf_common+0x26>
 80077c2:	3301      	adds	r3, #1
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	0699      	lsls	r1, r3, #26
 80077ca:	bf42      	ittt	mi
 80077cc:	6833      	ldrmi	r3, [r6, #0]
 80077ce:	3302      	addmi	r3, #2
 80077d0:	6033      	strmi	r3, [r6, #0]
 80077d2:	6825      	ldr	r5, [r4, #0]
 80077d4:	f015 0506 	ands.w	r5, r5, #6
 80077d8:	d106      	bne.n	80077e8 <_printf_common+0x48>
 80077da:	f104 0a19 	add.w	sl, r4, #25
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	6832      	ldr	r2, [r6, #0]
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	42ab      	cmp	r3, r5
 80077e6:	dc26      	bgt.n	8007836 <_printf_common+0x96>
 80077e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077ec:	1e13      	subs	r3, r2, #0
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	bf18      	it	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	0692      	lsls	r2, r2, #26
 80077f6:	d42b      	bmi.n	8007850 <_printf_common+0xb0>
 80077f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077fc:	4649      	mov	r1, r9
 80077fe:	4638      	mov	r0, r7
 8007800:	47c0      	blx	r8
 8007802:	3001      	adds	r0, #1
 8007804:	d01e      	beq.n	8007844 <_printf_common+0xa4>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	68e5      	ldr	r5, [r4, #12]
 800780a:	6832      	ldr	r2, [r6, #0]
 800780c:	f003 0306 	and.w	r3, r3, #6
 8007810:	2b04      	cmp	r3, #4
 8007812:	bf08      	it	eq
 8007814:	1aad      	subeq	r5, r5, r2
 8007816:	68a3      	ldr	r3, [r4, #8]
 8007818:	6922      	ldr	r2, [r4, #16]
 800781a:	bf0c      	ite	eq
 800781c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007820:	2500      	movne	r5, #0
 8007822:	4293      	cmp	r3, r2
 8007824:	bfc4      	itt	gt
 8007826:	1a9b      	subgt	r3, r3, r2
 8007828:	18ed      	addgt	r5, r5, r3
 800782a:	2600      	movs	r6, #0
 800782c:	341a      	adds	r4, #26
 800782e:	42b5      	cmp	r5, r6
 8007830:	d11a      	bne.n	8007868 <_printf_common+0xc8>
 8007832:	2000      	movs	r0, #0
 8007834:	e008      	b.n	8007848 <_printf_common+0xa8>
 8007836:	2301      	movs	r3, #1
 8007838:	4652      	mov	r2, sl
 800783a:	4649      	mov	r1, r9
 800783c:	4638      	mov	r0, r7
 800783e:	47c0      	blx	r8
 8007840:	3001      	adds	r0, #1
 8007842:	d103      	bne.n	800784c <_printf_common+0xac>
 8007844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784c:	3501      	adds	r5, #1
 800784e:	e7c6      	b.n	80077de <_printf_common+0x3e>
 8007850:	18e1      	adds	r1, r4, r3
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	2030      	movs	r0, #48	; 0x30
 8007856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800785a:	4422      	add	r2, r4
 800785c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007864:	3302      	adds	r3, #2
 8007866:	e7c7      	b.n	80077f8 <_printf_common+0x58>
 8007868:	2301      	movs	r3, #1
 800786a:	4622      	mov	r2, r4
 800786c:	4649      	mov	r1, r9
 800786e:	4638      	mov	r0, r7
 8007870:	47c0      	blx	r8
 8007872:	3001      	adds	r0, #1
 8007874:	d0e6      	beq.n	8007844 <_printf_common+0xa4>
 8007876:	3601      	adds	r6, #1
 8007878:	e7d9      	b.n	800782e <_printf_common+0x8e>
	...

0800787c <_printf_i>:
 800787c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	460c      	mov	r4, r1
 8007882:	4691      	mov	r9, r2
 8007884:	7e27      	ldrb	r7, [r4, #24]
 8007886:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007888:	2f78      	cmp	r7, #120	; 0x78
 800788a:	4680      	mov	r8, r0
 800788c:	469a      	mov	sl, r3
 800788e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007892:	d807      	bhi.n	80078a4 <_printf_i+0x28>
 8007894:	2f62      	cmp	r7, #98	; 0x62
 8007896:	d80a      	bhi.n	80078ae <_printf_i+0x32>
 8007898:	2f00      	cmp	r7, #0
 800789a:	f000 80d8 	beq.w	8007a4e <_printf_i+0x1d2>
 800789e:	2f58      	cmp	r7, #88	; 0x58
 80078a0:	f000 80a3 	beq.w	80079ea <_printf_i+0x16e>
 80078a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078ac:	e03a      	b.n	8007924 <_printf_i+0xa8>
 80078ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078b2:	2b15      	cmp	r3, #21
 80078b4:	d8f6      	bhi.n	80078a4 <_printf_i+0x28>
 80078b6:	a001      	add	r0, pc, #4	; (adr r0, 80078bc <_printf_i+0x40>)
 80078b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078bc:	08007915 	.word	0x08007915
 80078c0:	08007929 	.word	0x08007929
 80078c4:	080078a5 	.word	0x080078a5
 80078c8:	080078a5 	.word	0x080078a5
 80078cc:	080078a5 	.word	0x080078a5
 80078d0:	080078a5 	.word	0x080078a5
 80078d4:	08007929 	.word	0x08007929
 80078d8:	080078a5 	.word	0x080078a5
 80078dc:	080078a5 	.word	0x080078a5
 80078e0:	080078a5 	.word	0x080078a5
 80078e4:	080078a5 	.word	0x080078a5
 80078e8:	08007a35 	.word	0x08007a35
 80078ec:	08007959 	.word	0x08007959
 80078f0:	08007a17 	.word	0x08007a17
 80078f4:	080078a5 	.word	0x080078a5
 80078f8:	080078a5 	.word	0x080078a5
 80078fc:	08007a57 	.word	0x08007a57
 8007900:	080078a5 	.word	0x080078a5
 8007904:	08007959 	.word	0x08007959
 8007908:	080078a5 	.word	0x080078a5
 800790c:	080078a5 	.word	0x080078a5
 8007910:	08007a1f 	.word	0x08007a1f
 8007914:	680b      	ldr	r3, [r1, #0]
 8007916:	1d1a      	adds	r2, r3, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	600a      	str	r2, [r1, #0]
 800791c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007924:	2301      	movs	r3, #1
 8007926:	e0a3      	b.n	8007a70 <_printf_i+0x1f4>
 8007928:	6825      	ldr	r5, [r4, #0]
 800792a:	6808      	ldr	r0, [r1, #0]
 800792c:	062e      	lsls	r6, r5, #24
 800792e:	f100 0304 	add.w	r3, r0, #4
 8007932:	d50a      	bpl.n	800794a <_printf_i+0xce>
 8007934:	6805      	ldr	r5, [r0, #0]
 8007936:	600b      	str	r3, [r1, #0]
 8007938:	2d00      	cmp	r5, #0
 800793a:	da03      	bge.n	8007944 <_printf_i+0xc8>
 800793c:	232d      	movs	r3, #45	; 0x2d
 800793e:	426d      	negs	r5, r5
 8007940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007944:	485e      	ldr	r0, [pc, #376]	; (8007ac0 <_printf_i+0x244>)
 8007946:	230a      	movs	r3, #10
 8007948:	e019      	b.n	800797e <_printf_i+0x102>
 800794a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800794e:	6805      	ldr	r5, [r0, #0]
 8007950:	600b      	str	r3, [r1, #0]
 8007952:	bf18      	it	ne
 8007954:	b22d      	sxthne	r5, r5
 8007956:	e7ef      	b.n	8007938 <_printf_i+0xbc>
 8007958:	680b      	ldr	r3, [r1, #0]
 800795a:	6825      	ldr	r5, [r4, #0]
 800795c:	1d18      	adds	r0, r3, #4
 800795e:	6008      	str	r0, [r1, #0]
 8007960:	0628      	lsls	r0, r5, #24
 8007962:	d501      	bpl.n	8007968 <_printf_i+0xec>
 8007964:	681d      	ldr	r5, [r3, #0]
 8007966:	e002      	b.n	800796e <_printf_i+0xf2>
 8007968:	0669      	lsls	r1, r5, #25
 800796a:	d5fb      	bpl.n	8007964 <_printf_i+0xe8>
 800796c:	881d      	ldrh	r5, [r3, #0]
 800796e:	4854      	ldr	r0, [pc, #336]	; (8007ac0 <_printf_i+0x244>)
 8007970:	2f6f      	cmp	r7, #111	; 0x6f
 8007972:	bf0c      	ite	eq
 8007974:	2308      	moveq	r3, #8
 8007976:	230a      	movne	r3, #10
 8007978:	2100      	movs	r1, #0
 800797a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800797e:	6866      	ldr	r6, [r4, #4]
 8007980:	60a6      	str	r6, [r4, #8]
 8007982:	2e00      	cmp	r6, #0
 8007984:	bfa2      	ittt	ge
 8007986:	6821      	ldrge	r1, [r4, #0]
 8007988:	f021 0104 	bicge.w	r1, r1, #4
 800798c:	6021      	strge	r1, [r4, #0]
 800798e:	b90d      	cbnz	r5, 8007994 <_printf_i+0x118>
 8007990:	2e00      	cmp	r6, #0
 8007992:	d04d      	beq.n	8007a30 <_printf_i+0x1b4>
 8007994:	4616      	mov	r6, r2
 8007996:	fbb5 f1f3 	udiv	r1, r5, r3
 800799a:	fb03 5711 	mls	r7, r3, r1, r5
 800799e:	5dc7      	ldrb	r7, [r0, r7]
 80079a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079a4:	462f      	mov	r7, r5
 80079a6:	42bb      	cmp	r3, r7
 80079a8:	460d      	mov	r5, r1
 80079aa:	d9f4      	bls.n	8007996 <_printf_i+0x11a>
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d10b      	bne.n	80079c8 <_printf_i+0x14c>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	07df      	lsls	r7, r3, #31
 80079b4:	d508      	bpl.n	80079c8 <_printf_i+0x14c>
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	6861      	ldr	r1, [r4, #4]
 80079ba:	4299      	cmp	r1, r3
 80079bc:	bfde      	ittt	le
 80079be:	2330      	movle	r3, #48	; 0x30
 80079c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079c4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80079c8:	1b92      	subs	r2, r2, r6
 80079ca:	6122      	str	r2, [r4, #16]
 80079cc:	f8cd a000 	str.w	sl, [sp]
 80079d0:	464b      	mov	r3, r9
 80079d2:	aa03      	add	r2, sp, #12
 80079d4:	4621      	mov	r1, r4
 80079d6:	4640      	mov	r0, r8
 80079d8:	f7ff fee2 	bl	80077a0 <_printf_common>
 80079dc:	3001      	adds	r0, #1
 80079de:	d14c      	bne.n	8007a7a <_printf_i+0x1fe>
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e4:	b004      	add	sp, #16
 80079e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ea:	4835      	ldr	r0, [pc, #212]	; (8007ac0 <_printf_i+0x244>)
 80079ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	680e      	ldr	r6, [r1, #0]
 80079f4:	061f      	lsls	r7, r3, #24
 80079f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80079fa:	600e      	str	r6, [r1, #0]
 80079fc:	d514      	bpl.n	8007a28 <_printf_i+0x1ac>
 80079fe:	07d9      	lsls	r1, r3, #31
 8007a00:	bf44      	itt	mi
 8007a02:	f043 0320 	orrmi.w	r3, r3, #32
 8007a06:	6023      	strmi	r3, [r4, #0]
 8007a08:	b91d      	cbnz	r5, 8007a12 <_printf_i+0x196>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	f023 0320 	bic.w	r3, r3, #32
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	2310      	movs	r3, #16
 8007a14:	e7b0      	b.n	8007978 <_printf_i+0xfc>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	f043 0320 	orr.w	r3, r3, #32
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	2378      	movs	r3, #120	; 0x78
 8007a20:	4828      	ldr	r0, [pc, #160]	; (8007ac4 <_printf_i+0x248>)
 8007a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a26:	e7e3      	b.n	80079f0 <_printf_i+0x174>
 8007a28:	065e      	lsls	r6, r3, #25
 8007a2a:	bf48      	it	mi
 8007a2c:	b2ad      	uxthmi	r5, r5
 8007a2e:	e7e6      	b.n	80079fe <_printf_i+0x182>
 8007a30:	4616      	mov	r6, r2
 8007a32:	e7bb      	b.n	80079ac <_printf_i+0x130>
 8007a34:	680b      	ldr	r3, [r1, #0]
 8007a36:	6826      	ldr	r6, [r4, #0]
 8007a38:	6960      	ldr	r0, [r4, #20]
 8007a3a:	1d1d      	adds	r5, r3, #4
 8007a3c:	600d      	str	r5, [r1, #0]
 8007a3e:	0635      	lsls	r5, r6, #24
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	d501      	bpl.n	8007a48 <_printf_i+0x1cc>
 8007a44:	6018      	str	r0, [r3, #0]
 8007a46:	e002      	b.n	8007a4e <_printf_i+0x1d2>
 8007a48:	0671      	lsls	r1, r6, #25
 8007a4a:	d5fb      	bpl.n	8007a44 <_printf_i+0x1c8>
 8007a4c:	8018      	strh	r0, [r3, #0]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	6123      	str	r3, [r4, #16]
 8007a52:	4616      	mov	r6, r2
 8007a54:	e7ba      	b.n	80079cc <_printf_i+0x150>
 8007a56:	680b      	ldr	r3, [r1, #0]
 8007a58:	1d1a      	adds	r2, r3, #4
 8007a5a:	600a      	str	r2, [r1, #0]
 8007a5c:	681e      	ldr	r6, [r3, #0]
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	2100      	movs	r1, #0
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7f8 fbdc 	bl	8000220 <memchr>
 8007a68:	b108      	cbz	r0, 8007a6e <_printf_i+0x1f2>
 8007a6a:	1b80      	subs	r0, r0, r6
 8007a6c:	6060      	str	r0, [r4, #4]
 8007a6e:	6863      	ldr	r3, [r4, #4]
 8007a70:	6123      	str	r3, [r4, #16]
 8007a72:	2300      	movs	r3, #0
 8007a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a78:	e7a8      	b.n	80079cc <_printf_i+0x150>
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	4632      	mov	r2, r6
 8007a7e:	4649      	mov	r1, r9
 8007a80:	4640      	mov	r0, r8
 8007a82:	47d0      	blx	sl
 8007a84:	3001      	adds	r0, #1
 8007a86:	d0ab      	beq.n	80079e0 <_printf_i+0x164>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	079b      	lsls	r3, r3, #30
 8007a8c:	d413      	bmi.n	8007ab6 <_printf_i+0x23a>
 8007a8e:	68e0      	ldr	r0, [r4, #12]
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	4298      	cmp	r0, r3
 8007a94:	bfb8      	it	lt
 8007a96:	4618      	movlt	r0, r3
 8007a98:	e7a4      	b.n	80079e4 <_printf_i+0x168>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	47d0      	blx	sl
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d09b      	beq.n	80079e0 <_printf_i+0x164>
 8007aa8:	3501      	adds	r5, #1
 8007aaa:	68e3      	ldr	r3, [r4, #12]
 8007aac:	9903      	ldr	r1, [sp, #12]
 8007aae:	1a5b      	subs	r3, r3, r1
 8007ab0:	42ab      	cmp	r3, r5
 8007ab2:	dcf2      	bgt.n	8007a9a <_printf_i+0x21e>
 8007ab4:	e7eb      	b.n	8007a8e <_printf_i+0x212>
 8007ab6:	2500      	movs	r5, #0
 8007ab8:	f104 0619 	add.w	r6, r4, #25
 8007abc:	e7f5      	b.n	8007aaa <_printf_i+0x22e>
 8007abe:	bf00      	nop
 8007ac0:	0800b6de 	.word	0x0800b6de
 8007ac4:	0800b6ef 	.word	0x0800b6ef

08007ac8 <iprintf>:
 8007ac8:	b40f      	push	{r0, r1, r2, r3}
 8007aca:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <iprintf+0x2c>)
 8007acc:	b513      	push	{r0, r1, r4, lr}
 8007ace:	681c      	ldr	r4, [r3, #0]
 8007ad0:	b124      	cbz	r4, 8007adc <iprintf+0x14>
 8007ad2:	69a3      	ldr	r3, [r4, #24]
 8007ad4:	b913      	cbnz	r3, 8007adc <iprintf+0x14>
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f001 f8e8 	bl	8008cac <__sinit>
 8007adc:	ab05      	add	r3, sp, #20
 8007ade:	9a04      	ldr	r2, [sp, #16]
 8007ae0:	68a1      	ldr	r1, [r4, #8]
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f001 fdbb 	bl	8009660 <_vfiprintf_r>
 8007aea:	b002      	add	sp, #8
 8007aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af0:	b004      	add	sp, #16
 8007af2:	4770      	bx	lr
 8007af4:	2000000c 	.word	0x2000000c

08007af8 <_puts_r>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	460e      	mov	r6, r1
 8007afc:	4605      	mov	r5, r0
 8007afe:	b118      	cbz	r0, 8007b08 <_puts_r+0x10>
 8007b00:	6983      	ldr	r3, [r0, #24]
 8007b02:	b90b      	cbnz	r3, 8007b08 <_puts_r+0x10>
 8007b04:	f001 f8d2 	bl	8008cac <__sinit>
 8007b08:	69ab      	ldr	r3, [r5, #24]
 8007b0a:	68ac      	ldr	r4, [r5, #8]
 8007b0c:	b913      	cbnz	r3, 8007b14 <_puts_r+0x1c>
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f001 f8cc 	bl	8008cac <__sinit>
 8007b14:	4b2c      	ldr	r3, [pc, #176]	; (8007bc8 <_puts_r+0xd0>)
 8007b16:	429c      	cmp	r4, r3
 8007b18:	d120      	bne.n	8007b5c <_puts_r+0x64>
 8007b1a:	686c      	ldr	r4, [r5, #4]
 8007b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b1e:	07db      	lsls	r3, r3, #31
 8007b20:	d405      	bmi.n	8007b2e <_puts_r+0x36>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	0598      	lsls	r0, r3, #22
 8007b26:	d402      	bmi.n	8007b2e <_puts_r+0x36>
 8007b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2a:	f001 f962 	bl	8008df2 <__retarget_lock_acquire_recursive>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	0719      	lsls	r1, r3, #28
 8007b32:	d51d      	bpl.n	8007b70 <_puts_r+0x78>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	b1db      	cbz	r3, 8007b70 <_puts_r+0x78>
 8007b38:	3e01      	subs	r6, #1
 8007b3a:	68a3      	ldr	r3, [r4, #8]
 8007b3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b40:	3b01      	subs	r3, #1
 8007b42:	60a3      	str	r3, [r4, #8]
 8007b44:	bb39      	cbnz	r1, 8007b96 <_puts_r+0x9e>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	da38      	bge.n	8007bbc <_puts_r+0xc4>
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	210a      	movs	r1, #10
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 f858 	bl	8007c04 <__swbuf_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d011      	beq.n	8007b7c <_puts_r+0x84>
 8007b58:	250a      	movs	r5, #10
 8007b5a:	e011      	b.n	8007b80 <_puts_r+0x88>
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <_puts_r+0xd4>)
 8007b5e:	429c      	cmp	r4, r3
 8007b60:	d101      	bne.n	8007b66 <_puts_r+0x6e>
 8007b62:	68ac      	ldr	r4, [r5, #8]
 8007b64:	e7da      	b.n	8007b1c <_puts_r+0x24>
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <_puts_r+0xd8>)
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	bf08      	it	eq
 8007b6c:	68ec      	ldreq	r4, [r5, #12]
 8007b6e:	e7d5      	b.n	8007b1c <_puts_r+0x24>
 8007b70:	4621      	mov	r1, r4
 8007b72:	4628      	mov	r0, r5
 8007b74:	f000 f898 	bl	8007ca8 <__swsetup_r>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d0dd      	beq.n	8007b38 <_puts_r+0x40>
 8007b7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b82:	07da      	lsls	r2, r3, #31
 8007b84:	d405      	bmi.n	8007b92 <_puts_r+0x9a>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	059b      	lsls	r3, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_puts_r+0x9a>
 8007b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8e:	f001 f931 	bl	8008df4 <__retarget_lock_release_recursive>
 8007b92:	4628      	mov	r0, r5
 8007b94:	bd70      	pop	{r4, r5, r6, pc}
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da04      	bge.n	8007ba4 <_puts_r+0xac>
 8007b9a:	69a2      	ldr	r2, [r4, #24]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	dc06      	bgt.n	8007bae <_puts_r+0xb6>
 8007ba0:	290a      	cmp	r1, #10
 8007ba2:	d004      	beq.n	8007bae <_puts_r+0xb6>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	7019      	strb	r1, [r3, #0]
 8007bac:	e7c5      	b.n	8007b3a <_puts_r+0x42>
 8007bae:	4622      	mov	r2, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f827 	bl	8007c04 <__swbuf_r>
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d1bf      	bne.n	8007b3a <_puts_r+0x42>
 8007bba:	e7df      	b.n	8007b7c <_puts_r+0x84>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	250a      	movs	r5, #10
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	6022      	str	r2, [r4, #0]
 8007bc4:	701d      	strb	r5, [r3, #0]
 8007bc6:	e7db      	b.n	8007b80 <_puts_r+0x88>
 8007bc8:	0800b7b4 	.word	0x0800b7b4
 8007bcc:	0800b7d4 	.word	0x0800b7d4
 8007bd0:	0800b794 	.word	0x0800b794

08007bd4 <puts>:
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <puts+0xc>)
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	f7ff bf8d 	b.w	8007af8 <_puts_r>
 8007bde:	bf00      	nop
 8007be0:	2000000c 	.word	0x2000000c

08007be4 <_sbrk_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4d06      	ldr	r5, [pc, #24]	; (8007c00 <_sbrk_r+0x1c>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	4604      	mov	r4, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	f7fb f988 	bl	8002f04 <_sbrk>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_sbrk_r+0x1a>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_sbrk_r+0x1a>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	20000548 	.word	0x20000548

08007c04 <__swbuf_r>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	460e      	mov	r6, r1
 8007c08:	4614      	mov	r4, r2
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	b118      	cbz	r0, 8007c16 <__swbuf_r+0x12>
 8007c0e:	6983      	ldr	r3, [r0, #24]
 8007c10:	b90b      	cbnz	r3, 8007c16 <__swbuf_r+0x12>
 8007c12:	f001 f84b 	bl	8008cac <__sinit>
 8007c16:	4b21      	ldr	r3, [pc, #132]	; (8007c9c <__swbuf_r+0x98>)
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	d12b      	bne.n	8007c74 <__swbuf_r+0x70>
 8007c1c:	686c      	ldr	r4, [r5, #4]
 8007c1e:	69a3      	ldr	r3, [r4, #24]
 8007c20:	60a3      	str	r3, [r4, #8]
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	071a      	lsls	r2, r3, #28
 8007c26:	d52f      	bpl.n	8007c88 <__swbuf_r+0x84>
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	b36b      	cbz	r3, 8007c88 <__swbuf_r+0x84>
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	6820      	ldr	r0, [r4, #0]
 8007c30:	1ac0      	subs	r0, r0, r3
 8007c32:	6963      	ldr	r3, [r4, #20]
 8007c34:	b2f6      	uxtb	r6, r6
 8007c36:	4283      	cmp	r3, r0
 8007c38:	4637      	mov	r7, r6
 8007c3a:	dc04      	bgt.n	8007c46 <__swbuf_r+0x42>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 ffa0 	bl	8008b84 <_fflush_r>
 8007c44:	bb30      	cbnz	r0, 8007c94 <__swbuf_r+0x90>
 8007c46:	68a3      	ldr	r3, [r4, #8]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	60a3      	str	r3, [r4, #8]
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	6022      	str	r2, [r4, #0]
 8007c52:	701e      	strb	r6, [r3, #0]
 8007c54:	6963      	ldr	r3, [r4, #20]
 8007c56:	3001      	adds	r0, #1
 8007c58:	4283      	cmp	r3, r0
 8007c5a:	d004      	beq.n	8007c66 <__swbuf_r+0x62>
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	07db      	lsls	r3, r3, #31
 8007c60:	d506      	bpl.n	8007c70 <__swbuf_r+0x6c>
 8007c62:	2e0a      	cmp	r6, #10
 8007c64:	d104      	bne.n	8007c70 <__swbuf_r+0x6c>
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 ff8b 	bl	8008b84 <_fflush_r>
 8007c6e:	b988      	cbnz	r0, 8007c94 <__swbuf_r+0x90>
 8007c70:	4638      	mov	r0, r7
 8007c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <__swbuf_r+0x9c>)
 8007c76:	429c      	cmp	r4, r3
 8007c78:	d101      	bne.n	8007c7e <__swbuf_r+0x7a>
 8007c7a:	68ac      	ldr	r4, [r5, #8]
 8007c7c:	e7cf      	b.n	8007c1e <__swbuf_r+0x1a>
 8007c7e:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <__swbuf_r+0xa0>)
 8007c80:	429c      	cmp	r4, r3
 8007c82:	bf08      	it	eq
 8007c84:	68ec      	ldreq	r4, [r5, #12]
 8007c86:	e7ca      	b.n	8007c1e <__swbuf_r+0x1a>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 f80c 	bl	8007ca8 <__swsetup_r>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d0cb      	beq.n	8007c2c <__swbuf_r+0x28>
 8007c94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c98:	e7ea      	b.n	8007c70 <__swbuf_r+0x6c>
 8007c9a:	bf00      	nop
 8007c9c:	0800b7b4 	.word	0x0800b7b4
 8007ca0:	0800b7d4 	.word	0x0800b7d4
 8007ca4:	0800b794 	.word	0x0800b794

08007ca8 <__swsetup_r>:
 8007ca8:	4b32      	ldr	r3, [pc, #200]	; (8007d74 <__swsetup_r+0xcc>)
 8007caa:	b570      	push	{r4, r5, r6, lr}
 8007cac:	681d      	ldr	r5, [r3, #0]
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	b125      	cbz	r5, 8007cbe <__swsetup_r+0x16>
 8007cb4:	69ab      	ldr	r3, [r5, #24]
 8007cb6:	b913      	cbnz	r3, 8007cbe <__swsetup_r+0x16>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 fff7 	bl	8008cac <__sinit>
 8007cbe:	4b2e      	ldr	r3, [pc, #184]	; (8007d78 <__swsetup_r+0xd0>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	d10f      	bne.n	8007ce4 <__swsetup_r+0x3c>
 8007cc4:	686c      	ldr	r4, [r5, #4]
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ccc:	0719      	lsls	r1, r3, #28
 8007cce:	d42c      	bmi.n	8007d2a <__swsetup_r+0x82>
 8007cd0:	06dd      	lsls	r5, r3, #27
 8007cd2:	d411      	bmi.n	8007cf8 <__swsetup_r+0x50>
 8007cd4:	2309      	movs	r3, #9
 8007cd6:	6033      	str	r3, [r6, #0]
 8007cd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce2:	e03e      	b.n	8007d62 <__swsetup_r+0xba>
 8007ce4:	4b25      	ldr	r3, [pc, #148]	; (8007d7c <__swsetup_r+0xd4>)
 8007ce6:	429c      	cmp	r4, r3
 8007ce8:	d101      	bne.n	8007cee <__swsetup_r+0x46>
 8007cea:	68ac      	ldr	r4, [r5, #8]
 8007cec:	e7eb      	b.n	8007cc6 <__swsetup_r+0x1e>
 8007cee:	4b24      	ldr	r3, [pc, #144]	; (8007d80 <__swsetup_r+0xd8>)
 8007cf0:	429c      	cmp	r4, r3
 8007cf2:	bf08      	it	eq
 8007cf4:	68ec      	ldreq	r4, [r5, #12]
 8007cf6:	e7e6      	b.n	8007cc6 <__swsetup_r+0x1e>
 8007cf8:	0758      	lsls	r0, r3, #29
 8007cfa:	d512      	bpl.n	8007d22 <__swsetup_r+0x7a>
 8007cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cfe:	b141      	cbz	r1, 8007d12 <__swsetup_r+0x6a>
 8007d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d04:	4299      	cmp	r1, r3
 8007d06:	d002      	beq.n	8007d0e <__swsetup_r+0x66>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f7ff f9c9 	bl	80070a0 <_free_r>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	6363      	str	r3, [r4, #52]	; 0x34
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d18:	81a3      	strh	r3, [r4, #12]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6063      	str	r3, [r4, #4]
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	f043 0308 	orr.w	r3, r3, #8
 8007d28:	81a3      	strh	r3, [r4, #12]
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	b94b      	cbnz	r3, 8007d42 <__swsetup_r+0x9a>
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d38:	d003      	beq.n	8007d42 <__swsetup_r+0x9a>
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f001 f87f 	bl	8008e40 <__smakebuf_r>
 8007d42:	89a0      	ldrh	r0, [r4, #12]
 8007d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d48:	f010 0301 	ands.w	r3, r0, #1
 8007d4c:	d00a      	beq.n	8007d64 <__swsetup_r+0xbc>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60a3      	str	r3, [r4, #8]
 8007d52:	6963      	ldr	r3, [r4, #20]
 8007d54:	425b      	negs	r3, r3
 8007d56:	61a3      	str	r3, [r4, #24]
 8007d58:	6923      	ldr	r3, [r4, #16]
 8007d5a:	b943      	cbnz	r3, 8007d6e <__swsetup_r+0xc6>
 8007d5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d60:	d1ba      	bne.n	8007cd8 <__swsetup_r+0x30>
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	0781      	lsls	r1, r0, #30
 8007d66:	bf58      	it	pl
 8007d68:	6963      	ldrpl	r3, [r4, #20]
 8007d6a:	60a3      	str	r3, [r4, #8]
 8007d6c:	e7f4      	b.n	8007d58 <__swsetup_r+0xb0>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e7f7      	b.n	8007d62 <__swsetup_r+0xba>
 8007d72:	bf00      	nop
 8007d74:	2000000c 	.word	0x2000000c
 8007d78:	0800b7b4 	.word	0x0800b7b4
 8007d7c:	0800b7d4 	.word	0x0800b7d4
 8007d80:	0800b794 	.word	0x0800b794

08007d84 <quorem>:
 8007d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	6903      	ldr	r3, [r0, #16]
 8007d8a:	690c      	ldr	r4, [r1, #16]
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	4607      	mov	r7, r0
 8007d90:	f2c0 8081 	blt.w	8007e96 <quorem+0x112>
 8007d94:	3c01      	subs	r4, #1
 8007d96:	f101 0814 	add.w	r8, r1, #20
 8007d9a:	f100 0514 	add.w	r5, r0, #20
 8007d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007da8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dac:	3301      	adds	r3, #1
 8007dae:	429a      	cmp	r2, r3
 8007db0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007db4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007db8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dbc:	d331      	bcc.n	8007e22 <quorem+0x9e>
 8007dbe:	f04f 0e00 	mov.w	lr, #0
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	46ac      	mov	ip, r5
 8007dc6:	46f2      	mov	sl, lr
 8007dc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dcc:	b293      	uxth	r3, r2
 8007dce:	fb06 e303 	mla	r3, r6, r3, lr
 8007dd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	ebaa 0303 	sub.w	r3, sl, r3
 8007ddc:	0c12      	lsrs	r2, r2, #16
 8007dde:	f8dc a000 	ldr.w	sl, [ip]
 8007de2:	fb06 e202 	mla	r2, r6, r2, lr
 8007de6:	fa13 f38a 	uxtah	r3, r3, sl
 8007dea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dee:	fa1f fa82 	uxth.w	sl, r2
 8007df2:	f8dc 2000 	ldr.w	r2, [ip]
 8007df6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007dfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e04:	4581      	cmp	r9, r0
 8007e06:	f84c 3b04 	str.w	r3, [ip], #4
 8007e0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e0e:	d2db      	bcs.n	8007dc8 <quorem+0x44>
 8007e10:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e14:	b92b      	cbnz	r3, 8007e22 <quorem+0x9e>
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	d32e      	bcc.n	8007e7e <quorem+0xfa>
 8007e20:	613c      	str	r4, [r7, #16]
 8007e22:	4638      	mov	r0, r7
 8007e24:	f001 fae4 	bl	80093f0 <__mcmp>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	db24      	blt.n	8007e76 <quorem+0xf2>
 8007e2c:	3601      	adds	r6, #1
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f04f 0c00 	mov.w	ip, #0
 8007e34:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e38:	f8d0 e000 	ldr.w	lr, [r0]
 8007e3c:	b293      	uxth	r3, r2
 8007e3e:	ebac 0303 	sub.w	r3, ip, r3
 8007e42:	0c12      	lsrs	r2, r2, #16
 8007e44:	fa13 f38e 	uxtah	r3, r3, lr
 8007e48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e56:	45c1      	cmp	r9, r8
 8007e58:	f840 3b04 	str.w	r3, [r0], #4
 8007e5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e60:	d2e8      	bcs.n	8007e34 <quorem+0xb0>
 8007e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e6a:	b922      	cbnz	r2, 8007e76 <quorem+0xf2>
 8007e6c:	3b04      	subs	r3, #4
 8007e6e:	429d      	cmp	r5, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	d30a      	bcc.n	8007e8a <quorem+0x106>
 8007e74:	613c      	str	r4, [r7, #16]
 8007e76:	4630      	mov	r0, r6
 8007e78:	b003      	add	sp, #12
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	6812      	ldr	r2, [r2, #0]
 8007e80:	3b04      	subs	r3, #4
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	d1cc      	bne.n	8007e20 <quorem+0x9c>
 8007e86:	3c01      	subs	r4, #1
 8007e88:	e7c7      	b.n	8007e1a <quorem+0x96>
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	d1f0      	bne.n	8007e74 <quorem+0xf0>
 8007e92:	3c01      	subs	r4, #1
 8007e94:	e7eb      	b.n	8007e6e <quorem+0xea>
 8007e96:	2000      	movs	r0, #0
 8007e98:	e7ee      	b.n	8007e78 <quorem+0xf4>
 8007e9a:	0000      	movs	r0, r0
 8007e9c:	0000      	movs	r0, r0
	...

08007ea0 <_dtoa_r>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	ed2d 8b02 	vpush	{d8}
 8007ea8:	ec57 6b10 	vmov	r6, r7, d0
 8007eac:	b095      	sub	sp, #84	; 0x54
 8007eae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007eb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007eb4:	9105      	str	r1, [sp, #20]
 8007eb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007eba:	4604      	mov	r4, r0
 8007ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec0:	b975      	cbnz	r5, 8007ee0 <_dtoa_r+0x40>
 8007ec2:	2010      	movs	r0, #16
 8007ec4:	f7ff f8dc 	bl	8007080 <malloc>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6260      	str	r0, [r4, #36]	; 0x24
 8007ecc:	b920      	cbnz	r0, 8007ed8 <_dtoa_r+0x38>
 8007ece:	4bb2      	ldr	r3, [pc, #712]	; (8008198 <_dtoa_r+0x2f8>)
 8007ed0:	21ea      	movs	r1, #234	; 0xea
 8007ed2:	48b2      	ldr	r0, [pc, #712]	; (800819c <_dtoa_r+0x2fc>)
 8007ed4:	f001 fd4a 	bl	800996c <__assert_func>
 8007ed8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007edc:	6005      	str	r5, [r0, #0]
 8007ede:	60c5      	str	r5, [r0, #12]
 8007ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	b151      	cbz	r1, 8007efc <_dtoa_r+0x5c>
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	604a      	str	r2, [r1, #4]
 8007eea:	2301      	movs	r3, #1
 8007eec:	4093      	lsls	r3, r2
 8007eee:	608b      	str	r3, [r1, #8]
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f001 f83f 	bl	8008f74 <_Bfree>
 8007ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	1e3b      	subs	r3, r7, #0
 8007efe:	bfb9      	ittee	lt
 8007f00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f04:	9303      	strlt	r3, [sp, #12]
 8007f06:	2300      	movge	r3, #0
 8007f08:	f8c8 3000 	strge.w	r3, [r8]
 8007f0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007f10:	4ba3      	ldr	r3, [pc, #652]	; (80081a0 <_dtoa_r+0x300>)
 8007f12:	bfbc      	itt	lt
 8007f14:	2201      	movlt	r2, #1
 8007f16:	f8c8 2000 	strlt.w	r2, [r8]
 8007f1a:	ea33 0309 	bics.w	r3, r3, r9
 8007f1e:	d11b      	bne.n	8007f58 <_dtoa_r+0xb8>
 8007f20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f22:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f2c:	4333      	orrs	r3, r6
 8007f2e:	f000 857a 	beq.w	8008a26 <_dtoa_r+0xb86>
 8007f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f34:	b963      	cbnz	r3, 8007f50 <_dtoa_r+0xb0>
 8007f36:	4b9b      	ldr	r3, [pc, #620]	; (80081a4 <_dtoa_r+0x304>)
 8007f38:	e024      	b.n	8007f84 <_dtoa_r+0xe4>
 8007f3a:	4b9b      	ldr	r3, [pc, #620]	; (80081a8 <_dtoa_r+0x308>)
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	9800      	ldr	r0, [sp, #0]
 8007f46:	b015      	add	sp, #84	; 0x54
 8007f48:	ecbd 8b02 	vpop	{d8}
 8007f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f50:	4b94      	ldr	r3, [pc, #592]	; (80081a4 <_dtoa_r+0x304>)
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	3303      	adds	r3, #3
 8007f56:	e7f3      	b.n	8007f40 <_dtoa_r+0xa0>
 8007f58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	ec51 0b17 	vmov	r0, r1, d7
 8007f62:	2300      	movs	r3, #0
 8007f64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007f68:	f7f8 fdce 	bl	8000b08 <__aeabi_dcmpeq>
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	b158      	cbz	r0, 8007f88 <_dtoa_r+0xe8>
 8007f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f72:	2301      	movs	r3, #1
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8551 	beq.w	8008a20 <_dtoa_r+0xb80>
 8007f7e:	488b      	ldr	r0, [pc, #556]	; (80081ac <_dtoa_r+0x30c>)
 8007f80:	6018      	str	r0, [r3, #0]
 8007f82:	1e43      	subs	r3, r0, #1
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	e7dd      	b.n	8007f44 <_dtoa_r+0xa4>
 8007f88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f8c:	aa12      	add	r2, sp, #72	; 0x48
 8007f8e:	a913      	add	r1, sp, #76	; 0x4c
 8007f90:	4620      	mov	r0, r4
 8007f92:	f001 fad1 	bl	8009538 <__d2b>
 8007f96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f9a:	4683      	mov	fp, r0
 8007f9c:	2d00      	cmp	r5, #0
 8007f9e:	d07c      	beq.n	800809a <_dtoa_r+0x1fa>
 8007fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007faa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007fae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007fb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007fba:	4b7d      	ldr	r3, [pc, #500]	; (80081b0 <_dtoa_r+0x310>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	4639      	mov	r1, r7
 8007fc2:	f7f8 f981 	bl	80002c8 <__aeabi_dsub>
 8007fc6:	a36e      	add	r3, pc, #440	; (adr r3, 8008180 <_dtoa_r+0x2e0>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 fb34 	bl	8000638 <__aeabi_dmul>
 8007fd0:	a36d      	add	r3, pc, #436	; (adr r3, 8008188 <_dtoa_r+0x2e8>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	f7f8 f979 	bl	80002cc <__adddf3>
 8007fda:	4606      	mov	r6, r0
 8007fdc:	4628      	mov	r0, r5
 8007fde:	460f      	mov	r7, r1
 8007fe0:	f7f8 fac0 	bl	8000564 <__aeabi_i2d>
 8007fe4:	a36a      	add	r3, pc, #424	; (adr r3, 8008190 <_dtoa_r+0x2f0>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 fb25 	bl	8000638 <__aeabi_dmul>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	4639      	mov	r1, r7
 8007ff6:	f7f8 f969 	bl	80002cc <__adddf3>
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460f      	mov	r7, r1
 8007ffe:	f7f8 fdcb 	bl	8000b98 <__aeabi_d2iz>
 8008002:	2200      	movs	r2, #0
 8008004:	4682      	mov	sl, r0
 8008006:	2300      	movs	r3, #0
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 fd86 	bl	8000b1c <__aeabi_dcmplt>
 8008010:	b148      	cbz	r0, 8008026 <_dtoa_r+0x186>
 8008012:	4650      	mov	r0, sl
 8008014:	f7f8 faa6 	bl	8000564 <__aeabi_i2d>
 8008018:	4632      	mov	r2, r6
 800801a:	463b      	mov	r3, r7
 800801c:	f7f8 fd74 	bl	8000b08 <__aeabi_dcmpeq>
 8008020:	b908      	cbnz	r0, 8008026 <_dtoa_r+0x186>
 8008022:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008026:	f1ba 0f16 	cmp.w	sl, #22
 800802a:	d854      	bhi.n	80080d6 <_dtoa_r+0x236>
 800802c:	4b61      	ldr	r3, [pc, #388]	; (80081b4 <_dtoa_r+0x314>)
 800802e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800803a:	f7f8 fd6f 	bl	8000b1c <__aeabi_dcmplt>
 800803e:	2800      	cmp	r0, #0
 8008040:	d04b      	beq.n	80080da <_dtoa_r+0x23a>
 8008042:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008046:	2300      	movs	r3, #0
 8008048:	930e      	str	r3, [sp, #56]	; 0x38
 800804a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800804c:	1b5d      	subs	r5, r3, r5
 800804e:	1e6b      	subs	r3, r5, #1
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	bf43      	ittte	mi
 8008054:	2300      	movmi	r3, #0
 8008056:	f1c5 0801 	rsbmi	r8, r5, #1
 800805a:	9304      	strmi	r3, [sp, #16]
 800805c:	f04f 0800 	movpl.w	r8, #0
 8008060:	f1ba 0f00 	cmp.w	sl, #0
 8008064:	db3b      	blt.n	80080de <_dtoa_r+0x23e>
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800806c:	4453      	add	r3, sl
 800806e:	9304      	str	r3, [sp, #16]
 8008070:	2300      	movs	r3, #0
 8008072:	9306      	str	r3, [sp, #24]
 8008074:	9b05      	ldr	r3, [sp, #20]
 8008076:	2b09      	cmp	r3, #9
 8008078:	d869      	bhi.n	800814e <_dtoa_r+0x2ae>
 800807a:	2b05      	cmp	r3, #5
 800807c:	bfc4      	itt	gt
 800807e:	3b04      	subgt	r3, #4
 8008080:	9305      	strgt	r3, [sp, #20]
 8008082:	9b05      	ldr	r3, [sp, #20]
 8008084:	f1a3 0302 	sub.w	r3, r3, #2
 8008088:	bfcc      	ite	gt
 800808a:	2500      	movgt	r5, #0
 800808c:	2501      	movle	r5, #1
 800808e:	2b03      	cmp	r3, #3
 8008090:	d869      	bhi.n	8008166 <_dtoa_r+0x2c6>
 8008092:	e8df f003 	tbb	[pc, r3]
 8008096:	4e2c      	.short	0x4e2c
 8008098:	5a4c      	.short	0x5a4c
 800809a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800809e:	441d      	add	r5, r3
 80080a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	bfc1      	itttt	gt
 80080a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80080b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80080b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080b8:	bfda      	itte	le
 80080ba:	f1c3 0320 	rsble	r3, r3, #32
 80080be:	fa06 f003 	lslle.w	r0, r6, r3
 80080c2:	4318      	orrgt	r0, r3
 80080c4:	f7f8 fa3e 	bl	8000544 <__aeabi_ui2d>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4606      	mov	r6, r0
 80080cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080d0:	3d01      	subs	r5, #1
 80080d2:	9310      	str	r3, [sp, #64]	; 0x40
 80080d4:	e771      	b.n	8007fba <_dtoa_r+0x11a>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e7b6      	b.n	8008048 <_dtoa_r+0x1a8>
 80080da:	900e      	str	r0, [sp, #56]	; 0x38
 80080dc:	e7b5      	b.n	800804a <_dtoa_r+0x1aa>
 80080de:	f1ca 0300 	rsb	r3, sl, #0
 80080e2:	9306      	str	r3, [sp, #24]
 80080e4:	2300      	movs	r3, #0
 80080e6:	eba8 080a 	sub.w	r8, r8, sl
 80080ea:	930d      	str	r3, [sp, #52]	; 0x34
 80080ec:	e7c2      	b.n	8008074 <_dtoa_r+0x1d4>
 80080ee:	2300      	movs	r3, #0
 80080f0:	9308      	str	r3, [sp, #32]
 80080f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	dc39      	bgt.n	800816c <_dtoa_r+0x2cc>
 80080f8:	f04f 0901 	mov.w	r9, #1
 80080fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008100:	464b      	mov	r3, r9
 8008102:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008106:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008108:	2200      	movs	r2, #0
 800810a:	6042      	str	r2, [r0, #4]
 800810c:	2204      	movs	r2, #4
 800810e:	f102 0614 	add.w	r6, r2, #20
 8008112:	429e      	cmp	r6, r3
 8008114:	6841      	ldr	r1, [r0, #4]
 8008116:	d92f      	bls.n	8008178 <_dtoa_r+0x2d8>
 8008118:	4620      	mov	r0, r4
 800811a:	f000 feeb 	bl	8008ef4 <_Balloc>
 800811e:	9000      	str	r0, [sp, #0]
 8008120:	2800      	cmp	r0, #0
 8008122:	d14b      	bne.n	80081bc <_dtoa_r+0x31c>
 8008124:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <_dtoa_r+0x318>)
 8008126:	4602      	mov	r2, r0
 8008128:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800812c:	e6d1      	b.n	8007ed2 <_dtoa_r+0x32>
 800812e:	2301      	movs	r3, #1
 8008130:	e7de      	b.n	80080f0 <_dtoa_r+0x250>
 8008132:	2300      	movs	r3, #0
 8008134:	9308      	str	r3, [sp, #32]
 8008136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008138:	eb0a 0903 	add.w	r9, sl, r3
 800813c:	f109 0301 	add.w	r3, r9, #1
 8008140:	2b01      	cmp	r3, #1
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	bfb8      	it	lt
 8008146:	2301      	movlt	r3, #1
 8008148:	e7dd      	b.n	8008106 <_dtoa_r+0x266>
 800814a:	2301      	movs	r3, #1
 800814c:	e7f2      	b.n	8008134 <_dtoa_r+0x294>
 800814e:	2501      	movs	r5, #1
 8008150:	2300      	movs	r3, #0
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	9508      	str	r5, [sp, #32]
 8008156:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800815a:	2200      	movs	r2, #0
 800815c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008160:	2312      	movs	r3, #18
 8008162:	9209      	str	r2, [sp, #36]	; 0x24
 8008164:	e7cf      	b.n	8008106 <_dtoa_r+0x266>
 8008166:	2301      	movs	r3, #1
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	e7f4      	b.n	8008156 <_dtoa_r+0x2b6>
 800816c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008170:	f8cd 9004 	str.w	r9, [sp, #4]
 8008174:	464b      	mov	r3, r9
 8008176:	e7c6      	b.n	8008106 <_dtoa_r+0x266>
 8008178:	3101      	adds	r1, #1
 800817a:	6041      	str	r1, [r0, #4]
 800817c:	0052      	lsls	r2, r2, #1
 800817e:	e7c6      	b.n	800810e <_dtoa_r+0x26e>
 8008180:	636f4361 	.word	0x636f4361
 8008184:	3fd287a7 	.word	0x3fd287a7
 8008188:	8b60c8b3 	.word	0x8b60c8b3
 800818c:	3fc68a28 	.word	0x3fc68a28
 8008190:	509f79fb 	.word	0x509f79fb
 8008194:	3fd34413 	.word	0x3fd34413
 8008198:	0800b70d 	.word	0x0800b70d
 800819c:	0800b724 	.word	0x0800b724
 80081a0:	7ff00000 	.word	0x7ff00000
 80081a4:	0800b709 	.word	0x0800b709
 80081a8:	0800b700 	.word	0x0800b700
 80081ac:	0800b6dd 	.word	0x0800b6dd
 80081b0:	3ff80000 	.word	0x3ff80000
 80081b4:	0800b880 	.word	0x0800b880
 80081b8:	0800b783 	.word	0x0800b783
 80081bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081be:	9a00      	ldr	r2, [sp, #0]
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	2b0e      	cmp	r3, #14
 80081c6:	f200 80ad 	bhi.w	8008324 <_dtoa_r+0x484>
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	f000 80aa 	beq.w	8008324 <_dtoa_r+0x484>
 80081d0:	f1ba 0f00 	cmp.w	sl, #0
 80081d4:	dd36      	ble.n	8008244 <_dtoa_r+0x3a4>
 80081d6:	4ac3      	ldr	r2, [pc, #780]	; (80084e4 <_dtoa_r+0x644>)
 80081d8:	f00a 030f 	and.w	r3, sl, #15
 80081dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081e0:	ed93 7b00 	vldr	d7, [r3]
 80081e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80081e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80081ec:	eeb0 8a47 	vmov.f32	s16, s14
 80081f0:	eef0 8a67 	vmov.f32	s17, s15
 80081f4:	d016      	beq.n	8008224 <_dtoa_r+0x384>
 80081f6:	4bbc      	ldr	r3, [pc, #752]	; (80084e8 <_dtoa_r+0x648>)
 80081f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008200:	f7f8 fb44 	bl	800088c <__aeabi_ddiv>
 8008204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008208:	f007 070f 	and.w	r7, r7, #15
 800820c:	2503      	movs	r5, #3
 800820e:	4eb6      	ldr	r6, [pc, #728]	; (80084e8 <_dtoa_r+0x648>)
 8008210:	b957      	cbnz	r7, 8008228 <_dtoa_r+0x388>
 8008212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008216:	ec53 2b18 	vmov	r2, r3, d8
 800821a:	f7f8 fb37 	bl	800088c <__aeabi_ddiv>
 800821e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008222:	e029      	b.n	8008278 <_dtoa_r+0x3d8>
 8008224:	2502      	movs	r5, #2
 8008226:	e7f2      	b.n	800820e <_dtoa_r+0x36e>
 8008228:	07f9      	lsls	r1, r7, #31
 800822a:	d508      	bpl.n	800823e <_dtoa_r+0x39e>
 800822c:	ec51 0b18 	vmov	r0, r1, d8
 8008230:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008234:	f7f8 fa00 	bl	8000638 <__aeabi_dmul>
 8008238:	ec41 0b18 	vmov	d8, r0, r1
 800823c:	3501      	adds	r5, #1
 800823e:	107f      	asrs	r7, r7, #1
 8008240:	3608      	adds	r6, #8
 8008242:	e7e5      	b.n	8008210 <_dtoa_r+0x370>
 8008244:	f000 80a6 	beq.w	8008394 <_dtoa_r+0x4f4>
 8008248:	f1ca 0600 	rsb	r6, sl, #0
 800824c:	4ba5      	ldr	r3, [pc, #660]	; (80084e4 <_dtoa_r+0x644>)
 800824e:	4fa6      	ldr	r7, [pc, #664]	; (80084e8 <_dtoa_r+0x648>)
 8008250:	f006 020f 	and.w	r2, r6, #15
 8008254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008260:	f7f8 f9ea 	bl	8000638 <__aeabi_dmul>
 8008264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008268:	1136      	asrs	r6, r6, #4
 800826a:	2300      	movs	r3, #0
 800826c:	2502      	movs	r5, #2
 800826e:	2e00      	cmp	r6, #0
 8008270:	f040 8085 	bne.w	800837e <_dtoa_r+0x4de>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1d2      	bne.n	800821e <_dtoa_r+0x37e>
 8008278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 808c 	beq.w	8008398 <_dtoa_r+0x4f8>
 8008280:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008284:	4b99      	ldr	r3, [pc, #612]	; (80084ec <_dtoa_r+0x64c>)
 8008286:	2200      	movs	r2, #0
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 fc46 	bl	8000b1c <__aeabi_dcmplt>
 8008290:	2800      	cmp	r0, #0
 8008292:	f000 8081 	beq.w	8008398 <_dtoa_r+0x4f8>
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d07d      	beq.n	8008398 <_dtoa_r+0x4f8>
 800829c:	f1b9 0f00 	cmp.w	r9, #0
 80082a0:	dd3c      	ble.n	800831c <_dtoa_r+0x47c>
 80082a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80082a6:	9307      	str	r3, [sp, #28]
 80082a8:	2200      	movs	r2, #0
 80082aa:	4b91      	ldr	r3, [pc, #580]	; (80084f0 <_dtoa_r+0x650>)
 80082ac:	4630      	mov	r0, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f8 f9c2 	bl	8000638 <__aeabi_dmul>
 80082b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b8:	3501      	adds	r5, #1
 80082ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80082be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082c2:	4628      	mov	r0, r5
 80082c4:	f7f8 f94e 	bl	8000564 <__aeabi_i2d>
 80082c8:	4632      	mov	r2, r6
 80082ca:	463b      	mov	r3, r7
 80082cc:	f7f8 f9b4 	bl	8000638 <__aeabi_dmul>
 80082d0:	4b88      	ldr	r3, [pc, #544]	; (80084f4 <_dtoa_r+0x654>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	f7f7 fffa 	bl	80002cc <__adddf3>
 80082d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80082dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e0:	9303      	str	r3, [sp, #12]
 80082e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d15c      	bne.n	80083a2 <_dtoa_r+0x502>
 80082e8:	4b83      	ldr	r3, [pc, #524]	; (80084f8 <_dtoa_r+0x658>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	4630      	mov	r0, r6
 80082ee:	4639      	mov	r1, r7
 80082f0:	f7f7 ffea 	bl	80002c8 <__aeabi_dsub>
 80082f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082f8:	4606      	mov	r6, r0
 80082fa:	460f      	mov	r7, r1
 80082fc:	f7f8 fc2c 	bl	8000b58 <__aeabi_dcmpgt>
 8008300:	2800      	cmp	r0, #0
 8008302:	f040 8296 	bne.w	8008832 <_dtoa_r+0x992>
 8008306:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800830a:	4630      	mov	r0, r6
 800830c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008310:	4639      	mov	r1, r7
 8008312:	f7f8 fc03 	bl	8000b1c <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	f040 8288 	bne.w	800882c <_dtoa_r+0x98c>
 800831c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008320:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008326:	2b00      	cmp	r3, #0
 8008328:	f2c0 8158 	blt.w	80085dc <_dtoa_r+0x73c>
 800832c:	f1ba 0f0e 	cmp.w	sl, #14
 8008330:	f300 8154 	bgt.w	80085dc <_dtoa_r+0x73c>
 8008334:	4b6b      	ldr	r3, [pc, #428]	; (80084e4 <_dtoa_r+0x644>)
 8008336:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800833a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800833e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	f280 80e3 	bge.w	800850c <_dtoa_r+0x66c>
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f300 80df 	bgt.w	800850c <_dtoa_r+0x66c>
 800834e:	f040 826d 	bne.w	800882c <_dtoa_r+0x98c>
 8008352:	4b69      	ldr	r3, [pc, #420]	; (80084f8 <_dtoa_r+0x658>)
 8008354:	2200      	movs	r2, #0
 8008356:	4640      	mov	r0, r8
 8008358:	4649      	mov	r1, r9
 800835a:	f7f8 f96d 	bl	8000638 <__aeabi_dmul>
 800835e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008362:	f7f8 fbef 	bl	8000b44 <__aeabi_dcmpge>
 8008366:	9e01      	ldr	r6, [sp, #4]
 8008368:	4637      	mov	r7, r6
 800836a:	2800      	cmp	r0, #0
 800836c:	f040 8243 	bne.w	80087f6 <_dtoa_r+0x956>
 8008370:	9d00      	ldr	r5, [sp, #0]
 8008372:	2331      	movs	r3, #49	; 0x31
 8008374:	f805 3b01 	strb.w	r3, [r5], #1
 8008378:	f10a 0a01 	add.w	sl, sl, #1
 800837c:	e23f      	b.n	80087fe <_dtoa_r+0x95e>
 800837e:	07f2      	lsls	r2, r6, #31
 8008380:	d505      	bpl.n	800838e <_dtoa_r+0x4ee>
 8008382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008386:	f7f8 f957 	bl	8000638 <__aeabi_dmul>
 800838a:	3501      	adds	r5, #1
 800838c:	2301      	movs	r3, #1
 800838e:	1076      	asrs	r6, r6, #1
 8008390:	3708      	adds	r7, #8
 8008392:	e76c      	b.n	800826e <_dtoa_r+0x3ce>
 8008394:	2502      	movs	r5, #2
 8008396:	e76f      	b.n	8008278 <_dtoa_r+0x3d8>
 8008398:	9b01      	ldr	r3, [sp, #4]
 800839a:	f8cd a01c 	str.w	sl, [sp, #28]
 800839e:	930c      	str	r3, [sp, #48]	; 0x30
 80083a0:	e78d      	b.n	80082be <_dtoa_r+0x41e>
 80083a2:	9900      	ldr	r1, [sp, #0]
 80083a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083a8:	4b4e      	ldr	r3, [pc, #312]	; (80084e4 <_dtoa_r+0x644>)
 80083aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083ae:	4401      	add	r1, r0
 80083b0:	9102      	str	r1, [sp, #8]
 80083b2:	9908      	ldr	r1, [sp, #32]
 80083b4:	eeb0 8a47 	vmov.f32	s16, s14
 80083b8:	eef0 8a67 	vmov.f32	s17, s15
 80083bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d045      	beq.n	8008454 <_dtoa_r+0x5b4>
 80083c8:	494c      	ldr	r1, [pc, #304]	; (80084fc <_dtoa_r+0x65c>)
 80083ca:	2000      	movs	r0, #0
 80083cc:	f7f8 fa5e 	bl	800088c <__aeabi_ddiv>
 80083d0:	ec53 2b18 	vmov	r2, r3, d8
 80083d4:	f7f7 ff78 	bl	80002c8 <__aeabi_dsub>
 80083d8:	9d00      	ldr	r5, [sp, #0]
 80083da:	ec41 0b18 	vmov	d8, r0, r1
 80083de:	4639      	mov	r1, r7
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7f8 fbd9 	bl	8000b98 <__aeabi_d2iz>
 80083e6:	900c      	str	r0, [sp, #48]	; 0x30
 80083e8:	f7f8 f8bc 	bl	8000564 <__aeabi_i2d>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f7 ff68 	bl	80002c8 <__aeabi_dsub>
 80083f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083fa:	3330      	adds	r3, #48	; 0x30
 80083fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008400:	ec53 2b18 	vmov	r2, r3, d8
 8008404:	4606      	mov	r6, r0
 8008406:	460f      	mov	r7, r1
 8008408:	f7f8 fb88 	bl	8000b1c <__aeabi_dcmplt>
 800840c:	2800      	cmp	r0, #0
 800840e:	d165      	bne.n	80084dc <_dtoa_r+0x63c>
 8008410:	4632      	mov	r2, r6
 8008412:	463b      	mov	r3, r7
 8008414:	4935      	ldr	r1, [pc, #212]	; (80084ec <_dtoa_r+0x64c>)
 8008416:	2000      	movs	r0, #0
 8008418:	f7f7 ff56 	bl	80002c8 <__aeabi_dsub>
 800841c:	ec53 2b18 	vmov	r2, r3, d8
 8008420:	f7f8 fb7c 	bl	8000b1c <__aeabi_dcmplt>
 8008424:	2800      	cmp	r0, #0
 8008426:	f040 80b9 	bne.w	800859c <_dtoa_r+0x6fc>
 800842a:	9b02      	ldr	r3, [sp, #8]
 800842c:	429d      	cmp	r5, r3
 800842e:	f43f af75 	beq.w	800831c <_dtoa_r+0x47c>
 8008432:	4b2f      	ldr	r3, [pc, #188]	; (80084f0 <_dtoa_r+0x650>)
 8008434:	ec51 0b18 	vmov	r0, r1, d8
 8008438:	2200      	movs	r2, #0
 800843a:	f7f8 f8fd 	bl	8000638 <__aeabi_dmul>
 800843e:	4b2c      	ldr	r3, [pc, #176]	; (80084f0 <_dtoa_r+0x650>)
 8008440:	ec41 0b18 	vmov	d8, r0, r1
 8008444:	2200      	movs	r2, #0
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f8 f8f5 	bl	8000638 <__aeabi_dmul>
 800844e:	4606      	mov	r6, r0
 8008450:	460f      	mov	r7, r1
 8008452:	e7c4      	b.n	80083de <_dtoa_r+0x53e>
 8008454:	ec51 0b17 	vmov	r0, r1, d7
 8008458:	f7f8 f8ee 	bl	8000638 <__aeabi_dmul>
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	9d00      	ldr	r5, [sp, #0]
 8008460:	930c      	str	r3, [sp, #48]	; 0x30
 8008462:	ec41 0b18 	vmov	d8, r0, r1
 8008466:	4639      	mov	r1, r7
 8008468:	4630      	mov	r0, r6
 800846a:	f7f8 fb95 	bl	8000b98 <__aeabi_d2iz>
 800846e:	9011      	str	r0, [sp, #68]	; 0x44
 8008470:	f7f8 f878 	bl	8000564 <__aeabi_i2d>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4630      	mov	r0, r6
 800847a:	4639      	mov	r1, r7
 800847c:	f7f7 ff24 	bl	80002c8 <__aeabi_dsub>
 8008480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008482:	3330      	adds	r3, #48	; 0x30
 8008484:	f805 3b01 	strb.w	r3, [r5], #1
 8008488:	9b02      	ldr	r3, [sp, #8]
 800848a:	429d      	cmp	r5, r3
 800848c:	4606      	mov	r6, r0
 800848e:	460f      	mov	r7, r1
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	d134      	bne.n	8008500 <_dtoa_r+0x660>
 8008496:	4b19      	ldr	r3, [pc, #100]	; (80084fc <_dtoa_r+0x65c>)
 8008498:	ec51 0b18 	vmov	r0, r1, d8
 800849c:	f7f7 ff16 	bl	80002cc <__adddf3>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4630      	mov	r0, r6
 80084a6:	4639      	mov	r1, r7
 80084a8:	f7f8 fb56 	bl	8000b58 <__aeabi_dcmpgt>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d175      	bne.n	800859c <_dtoa_r+0x6fc>
 80084b0:	ec53 2b18 	vmov	r2, r3, d8
 80084b4:	4911      	ldr	r1, [pc, #68]	; (80084fc <_dtoa_r+0x65c>)
 80084b6:	2000      	movs	r0, #0
 80084b8:	f7f7 ff06 	bl	80002c8 <__aeabi_dsub>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4630      	mov	r0, r6
 80084c2:	4639      	mov	r1, r7
 80084c4:	f7f8 fb2a 	bl	8000b1c <__aeabi_dcmplt>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	f43f af27 	beq.w	800831c <_dtoa_r+0x47c>
 80084ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d0:	1e6b      	subs	r3, r5, #1
 80084d2:	930c      	str	r3, [sp, #48]	; 0x30
 80084d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084d8:	2b30      	cmp	r3, #48	; 0x30
 80084da:	d0f8      	beq.n	80084ce <_dtoa_r+0x62e>
 80084dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084e0:	e04a      	b.n	8008578 <_dtoa_r+0x6d8>
 80084e2:	bf00      	nop
 80084e4:	0800b880 	.word	0x0800b880
 80084e8:	0800b858 	.word	0x0800b858
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	40240000 	.word	0x40240000
 80084f4:	401c0000 	.word	0x401c0000
 80084f8:	40140000 	.word	0x40140000
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	4baf      	ldr	r3, [pc, #700]	; (80087c0 <_dtoa_r+0x920>)
 8008502:	f7f8 f899 	bl	8000638 <__aeabi_dmul>
 8008506:	4606      	mov	r6, r0
 8008508:	460f      	mov	r7, r1
 800850a:	e7ac      	b.n	8008466 <_dtoa_r+0x5c6>
 800850c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008510:	9d00      	ldr	r5, [sp, #0]
 8008512:	4642      	mov	r2, r8
 8008514:	464b      	mov	r3, r9
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f8 f9b7 	bl	800088c <__aeabi_ddiv>
 800851e:	f7f8 fb3b 	bl	8000b98 <__aeabi_d2iz>
 8008522:	9002      	str	r0, [sp, #8]
 8008524:	f7f8 f81e 	bl	8000564 <__aeabi_i2d>
 8008528:	4642      	mov	r2, r8
 800852a:	464b      	mov	r3, r9
 800852c:	f7f8 f884 	bl	8000638 <__aeabi_dmul>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4630      	mov	r0, r6
 8008536:	4639      	mov	r1, r7
 8008538:	f7f7 fec6 	bl	80002c8 <__aeabi_dsub>
 800853c:	9e02      	ldr	r6, [sp, #8]
 800853e:	9f01      	ldr	r7, [sp, #4]
 8008540:	3630      	adds	r6, #48	; 0x30
 8008542:	f805 6b01 	strb.w	r6, [r5], #1
 8008546:	9e00      	ldr	r6, [sp, #0]
 8008548:	1bae      	subs	r6, r5, r6
 800854a:	42b7      	cmp	r7, r6
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	d137      	bne.n	80085c2 <_dtoa_r+0x722>
 8008552:	f7f7 febb 	bl	80002cc <__adddf3>
 8008556:	4642      	mov	r2, r8
 8008558:	464b      	mov	r3, r9
 800855a:	4606      	mov	r6, r0
 800855c:	460f      	mov	r7, r1
 800855e:	f7f8 fafb 	bl	8000b58 <__aeabi_dcmpgt>
 8008562:	b9c8      	cbnz	r0, 8008598 <_dtoa_r+0x6f8>
 8008564:	4642      	mov	r2, r8
 8008566:	464b      	mov	r3, r9
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7f8 facc 	bl	8000b08 <__aeabi_dcmpeq>
 8008570:	b110      	cbz	r0, 8008578 <_dtoa_r+0x6d8>
 8008572:	9b02      	ldr	r3, [sp, #8]
 8008574:	07d9      	lsls	r1, r3, #31
 8008576:	d40f      	bmi.n	8008598 <_dtoa_r+0x6f8>
 8008578:	4620      	mov	r0, r4
 800857a:	4659      	mov	r1, fp
 800857c:	f000 fcfa 	bl	8008f74 <_Bfree>
 8008580:	2300      	movs	r3, #0
 8008582:	702b      	strb	r3, [r5, #0]
 8008584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008586:	f10a 0001 	add.w	r0, sl, #1
 800858a:	6018      	str	r0, [r3, #0]
 800858c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800858e:	2b00      	cmp	r3, #0
 8008590:	f43f acd8 	beq.w	8007f44 <_dtoa_r+0xa4>
 8008594:	601d      	str	r5, [r3, #0]
 8008596:	e4d5      	b.n	8007f44 <_dtoa_r+0xa4>
 8008598:	f8cd a01c 	str.w	sl, [sp, #28]
 800859c:	462b      	mov	r3, r5
 800859e:	461d      	mov	r5, r3
 80085a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085a4:	2a39      	cmp	r2, #57	; 0x39
 80085a6:	d108      	bne.n	80085ba <_dtoa_r+0x71a>
 80085a8:	9a00      	ldr	r2, [sp, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d1f7      	bne.n	800859e <_dtoa_r+0x6fe>
 80085ae:	9a07      	ldr	r2, [sp, #28]
 80085b0:	9900      	ldr	r1, [sp, #0]
 80085b2:	3201      	adds	r2, #1
 80085b4:	9207      	str	r2, [sp, #28]
 80085b6:	2230      	movs	r2, #48	; 0x30
 80085b8:	700a      	strb	r2, [r1, #0]
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	3201      	adds	r2, #1
 80085be:	701a      	strb	r2, [r3, #0]
 80085c0:	e78c      	b.n	80084dc <_dtoa_r+0x63c>
 80085c2:	4b7f      	ldr	r3, [pc, #508]	; (80087c0 <_dtoa_r+0x920>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	f7f8 f837 	bl	8000638 <__aeabi_dmul>
 80085ca:	2200      	movs	r2, #0
 80085cc:	2300      	movs	r3, #0
 80085ce:	4606      	mov	r6, r0
 80085d0:	460f      	mov	r7, r1
 80085d2:	f7f8 fa99 	bl	8000b08 <__aeabi_dcmpeq>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d09b      	beq.n	8008512 <_dtoa_r+0x672>
 80085da:	e7cd      	b.n	8008578 <_dtoa_r+0x6d8>
 80085dc:	9a08      	ldr	r2, [sp, #32]
 80085de:	2a00      	cmp	r2, #0
 80085e0:	f000 80c4 	beq.w	800876c <_dtoa_r+0x8cc>
 80085e4:	9a05      	ldr	r2, [sp, #20]
 80085e6:	2a01      	cmp	r2, #1
 80085e8:	f300 80a8 	bgt.w	800873c <_dtoa_r+0x89c>
 80085ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	f000 80a0 	beq.w	8008734 <_dtoa_r+0x894>
 80085f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085f8:	9e06      	ldr	r6, [sp, #24]
 80085fa:	4645      	mov	r5, r8
 80085fc:	9a04      	ldr	r2, [sp, #16]
 80085fe:	2101      	movs	r1, #1
 8008600:	441a      	add	r2, r3
 8008602:	4620      	mov	r0, r4
 8008604:	4498      	add	r8, r3
 8008606:	9204      	str	r2, [sp, #16]
 8008608:	f000 fd70 	bl	80090ec <__i2b>
 800860c:	4607      	mov	r7, r0
 800860e:	2d00      	cmp	r5, #0
 8008610:	dd0b      	ble.n	800862a <_dtoa_r+0x78a>
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	dd08      	ble.n	800862a <_dtoa_r+0x78a>
 8008618:	42ab      	cmp	r3, r5
 800861a:	9a04      	ldr	r2, [sp, #16]
 800861c:	bfa8      	it	ge
 800861e:	462b      	movge	r3, r5
 8008620:	eba8 0803 	sub.w	r8, r8, r3
 8008624:	1aed      	subs	r5, r5, r3
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	9304      	str	r3, [sp, #16]
 800862a:	9b06      	ldr	r3, [sp, #24]
 800862c:	b1fb      	cbz	r3, 800866e <_dtoa_r+0x7ce>
 800862e:	9b08      	ldr	r3, [sp, #32]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 809f 	beq.w	8008774 <_dtoa_r+0x8d4>
 8008636:	2e00      	cmp	r6, #0
 8008638:	dd11      	ble.n	800865e <_dtoa_r+0x7be>
 800863a:	4639      	mov	r1, r7
 800863c:	4632      	mov	r2, r6
 800863e:	4620      	mov	r0, r4
 8008640:	f000 fe10 	bl	8009264 <__pow5mult>
 8008644:	465a      	mov	r2, fp
 8008646:	4601      	mov	r1, r0
 8008648:	4607      	mov	r7, r0
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fd64 	bl	8009118 <__multiply>
 8008650:	4659      	mov	r1, fp
 8008652:	9007      	str	r0, [sp, #28]
 8008654:	4620      	mov	r0, r4
 8008656:	f000 fc8d 	bl	8008f74 <_Bfree>
 800865a:	9b07      	ldr	r3, [sp, #28]
 800865c:	469b      	mov	fp, r3
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	1b9a      	subs	r2, r3, r6
 8008662:	d004      	beq.n	800866e <_dtoa_r+0x7ce>
 8008664:	4659      	mov	r1, fp
 8008666:	4620      	mov	r0, r4
 8008668:	f000 fdfc 	bl	8009264 <__pow5mult>
 800866c:	4683      	mov	fp, r0
 800866e:	2101      	movs	r1, #1
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fd3b 	bl	80090ec <__i2b>
 8008676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008678:	2b00      	cmp	r3, #0
 800867a:	4606      	mov	r6, r0
 800867c:	dd7c      	ble.n	8008778 <_dtoa_r+0x8d8>
 800867e:	461a      	mov	r2, r3
 8008680:	4601      	mov	r1, r0
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fdee 	bl	8009264 <__pow5mult>
 8008688:	9b05      	ldr	r3, [sp, #20]
 800868a:	2b01      	cmp	r3, #1
 800868c:	4606      	mov	r6, r0
 800868e:	dd76      	ble.n	800877e <_dtoa_r+0x8de>
 8008690:	2300      	movs	r3, #0
 8008692:	9306      	str	r3, [sp, #24]
 8008694:	6933      	ldr	r3, [r6, #16]
 8008696:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800869a:	6918      	ldr	r0, [r3, #16]
 800869c:	f000 fcd6 	bl	800904c <__hi0bits>
 80086a0:	f1c0 0020 	rsb	r0, r0, #32
 80086a4:	9b04      	ldr	r3, [sp, #16]
 80086a6:	4418      	add	r0, r3
 80086a8:	f010 001f 	ands.w	r0, r0, #31
 80086ac:	f000 8086 	beq.w	80087bc <_dtoa_r+0x91c>
 80086b0:	f1c0 0320 	rsb	r3, r0, #32
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	dd7f      	ble.n	80087b8 <_dtoa_r+0x918>
 80086b8:	f1c0 001c 	rsb	r0, r0, #28
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	4403      	add	r3, r0
 80086c0:	4480      	add	r8, r0
 80086c2:	4405      	add	r5, r0
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	f1b8 0f00 	cmp.w	r8, #0
 80086ca:	dd05      	ble.n	80086d8 <_dtoa_r+0x838>
 80086cc:	4659      	mov	r1, fp
 80086ce:	4642      	mov	r2, r8
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fe21 	bl	8009318 <__lshift>
 80086d6:	4683      	mov	fp, r0
 80086d8:	9b04      	ldr	r3, [sp, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dd05      	ble.n	80086ea <_dtoa_r+0x84a>
 80086de:	4631      	mov	r1, r6
 80086e0:	461a      	mov	r2, r3
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 fe18 	bl	8009318 <__lshift>
 80086e8:	4606      	mov	r6, r0
 80086ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d069      	beq.n	80087c4 <_dtoa_r+0x924>
 80086f0:	4631      	mov	r1, r6
 80086f2:	4658      	mov	r0, fp
 80086f4:	f000 fe7c 	bl	80093f0 <__mcmp>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	da63      	bge.n	80087c4 <_dtoa_r+0x924>
 80086fc:	2300      	movs	r3, #0
 80086fe:	4659      	mov	r1, fp
 8008700:	220a      	movs	r2, #10
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fc58 	bl	8008fb8 <__multadd>
 8008708:	9b08      	ldr	r3, [sp, #32]
 800870a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800870e:	4683      	mov	fp, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 818f 	beq.w	8008a34 <_dtoa_r+0xb94>
 8008716:	4639      	mov	r1, r7
 8008718:	2300      	movs	r3, #0
 800871a:	220a      	movs	r2, #10
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fc4b 	bl	8008fb8 <__multadd>
 8008722:	f1b9 0f00 	cmp.w	r9, #0
 8008726:	4607      	mov	r7, r0
 8008728:	f300 808e 	bgt.w	8008848 <_dtoa_r+0x9a8>
 800872c:	9b05      	ldr	r3, [sp, #20]
 800872e:	2b02      	cmp	r3, #2
 8008730:	dc50      	bgt.n	80087d4 <_dtoa_r+0x934>
 8008732:	e089      	b.n	8008848 <_dtoa_r+0x9a8>
 8008734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800873a:	e75d      	b.n	80085f8 <_dtoa_r+0x758>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	1e5e      	subs	r6, r3, #1
 8008740:	9b06      	ldr	r3, [sp, #24]
 8008742:	42b3      	cmp	r3, r6
 8008744:	bfbf      	itttt	lt
 8008746:	9b06      	ldrlt	r3, [sp, #24]
 8008748:	9606      	strlt	r6, [sp, #24]
 800874a:	1af2      	sublt	r2, r6, r3
 800874c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800874e:	bfb6      	itet	lt
 8008750:	189b      	addlt	r3, r3, r2
 8008752:	1b9e      	subge	r6, r3, r6
 8008754:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008756:	9b01      	ldr	r3, [sp, #4]
 8008758:	bfb8      	it	lt
 800875a:	2600      	movlt	r6, #0
 800875c:	2b00      	cmp	r3, #0
 800875e:	bfb5      	itete	lt
 8008760:	eba8 0503 	sublt.w	r5, r8, r3
 8008764:	9b01      	ldrge	r3, [sp, #4]
 8008766:	2300      	movlt	r3, #0
 8008768:	4645      	movge	r5, r8
 800876a:	e747      	b.n	80085fc <_dtoa_r+0x75c>
 800876c:	9e06      	ldr	r6, [sp, #24]
 800876e:	9f08      	ldr	r7, [sp, #32]
 8008770:	4645      	mov	r5, r8
 8008772:	e74c      	b.n	800860e <_dtoa_r+0x76e>
 8008774:	9a06      	ldr	r2, [sp, #24]
 8008776:	e775      	b.n	8008664 <_dtoa_r+0x7c4>
 8008778:	9b05      	ldr	r3, [sp, #20]
 800877a:	2b01      	cmp	r3, #1
 800877c:	dc18      	bgt.n	80087b0 <_dtoa_r+0x910>
 800877e:	9b02      	ldr	r3, [sp, #8]
 8008780:	b9b3      	cbnz	r3, 80087b0 <_dtoa_r+0x910>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008788:	b9a3      	cbnz	r3, 80087b4 <_dtoa_r+0x914>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008790:	0d1b      	lsrs	r3, r3, #20
 8008792:	051b      	lsls	r3, r3, #20
 8008794:	b12b      	cbz	r3, 80087a2 <_dtoa_r+0x902>
 8008796:	9b04      	ldr	r3, [sp, #16]
 8008798:	3301      	adds	r3, #1
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	f108 0801 	add.w	r8, r8, #1
 80087a0:	2301      	movs	r3, #1
 80087a2:	9306      	str	r3, [sp, #24]
 80087a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f47f af74 	bne.w	8008694 <_dtoa_r+0x7f4>
 80087ac:	2001      	movs	r0, #1
 80087ae:	e779      	b.n	80086a4 <_dtoa_r+0x804>
 80087b0:	2300      	movs	r3, #0
 80087b2:	e7f6      	b.n	80087a2 <_dtoa_r+0x902>
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	e7f4      	b.n	80087a2 <_dtoa_r+0x902>
 80087b8:	d085      	beq.n	80086c6 <_dtoa_r+0x826>
 80087ba:	4618      	mov	r0, r3
 80087bc:	301c      	adds	r0, #28
 80087be:	e77d      	b.n	80086bc <_dtoa_r+0x81c>
 80087c0:	40240000 	.word	0x40240000
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dc38      	bgt.n	800883c <_dtoa_r+0x99c>
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	dd35      	ble.n	800883c <_dtoa_r+0x99c>
 80087d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087d4:	f1b9 0f00 	cmp.w	r9, #0
 80087d8:	d10d      	bne.n	80087f6 <_dtoa_r+0x956>
 80087da:	4631      	mov	r1, r6
 80087dc:	464b      	mov	r3, r9
 80087de:	2205      	movs	r2, #5
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 fbe9 	bl	8008fb8 <__multadd>
 80087e6:	4601      	mov	r1, r0
 80087e8:	4606      	mov	r6, r0
 80087ea:	4658      	mov	r0, fp
 80087ec:	f000 fe00 	bl	80093f0 <__mcmp>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	f73f adbd 	bgt.w	8008370 <_dtoa_r+0x4d0>
 80087f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f8:	9d00      	ldr	r5, [sp, #0]
 80087fa:	ea6f 0a03 	mvn.w	sl, r3
 80087fe:	f04f 0800 	mov.w	r8, #0
 8008802:	4631      	mov	r1, r6
 8008804:	4620      	mov	r0, r4
 8008806:	f000 fbb5 	bl	8008f74 <_Bfree>
 800880a:	2f00      	cmp	r7, #0
 800880c:	f43f aeb4 	beq.w	8008578 <_dtoa_r+0x6d8>
 8008810:	f1b8 0f00 	cmp.w	r8, #0
 8008814:	d005      	beq.n	8008822 <_dtoa_r+0x982>
 8008816:	45b8      	cmp	r8, r7
 8008818:	d003      	beq.n	8008822 <_dtoa_r+0x982>
 800881a:	4641      	mov	r1, r8
 800881c:	4620      	mov	r0, r4
 800881e:	f000 fba9 	bl	8008f74 <_Bfree>
 8008822:	4639      	mov	r1, r7
 8008824:	4620      	mov	r0, r4
 8008826:	f000 fba5 	bl	8008f74 <_Bfree>
 800882a:	e6a5      	b.n	8008578 <_dtoa_r+0x6d8>
 800882c:	2600      	movs	r6, #0
 800882e:	4637      	mov	r7, r6
 8008830:	e7e1      	b.n	80087f6 <_dtoa_r+0x956>
 8008832:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008834:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008838:	4637      	mov	r7, r6
 800883a:	e599      	b.n	8008370 <_dtoa_r+0x4d0>
 800883c:	9b08      	ldr	r3, [sp, #32]
 800883e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 80fd 	beq.w	8008a42 <_dtoa_r+0xba2>
 8008848:	2d00      	cmp	r5, #0
 800884a:	dd05      	ble.n	8008858 <_dtoa_r+0x9b8>
 800884c:	4639      	mov	r1, r7
 800884e:	462a      	mov	r2, r5
 8008850:	4620      	mov	r0, r4
 8008852:	f000 fd61 	bl	8009318 <__lshift>
 8008856:	4607      	mov	r7, r0
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d05c      	beq.n	8008918 <_dtoa_r+0xa78>
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fb47 	bl	8008ef4 <_Balloc>
 8008866:	4605      	mov	r5, r0
 8008868:	b928      	cbnz	r0, 8008876 <_dtoa_r+0x9d6>
 800886a:	4b80      	ldr	r3, [pc, #512]	; (8008a6c <_dtoa_r+0xbcc>)
 800886c:	4602      	mov	r2, r0
 800886e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008872:	f7ff bb2e 	b.w	8007ed2 <_dtoa_r+0x32>
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	3202      	adds	r2, #2
 800887a:	0092      	lsls	r2, r2, #2
 800887c:	f107 010c 	add.w	r1, r7, #12
 8008880:	300c      	adds	r0, #12
 8008882:	f000 fb1d 	bl	8008ec0 <memcpy>
 8008886:	2201      	movs	r2, #1
 8008888:	4629      	mov	r1, r5
 800888a:	4620      	mov	r0, r4
 800888c:	f000 fd44 	bl	8009318 <__lshift>
 8008890:	9b00      	ldr	r3, [sp, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	444b      	add	r3, r9
 800889a:	9307      	str	r3, [sp, #28]
 800889c:	9b02      	ldr	r3, [sp, #8]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	46b8      	mov	r8, r7
 80088a4:	9306      	str	r3, [sp, #24]
 80088a6:	4607      	mov	r7, r0
 80088a8:	9b01      	ldr	r3, [sp, #4]
 80088aa:	4631      	mov	r1, r6
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4658      	mov	r0, fp
 80088b0:	9302      	str	r3, [sp, #8]
 80088b2:	f7ff fa67 	bl	8007d84 <quorem>
 80088b6:	4603      	mov	r3, r0
 80088b8:	3330      	adds	r3, #48	; 0x30
 80088ba:	9004      	str	r0, [sp, #16]
 80088bc:	4641      	mov	r1, r8
 80088be:	4658      	mov	r0, fp
 80088c0:	9308      	str	r3, [sp, #32]
 80088c2:	f000 fd95 	bl	80093f0 <__mcmp>
 80088c6:	463a      	mov	r2, r7
 80088c8:	4681      	mov	r9, r0
 80088ca:	4631      	mov	r1, r6
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 fdab 	bl	8009428 <__mdiff>
 80088d2:	68c2      	ldr	r2, [r0, #12]
 80088d4:	9b08      	ldr	r3, [sp, #32]
 80088d6:	4605      	mov	r5, r0
 80088d8:	bb02      	cbnz	r2, 800891c <_dtoa_r+0xa7c>
 80088da:	4601      	mov	r1, r0
 80088dc:	4658      	mov	r0, fp
 80088de:	f000 fd87 	bl	80093f0 <__mcmp>
 80088e2:	9b08      	ldr	r3, [sp, #32]
 80088e4:	4602      	mov	r2, r0
 80088e6:	4629      	mov	r1, r5
 80088e8:	4620      	mov	r0, r4
 80088ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80088ee:	f000 fb41 	bl	8008f74 <_Bfree>
 80088f2:	9b05      	ldr	r3, [sp, #20]
 80088f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088f6:	9d01      	ldr	r5, [sp, #4]
 80088f8:	ea43 0102 	orr.w	r1, r3, r2
 80088fc:	9b06      	ldr	r3, [sp, #24]
 80088fe:	430b      	orrs	r3, r1
 8008900:	9b08      	ldr	r3, [sp, #32]
 8008902:	d10d      	bne.n	8008920 <_dtoa_r+0xa80>
 8008904:	2b39      	cmp	r3, #57	; 0x39
 8008906:	d029      	beq.n	800895c <_dtoa_r+0xabc>
 8008908:	f1b9 0f00 	cmp.w	r9, #0
 800890c:	dd01      	ble.n	8008912 <_dtoa_r+0xa72>
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	3331      	adds	r3, #49	; 0x31
 8008912:	9a02      	ldr	r2, [sp, #8]
 8008914:	7013      	strb	r3, [r2, #0]
 8008916:	e774      	b.n	8008802 <_dtoa_r+0x962>
 8008918:	4638      	mov	r0, r7
 800891a:	e7b9      	b.n	8008890 <_dtoa_r+0x9f0>
 800891c:	2201      	movs	r2, #1
 800891e:	e7e2      	b.n	80088e6 <_dtoa_r+0xa46>
 8008920:	f1b9 0f00 	cmp.w	r9, #0
 8008924:	db06      	blt.n	8008934 <_dtoa_r+0xa94>
 8008926:	9905      	ldr	r1, [sp, #20]
 8008928:	ea41 0909 	orr.w	r9, r1, r9
 800892c:	9906      	ldr	r1, [sp, #24]
 800892e:	ea59 0101 	orrs.w	r1, r9, r1
 8008932:	d120      	bne.n	8008976 <_dtoa_r+0xad6>
 8008934:	2a00      	cmp	r2, #0
 8008936:	ddec      	ble.n	8008912 <_dtoa_r+0xa72>
 8008938:	4659      	mov	r1, fp
 800893a:	2201      	movs	r2, #1
 800893c:	4620      	mov	r0, r4
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	f000 fcea 	bl	8009318 <__lshift>
 8008944:	4631      	mov	r1, r6
 8008946:	4683      	mov	fp, r0
 8008948:	f000 fd52 	bl	80093f0 <__mcmp>
 800894c:	2800      	cmp	r0, #0
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	dc02      	bgt.n	8008958 <_dtoa_r+0xab8>
 8008952:	d1de      	bne.n	8008912 <_dtoa_r+0xa72>
 8008954:	07da      	lsls	r2, r3, #31
 8008956:	d5dc      	bpl.n	8008912 <_dtoa_r+0xa72>
 8008958:	2b39      	cmp	r3, #57	; 0x39
 800895a:	d1d8      	bne.n	800890e <_dtoa_r+0xa6e>
 800895c:	9a02      	ldr	r2, [sp, #8]
 800895e:	2339      	movs	r3, #57	; 0x39
 8008960:	7013      	strb	r3, [r2, #0]
 8008962:	462b      	mov	r3, r5
 8008964:	461d      	mov	r5, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800896c:	2a39      	cmp	r2, #57	; 0x39
 800896e:	d050      	beq.n	8008a12 <_dtoa_r+0xb72>
 8008970:	3201      	adds	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]
 8008974:	e745      	b.n	8008802 <_dtoa_r+0x962>
 8008976:	2a00      	cmp	r2, #0
 8008978:	dd03      	ble.n	8008982 <_dtoa_r+0xae2>
 800897a:	2b39      	cmp	r3, #57	; 0x39
 800897c:	d0ee      	beq.n	800895c <_dtoa_r+0xabc>
 800897e:	3301      	adds	r3, #1
 8008980:	e7c7      	b.n	8008912 <_dtoa_r+0xa72>
 8008982:	9a01      	ldr	r2, [sp, #4]
 8008984:	9907      	ldr	r1, [sp, #28]
 8008986:	f802 3c01 	strb.w	r3, [r2, #-1]
 800898a:	428a      	cmp	r2, r1
 800898c:	d02a      	beq.n	80089e4 <_dtoa_r+0xb44>
 800898e:	4659      	mov	r1, fp
 8008990:	2300      	movs	r3, #0
 8008992:	220a      	movs	r2, #10
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fb0f 	bl	8008fb8 <__multadd>
 800899a:	45b8      	cmp	r8, r7
 800899c:	4683      	mov	fp, r0
 800899e:	f04f 0300 	mov.w	r3, #0
 80089a2:	f04f 020a 	mov.w	r2, #10
 80089a6:	4641      	mov	r1, r8
 80089a8:	4620      	mov	r0, r4
 80089aa:	d107      	bne.n	80089bc <_dtoa_r+0xb1c>
 80089ac:	f000 fb04 	bl	8008fb8 <__multadd>
 80089b0:	4680      	mov	r8, r0
 80089b2:	4607      	mov	r7, r0
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	3301      	adds	r3, #1
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	e775      	b.n	80088a8 <_dtoa_r+0xa08>
 80089bc:	f000 fafc 	bl	8008fb8 <__multadd>
 80089c0:	4639      	mov	r1, r7
 80089c2:	4680      	mov	r8, r0
 80089c4:	2300      	movs	r3, #0
 80089c6:	220a      	movs	r2, #10
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 faf5 	bl	8008fb8 <__multadd>
 80089ce:	4607      	mov	r7, r0
 80089d0:	e7f0      	b.n	80089b4 <_dtoa_r+0xb14>
 80089d2:	f1b9 0f00 	cmp.w	r9, #0
 80089d6:	9a00      	ldr	r2, [sp, #0]
 80089d8:	bfcc      	ite	gt
 80089da:	464d      	movgt	r5, r9
 80089dc:	2501      	movle	r5, #1
 80089de:	4415      	add	r5, r2
 80089e0:	f04f 0800 	mov.w	r8, #0
 80089e4:	4659      	mov	r1, fp
 80089e6:	2201      	movs	r2, #1
 80089e8:	4620      	mov	r0, r4
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	f000 fc94 	bl	8009318 <__lshift>
 80089f0:	4631      	mov	r1, r6
 80089f2:	4683      	mov	fp, r0
 80089f4:	f000 fcfc 	bl	80093f0 <__mcmp>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dcb2      	bgt.n	8008962 <_dtoa_r+0xac2>
 80089fc:	d102      	bne.n	8008a04 <_dtoa_r+0xb64>
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d4ae      	bmi.n	8008962 <_dtoa_r+0xac2>
 8008a04:	462b      	mov	r3, r5
 8008a06:	461d      	mov	r5, r3
 8008a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a0c:	2a30      	cmp	r2, #48	; 0x30
 8008a0e:	d0fa      	beq.n	8008a06 <_dtoa_r+0xb66>
 8008a10:	e6f7      	b.n	8008802 <_dtoa_r+0x962>
 8008a12:	9a00      	ldr	r2, [sp, #0]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d1a5      	bne.n	8008964 <_dtoa_r+0xac4>
 8008a18:	f10a 0a01 	add.w	sl, sl, #1
 8008a1c:	2331      	movs	r3, #49	; 0x31
 8008a1e:	e779      	b.n	8008914 <_dtoa_r+0xa74>
 8008a20:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <_dtoa_r+0xbd0>)
 8008a22:	f7ff baaf 	b.w	8007f84 <_dtoa_r+0xe4>
 8008a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f47f aa86 	bne.w	8007f3a <_dtoa_r+0x9a>
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <_dtoa_r+0xbd4>)
 8008a30:	f7ff baa8 	b.w	8007f84 <_dtoa_r+0xe4>
 8008a34:	f1b9 0f00 	cmp.w	r9, #0
 8008a38:	dc03      	bgt.n	8008a42 <_dtoa_r+0xba2>
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	f73f aec9 	bgt.w	80087d4 <_dtoa_r+0x934>
 8008a42:	9d00      	ldr	r5, [sp, #0]
 8008a44:	4631      	mov	r1, r6
 8008a46:	4658      	mov	r0, fp
 8008a48:	f7ff f99c 	bl	8007d84 <quorem>
 8008a4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a50:	f805 3b01 	strb.w	r3, [r5], #1
 8008a54:	9a00      	ldr	r2, [sp, #0]
 8008a56:	1aaa      	subs	r2, r5, r2
 8008a58:	4591      	cmp	r9, r2
 8008a5a:	ddba      	ble.n	80089d2 <_dtoa_r+0xb32>
 8008a5c:	4659      	mov	r1, fp
 8008a5e:	2300      	movs	r3, #0
 8008a60:	220a      	movs	r2, #10
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 faa8 	bl	8008fb8 <__multadd>
 8008a68:	4683      	mov	fp, r0
 8008a6a:	e7eb      	b.n	8008a44 <_dtoa_r+0xba4>
 8008a6c:	0800b783 	.word	0x0800b783
 8008a70:	0800b6dc 	.word	0x0800b6dc
 8008a74:	0800b700 	.word	0x0800b700

08008a78 <__sflush_r>:
 8008a78:	898a      	ldrh	r2, [r1, #12]
 8008a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7e:	4605      	mov	r5, r0
 8008a80:	0710      	lsls	r0, r2, #28
 8008a82:	460c      	mov	r4, r1
 8008a84:	d458      	bmi.n	8008b38 <__sflush_r+0xc0>
 8008a86:	684b      	ldr	r3, [r1, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dc05      	bgt.n	8008a98 <__sflush_r+0x20>
 8008a8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dc02      	bgt.n	8008a98 <__sflush_r+0x20>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a9a:	2e00      	cmp	r6, #0
 8008a9c:	d0f9      	beq.n	8008a92 <__sflush_r+0x1a>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008aa4:	682f      	ldr	r7, [r5, #0]
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	d032      	beq.n	8008b10 <__sflush_r+0x98>
 8008aaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	075a      	lsls	r2, r3, #29
 8008ab0:	d505      	bpl.n	8008abe <__sflush_r+0x46>
 8008ab2:	6863      	ldr	r3, [r4, #4]
 8008ab4:	1ac0      	subs	r0, r0, r3
 8008ab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ab8:	b10b      	cbz	r3, 8008abe <__sflush_r+0x46>
 8008aba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008abc:	1ac0      	subs	r0, r0, r3
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ac4:	6a21      	ldr	r1, [r4, #32]
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b0      	blx	r6
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	d106      	bne.n	8008ade <__sflush_r+0x66>
 8008ad0:	6829      	ldr	r1, [r5, #0]
 8008ad2:	291d      	cmp	r1, #29
 8008ad4:	d82c      	bhi.n	8008b30 <__sflush_r+0xb8>
 8008ad6:	4a2a      	ldr	r2, [pc, #168]	; (8008b80 <__sflush_r+0x108>)
 8008ad8:	40ca      	lsrs	r2, r1
 8008ada:	07d6      	lsls	r6, r2, #31
 8008adc:	d528      	bpl.n	8008b30 <__sflush_r+0xb8>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	6062      	str	r2, [r4, #4]
 8008ae2:	04d9      	lsls	r1, r3, #19
 8008ae4:	6922      	ldr	r2, [r4, #16]
 8008ae6:	6022      	str	r2, [r4, #0]
 8008ae8:	d504      	bpl.n	8008af4 <__sflush_r+0x7c>
 8008aea:	1c42      	adds	r2, r0, #1
 8008aec:	d101      	bne.n	8008af2 <__sflush_r+0x7a>
 8008aee:	682b      	ldr	r3, [r5, #0]
 8008af0:	b903      	cbnz	r3, 8008af4 <__sflush_r+0x7c>
 8008af2:	6560      	str	r0, [r4, #84]	; 0x54
 8008af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af6:	602f      	str	r7, [r5, #0]
 8008af8:	2900      	cmp	r1, #0
 8008afa:	d0ca      	beq.n	8008a92 <__sflush_r+0x1a>
 8008afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b00:	4299      	cmp	r1, r3
 8008b02:	d002      	beq.n	8008b0a <__sflush_r+0x92>
 8008b04:	4628      	mov	r0, r5
 8008b06:	f7fe facb 	bl	80070a0 <_free_r>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b0e:	e7c1      	b.n	8008a94 <__sflush_r+0x1c>
 8008b10:	6a21      	ldr	r1, [r4, #32]
 8008b12:	2301      	movs	r3, #1
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b0      	blx	r6
 8008b18:	1c41      	adds	r1, r0, #1
 8008b1a:	d1c7      	bne.n	8008aac <__sflush_r+0x34>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0c4      	beq.n	8008aac <__sflush_r+0x34>
 8008b22:	2b1d      	cmp	r3, #29
 8008b24:	d001      	beq.n	8008b2a <__sflush_r+0xb2>
 8008b26:	2b16      	cmp	r3, #22
 8008b28:	d101      	bne.n	8008b2e <__sflush_r+0xb6>
 8008b2a:	602f      	str	r7, [r5, #0]
 8008b2c:	e7b1      	b.n	8008a92 <__sflush_r+0x1a>
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	e7ad      	b.n	8008a94 <__sflush_r+0x1c>
 8008b38:	690f      	ldr	r7, [r1, #16]
 8008b3a:	2f00      	cmp	r7, #0
 8008b3c:	d0a9      	beq.n	8008a92 <__sflush_r+0x1a>
 8008b3e:	0793      	lsls	r3, r2, #30
 8008b40:	680e      	ldr	r6, [r1, #0]
 8008b42:	bf08      	it	eq
 8008b44:	694b      	ldreq	r3, [r1, #20]
 8008b46:	600f      	str	r7, [r1, #0]
 8008b48:	bf18      	it	ne
 8008b4a:	2300      	movne	r3, #0
 8008b4c:	eba6 0807 	sub.w	r8, r6, r7
 8008b50:	608b      	str	r3, [r1, #8]
 8008b52:	f1b8 0f00 	cmp.w	r8, #0
 8008b56:	dd9c      	ble.n	8008a92 <__sflush_r+0x1a>
 8008b58:	6a21      	ldr	r1, [r4, #32]
 8008b5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b5c:	4643      	mov	r3, r8
 8008b5e:	463a      	mov	r2, r7
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b0      	blx	r6
 8008b64:	2800      	cmp	r0, #0
 8008b66:	dc06      	bgt.n	8008b76 <__sflush_r+0xfe>
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b74:	e78e      	b.n	8008a94 <__sflush_r+0x1c>
 8008b76:	4407      	add	r7, r0
 8008b78:	eba8 0800 	sub.w	r8, r8, r0
 8008b7c:	e7e9      	b.n	8008b52 <__sflush_r+0xda>
 8008b7e:	bf00      	nop
 8008b80:	20400001 	.word	0x20400001

08008b84 <_fflush_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	690b      	ldr	r3, [r1, #16]
 8008b88:	4605      	mov	r5, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	b913      	cbnz	r3, 8008b94 <_fflush_r+0x10>
 8008b8e:	2500      	movs	r5, #0
 8008b90:	4628      	mov	r0, r5
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	b118      	cbz	r0, 8008b9e <_fflush_r+0x1a>
 8008b96:	6983      	ldr	r3, [r0, #24]
 8008b98:	b90b      	cbnz	r3, 8008b9e <_fflush_r+0x1a>
 8008b9a:	f000 f887 	bl	8008cac <__sinit>
 8008b9e:	4b14      	ldr	r3, [pc, #80]	; (8008bf0 <_fflush_r+0x6c>)
 8008ba0:	429c      	cmp	r4, r3
 8008ba2:	d11b      	bne.n	8008bdc <_fflush_r+0x58>
 8008ba4:	686c      	ldr	r4, [r5, #4]
 8008ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0ef      	beq.n	8008b8e <_fflush_r+0xa>
 8008bae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bb0:	07d0      	lsls	r0, r2, #31
 8008bb2:	d404      	bmi.n	8008bbe <_fflush_r+0x3a>
 8008bb4:	0599      	lsls	r1, r3, #22
 8008bb6:	d402      	bmi.n	8008bbe <_fflush_r+0x3a>
 8008bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bba:	f000 f91a 	bl	8008df2 <__retarget_lock_acquire_recursive>
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	f7ff ff59 	bl	8008a78 <__sflush_r>
 8008bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bc8:	07da      	lsls	r2, r3, #31
 8008bca:	4605      	mov	r5, r0
 8008bcc:	d4e0      	bmi.n	8008b90 <_fflush_r+0xc>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	059b      	lsls	r3, r3, #22
 8008bd2:	d4dd      	bmi.n	8008b90 <_fflush_r+0xc>
 8008bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bd6:	f000 f90d 	bl	8008df4 <__retarget_lock_release_recursive>
 8008bda:	e7d9      	b.n	8008b90 <_fflush_r+0xc>
 8008bdc:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <_fflush_r+0x70>)
 8008bde:	429c      	cmp	r4, r3
 8008be0:	d101      	bne.n	8008be6 <_fflush_r+0x62>
 8008be2:	68ac      	ldr	r4, [r5, #8]
 8008be4:	e7df      	b.n	8008ba6 <_fflush_r+0x22>
 8008be6:	4b04      	ldr	r3, [pc, #16]	; (8008bf8 <_fflush_r+0x74>)
 8008be8:	429c      	cmp	r4, r3
 8008bea:	bf08      	it	eq
 8008bec:	68ec      	ldreq	r4, [r5, #12]
 8008bee:	e7da      	b.n	8008ba6 <_fflush_r+0x22>
 8008bf0:	0800b7b4 	.word	0x0800b7b4
 8008bf4:	0800b7d4 	.word	0x0800b7d4
 8008bf8:	0800b794 	.word	0x0800b794

08008bfc <std>:
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	b510      	push	{r4, lr}
 8008c00:	4604      	mov	r4, r0
 8008c02:	e9c0 3300 	strd	r3, r3, [r0]
 8008c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c0a:	6083      	str	r3, [r0, #8]
 8008c0c:	8181      	strh	r1, [r0, #12]
 8008c0e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c10:	81c2      	strh	r2, [r0, #14]
 8008c12:	6183      	str	r3, [r0, #24]
 8008c14:	4619      	mov	r1, r3
 8008c16:	2208      	movs	r2, #8
 8008c18:	305c      	adds	r0, #92	; 0x5c
 8008c1a:	f7fe fa39 	bl	8007090 <memset>
 8008c1e:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <std+0x38>)
 8008c20:	6263      	str	r3, [r4, #36]	; 0x24
 8008c22:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <std+0x3c>)
 8008c24:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c26:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <std+0x40>)
 8008c28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c2a:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <std+0x44>)
 8008c2c:	6224      	str	r4, [r4, #32]
 8008c2e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	bf00      	nop
 8008c34:	080098c1 	.word	0x080098c1
 8008c38:	080098e3 	.word	0x080098e3
 8008c3c:	0800991b 	.word	0x0800991b
 8008c40:	0800993f 	.word	0x0800993f

08008c44 <_cleanup_r>:
 8008c44:	4901      	ldr	r1, [pc, #4]	; (8008c4c <_cleanup_r+0x8>)
 8008c46:	f000 b8af 	b.w	8008da8 <_fwalk_reent>
 8008c4a:	bf00      	nop
 8008c4c:	08008b85 	.word	0x08008b85

08008c50 <__sfmoreglue>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	1e4a      	subs	r2, r1, #1
 8008c54:	2568      	movs	r5, #104	; 0x68
 8008c56:	4355      	muls	r5, r2
 8008c58:	460e      	mov	r6, r1
 8008c5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c5e:	f7fe fa6f 	bl	8007140 <_malloc_r>
 8008c62:	4604      	mov	r4, r0
 8008c64:	b140      	cbz	r0, 8008c78 <__sfmoreglue+0x28>
 8008c66:	2100      	movs	r1, #0
 8008c68:	e9c0 1600 	strd	r1, r6, [r0]
 8008c6c:	300c      	adds	r0, #12
 8008c6e:	60a0      	str	r0, [r4, #8]
 8008c70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c74:	f7fe fa0c 	bl	8007090 <memset>
 8008c78:	4620      	mov	r0, r4
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}

08008c7c <__sfp_lock_acquire>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__sfp_lock_acquire+0x8>)
 8008c7e:	f000 b8b8 	b.w	8008df2 <__retarget_lock_acquire_recursive>
 8008c82:	bf00      	nop
 8008c84:	20000544 	.word	0x20000544

08008c88 <__sfp_lock_release>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__sfp_lock_release+0x8>)
 8008c8a:	f000 b8b3 	b.w	8008df4 <__retarget_lock_release_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20000544 	.word	0x20000544

08008c94 <__sinit_lock_acquire>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__sinit_lock_acquire+0x8>)
 8008c96:	f000 b8ac 	b.w	8008df2 <__retarget_lock_acquire_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	2000053f 	.word	0x2000053f

08008ca0 <__sinit_lock_release>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <__sinit_lock_release+0x8>)
 8008ca2:	f000 b8a7 	b.w	8008df4 <__retarget_lock_release_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	2000053f 	.word	0x2000053f

08008cac <__sinit>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	4604      	mov	r4, r0
 8008cb0:	f7ff fff0 	bl	8008c94 <__sinit_lock_acquire>
 8008cb4:	69a3      	ldr	r3, [r4, #24]
 8008cb6:	b11b      	cbz	r3, 8008cc0 <__sinit+0x14>
 8008cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cbc:	f7ff bff0 	b.w	8008ca0 <__sinit_lock_release>
 8008cc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cc4:	6523      	str	r3, [r4, #80]	; 0x50
 8008cc6:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <__sinit+0x68>)
 8008cc8:	4a13      	ldr	r2, [pc, #76]	; (8008d18 <__sinit+0x6c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cce:	42a3      	cmp	r3, r4
 8008cd0:	bf04      	itt	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	61a3      	streq	r3, [r4, #24]
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 f820 	bl	8008d1c <__sfp>
 8008cdc:	6060      	str	r0, [r4, #4]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f000 f81c 	bl	8008d1c <__sfp>
 8008ce4:	60a0      	str	r0, [r4, #8]
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 f818 	bl	8008d1c <__sfp>
 8008cec:	2200      	movs	r2, #0
 8008cee:	60e0      	str	r0, [r4, #12]
 8008cf0:	2104      	movs	r1, #4
 8008cf2:	6860      	ldr	r0, [r4, #4]
 8008cf4:	f7ff ff82 	bl	8008bfc <std>
 8008cf8:	68a0      	ldr	r0, [r4, #8]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	2109      	movs	r1, #9
 8008cfe:	f7ff ff7d 	bl	8008bfc <std>
 8008d02:	68e0      	ldr	r0, [r4, #12]
 8008d04:	2202      	movs	r2, #2
 8008d06:	2112      	movs	r1, #18
 8008d08:	f7ff ff78 	bl	8008bfc <std>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	61a3      	str	r3, [r4, #24]
 8008d10:	e7d2      	b.n	8008cb8 <__sinit+0xc>
 8008d12:	bf00      	nop
 8008d14:	0800b6c8 	.word	0x0800b6c8
 8008d18:	08008c45 	.word	0x08008c45

08008d1c <__sfp>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	4607      	mov	r7, r0
 8008d20:	f7ff ffac 	bl	8008c7c <__sfp_lock_acquire>
 8008d24:	4b1e      	ldr	r3, [pc, #120]	; (8008da0 <__sfp+0x84>)
 8008d26:	681e      	ldr	r6, [r3, #0]
 8008d28:	69b3      	ldr	r3, [r6, #24]
 8008d2a:	b913      	cbnz	r3, 8008d32 <__sfp+0x16>
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f7ff ffbd 	bl	8008cac <__sinit>
 8008d32:	3648      	adds	r6, #72	; 0x48
 8008d34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	d503      	bpl.n	8008d44 <__sfp+0x28>
 8008d3c:	6833      	ldr	r3, [r6, #0]
 8008d3e:	b30b      	cbz	r3, 8008d84 <__sfp+0x68>
 8008d40:	6836      	ldr	r6, [r6, #0]
 8008d42:	e7f7      	b.n	8008d34 <__sfp+0x18>
 8008d44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d48:	b9d5      	cbnz	r5, 8008d80 <__sfp+0x64>
 8008d4a:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <__sfp+0x88>)
 8008d4c:	60e3      	str	r3, [r4, #12]
 8008d4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d52:	6665      	str	r5, [r4, #100]	; 0x64
 8008d54:	f000 f84c 	bl	8008df0 <__retarget_lock_init_recursive>
 8008d58:	f7ff ff96 	bl	8008c88 <__sfp_lock_release>
 8008d5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d64:	6025      	str	r5, [r4, #0]
 8008d66:	61a5      	str	r5, [r4, #24]
 8008d68:	2208      	movs	r2, #8
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d70:	f7fe f98e 	bl	8007090 <memset>
 8008d74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d80:	3468      	adds	r4, #104	; 0x68
 8008d82:	e7d9      	b.n	8008d38 <__sfp+0x1c>
 8008d84:	2104      	movs	r1, #4
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff ff62 	bl	8008c50 <__sfmoreglue>
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	6030      	str	r0, [r6, #0]
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d1d5      	bne.n	8008d40 <__sfp+0x24>
 8008d94:	f7ff ff78 	bl	8008c88 <__sfp_lock_release>
 8008d98:	230c      	movs	r3, #12
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	e7ee      	b.n	8008d7c <__sfp+0x60>
 8008d9e:	bf00      	nop
 8008da0:	0800b6c8 	.word	0x0800b6c8
 8008da4:	ffff0001 	.word	0xffff0001

08008da8 <_fwalk_reent>:
 8008da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dac:	4606      	mov	r6, r0
 8008dae:	4688      	mov	r8, r1
 8008db0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008db4:	2700      	movs	r7, #0
 8008db6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dba:	f1b9 0901 	subs.w	r9, r9, #1
 8008dbe:	d505      	bpl.n	8008dcc <_fwalk_reent+0x24>
 8008dc0:	6824      	ldr	r4, [r4, #0]
 8008dc2:	2c00      	cmp	r4, #0
 8008dc4:	d1f7      	bne.n	8008db6 <_fwalk_reent+0xe>
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dcc:	89ab      	ldrh	r3, [r5, #12]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d907      	bls.n	8008de2 <_fwalk_reent+0x3a>
 8008dd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	d003      	beq.n	8008de2 <_fwalk_reent+0x3a>
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4630      	mov	r0, r6
 8008dde:	47c0      	blx	r8
 8008de0:	4307      	orrs	r7, r0
 8008de2:	3568      	adds	r5, #104	; 0x68
 8008de4:	e7e9      	b.n	8008dba <_fwalk_reent+0x12>
	...

08008de8 <_localeconv_r>:
 8008de8:	4800      	ldr	r0, [pc, #0]	; (8008dec <_localeconv_r+0x4>)
 8008dea:	4770      	bx	lr
 8008dec:	20000160 	.word	0x20000160

08008df0 <__retarget_lock_init_recursive>:
 8008df0:	4770      	bx	lr

08008df2 <__retarget_lock_acquire_recursive>:
 8008df2:	4770      	bx	lr

08008df4 <__retarget_lock_release_recursive>:
 8008df4:	4770      	bx	lr

08008df6 <__swhatbuf_r>:
 8008df6:	b570      	push	{r4, r5, r6, lr}
 8008df8:	460e      	mov	r6, r1
 8008dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	b096      	sub	sp, #88	; 0x58
 8008e02:	4614      	mov	r4, r2
 8008e04:	461d      	mov	r5, r3
 8008e06:	da07      	bge.n	8008e18 <__swhatbuf_r+0x22>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	602b      	str	r3, [r5, #0]
 8008e0c:	89b3      	ldrh	r3, [r6, #12]
 8008e0e:	061a      	lsls	r2, r3, #24
 8008e10:	d410      	bmi.n	8008e34 <__swhatbuf_r+0x3e>
 8008e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e16:	e00e      	b.n	8008e36 <__swhatbuf_r+0x40>
 8008e18:	466a      	mov	r2, sp
 8008e1a:	f000 fde7 	bl	80099ec <_fstat_r>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	dbf2      	blt.n	8008e08 <__swhatbuf_r+0x12>
 8008e22:	9a01      	ldr	r2, [sp, #4]
 8008e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e2c:	425a      	negs	r2, r3
 8008e2e:	415a      	adcs	r2, r3
 8008e30:	602a      	str	r2, [r5, #0]
 8008e32:	e7ee      	b.n	8008e12 <__swhatbuf_r+0x1c>
 8008e34:	2340      	movs	r3, #64	; 0x40
 8008e36:	2000      	movs	r0, #0
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	b016      	add	sp, #88	; 0x58
 8008e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e40 <__smakebuf_r>:
 8008e40:	898b      	ldrh	r3, [r1, #12]
 8008e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e44:	079d      	lsls	r5, r3, #30
 8008e46:	4606      	mov	r6, r0
 8008e48:	460c      	mov	r4, r1
 8008e4a:	d507      	bpl.n	8008e5c <__smakebuf_r+0x1c>
 8008e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	6123      	str	r3, [r4, #16]
 8008e54:	2301      	movs	r3, #1
 8008e56:	6163      	str	r3, [r4, #20]
 8008e58:	b002      	add	sp, #8
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	ab01      	add	r3, sp, #4
 8008e5e:	466a      	mov	r2, sp
 8008e60:	f7ff ffc9 	bl	8008df6 <__swhatbuf_r>
 8008e64:	9900      	ldr	r1, [sp, #0]
 8008e66:	4605      	mov	r5, r0
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f7fe f969 	bl	8007140 <_malloc_r>
 8008e6e:	b948      	cbnz	r0, 8008e84 <__smakebuf_r+0x44>
 8008e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e74:	059a      	lsls	r2, r3, #22
 8008e76:	d4ef      	bmi.n	8008e58 <__smakebuf_r+0x18>
 8008e78:	f023 0303 	bic.w	r3, r3, #3
 8008e7c:	f043 0302 	orr.w	r3, r3, #2
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	e7e3      	b.n	8008e4c <__smakebuf_r+0xc>
 8008e84:	4b0d      	ldr	r3, [pc, #52]	; (8008ebc <__smakebuf_r+0x7c>)
 8008e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	6020      	str	r0, [r4, #0]
 8008e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	9b00      	ldr	r3, [sp, #0]
 8008e94:	6163      	str	r3, [r4, #20]
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	6120      	str	r0, [r4, #16]
 8008e9a:	b15b      	cbz	r3, 8008eb4 <__smakebuf_r+0x74>
 8008e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 fdb5 	bl	8009a10 <_isatty_r>
 8008ea6:	b128      	cbz	r0, 8008eb4 <__smakebuf_r+0x74>
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	81a3      	strh	r3, [r4, #12]
 8008eb4:	89a0      	ldrh	r0, [r4, #12]
 8008eb6:	4305      	orrs	r5, r0
 8008eb8:	81a5      	strh	r5, [r4, #12]
 8008eba:	e7cd      	b.n	8008e58 <__smakebuf_r+0x18>
 8008ebc:	08008c45 	.word	0x08008c45

08008ec0 <memcpy>:
 8008ec0:	440a      	add	r2, r1
 8008ec2:	4291      	cmp	r1, r2
 8008ec4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ec8:	d100      	bne.n	8008ecc <memcpy+0xc>
 8008eca:	4770      	bx	lr
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed6:	4291      	cmp	r1, r2
 8008ed8:	d1f9      	bne.n	8008ece <memcpy+0xe>
 8008eda:	bd10      	pop	{r4, pc}

08008edc <__malloc_lock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__malloc_lock+0x8>)
 8008ede:	f7ff bf88 	b.w	8008df2 <__retarget_lock_acquire_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	20000540 	.word	0x20000540

08008ee8 <__malloc_unlock>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	; (8008ef0 <__malloc_unlock+0x8>)
 8008eea:	f7ff bf83 	b.w	8008df4 <__retarget_lock_release_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20000540 	.word	0x20000540

08008ef4 <_Balloc>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ef8:	4604      	mov	r4, r0
 8008efa:	460d      	mov	r5, r1
 8008efc:	b976      	cbnz	r6, 8008f1c <_Balloc+0x28>
 8008efe:	2010      	movs	r0, #16
 8008f00:	f7fe f8be 	bl	8007080 <malloc>
 8008f04:	4602      	mov	r2, r0
 8008f06:	6260      	str	r0, [r4, #36]	; 0x24
 8008f08:	b920      	cbnz	r0, 8008f14 <_Balloc+0x20>
 8008f0a:	4b18      	ldr	r3, [pc, #96]	; (8008f6c <_Balloc+0x78>)
 8008f0c:	4818      	ldr	r0, [pc, #96]	; (8008f70 <_Balloc+0x7c>)
 8008f0e:	2166      	movs	r1, #102	; 0x66
 8008f10:	f000 fd2c 	bl	800996c <__assert_func>
 8008f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f18:	6006      	str	r6, [r0, #0]
 8008f1a:	60c6      	str	r6, [r0, #12]
 8008f1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f1e:	68f3      	ldr	r3, [r6, #12]
 8008f20:	b183      	cbz	r3, 8008f44 <_Balloc+0x50>
 8008f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f2a:	b9b8      	cbnz	r0, 8008f5c <_Balloc+0x68>
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f32:	1d72      	adds	r2, r6, #5
 8008f34:	0092      	lsls	r2, r2, #2
 8008f36:	4620      	mov	r0, r4
 8008f38:	f000 fb5a 	bl	80095f0 <_calloc_r>
 8008f3c:	b160      	cbz	r0, 8008f58 <_Balloc+0x64>
 8008f3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f42:	e00e      	b.n	8008f62 <_Balloc+0x6e>
 8008f44:	2221      	movs	r2, #33	; 0x21
 8008f46:	2104      	movs	r1, #4
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 fb51 	bl	80095f0 <_calloc_r>
 8008f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f50:	60f0      	str	r0, [r6, #12]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e4      	bne.n	8008f22 <_Balloc+0x2e>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	6802      	ldr	r2, [r0, #0]
 8008f5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f62:	2300      	movs	r3, #0
 8008f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f68:	e7f7      	b.n	8008f5a <_Balloc+0x66>
 8008f6a:	bf00      	nop
 8008f6c:	0800b70d 	.word	0x0800b70d
 8008f70:	0800b7f4 	.word	0x0800b7f4

08008f74 <_Bfree>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f78:	4605      	mov	r5, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	b976      	cbnz	r6, 8008f9c <_Bfree+0x28>
 8008f7e:	2010      	movs	r0, #16
 8008f80:	f7fe f87e 	bl	8007080 <malloc>
 8008f84:	4602      	mov	r2, r0
 8008f86:	6268      	str	r0, [r5, #36]	; 0x24
 8008f88:	b920      	cbnz	r0, 8008f94 <_Bfree+0x20>
 8008f8a:	4b09      	ldr	r3, [pc, #36]	; (8008fb0 <_Bfree+0x3c>)
 8008f8c:	4809      	ldr	r0, [pc, #36]	; (8008fb4 <_Bfree+0x40>)
 8008f8e:	218a      	movs	r1, #138	; 0x8a
 8008f90:	f000 fcec 	bl	800996c <__assert_func>
 8008f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f98:	6006      	str	r6, [r0, #0]
 8008f9a:	60c6      	str	r6, [r0, #12]
 8008f9c:	b13c      	cbz	r4, 8008fae <_Bfree+0x3a>
 8008f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fa0:	6862      	ldr	r2, [r4, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fa8:	6021      	str	r1, [r4, #0]
 8008faa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	0800b70d 	.word	0x0800b70d
 8008fb4:	0800b7f4 	.word	0x0800b7f4

08008fb8 <__multadd>:
 8008fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbc:	690e      	ldr	r6, [r1, #16]
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	4698      	mov	r8, r3
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	f101 0014 	add.w	r0, r1, #20
 8008fc8:	2300      	movs	r3, #0
 8008fca:	6805      	ldr	r5, [r0, #0]
 8008fcc:	b2a9      	uxth	r1, r5
 8008fce:	fb02 8101 	mla	r1, r2, r1, r8
 8008fd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008fd6:	0c2d      	lsrs	r5, r5, #16
 8008fd8:	fb02 c505 	mla	r5, r2, r5, ip
 8008fdc:	b289      	uxth	r1, r1
 8008fde:	3301      	adds	r3, #1
 8008fe0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008fe4:	429e      	cmp	r6, r3
 8008fe6:	f840 1b04 	str.w	r1, [r0], #4
 8008fea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008fee:	dcec      	bgt.n	8008fca <__multadd+0x12>
 8008ff0:	f1b8 0f00 	cmp.w	r8, #0
 8008ff4:	d022      	beq.n	800903c <__multadd+0x84>
 8008ff6:	68a3      	ldr	r3, [r4, #8]
 8008ff8:	42b3      	cmp	r3, r6
 8008ffa:	dc19      	bgt.n	8009030 <__multadd+0x78>
 8008ffc:	6861      	ldr	r1, [r4, #4]
 8008ffe:	4638      	mov	r0, r7
 8009000:	3101      	adds	r1, #1
 8009002:	f7ff ff77 	bl	8008ef4 <_Balloc>
 8009006:	4605      	mov	r5, r0
 8009008:	b928      	cbnz	r0, 8009016 <__multadd+0x5e>
 800900a:	4602      	mov	r2, r0
 800900c:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <__multadd+0x8c>)
 800900e:	480e      	ldr	r0, [pc, #56]	; (8009048 <__multadd+0x90>)
 8009010:	21b5      	movs	r1, #181	; 0xb5
 8009012:	f000 fcab 	bl	800996c <__assert_func>
 8009016:	6922      	ldr	r2, [r4, #16]
 8009018:	3202      	adds	r2, #2
 800901a:	f104 010c 	add.w	r1, r4, #12
 800901e:	0092      	lsls	r2, r2, #2
 8009020:	300c      	adds	r0, #12
 8009022:	f7ff ff4d 	bl	8008ec0 <memcpy>
 8009026:	4621      	mov	r1, r4
 8009028:	4638      	mov	r0, r7
 800902a:	f7ff ffa3 	bl	8008f74 <_Bfree>
 800902e:	462c      	mov	r4, r5
 8009030:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009034:	3601      	adds	r6, #1
 8009036:	f8c3 8014 	str.w	r8, [r3, #20]
 800903a:	6126      	str	r6, [r4, #16]
 800903c:	4620      	mov	r0, r4
 800903e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009042:	bf00      	nop
 8009044:	0800b783 	.word	0x0800b783
 8009048:	0800b7f4 	.word	0x0800b7f4

0800904c <__hi0bits>:
 800904c:	0c03      	lsrs	r3, r0, #16
 800904e:	041b      	lsls	r3, r3, #16
 8009050:	b9d3      	cbnz	r3, 8009088 <__hi0bits+0x3c>
 8009052:	0400      	lsls	r0, r0, #16
 8009054:	2310      	movs	r3, #16
 8009056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800905a:	bf04      	itt	eq
 800905c:	0200      	lsleq	r0, r0, #8
 800905e:	3308      	addeq	r3, #8
 8009060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009064:	bf04      	itt	eq
 8009066:	0100      	lsleq	r0, r0, #4
 8009068:	3304      	addeq	r3, #4
 800906a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800906e:	bf04      	itt	eq
 8009070:	0080      	lsleq	r0, r0, #2
 8009072:	3302      	addeq	r3, #2
 8009074:	2800      	cmp	r0, #0
 8009076:	db05      	blt.n	8009084 <__hi0bits+0x38>
 8009078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800907c:	f103 0301 	add.w	r3, r3, #1
 8009080:	bf08      	it	eq
 8009082:	2320      	moveq	r3, #32
 8009084:	4618      	mov	r0, r3
 8009086:	4770      	bx	lr
 8009088:	2300      	movs	r3, #0
 800908a:	e7e4      	b.n	8009056 <__hi0bits+0xa>

0800908c <__lo0bits>:
 800908c:	6803      	ldr	r3, [r0, #0]
 800908e:	f013 0207 	ands.w	r2, r3, #7
 8009092:	4601      	mov	r1, r0
 8009094:	d00b      	beq.n	80090ae <__lo0bits+0x22>
 8009096:	07da      	lsls	r2, r3, #31
 8009098:	d424      	bmi.n	80090e4 <__lo0bits+0x58>
 800909a:	0798      	lsls	r0, r3, #30
 800909c:	bf49      	itett	mi
 800909e:	085b      	lsrmi	r3, r3, #1
 80090a0:	089b      	lsrpl	r3, r3, #2
 80090a2:	2001      	movmi	r0, #1
 80090a4:	600b      	strmi	r3, [r1, #0]
 80090a6:	bf5c      	itt	pl
 80090a8:	600b      	strpl	r3, [r1, #0]
 80090aa:	2002      	movpl	r0, #2
 80090ac:	4770      	bx	lr
 80090ae:	b298      	uxth	r0, r3
 80090b0:	b9b0      	cbnz	r0, 80090e0 <__lo0bits+0x54>
 80090b2:	0c1b      	lsrs	r3, r3, #16
 80090b4:	2010      	movs	r0, #16
 80090b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090ba:	bf04      	itt	eq
 80090bc:	0a1b      	lsreq	r3, r3, #8
 80090be:	3008      	addeq	r0, #8
 80090c0:	071a      	lsls	r2, r3, #28
 80090c2:	bf04      	itt	eq
 80090c4:	091b      	lsreq	r3, r3, #4
 80090c6:	3004      	addeq	r0, #4
 80090c8:	079a      	lsls	r2, r3, #30
 80090ca:	bf04      	itt	eq
 80090cc:	089b      	lsreq	r3, r3, #2
 80090ce:	3002      	addeq	r0, #2
 80090d0:	07da      	lsls	r2, r3, #31
 80090d2:	d403      	bmi.n	80090dc <__lo0bits+0x50>
 80090d4:	085b      	lsrs	r3, r3, #1
 80090d6:	f100 0001 	add.w	r0, r0, #1
 80090da:	d005      	beq.n	80090e8 <__lo0bits+0x5c>
 80090dc:	600b      	str	r3, [r1, #0]
 80090de:	4770      	bx	lr
 80090e0:	4610      	mov	r0, r2
 80090e2:	e7e8      	b.n	80090b6 <__lo0bits+0x2a>
 80090e4:	2000      	movs	r0, #0
 80090e6:	4770      	bx	lr
 80090e8:	2020      	movs	r0, #32
 80090ea:	4770      	bx	lr

080090ec <__i2b>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	460c      	mov	r4, r1
 80090f0:	2101      	movs	r1, #1
 80090f2:	f7ff feff 	bl	8008ef4 <_Balloc>
 80090f6:	4602      	mov	r2, r0
 80090f8:	b928      	cbnz	r0, 8009106 <__i2b+0x1a>
 80090fa:	4b05      	ldr	r3, [pc, #20]	; (8009110 <__i2b+0x24>)
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <__i2b+0x28>)
 80090fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009102:	f000 fc33 	bl	800996c <__assert_func>
 8009106:	2301      	movs	r3, #1
 8009108:	6144      	str	r4, [r0, #20]
 800910a:	6103      	str	r3, [r0, #16]
 800910c:	bd10      	pop	{r4, pc}
 800910e:	bf00      	nop
 8009110:	0800b783 	.word	0x0800b783
 8009114:	0800b7f4 	.word	0x0800b7f4

08009118 <__multiply>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	4614      	mov	r4, r2
 800911e:	690a      	ldr	r2, [r1, #16]
 8009120:	6923      	ldr	r3, [r4, #16]
 8009122:	429a      	cmp	r2, r3
 8009124:	bfb8      	it	lt
 8009126:	460b      	movlt	r3, r1
 8009128:	460d      	mov	r5, r1
 800912a:	bfbc      	itt	lt
 800912c:	4625      	movlt	r5, r4
 800912e:	461c      	movlt	r4, r3
 8009130:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009134:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009138:	68ab      	ldr	r3, [r5, #8]
 800913a:	6869      	ldr	r1, [r5, #4]
 800913c:	eb0a 0709 	add.w	r7, sl, r9
 8009140:	42bb      	cmp	r3, r7
 8009142:	b085      	sub	sp, #20
 8009144:	bfb8      	it	lt
 8009146:	3101      	addlt	r1, #1
 8009148:	f7ff fed4 	bl	8008ef4 <_Balloc>
 800914c:	b930      	cbnz	r0, 800915c <__multiply+0x44>
 800914e:	4602      	mov	r2, r0
 8009150:	4b42      	ldr	r3, [pc, #264]	; (800925c <__multiply+0x144>)
 8009152:	4843      	ldr	r0, [pc, #268]	; (8009260 <__multiply+0x148>)
 8009154:	f240 115d 	movw	r1, #349	; 0x15d
 8009158:	f000 fc08 	bl	800996c <__assert_func>
 800915c:	f100 0614 	add.w	r6, r0, #20
 8009160:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009164:	4633      	mov	r3, r6
 8009166:	2200      	movs	r2, #0
 8009168:	4543      	cmp	r3, r8
 800916a:	d31e      	bcc.n	80091aa <__multiply+0x92>
 800916c:	f105 0c14 	add.w	ip, r5, #20
 8009170:	f104 0314 	add.w	r3, r4, #20
 8009174:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009178:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800917c:	9202      	str	r2, [sp, #8]
 800917e:	ebac 0205 	sub.w	r2, ip, r5
 8009182:	3a15      	subs	r2, #21
 8009184:	f022 0203 	bic.w	r2, r2, #3
 8009188:	3204      	adds	r2, #4
 800918a:	f105 0115 	add.w	r1, r5, #21
 800918e:	458c      	cmp	ip, r1
 8009190:	bf38      	it	cc
 8009192:	2204      	movcc	r2, #4
 8009194:	9201      	str	r2, [sp, #4]
 8009196:	9a02      	ldr	r2, [sp, #8]
 8009198:	9303      	str	r3, [sp, #12]
 800919a:	429a      	cmp	r2, r3
 800919c:	d808      	bhi.n	80091b0 <__multiply+0x98>
 800919e:	2f00      	cmp	r7, #0
 80091a0:	dc55      	bgt.n	800924e <__multiply+0x136>
 80091a2:	6107      	str	r7, [r0, #16]
 80091a4:	b005      	add	sp, #20
 80091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	f843 2b04 	str.w	r2, [r3], #4
 80091ae:	e7db      	b.n	8009168 <__multiply+0x50>
 80091b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80091b4:	f1ba 0f00 	cmp.w	sl, #0
 80091b8:	d020      	beq.n	80091fc <__multiply+0xe4>
 80091ba:	f105 0e14 	add.w	lr, r5, #20
 80091be:	46b1      	mov	r9, r6
 80091c0:	2200      	movs	r2, #0
 80091c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80091c6:	f8d9 b000 	ldr.w	fp, [r9]
 80091ca:	b2a1      	uxth	r1, r4
 80091cc:	fa1f fb8b 	uxth.w	fp, fp
 80091d0:	fb0a b101 	mla	r1, sl, r1, fp
 80091d4:	4411      	add	r1, r2
 80091d6:	f8d9 2000 	ldr.w	r2, [r9]
 80091da:	0c24      	lsrs	r4, r4, #16
 80091dc:	0c12      	lsrs	r2, r2, #16
 80091de:	fb0a 2404 	mla	r4, sl, r4, r2
 80091e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80091e6:	b289      	uxth	r1, r1
 80091e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80091ec:	45f4      	cmp	ip, lr
 80091ee:	f849 1b04 	str.w	r1, [r9], #4
 80091f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80091f6:	d8e4      	bhi.n	80091c2 <__multiply+0xaa>
 80091f8:	9901      	ldr	r1, [sp, #4]
 80091fa:	5072      	str	r2, [r6, r1]
 80091fc:	9a03      	ldr	r2, [sp, #12]
 80091fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009202:	3304      	adds	r3, #4
 8009204:	f1b9 0f00 	cmp.w	r9, #0
 8009208:	d01f      	beq.n	800924a <__multiply+0x132>
 800920a:	6834      	ldr	r4, [r6, #0]
 800920c:	f105 0114 	add.w	r1, r5, #20
 8009210:	46b6      	mov	lr, r6
 8009212:	f04f 0a00 	mov.w	sl, #0
 8009216:	880a      	ldrh	r2, [r1, #0]
 8009218:	f8be b002 	ldrh.w	fp, [lr, #2]
 800921c:	fb09 b202 	mla	r2, r9, r2, fp
 8009220:	4492      	add	sl, r2
 8009222:	b2a4      	uxth	r4, r4
 8009224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009228:	f84e 4b04 	str.w	r4, [lr], #4
 800922c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009230:	f8be 2000 	ldrh.w	r2, [lr]
 8009234:	0c24      	lsrs	r4, r4, #16
 8009236:	fb09 2404 	mla	r4, r9, r4, r2
 800923a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800923e:	458c      	cmp	ip, r1
 8009240:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009244:	d8e7      	bhi.n	8009216 <__multiply+0xfe>
 8009246:	9a01      	ldr	r2, [sp, #4]
 8009248:	50b4      	str	r4, [r6, r2]
 800924a:	3604      	adds	r6, #4
 800924c:	e7a3      	b.n	8009196 <__multiply+0x7e>
 800924e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1a5      	bne.n	80091a2 <__multiply+0x8a>
 8009256:	3f01      	subs	r7, #1
 8009258:	e7a1      	b.n	800919e <__multiply+0x86>
 800925a:	bf00      	nop
 800925c:	0800b783 	.word	0x0800b783
 8009260:	0800b7f4 	.word	0x0800b7f4

08009264 <__pow5mult>:
 8009264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009268:	4615      	mov	r5, r2
 800926a:	f012 0203 	ands.w	r2, r2, #3
 800926e:	4606      	mov	r6, r0
 8009270:	460f      	mov	r7, r1
 8009272:	d007      	beq.n	8009284 <__pow5mult+0x20>
 8009274:	4c25      	ldr	r4, [pc, #148]	; (800930c <__pow5mult+0xa8>)
 8009276:	3a01      	subs	r2, #1
 8009278:	2300      	movs	r3, #0
 800927a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800927e:	f7ff fe9b 	bl	8008fb8 <__multadd>
 8009282:	4607      	mov	r7, r0
 8009284:	10ad      	asrs	r5, r5, #2
 8009286:	d03d      	beq.n	8009304 <__pow5mult+0xa0>
 8009288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800928a:	b97c      	cbnz	r4, 80092ac <__pow5mult+0x48>
 800928c:	2010      	movs	r0, #16
 800928e:	f7fd fef7 	bl	8007080 <malloc>
 8009292:	4602      	mov	r2, r0
 8009294:	6270      	str	r0, [r6, #36]	; 0x24
 8009296:	b928      	cbnz	r0, 80092a4 <__pow5mult+0x40>
 8009298:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <__pow5mult+0xac>)
 800929a:	481e      	ldr	r0, [pc, #120]	; (8009314 <__pow5mult+0xb0>)
 800929c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092a0:	f000 fb64 	bl	800996c <__assert_func>
 80092a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092a8:	6004      	str	r4, [r0, #0]
 80092aa:	60c4      	str	r4, [r0, #12]
 80092ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092b4:	b94c      	cbnz	r4, 80092ca <__pow5mult+0x66>
 80092b6:	f240 2171 	movw	r1, #625	; 0x271
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7ff ff16 	bl	80090ec <__i2b>
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80092c6:	4604      	mov	r4, r0
 80092c8:	6003      	str	r3, [r0, #0]
 80092ca:	f04f 0900 	mov.w	r9, #0
 80092ce:	07eb      	lsls	r3, r5, #31
 80092d0:	d50a      	bpl.n	80092e8 <__pow5mult+0x84>
 80092d2:	4639      	mov	r1, r7
 80092d4:	4622      	mov	r2, r4
 80092d6:	4630      	mov	r0, r6
 80092d8:	f7ff ff1e 	bl	8009118 <__multiply>
 80092dc:	4639      	mov	r1, r7
 80092de:	4680      	mov	r8, r0
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7ff fe47 	bl	8008f74 <_Bfree>
 80092e6:	4647      	mov	r7, r8
 80092e8:	106d      	asrs	r5, r5, #1
 80092ea:	d00b      	beq.n	8009304 <__pow5mult+0xa0>
 80092ec:	6820      	ldr	r0, [r4, #0]
 80092ee:	b938      	cbnz	r0, 8009300 <__pow5mult+0x9c>
 80092f0:	4622      	mov	r2, r4
 80092f2:	4621      	mov	r1, r4
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff ff0f 	bl	8009118 <__multiply>
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	f8c0 9000 	str.w	r9, [r0]
 8009300:	4604      	mov	r4, r0
 8009302:	e7e4      	b.n	80092ce <__pow5mult+0x6a>
 8009304:	4638      	mov	r0, r7
 8009306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800930a:	bf00      	nop
 800930c:	0800b948 	.word	0x0800b948
 8009310:	0800b70d 	.word	0x0800b70d
 8009314:	0800b7f4 	.word	0x0800b7f4

08009318 <__lshift>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	460c      	mov	r4, r1
 800931e:	6849      	ldr	r1, [r1, #4]
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	4607      	mov	r7, r0
 800932a:	4691      	mov	r9, r2
 800932c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009330:	f108 0601 	add.w	r6, r8, #1
 8009334:	42b3      	cmp	r3, r6
 8009336:	db0b      	blt.n	8009350 <__lshift+0x38>
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff fddb 	bl	8008ef4 <_Balloc>
 800933e:	4605      	mov	r5, r0
 8009340:	b948      	cbnz	r0, 8009356 <__lshift+0x3e>
 8009342:	4602      	mov	r2, r0
 8009344:	4b28      	ldr	r3, [pc, #160]	; (80093e8 <__lshift+0xd0>)
 8009346:	4829      	ldr	r0, [pc, #164]	; (80093ec <__lshift+0xd4>)
 8009348:	f240 11d9 	movw	r1, #473	; 0x1d9
 800934c:	f000 fb0e 	bl	800996c <__assert_func>
 8009350:	3101      	adds	r1, #1
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	e7ee      	b.n	8009334 <__lshift+0x1c>
 8009356:	2300      	movs	r3, #0
 8009358:	f100 0114 	add.w	r1, r0, #20
 800935c:	f100 0210 	add.w	r2, r0, #16
 8009360:	4618      	mov	r0, r3
 8009362:	4553      	cmp	r3, sl
 8009364:	db33      	blt.n	80093ce <__lshift+0xb6>
 8009366:	6920      	ldr	r0, [r4, #16]
 8009368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800936c:	f104 0314 	add.w	r3, r4, #20
 8009370:	f019 091f 	ands.w	r9, r9, #31
 8009374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800937c:	d02b      	beq.n	80093d6 <__lshift+0xbe>
 800937e:	f1c9 0e20 	rsb	lr, r9, #32
 8009382:	468a      	mov	sl, r1
 8009384:	2200      	movs	r2, #0
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	fa00 f009 	lsl.w	r0, r0, r9
 800938c:	4302      	orrs	r2, r0
 800938e:	f84a 2b04 	str.w	r2, [sl], #4
 8009392:	f853 2b04 	ldr.w	r2, [r3], #4
 8009396:	459c      	cmp	ip, r3
 8009398:	fa22 f20e 	lsr.w	r2, r2, lr
 800939c:	d8f3      	bhi.n	8009386 <__lshift+0x6e>
 800939e:	ebac 0304 	sub.w	r3, ip, r4
 80093a2:	3b15      	subs	r3, #21
 80093a4:	f023 0303 	bic.w	r3, r3, #3
 80093a8:	3304      	adds	r3, #4
 80093aa:	f104 0015 	add.w	r0, r4, #21
 80093ae:	4584      	cmp	ip, r0
 80093b0:	bf38      	it	cc
 80093b2:	2304      	movcc	r3, #4
 80093b4:	50ca      	str	r2, [r1, r3]
 80093b6:	b10a      	cbz	r2, 80093bc <__lshift+0xa4>
 80093b8:	f108 0602 	add.w	r6, r8, #2
 80093bc:	3e01      	subs	r6, #1
 80093be:	4638      	mov	r0, r7
 80093c0:	612e      	str	r6, [r5, #16]
 80093c2:	4621      	mov	r1, r4
 80093c4:	f7ff fdd6 	bl	8008f74 <_Bfree>
 80093c8:	4628      	mov	r0, r5
 80093ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80093d2:	3301      	adds	r3, #1
 80093d4:	e7c5      	b.n	8009362 <__lshift+0x4a>
 80093d6:	3904      	subs	r1, #4
 80093d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80093e0:	459c      	cmp	ip, r3
 80093e2:	d8f9      	bhi.n	80093d8 <__lshift+0xc0>
 80093e4:	e7ea      	b.n	80093bc <__lshift+0xa4>
 80093e6:	bf00      	nop
 80093e8:	0800b783 	.word	0x0800b783
 80093ec:	0800b7f4 	.word	0x0800b7f4

080093f0 <__mcmp>:
 80093f0:	b530      	push	{r4, r5, lr}
 80093f2:	6902      	ldr	r2, [r0, #16]
 80093f4:	690c      	ldr	r4, [r1, #16]
 80093f6:	1b12      	subs	r2, r2, r4
 80093f8:	d10e      	bne.n	8009418 <__mcmp+0x28>
 80093fa:	f100 0314 	add.w	r3, r0, #20
 80093fe:	3114      	adds	r1, #20
 8009400:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009408:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800940c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009410:	42a5      	cmp	r5, r4
 8009412:	d003      	beq.n	800941c <__mcmp+0x2c>
 8009414:	d305      	bcc.n	8009422 <__mcmp+0x32>
 8009416:	2201      	movs	r2, #1
 8009418:	4610      	mov	r0, r2
 800941a:	bd30      	pop	{r4, r5, pc}
 800941c:	4283      	cmp	r3, r0
 800941e:	d3f3      	bcc.n	8009408 <__mcmp+0x18>
 8009420:	e7fa      	b.n	8009418 <__mcmp+0x28>
 8009422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009426:	e7f7      	b.n	8009418 <__mcmp+0x28>

08009428 <__mdiff>:
 8009428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	460c      	mov	r4, r1
 800942e:	4606      	mov	r6, r0
 8009430:	4611      	mov	r1, r2
 8009432:	4620      	mov	r0, r4
 8009434:	4617      	mov	r7, r2
 8009436:	f7ff ffdb 	bl	80093f0 <__mcmp>
 800943a:	1e05      	subs	r5, r0, #0
 800943c:	d110      	bne.n	8009460 <__mdiff+0x38>
 800943e:	4629      	mov	r1, r5
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff fd57 	bl	8008ef4 <_Balloc>
 8009446:	b930      	cbnz	r0, 8009456 <__mdiff+0x2e>
 8009448:	4b39      	ldr	r3, [pc, #228]	; (8009530 <__mdiff+0x108>)
 800944a:	4602      	mov	r2, r0
 800944c:	f240 2132 	movw	r1, #562	; 0x232
 8009450:	4838      	ldr	r0, [pc, #224]	; (8009534 <__mdiff+0x10c>)
 8009452:	f000 fa8b 	bl	800996c <__assert_func>
 8009456:	2301      	movs	r3, #1
 8009458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800945c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009460:	bfa4      	itt	ge
 8009462:	463b      	movge	r3, r7
 8009464:	4627      	movge	r7, r4
 8009466:	4630      	mov	r0, r6
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	bfa6      	itte	ge
 800946c:	461c      	movge	r4, r3
 800946e:	2500      	movge	r5, #0
 8009470:	2501      	movlt	r5, #1
 8009472:	f7ff fd3f 	bl	8008ef4 <_Balloc>
 8009476:	b920      	cbnz	r0, 8009482 <__mdiff+0x5a>
 8009478:	4b2d      	ldr	r3, [pc, #180]	; (8009530 <__mdiff+0x108>)
 800947a:	4602      	mov	r2, r0
 800947c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009480:	e7e6      	b.n	8009450 <__mdiff+0x28>
 8009482:	693e      	ldr	r6, [r7, #16]
 8009484:	60c5      	str	r5, [r0, #12]
 8009486:	6925      	ldr	r5, [r4, #16]
 8009488:	f107 0114 	add.w	r1, r7, #20
 800948c:	f104 0914 	add.w	r9, r4, #20
 8009490:	f100 0e14 	add.w	lr, r0, #20
 8009494:	f107 0210 	add.w	r2, r7, #16
 8009498:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800949c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80094a0:	46f2      	mov	sl, lr
 80094a2:	2700      	movs	r7, #0
 80094a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094ac:	fa1f f883 	uxth.w	r8, r3
 80094b0:	fa17 f78b 	uxtah	r7, r7, fp
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	eba7 0808 	sub.w	r8, r7, r8
 80094ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094c2:	fa1f f888 	uxth.w	r8, r8
 80094c6:	141f      	asrs	r7, r3, #16
 80094c8:	454d      	cmp	r5, r9
 80094ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094ce:	f84a 3b04 	str.w	r3, [sl], #4
 80094d2:	d8e7      	bhi.n	80094a4 <__mdiff+0x7c>
 80094d4:	1b2b      	subs	r3, r5, r4
 80094d6:	3b15      	subs	r3, #21
 80094d8:	f023 0303 	bic.w	r3, r3, #3
 80094dc:	3304      	adds	r3, #4
 80094de:	3415      	adds	r4, #21
 80094e0:	42a5      	cmp	r5, r4
 80094e2:	bf38      	it	cc
 80094e4:	2304      	movcc	r3, #4
 80094e6:	4419      	add	r1, r3
 80094e8:	4473      	add	r3, lr
 80094ea:	469e      	mov	lr, r3
 80094ec:	460d      	mov	r5, r1
 80094ee:	4565      	cmp	r5, ip
 80094f0:	d30e      	bcc.n	8009510 <__mdiff+0xe8>
 80094f2:	f10c 0203 	add.w	r2, ip, #3
 80094f6:	1a52      	subs	r2, r2, r1
 80094f8:	f022 0203 	bic.w	r2, r2, #3
 80094fc:	3903      	subs	r1, #3
 80094fe:	458c      	cmp	ip, r1
 8009500:	bf38      	it	cc
 8009502:	2200      	movcc	r2, #0
 8009504:	441a      	add	r2, r3
 8009506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800950a:	b17b      	cbz	r3, 800952c <__mdiff+0x104>
 800950c:	6106      	str	r6, [r0, #16]
 800950e:	e7a5      	b.n	800945c <__mdiff+0x34>
 8009510:	f855 8b04 	ldr.w	r8, [r5], #4
 8009514:	fa17 f488 	uxtah	r4, r7, r8
 8009518:	1422      	asrs	r2, r4, #16
 800951a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800951e:	b2a4      	uxth	r4, r4
 8009520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009524:	f84e 4b04 	str.w	r4, [lr], #4
 8009528:	1417      	asrs	r7, r2, #16
 800952a:	e7e0      	b.n	80094ee <__mdiff+0xc6>
 800952c:	3e01      	subs	r6, #1
 800952e:	e7ea      	b.n	8009506 <__mdiff+0xde>
 8009530:	0800b783 	.word	0x0800b783
 8009534:	0800b7f4 	.word	0x0800b7f4

08009538 <__d2b>:
 8009538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800953c:	4689      	mov	r9, r1
 800953e:	2101      	movs	r1, #1
 8009540:	ec57 6b10 	vmov	r6, r7, d0
 8009544:	4690      	mov	r8, r2
 8009546:	f7ff fcd5 	bl	8008ef4 <_Balloc>
 800954a:	4604      	mov	r4, r0
 800954c:	b930      	cbnz	r0, 800955c <__d2b+0x24>
 800954e:	4602      	mov	r2, r0
 8009550:	4b25      	ldr	r3, [pc, #148]	; (80095e8 <__d2b+0xb0>)
 8009552:	4826      	ldr	r0, [pc, #152]	; (80095ec <__d2b+0xb4>)
 8009554:	f240 310a 	movw	r1, #778	; 0x30a
 8009558:	f000 fa08 	bl	800996c <__assert_func>
 800955c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009564:	bb35      	cbnz	r5, 80095b4 <__d2b+0x7c>
 8009566:	2e00      	cmp	r6, #0
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	d028      	beq.n	80095be <__d2b+0x86>
 800956c:	4668      	mov	r0, sp
 800956e:	9600      	str	r6, [sp, #0]
 8009570:	f7ff fd8c 	bl	800908c <__lo0bits>
 8009574:	9900      	ldr	r1, [sp, #0]
 8009576:	b300      	cbz	r0, 80095ba <__d2b+0x82>
 8009578:	9a01      	ldr	r2, [sp, #4]
 800957a:	f1c0 0320 	rsb	r3, r0, #32
 800957e:	fa02 f303 	lsl.w	r3, r2, r3
 8009582:	430b      	orrs	r3, r1
 8009584:	40c2      	lsrs	r2, r0
 8009586:	6163      	str	r3, [r4, #20]
 8009588:	9201      	str	r2, [sp, #4]
 800958a:	9b01      	ldr	r3, [sp, #4]
 800958c:	61a3      	str	r3, [r4, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	bf14      	ite	ne
 8009592:	2202      	movne	r2, #2
 8009594:	2201      	moveq	r2, #1
 8009596:	6122      	str	r2, [r4, #16]
 8009598:	b1d5      	cbz	r5, 80095d0 <__d2b+0x98>
 800959a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800959e:	4405      	add	r5, r0
 80095a0:	f8c9 5000 	str.w	r5, [r9]
 80095a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095a8:	f8c8 0000 	str.w	r0, [r8]
 80095ac:	4620      	mov	r0, r4
 80095ae:	b003      	add	sp, #12
 80095b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095b8:	e7d5      	b.n	8009566 <__d2b+0x2e>
 80095ba:	6161      	str	r1, [r4, #20]
 80095bc:	e7e5      	b.n	800958a <__d2b+0x52>
 80095be:	a801      	add	r0, sp, #4
 80095c0:	f7ff fd64 	bl	800908c <__lo0bits>
 80095c4:	9b01      	ldr	r3, [sp, #4]
 80095c6:	6163      	str	r3, [r4, #20]
 80095c8:	2201      	movs	r2, #1
 80095ca:	6122      	str	r2, [r4, #16]
 80095cc:	3020      	adds	r0, #32
 80095ce:	e7e3      	b.n	8009598 <__d2b+0x60>
 80095d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095d8:	f8c9 0000 	str.w	r0, [r9]
 80095dc:	6918      	ldr	r0, [r3, #16]
 80095de:	f7ff fd35 	bl	800904c <__hi0bits>
 80095e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095e6:	e7df      	b.n	80095a8 <__d2b+0x70>
 80095e8:	0800b783 	.word	0x0800b783
 80095ec:	0800b7f4 	.word	0x0800b7f4

080095f0 <_calloc_r>:
 80095f0:	b513      	push	{r0, r1, r4, lr}
 80095f2:	434a      	muls	r2, r1
 80095f4:	4611      	mov	r1, r2
 80095f6:	9201      	str	r2, [sp, #4]
 80095f8:	f7fd fda2 	bl	8007140 <_malloc_r>
 80095fc:	4604      	mov	r4, r0
 80095fe:	b118      	cbz	r0, 8009608 <_calloc_r+0x18>
 8009600:	9a01      	ldr	r2, [sp, #4]
 8009602:	2100      	movs	r1, #0
 8009604:	f7fd fd44 	bl	8007090 <memset>
 8009608:	4620      	mov	r0, r4
 800960a:	b002      	add	sp, #8
 800960c:	bd10      	pop	{r4, pc}

0800960e <__sfputc_r>:
 800960e:	6893      	ldr	r3, [r2, #8]
 8009610:	3b01      	subs	r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	b410      	push	{r4}
 8009616:	6093      	str	r3, [r2, #8]
 8009618:	da08      	bge.n	800962c <__sfputc_r+0x1e>
 800961a:	6994      	ldr	r4, [r2, #24]
 800961c:	42a3      	cmp	r3, r4
 800961e:	db01      	blt.n	8009624 <__sfputc_r+0x16>
 8009620:	290a      	cmp	r1, #10
 8009622:	d103      	bne.n	800962c <__sfputc_r+0x1e>
 8009624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009628:	f7fe baec 	b.w	8007c04 <__swbuf_r>
 800962c:	6813      	ldr	r3, [r2, #0]
 800962e:	1c58      	adds	r0, r3, #1
 8009630:	6010      	str	r0, [r2, #0]
 8009632:	7019      	strb	r1, [r3, #0]
 8009634:	4608      	mov	r0, r1
 8009636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800963a:	4770      	bx	lr

0800963c <__sfputs_r>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	4606      	mov	r6, r0
 8009640:	460f      	mov	r7, r1
 8009642:	4614      	mov	r4, r2
 8009644:	18d5      	adds	r5, r2, r3
 8009646:	42ac      	cmp	r4, r5
 8009648:	d101      	bne.n	800964e <__sfputs_r+0x12>
 800964a:	2000      	movs	r0, #0
 800964c:	e007      	b.n	800965e <__sfputs_r+0x22>
 800964e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009652:	463a      	mov	r2, r7
 8009654:	4630      	mov	r0, r6
 8009656:	f7ff ffda 	bl	800960e <__sfputc_r>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d1f3      	bne.n	8009646 <__sfputs_r+0xa>
 800965e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009660 <_vfiprintf_r>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	460d      	mov	r5, r1
 8009666:	b09d      	sub	sp, #116	; 0x74
 8009668:	4614      	mov	r4, r2
 800966a:	4698      	mov	r8, r3
 800966c:	4606      	mov	r6, r0
 800966e:	b118      	cbz	r0, 8009678 <_vfiprintf_r+0x18>
 8009670:	6983      	ldr	r3, [r0, #24]
 8009672:	b90b      	cbnz	r3, 8009678 <_vfiprintf_r+0x18>
 8009674:	f7ff fb1a 	bl	8008cac <__sinit>
 8009678:	4b89      	ldr	r3, [pc, #548]	; (80098a0 <_vfiprintf_r+0x240>)
 800967a:	429d      	cmp	r5, r3
 800967c:	d11b      	bne.n	80096b6 <_vfiprintf_r+0x56>
 800967e:	6875      	ldr	r5, [r6, #4]
 8009680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009682:	07d9      	lsls	r1, r3, #31
 8009684:	d405      	bmi.n	8009692 <_vfiprintf_r+0x32>
 8009686:	89ab      	ldrh	r3, [r5, #12]
 8009688:	059a      	lsls	r2, r3, #22
 800968a:	d402      	bmi.n	8009692 <_vfiprintf_r+0x32>
 800968c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800968e:	f7ff fbb0 	bl	8008df2 <__retarget_lock_acquire_recursive>
 8009692:	89ab      	ldrh	r3, [r5, #12]
 8009694:	071b      	lsls	r3, r3, #28
 8009696:	d501      	bpl.n	800969c <_vfiprintf_r+0x3c>
 8009698:	692b      	ldr	r3, [r5, #16]
 800969a:	b9eb      	cbnz	r3, 80096d8 <_vfiprintf_r+0x78>
 800969c:	4629      	mov	r1, r5
 800969e:	4630      	mov	r0, r6
 80096a0:	f7fe fb02 	bl	8007ca8 <__swsetup_r>
 80096a4:	b1c0      	cbz	r0, 80096d8 <_vfiprintf_r+0x78>
 80096a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096a8:	07dc      	lsls	r4, r3, #31
 80096aa:	d50e      	bpl.n	80096ca <_vfiprintf_r+0x6a>
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096b0:	b01d      	add	sp, #116	; 0x74
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	4b7b      	ldr	r3, [pc, #492]	; (80098a4 <_vfiprintf_r+0x244>)
 80096b8:	429d      	cmp	r5, r3
 80096ba:	d101      	bne.n	80096c0 <_vfiprintf_r+0x60>
 80096bc:	68b5      	ldr	r5, [r6, #8]
 80096be:	e7df      	b.n	8009680 <_vfiprintf_r+0x20>
 80096c0:	4b79      	ldr	r3, [pc, #484]	; (80098a8 <_vfiprintf_r+0x248>)
 80096c2:	429d      	cmp	r5, r3
 80096c4:	bf08      	it	eq
 80096c6:	68f5      	ldreq	r5, [r6, #12]
 80096c8:	e7da      	b.n	8009680 <_vfiprintf_r+0x20>
 80096ca:	89ab      	ldrh	r3, [r5, #12]
 80096cc:	0598      	lsls	r0, r3, #22
 80096ce:	d4ed      	bmi.n	80096ac <_vfiprintf_r+0x4c>
 80096d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096d2:	f7ff fb8f 	bl	8008df4 <__retarget_lock_release_recursive>
 80096d6:	e7e9      	b.n	80096ac <_vfiprintf_r+0x4c>
 80096d8:	2300      	movs	r3, #0
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	2320      	movs	r3, #32
 80096de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096e6:	2330      	movs	r3, #48	; 0x30
 80096e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098ac <_vfiprintf_r+0x24c>
 80096ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096f0:	f04f 0901 	mov.w	r9, #1
 80096f4:	4623      	mov	r3, r4
 80096f6:	469a      	mov	sl, r3
 80096f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096fc:	b10a      	cbz	r2, 8009702 <_vfiprintf_r+0xa2>
 80096fe:	2a25      	cmp	r2, #37	; 0x25
 8009700:	d1f9      	bne.n	80096f6 <_vfiprintf_r+0x96>
 8009702:	ebba 0b04 	subs.w	fp, sl, r4
 8009706:	d00b      	beq.n	8009720 <_vfiprintf_r+0xc0>
 8009708:	465b      	mov	r3, fp
 800970a:	4622      	mov	r2, r4
 800970c:	4629      	mov	r1, r5
 800970e:	4630      	mov	r0, r6
 8009710:	f7ff ff94 	bl	800963c <__sfputs_r>
 8009714:	3001      	adds	r0, #1
 8009716:	f000 80aa 	beq.w	800986e <_vfiprintf_r+0x20e>
 800971a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800971c:	445a      	add	r2, fp
 800971e:	9209      	str	r2, [sp, #36]	; 0x24
 8009720:	f89a 3000 	ldrb.w	r3, [sl]
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 80a2 	beq.w	800986e <_vfiprintf_r+0x20e>
 800972a:	2300      	movs	r3, #0
 800972c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009734:	f10a 0a01 	add.w	sl, sl, #1
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	9307      	str	r3, [sp, #28]
 800973c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009740:	931a      	str	r3, [sp, #104]	; 0x68
 8009742:	4654      	mov	r4, sl
 8009744:	2205      	movs	r2, #5
 8009746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974a:	4858      	ldr	r0, [pc, #352]	; (80098ac <_vfiprintf_r+0x24c>)
 800974c:	f7f6 fd68 	bl	8000220 <memchr>
 8009750:	9a04      	ldr	r2, [sp, #16]
 8009752:	b9d8      	cbnz	r0, 800978c <_vfiprintf_r+0x12c>
 8009754:	06d1      	lsls	r1, r2, #27
 8009756:	bf44      	itt	mi
 8009758:	2320      	movmi	r3, #32
 800975a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975e:	0713      	lsls	r3, r2, #28
 8009760:	bf44      	itt	mi
 8009762:	232b      	movmi	r3, #43	; 0x2b
 8009764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009768:	f89a 3000 	ldrb.w	r3, [sl]
 800976c:	2b2a      	cmp	r3, #42	; 0x2a
 800976e:	d015      	beq.n	800979c <_vfiprintf_r+0x13c>
 8009770:	9a07      	ldr	r2, [sp, #28]
 8009772:	4654      	mov	r4, sl
 8009774:	2000      	movs	r0, #0
 8009776:	f04f 0c0a 	mov.w	ip, #10
 800977a:	4621      	mov	r1, r4
 800977c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009780:	3b30      	subs	r3, #48	; 0x30
 8009782:	2b09      	cmp	r3, #9
 8009784:	d94e      	bls.n	8009824 <_vfiprintf_r+0x1c4>
 8009786:	b1b0      	cbz	r0, 80097b6 <_vfiprintf_r+0x156>
 8009788:	9207      	str	r2, [sp, #28]
 800978a:	e014      	b.n	80097b6 <_vfiprintf_r+0x156>
 800978c:	eba0 0308 	sub.w	r3, r0, r8
 8009790:	fa09 f303 	lsl.w	r3, r9, r3
 8009794:	4313      	orrs	r3, r2
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	46a2      	mov	sl, r4
 800979a:	e7d2      	b.n	8009742 <_vfiprintf_r+0xe2>
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	1d19      	adds	r1, r3, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	9103      	str	r1, [sp, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	bfbb      	ittet	lt
 80097a8:	425b      	neglt	r3, r3
 80097aa:	f042 0202 	orrlt.w	r2, r2, #2
 80097ae:	9307      	strge	r3, [sp, #28]
 80097b0:	9307      	strlt	r3, [sp, #28]
 80097b2:	bfb8      	it	lt
 80097b4:	9204      	strlt	r2, [sp, #16]
 80097b6:	7823      	ldrb	r3, [r4, #0]
 80097b8:	2b2e      	cmp	r3, #46	; 0x2e
 80097ba:	d10c      	bne.n	80097d6 <_vfiprintf_r+0x176>
 80097bc:	7863      	ldrb	r3, [r4, #1]
 80097be:	2b2a      	cmp	r3, #42	; 0x2a
 80097c0:	d135      	bne.n	800982e <_vfiprintf_r+0x1ce>
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	1d1a      	adds	r2, r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9203      	str	r2, [sp, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfb8      	it	lt
 80097ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80097d2:	3402      	adds	r4, #2
 80097d4:	9305      	str	r3, [sp, #20]
 80097d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098bc <_vfiprintf_r+0x25c>
 80097da:	7821      	ldrb	r1, [r4, #0]
 80097dc:	2203      	movs	r2, #3
 80097de:	4650      	mov	r0, sl
 80097e0:	f7f6 fd1e 	bl	8000220 <memchr>
 80097e4:	b140      	cbz	r0, 80097f8 <_vfiprintf_r+0x198>
 80097e6:	2340      	movs	r3, #64	; 0x40
 80097e8:	eba0 000a 	sub.w	r0, r0, sl
 80097ec:	fa03 f000 	lsl.w	r0, r3, r0
 80097f0:	9b04      	ldr	r3, [sp, #16]
 80097f2:	4303      	orrs	r3, r0
 80097f4:	3401      	adds	r4, #1
 80097f6:	9304      	str	r3, [sp, #16]
 80097f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097fc:	482c      	ldr	r0, [pc, #176]	; (80098b0 <_vfiprintf_r+0x250>)
 80097fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009802:	2206      	movs	r2, #6
 8009804:	f7f6 fd0c 	bl	8000220 <memchr>
 8009808:	2800      	cmp	r0, #0
 800980a:	d03f      	beq.n	800988c <_vfiprintf_r+0x22c>
 800980c:	4b29      	ldr	r3, [pc, #164]	; (80098b4 <_vfiprintf_r+0x254>)
 800980e:	bb1b      	cbnz	r3, 8009858 <_vfiprintf_r+0x1f8>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	3307      	adds	r3, #7
 8009814:	f023 0307 	bic.w	r3, r3, #7
 8009818:	3308      	adds	r3, #8
 800981a:	9303      	str	r3, [sp, #12]
 800981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981e:	443b      	add	r3, r7
 8009820:	9309      	str	r3, [sp, #36]	; 0x24
 8009822:	e767      	b.n	80096f4 <_vfiprintf_r+0x94>
 8009824:	fb0c 3202 	mla	r2, ip, r2, r3
 8009828:	460c      	mov	r4, r1
 800982a:	2001      	movs	r0, #1
 800982c:	e7a5      	b.n	800977a <_vfiprintf_r+0x11a>
 800982e:	2300      	movs	r3, #0
 8009830:	3401      	adds	r4, #1
 8009832:	9305      	str	r3, [sp, #20]
 8009834:	4619      	mov	r1, r3
 8009836:	f04f 0c0a 	mov.w	ip, #10
 800983a:	4620      	mov	r0, r4
 800983c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009840:	3a30      	subs	r2, #48	; 0x30
 8009842:	2a09      	cmp	r2, #9
 8009844:	d903      	bls.n	800984e <_vfiprintf_r+0x1ee>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0c5      	beq.n	80097d6 <_vfiprintf_r+0x176>
 800984a:	9105      	str	r1, [sp, #20]
 800984c:	e7c3      	b.n	80097d6 <_vfiprintf_r+0x176>
 800984e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009852:	4604      	mov	r4, r0
 8009854:	2301      	movs	r3, #1
 8009856:	e7f0      	b.n	800983a <_vfiprintf_r+0x1da>
 8009858:	ab03      	add	r3, sp, #12
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	462a      	mov	r2, r5
 800985e:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <_vfiprintf_r+0x258>)
 8009860:	a904      	add	r1, sp, #16
 8009862:	4630      	mov	r0, r6
 8009864:	f7fd fd66 	bl	8007334 <_printf_float>
 8009868:	4607      	mov	r7, r0
 800986a:	1c78      	adds	r0, r7, #1
 800986c:	d1d6      	bne.n	800981c <_vfiprintf_r+0x1bc>
 800986e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009870:	07d9      	lsls	r1, r3, #31
 8009872:	d405      	bmi.n	8009880 <_vfiprintf_r+0x220>
 8009874:	89ab      	ldrh	r3, [r5, #12]
 8009876:	059a      	lsls	r2, r3, #22
 8009878:	d402      	bmi.n	8009880 <_vfiprintf_r+0x220>
 800987a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800987c:	f7ff faba 	bl	8008df4 <__retarget_lock_release_recursive>
 8009880:	89ab      	ldrh	r3, [r5, #12]
 8009882:	065b      	lsls	r3, r3, #25
 8009884:	f53f af12 	bmi.w	80096ac <_vfiprintf_r+0x4c>
 8009888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800988a:	e711      	b.n	80096b0 <_vfiprintf_r+0x50>
 800988c:	ab03      	add	r3, sp, #12
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	462a      	mov	r2, r5
 8009892:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <_vfiprintf_r+0x258>)
 8009894:	a904      	add	r1, sp, #16
 8009896:	4630      	mov	r0, r6
 8009898:	f7fd fff0 	bl	800787c <_printf_i>
 800989c:	e7e4      	b.n	8009868 <_vfiprintf_r+0x208>
 800989e:	bf00      	nop
 80098a0:	0800b7b4 	.word	0x0800b7b4
 80098a4:	0800b7d4 	.word	0x0800b7d4
 80098a8:	0800b794 	.word	0x0800b794
 80098ac:	0800b954 	.word	0x0800b954
 80098b0:	0800b95e 	.word	0x0800b95e
 80098b4:	08007335 	.word	0x08007335
 80098b8:	0800963d 	.word	0x0800963d
 80098bc:	0800b95a 	.word	0x0800b95a

080098c0 <__sread>:
 80098c0:	b510      	push	{r4, lr}
 80098c2:	460c      	mov	r4, r1
 80098c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c8:	f000 f8d6 	bl	8009a78 <_read_r>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	bfab      	itete	ge
 80098d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098d2:	89a3      	ldrhlt	r3, [r4, #12]
 80098d4:	181b      	addge	r3, r3, r0
 80098d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098da:	bfac      	ite	ge
 80098dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80098de:	81a3      	strhlt	r3, [r4, #12]
 80098e0:	bd10      	pop	{r4, pc}

080098e2 <__swrite>:
 80098e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e6:	461f      	mov	r7, r3
 80098e8:	898b      	ldrh	r3, [r1, #12]
 80098ea:	05db      	lsls	r3, r3, #23
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	4616      	mov	r6, r2
 80098f2:	d505      	bpl.n	8009900 <__swrite+0x1e>
 80098f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f8:	2302      	movs	r3, #2
 80098fa:	2200      	movs	r2, #0
 80098fc:	f000 f898 	bl	8009a30 <_lseek_r>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	4632      	mov	r2, r6
 800990e:	463b      	mov	r3, r7
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009916:	f000 b817 	b.w	8009948 <_write_r>

0800991a <__sseek>:
 800991a:	b510      	push	{r4, lr}
 800991c:	460c      	mov	r4, r1
 800991e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009922:	f000 f885 	bl	8009a30 <_lseek_r>
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	bf15      	itete	ne
 800992c:	6560      	strne	r0, [r4, #84]	; 0x54
 800992e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009936:	81a3      	strheq	r3, [r4, #12]
 8009938:	bf18      	it	ne
 800993a:	81a3      	strhne	r3, [r4, #12]
 800993c:	bd10      	pop	{r4, pc}

0800993e <__sclose>:
 800993e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009942:	f000 b831 	b.w	80099a8 <_close_r>
	...

08009948 <_write_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	; (8009968 <_write_r+0x20>)
 800994c:	4604      	mov	r4, r0
 800994e:	4608      	mov	r0, r1
 8009950:	4611      	mov	r1, r2
 8009952:	2200      	movs	r2, #0
 8009954:	602a      	str	r2, [r5, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	f7f8 ff26 	bl	80027a8 <_write>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_write_r+0x1e>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_write_r+0x1e>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	20000548 	.word	0x20000548

0800996c <__assert_func>:
 800996c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800996e:	4614      	mov	r4, r2
 8009970:	461a      	mov	r2, r3
 8009972:	4b09      	ldr	r3, [pc, #36]	; (8009998 <__assert_func+0x2c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4605      	mov	r5, r0
 8009978:	68d8      	ldr	r0, [r3, #12]
 800997a:	b14c      	cbz	r4, 8009990 <__assert_func+0x24>
 800997c:	4b07      	ldr	r3, [pc, #28]	; (800999c <__assert_func+0x30>)
 800997e:	9100      	str	r1, [sp, #0]
 8009980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009984:	4906      	ldr	r1, [pc, #24]	; (80099a0 <__assert_func+0x34>)
 8009986:	462b      	mov	r3, r5
 8009988:	f000 f81e 	bl	80099c8 <fiprintf>
 800998c:	f000 f893 	bl	8009ab6 <abort>
 8009990:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <__assert_func+0x38>)
 8009992:	461c      	mov	r4, r3
 8009994:	e7f3      	b.n	800997e <__assert_func+0x12>
 8009996:	bf00      	nop
 8009998:	2000000c 	.word	0x2000000c
 800999c:	0800b965 	.word	0x0800b965
 80099a0:	0800b972 	.word	0x0800b972
 80099a4:	0800b9a0 	.word	0x0800b9a0

080099a8 <_close_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d06      	ldr	r5, [pc, #24]	; (80099c4 <_close_r+0x1c>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	602b      	str	r3, [r5, #0]
 80099b4:	f7f9 fa71 	bl	8002e9a <_close>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_close_r+0x1a>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_close_r+0x1a>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	20000548 	.word	0x20000548

080099c8 <fiprintf>:
 80099c8:	b40e      	push	{r1, r2, r3}
 80099ca:	b503      	push	{r0, r1, lr}
 80099cc:	4601      	mov	r1, r0
 80099ce:	ab03      	add	r3, sp, #12
 80099d0:	4805      	ldr	r0, [pc, #20]	; (80099e8 <fiprintf+0x20>)
 80099d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d6:	6800      	ldr	r0, [r0, #0]
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	f7ff fe41 	bl	8009660 <_vfiprintf_r>
 80099de:	b002      	add	sp, #8
 80099e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e4:	b003      	add	sp, #12
 80099e6:	4770      	bx	lr
 80099e8:	2000000c 	.word	0x2000000c

080099ec <_fstat_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d07      	ldr	r5, [pc, #28]	; (8009a0c <_fstat_r+0x20>)
 80099f0:	2300      	movs	r3, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	4608      	mov	r0, r1
 80099f6:	4611      	mov	r1, r2
 80099f8:	602b      	str	r3, [r5, #0]
 80099fa:	f7f9 fa5a 	bl	8002eb2 <_fstat>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	d102      	bne.n	8009a08 <_fstat_r+0x1c>
 8009a02:	682b      	ldr	r3, [r5, #0]
 8009a04:	b103      	cbz	r3, 8009a08 <_fstat_r+0x1c>
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	bd38      	pop	{r3, r4, r5, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20000548 	.word	0x20000548

08009a10 <_isatty_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d06      	ldr	r5, [pc, #24]	; (8009a2c <_isatty_r+0x1c>)
 8009a14:	2300      	movs	r3, #0
 8009a16:	4604      	mov	r4, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	f7f9 fa59 	bl	8002ed2 <_isatty>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_isatty_r+0x1a>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_isatty_r+0x1a>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20000548 	.word	0x20000548

08009a30 <_lseek_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d07      	ldr	r5, [pc, #28]	; (8009a50 <_lseek_r+0x20>)
 8009a34:	4604      	mov	r4, r0
 8009a36:	4608      	mov	r0, r1
 8009a38:	4611      	mov	r1, r2
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	602a      	str	r2, [r5, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f7f9 fa52 	bl	8002ee8 <_lseek>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_lseek_r+0x1e>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_lseek_r+0x1e>
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	20000548 	.word	0x20000548

08009a54 <__ascii_mbtowc>:
 8009a54:	b082      	sub	sp, #8
 8009a56:	b901      	cbnz	r1, 8009a5a <__ascii_mbtowc+0x6>
 8009a58:	a901      	add	r1, sp, #4
 8009a5a:	b142      	cbz	r2, 8009a6e <__ascii_mbtowc+0x1a>
 8009a5c:	b14b      	cbz	r3, 8009a72 <__ascii_mbtowc+0x1e>
 8009a5e:	7813      	ldrb	r3, [r2, #0]
 8009a60:	600b      	str	r3, [r1, #0]
 8009a62:	7812      	ldrb	r2, [r2, #0]
 8009a64:	1e10      	subs	r0, r2, #0
 8009a66:	bf18      	it	ne
 8009a68:	2001      	movne	r0, #1
 8009a6a:	b002      	add	sp, #8
 8009a6c:	4770      	bx	lr
 8009a6e:	4610      	mov	r0, r2
 8009a70:	e7fb      	b.n	8009a6a <__ascii_mbtowc+0x16>
 8009a72:	f06f 0001 	mvn.w	r0, #1
 8009a76:	e7f8      	b.n	8009a6a <__ascii_mbtowc+0x16>

08009a78 <_read_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4d07      	ldr	r5, [pc, #28]	; (8009a98 <_read_r+0x20>)
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4611      	mov	r1, r2
 8009a82:	2200      	movs	r2, #0
 8009a84:	602a      	str	r2, [r5, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f7f9 f9ea 	bl	8002e60 <_read>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_read_r+0x1e>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_read_r+0x1e>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	20000548 	.word	0x20000548

08009a9c <__ascii_wctomb>:
 8009a9c:	b149      	cbz	r1, 8009ab2 <__ascii_wctomb+0x16>
 8009a9e:	2aff      	cmp	r2, #255	; 0xff
 8009aa0:	bf85      	ittet	hi
 8009aa2:	238a      	movhi	r3, #138	; 0x8a
 8009aa4:	6003      	strhi	r3, [r0, #0]
 8009aa6:	700a      	strbls	r2, [r1, #0]
 8009aa8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009aac:	bf98      	it	ls
 8009aae:	2001      	movls	r0, #1
 8009ab0:	4770      	bx	lr
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	4770      	bx	lr

08009ab6 <abort>:
 8009ab6:	b508      	push	{r3, lr}
 8009ab8:	2006      	movs	r0, #6
 8009aba:	f000 f82b 	bl	8009b14 <raise>
 8009abe:	2001      	movs	r0, #1
 8009ac0:	f7f9 f9c4 	bl	8002e4c <_exit>

08009ac4 <_raise_r>:
 8009ac4:	291f      	cmp	r1, #31
 8009ac6:	b538      	push	{r3, r4, r5, lr}
 8009ac8:	4604      	mov	r4, r0
 8009aca:	460d      	mov	r5, r1
 8009acc:	d904      	bls.n	8009ad8 <_raise_r+0x14>
 8009ace:	2316      	movs	r3, #22
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ada:	b112      	cbz	r2, 8009ae2 <_raise_r+0x1e>
 8009adc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ae0:	b94b      	cbnz	r3, 8009af6 <_raise_r+0x32>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f000 f830 	bl	8009b48 <_getpid_r>
 8009ae8:	462a      	mov	r2, r5
 8009aea:	4601      	mov	r1, r0
 8009aec:	4620      	mov	r0, r4
 8009aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009af2:	f000 b817 	b.w	8009b24 <_kill_r>
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d00a      	beq.n	8009b10 <_raise_r+0x4c>
 8009afa:	1c59      	adds	r1, r3, #1
 8009afc:	d103      	bne.n	8009b06 <_raise_r+0x42>
 8009afe:	2316      	movs	r3, #22
 8009b00:	6003      	str	r3, [r0, #0]
 8009b02:	2001      	movs	r0, #1
 8009b04:	e7e7      	b.n	8009ad6 <_raise_r+0x12>
 8009b06:	2400      	movs	r4, #0
 8009b08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	4798      	blx	r3
 8009b10:	2000      	movs	r0, #0
 8009b12:	e7e0      	b.n	8009ad6 <_raise_r+0x12>

08009b14 <raise>:
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <raise+0xc>)
 8009b16:	4601      	mov	r1, r0
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	f7ff bfd3 	b.w	8009ac4 <_raise_r>
 8009b1e:	bf00      	nop
 8009b20:	2000000c 	.word	0x2000000c

08009b24 <_kill_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d07      	ldr	r5, [pc, #28]	; (8009b44 <_kill_r+0x20>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	4611      	mov	r1, r2
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	f7f9 f97b 	bl	8002e2c <_kill>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d102      	bne.n	8009b40 <_kill_r+0x1c>
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	b103      	cbz	r3, 8009b40 <_kill_r+0x1c>
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	bd38      	pop	{r3, r4, r5, pc}
 8009b42:	bf00      	nop
 8009b44:	20000548 	.word	0x20000548

08009b48 <_getpid_r>:
 8009b48:	f7f9 b968 	b.w	8002e1c <_getpid>
 8009b4c:	0000      	movs	r0, r0
	...

08009b50 <atan>:
 8009b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	ec55 4b10 	vmov	r4, r5, d0
 8009b58:	4bc3      	ldr	r3, [pc, #780]	; (8009e68 <atan+0x318>)
 8009b5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b5e:	429e      	cmp	r6, r3
 8009b60:	46ab      	mov	fp, r5
 8009b62:	dd18      	ble.n	8009b96 <atan+0x46>
 8009b64:	4bc1      	ldr	r3, [pc, #772]	; (8009e6c <atan+0x31c>)
 8009b66:	429e      	cmp	r6, r3
 8009b68:	dc01      	bgt.n	8009b6e <atan+0x1e>
 8009b6a:	d109      	bne.n	8009b80 <atan+0x30>
 8009b6c:	b144      	cbz	r4, 8009b80 <atan+0x30>
 8009b6e:	4622      	mov	r2, r4
 8009b70:	462b      	mov	r3, r5
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 fba9 	bl	80002cc <__adddf3>
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	460d      	mov	r5, r1
 8009b7e:	e006      	b.n	8009b8e <atan+0x3e>
 8009b80:	f1bb 0f00 	cmp.w	fp, #0
 8009b84:	f300 8131 	bgt.w	8009dea <atan+0x29a>
 8009b88:	a59b      	add	r5, pc, #620	; (adr r5, 8009df8 <atan+0x2a8>)
 8009b8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b8e:	ec45 4b10 	vmov	d0, r4, r5
 8009b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	4bb6      	ldr	r3, [pc, #728]	; (8009e70 <atan+0x320>)
 8009b98:	429e      	cmp	r6, r3
 8009b9a:	dc14      	bgt.n	8009bc6 <atan+0x76>
 8009b9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009ba0:	429e      	cmp	r6, r3
 8009ba2:	dc0d      	bgt.n	8009bc0 <atan+0x70>
 8009ba4:	a396      	add	r3, pc, #600	; (adr r3, 8009e00 <atan+0x2b0>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	ee10 0a10 	vmov	r0, s0
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fb8c 	bl	80002cc <__adddf3>
 8009bb4:	4baf      	ldr	r3, [pc, #700]	; (8009e74 <atan+0x324>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f7f6 ffce 	bl	8000b58 <__aeabi_dcmpgt>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d1e6      	bne.n	8009b8e <atan+0x3e>
 8009bc0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009bc4:	e02b      	b.n	8009c1e <atan+0xce>
 8009bc6:	f000 f9b3 	bl	8009f30 <fabs>
 8009bca:	4bab      	ldr	r3, [pc, #684]	; (8009e78 <atan+0x328>)
 8009bcc:	429e      	cmp	r6, r3
 8009bce:	ec55 4b10 	vmov	r4, r5, d0
 8009bd2:	f300 80bf 	bgt.w	8009d54 <atan+0x204>
 8009bd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009bda:	429e      	cmp	r6, r3
 8009bdc:	f300 80a0 	bgt.w	8009d20 <atan+0x1d0>
 8009be0:	ee10 2a10 	vmov	r2, s0
 8009be4:	ee10 0a10 	vmov	r0, s0
 8009be8:	462b      	mov	r3, r5
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fb6e 	bl	80002cc <__adddf3>
 8009bf0:	4ba0      	ldr	r3, [pc, #640]	; (8009e74 <atan+0x324>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f7f6 fb68 	bl	80002c8 <__aeabi_dsub>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c02:	4620      	mov	r0, r4
 8009c04:	4629      	mov	r1, r5
 8009c06:	f7f6 fb61 	bl	80002cc <__adddf3>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fe3b 	bl	800088c <__aeabi_ddiv>
 8009c16:	f04f 0a00 	mov.w	sl, #0
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	460d      	mov	r5, r1
 8009c1e:	4622      	mov	r2, r4
 8009c20:	462b      	mov	r3, r5
 8009c22:	4620      	mov	r0, r4
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7f6 fd07 	bl	8000638 <__aeabi_dmul>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4689      	mov	r9, r1
 8009c32:	f7f6 fd01 	bl	8000638 <__aeabi_dmul>
 8009c36:	a374      	add	r3, pc, #464	; (adr r3, 8009e08 <atan+0x2b8>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	460f      	mov	r7, r1
 8009c40:	f7f6 fcfa 	bl	8000638 <__aeabi_dmul>
 8009c44:	a372      	add	r3, pc, #456	; (adr r3, 8009e10 <atan+0x2c0>)
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f7f6 fb3f 	bl	80002cc <__adddf3>
 8009c4e:	4632      	mov	r2, r6
 8009c50:	463b      	mov	r3, r7
 8009c52:	f7f6 fcf1 	bl	8000638 <__aeabi_dmul>
 8009c56:	a370      	add	r3, pc, #448	; (adr r3, 8009e18 <atan+0x2c8>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f7f6 fb36 	bl	80002cc <__adddf3>
 8009c60:	4632      	mov	r2, r6
 8009c62:	463b      	mov	r3, r7
 8009c64:	f7f6 fce8 	bl	8000638 <__aeabi_dmul>
 8009c68:	a36d      	add	r3, pc, #436	; (adr r3, 8009e20 <atan+0x2d0>)
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	f7f6 fb2d 	bl	80002cc <__adddf3>
 8009c72:	4632      	mov	r2, r6
 8009c74:	463b      	mov	r3, r7
 8009c76:	f7f6 fcdf 	bl	8000638 <__aeabi_dmul>
 8009c7a:	a36b      	add	r3, pc, #428	; (adr r3, 8009e28 <atan+0x2d8>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f7f6 fb24 	bl	80002cc <__adddf3>
 8009c84:	4632      	mov	r2, r6
 8009c86:	463b      	mov	r3, r7
 8009c88:	f7f6 fcd6 	bl	8000638 <__aeabi_dmul>
 8009c8c:	a368      	add	r3, pc, #416	; (adr r3, 8009e30 <atan+0x2e0>)
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	f7f6 fb1b 	bl	80002cc <__adddf3>
 8009c96:	4642      	mov	r2, r8
 8009c98:	464b      	mov	r3, r9
 8009c9a:	f7f6 fccd 	bl	8000638 <__aeabi_dmul>
 8009c9e:	a366      	add	r3, pc, #408	; (adr r3, 8009e38 <atan+0x2e8>)
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	4680      	mov	r8, r0
 8009ca6:	4689      	mov	r9, r1
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 fcc4 	bl	8000638 <__aeabi_dmul>
 8009cb0:	a363      	add	r3, pc, #396	; (adr r3, 8009e40 <atan+0x2f0>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7f6 fb07 	bl	80002c8 <__aeabi_dsub>
 8009cba:	4632      	mov	r2, r6
 8009cbc:	463b      	mov	r3, r7
 8009cbe:	f7f6 fcbb 	bl	8000638 <__aeabi_dmul>
 8009cc2:	a361      	add	r3, pc, #388	; (adr r3, 8009e48 <atan+0x2f8>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f7f6 fafe 	bl	80002c8 <__aeabi_dsub>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	f7f6 fcb2 	bl	8000638 <__aeabi_dmul>
 8009cd4:	a35e      	add	r3, pc, #376	; (adr r3, 8009e50 <atan+0x300>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	f7f6 faf5 	bl	80002c8 <__aeabi_dsub>
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f7f6 fca9 	bl	8000638 <__aeabi_dmul>
 8009ce6:	a35c      	add	r3, pc, #368	; (adr r3, 8009e58 <atan+0x308>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 faec 	bl	80002c8 <__aeabi_dsub>
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	f7f6 fca0 	bl	8000638 <__aeabi_dmul>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f7f6 fae4 	bl	80002cc <__adddf3>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	f7f6 fc96 	bl	8000638 <__aeabi_dmul>
 8009d0c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	d14b      	bne.n	8009dae <atan+0x25e>
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fad5 	bl	80002c8 <__aeabi_dsub>
 8009d1e:	e72c      	b.n	8009b7a <atan+0x2a>
 8009d20:	ee10 0a10 	vmov	r0, s0
 8009d24:	4b53      	ldr	r3, [pc, #332]	; (8009e74 <atan+0x324>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f6 facd 	bl	80002c8 <__aeabi_dsub>
 8009d2e:	4b51      	ldr	r3, [pc, #324]	; (8009e74 <atan+0x324>)
 8009d30:	4606      	mov	r6, r0
 8009d32:	460f      	mov	r7, r1
 8009d34:	2200      	movs	r2, #0
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fac7 	bl	80002cc <__adddf3>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4630      	mov	r0, r6
 8009d44:	4639      	mov	r1, r7
 8009d46:	f7f6 fda1 	bl	800088c <__aeabi_ddiv>
 8009d4a:	f04f 0a01 	mov.w	sl, #1
 8009d4e:	4604      	mov	r4, r0
 8009d50:	460d      	mov	r5, r1
 8009d52:	e764      	b.n	8009c1e <atan+0xce>
 8009d54:	4b49      	ldr	r3, [pc, #292]	; (8009e7c <atan+0x32c>)
 8009d56:	429e      	cmp	r6, r3
 8009d58:	da1d      	bge.n	8009d96 <atan+0x246>
 8009d5a:	ee10 0a10 	vmov	r0, s0
 8009d5e:	4b48      	ldr	r3, [pc, #288]	; (8009e80 <atan+0x330>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f6 fab0 	bl	80002c8 <__aeabi_dsub>
 8009d68:	4b45      	ldr	r3, [pc, #276]	; (8009e80 <atan+0x330>)
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4620      	mov	r0, r4
 8009d72:	4629      	mov	r1, r5
 8009d74:	f7f6 fc60 	bl	8000638 <__aeabi_dmul>
 8009d78:	4b3e      	ldr	r3, [pc, #248]	; (8009e74 <atan+0x324>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f7f6 faa6 	bl	80002cc <__adddf3>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f7f6 fd80 	bl	800088c <__aeabi_ddiv>
 8009d8c:	f04f 0a02 	mov.w	sl, #2
 8009d90:	4604      	mov	r4, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	e743      	b.n	8009c1e <atan+0xce>
 8009d96:	462b      	mov	r3, r5
 8009d98:	ee10 2a10 	vmov	r2, s0
 8009d9c:	4939      	ldr	r1, [pc, #228]	; (8009e84 <atan+0x334>)
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f7f6 fd74 	bl	800088c <__aeabi_ddiv>
 8009da4:	f04f 0a03 	mov.w	sl, #3
 8009da8:	4604      	mov	r4, r0
 8009daa:	460d      	mov	r5, r1
 8009dac:	e737      	b.n	8009c1e <atan+0xce>
 8009dae:	4b36      	ldr	r3, [pc, #216]	; (8009e88 <atan+0x338>)
 8009db0:	4e36      	ldr	r6, [pc, #216]	; (8009e8c <atan+0x33c>)
 8009db2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009db6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009dba:	e9da 2300 	ldrd	r2, r3, [sl]
 8009dbe:	f7f6 fa83 	bl	80002c8 <__aeabi_dsub>
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	462b      	mov	r3, r5
 8009dc6:	f7f6 fa7f 	bl	80002c8 <__aeabi_dsub>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009dd2:	f7f6 fa79 	bl	80002c8 <__aeabi_dsub>
 8009dd6:	f1bb 0f00 	cmp.w	fp, #0
 8009dda:	4604      	mov	r4, r0
 8009ddc:	460d      	mov	r5, r1
 8009dde:	f6bf aed6 	bge.w	8009b8e <atan+0x3e>
 8009de2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009de6:	461d      	mov	r5, r3
 8009de8:	e6d1      	b.n	8009b8e <atan+0x3e>
 8009dea:	a51d      	add	r5, pc, #116	; (adr r5, 8009e60 <atan+0x310>)
 8009dec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009df0:	e6cd      	b.n	8009b8e <atan+0x3e>
 8009df2:	bf00      	nop
 8009df4:	f3af 8000 	nop.w
 8009df8:	54442d18 	.word	0x54442d18
 8009dfc:	bff921fb 	.word	0xbff921fb
 8009e00:	8800759c 	.word	0x8800759c
 8009e04:	7e37e43c 	.word	0x7e37e43c
 8009e08:	e322da11 	.word	0xe322da11
 8009e0c:	3f90ad3a 	.word	0x3f90ad3a
 8009e10:	24760deb 	.word	0x24760deb
 8009e14:	3fa97b4b 	.word	0x3fa97b4b
 8009e18:	a0d03d51 	.word	0xa0d03d51
 8009e1c:	3fb10d66 	.word	0x3fb10d66
 8009e20:	c54c206e 	.word	0xc54c206e
 8009e24:	3fb745cd 	.word	0x3fb745cd
 8009e28:	920083ff 	.word	0x920083ff
 8009e2c:	3fc24924 	.word	0x3fc24924
 8009e30:	5555550d 	.word	0x5555550d
 8009e34:	3fd55555 	.word	0x3fd55555
 8009e38:	2c6a6c2f 	.word	0x2c6a6c2f
 8009e3c:	bfa2b444 	.word	0xbfa2b444
 8009e40:	52defd9a 	.word	0x52defd9a
 8009e44:	3fadde2d 	.word	0x3fadde2d
 8009e48:	af749a6d 	.word	0xaf749a6d
 8009e4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009e50:	fe231671 	.word	0xfe231671
 8009e54:	3fbc71c6 	.word	0x3fbc71c6
 8009e58:	9998ebc4 	.word	0x9998ebc4
 8009e5c:	3fc99999 	.word	0x3fc99999
 8009e60:	54442d18 	.word	0x54442d18
 8009e64:	3ff921fb 	.word	0x3ff921fb
 8009e68:	440fffff 	.word	0x440fffff
 8009e6c:	7ff00000 	.word	0x7ff00000
 8009e70:	3fdbffff 	.word	0x3fdbffff
 8009e74:	3ff00000 	.word	0x3ff00000
 8009e78:	3ff2ffff 	.word	0x3ff2ffff
 8009e7c:	40038000 	.word	0x40038000
 8009e80:	3ff80000 	.word	0x3ff80000
 8009e84:	bff00000 	.word	0xbff00000
 8009e88:	0800bad0 	.word	0x0800bad0
 8009e8c:	0800bab0 	.word	0x0800bab0

08009e90 <cos>:
 8009e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e92:	ec53 2b10 	vmov	r2, r3, d0
 8009e96:	4824      	ldr	r0, [pc, #144]	; (8009f28 <cos+0x98>)
 8009e98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e9c:	4281      	cmp	r1, r0
 8009e9e:	dc06      	bgt.n	8009eae <cos+0x1e>
 8009ea0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8009f20 <cos+0x90>
 8009ea4:	f000 fdb4 	bl	800aa10 <__kernel_cos>
 8009ea8:	ec51 0b10 	vmov	r0, r1, d0
 8009eac:	e007      	b.n	8009ebe <cos+0x2e>
 8009eae:	481f      	ldr	r0, [pc, #124]	; (8009f2c <cos+0x9c>)
 8009eb0:	4281      	cmp	r1, r0
 8009eb2:	dd09      	ble.n	8009ec8 <cos+0x38>
 8009eb4:	ee10 0a10 	vmov	r0, s0
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f7f6 fa05 	bl	80002c8 <__aeabi_dsub>
 8009ebe:	ec41 0b10 	vmov	d0, r0, r1
 8009ec2:	b005      	add	sp, #20
 8009ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ec8:	4668      	mov	r0, sp
 8009eca:	f000 fae1 	bl	800a490 <__ieee754_rem_pio2>
 8009ece:	f000 0003 	and.w	r0, r0, #3
 8009ed2:	2801      	cmp	r0, #1
 8009ed4:	d007      	beq.n	8009ee6 <cos+0x56>
 8009ed6:	2802      	cmp	r0, #2
 8009ed8:	d012      	beq.n	8009f00 <cos+0x70>
 8009eda:	b9c0      	cbnz	r0, 8009f0e <cos+0x7e>
 8009edc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ee0:	ed9d 0b00 	vldr	d0, [sp]
 8009ee4:	e7de      	b.n	8009ea4 <cos+0x14>
 8009ee6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009eea:	ed9d 0b00 	vldr	d0, [sp]
 8009eee:	f001 f997 	bl	800b220 <__kernel_sin>
 8009ef2:	ec53 2b10 	vmov	r2, r3, d0
 8009ef6:	ee10 0a10 	vmov	r0, s0
 8009efa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009efe:	e7de      	b.n	8009ebe <cos+0x2e>
 8009f00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f04:	ed9d 0b00 	vldr	d0, [sp]
 8009f08:	f000 fd82 	bl	800aa10 <__kernel_cos>
 8009f0c:	e7f1      	b.n	8009ef2 <cos+0x62>
 8009f0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f12:	ed9d 0b00 	vldr	d0, [sp]
 8009f16:	2001      	movs	r0, #1
 8009f18:	f001 f982 	bl	800b220 <__kernel_sin>
 8009f1c:	e7c4      	b.n	8009ea8 <cos+0x18>
 8009f1e:	bf00      	nop
	...
 8009f28:	3fe921fb 	.word	0x3fe921fb
 8009f2c:	7fefffff 	.word	0x7fefffff

08009f30 <fabs>:
 8009f30:	ec51 0b10 	vmov	r0, r1, d0
 8009f34:	ee10 2a10 	vmov	r2, s0
 8009f38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f3c:	ec43 2b10 	vmov	d0, r2, r3
 8009f40:	4770      	bx	lr
 8009f42:	0000      	movs	r0, r0
 8009f44:	0000      	movs	r0, r0
	...

08009f48 <sin>:
 8009f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f4a:	ec53 2b10 	vmov	r2, r3, d0
 8009f4e:	4826      	ldr	r0, [pc, #152]	; (8009fe8 <sin+0xa0>)
 8009f50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f54:	4281      	cmp	r1, r0
 8009f56:	dc07      	bgt.n	8009f68 <sin+0x20>
 8009f58:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009fe0 <sin+0x98>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f001 f95f 	bl	800b220 <__kernel_sin>
 8009f62:	ec51 0b10 	vmov	r0, r1, d0
 8009f66:	e007      	b.n	8009f78 <sin+0x30>
 8009f68:	4820      	ldr	r0, [pc, #128]	; (8009fec <sin+0xa4>)
 8009f6a:	4281      	cmp	r1, r0
 8009f6c:	dd09      	ble.n	8009f82 <sin+0x3a>
 8009f6e:	ee10 0a10 	vmov	r0, s0
 8009f72:	4619      	mov	r1, r3
 8009f74:	f7f6 f9a8 	bl	80002c8 <__aeabi_dsub>
 8009f78:	ec41 0b10 	vmov	d0, r0, r1
 8009f7c:	b005      	add	sp, #20
 8009f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f82:	4668      	mov	r0, sp
 8009f84:	f000 fa84 	bl	800a490 <__ieee754_rem_pio2>
 8009f88:	f000 0003 	and.w	r0, r0, #3
 8009f8c:	2801      	cmp	r0, #1
 8009f8e:	d008      	beq.n	8009fa2 <sin+0x5a>
 8009f90:	2802      	cmp	r0, #2
 8009f92:	d00d      	beq.n	8009fb0 <sin+0x68>
 8009f94:	b9d0      	cbnz	r0, 8009fcc <sin+0x84>
 8009f96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f9a:	ed9d 0b00 	vldr	d0, [sp]
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	e7dd      	b.n	8009f5e <sin+0x16>
 8009fa2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fa6:	ed9d 0b00 	vldr	d0, [sp]
 8009faa:	f000 fd31 	bl	800aa10 <__kernel_cos>
 8009fae:	e7d8      	b.n	8009f62 <sin+0x1a>
 8009fb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fb4:	ed9d 0b00 	vldr	d0, [sp]
 8009fb8:	2001      	movs	r0, #1
 8009fba:	f001 f931 	bl	800b220 <__kernel_sin>
 8009fbe:	ec53 2b10 	vmov	r2, r3, d0
 8009fc2:	ee10 0a10 	vmov	r0, s0
 8009fc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009fca:	e7d5      	b.n	8009f78 <sin+0x30>
 8009fcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fd0:	ed9d 0b00 	vldr	d0, [sp]
 8009fd4:	f000 fd1c 	bl	800aa10 <__kernel_cos>
 8009fd8:	e7f1      	b.n	8009fbe <sin+0x76>
 8009fda:	bf00      	nop
 8009fdc:	f3af 8000 	nop.w
	...
 8009fe8:	3fe921fb 	.word	0x3fe921fb
 8009fec:	7fefffff 	.word	0x7fefffff

08009ff0 <atan2>:
 8009ff0:	f000 b872 	b.w	800a0d8 <__ieee754_atan2>

08009ff4 <fmod>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	ed2d 8b02 	vpush	{d8}
 8009ffa:	ec57 6b10 	vmov	r6, r7, d0
 8009ffe:	ec55 4b11 	vmov	r4, r5, d1
 800a002:	f000 f933 	bl	800a26c <__ieee754_fmod>
 800a006:	4b18      	ldr	r3, [pc, #96]	; (800a068 <fmod+0x74>)
 800a008:	eeb0 8a40 	vmov.f32	s16, s0
 800a00c:	eef0 8a60 	vmov.f32	s17, s1
 800a010:	f993 3000 	ldrsb.w	r3, [r3]
 800a014:	3301      	adds	r3, #1
 800a016:	d020      	beq.n	800a05a <fmod+0x66>
 800a018:	4622      	mov	r2, r4
 800a01a:	462b      	mov	r3, r5
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 fda4 	bl	8000b6c <__aeabi_dcmpun>
 800a024:	b9c8      	cbnz	r0, 800a05a <fmod+0x66>
 800a026:	4632      	mov	r2, r6
 800a028:	463b      	mov	r3, r7
 800a02a:	4630      	mov	r0, r6
 800a02c:	4639      	mov	r1, r7
 800a02e:	f7f6 fd9d 	bl	8000b6c <__aeabi_dcmpun>
 800a032:	b990      	cbnz	r0, 800a05a <fmod+0x66>
 800a034:	2200      	movs	r2, #0
 800a036:	2300      	movs	r3, #0
 800a038:	4620      	mov	r0, r4
 800a03a:	4629      	mov	r1, r5
 800a03c:	f7f6 fd64 	bl	8000b08 <__aeabi_dcmpeq>
 800a040:	b158      	cbz	r0, 800a05a <fmod+0x66>
 800a042:	f7fc fff3 	bl	800702c <__errno>
 800a046:	2321      	movs	r3, #33	; 0x21
 800a048:	6003      	str	r3, [r0, #0]
 800a04a:	2200      	movs	r2, #0
 800a04c:	2300      	movs	r3, #0
 800a04e:	4610      	mov	r0, r2
 800a050:	4619      	mov	r1, r3
 800a052:	f7f6 fc1b 	bl	800088c <__aeabi_ddiv>
 800a056:	ec41 0b18 	vmov	d8, r0, r1
 800a05a:	eeb0 0a48 	vmov.f32	s0, s16
 800a05e:	eef0 0a68 	vmov.f32	s1, s17
 800a062:	ecbd 8b02 	vpop	{d8}
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a068:	200001dc 	.word	0x200001dc

0800a06c <sqrt>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	ed2d 8b02 	vpush	{d8}
 800a072:	ec55 4b10 	vmov	r4, r5, d0
 800a076:	f000 fc15 	bl	800a8a4 <__ieee754_sqrt>
 800a07a:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <sqrt+0x64>)
 800a07c:	eeb0 8a40 	vmov.f32	s16, s0
 800a080:	eef0 8a60 	vmov.f32	s17, s1
 800a084:	f993 3000 	ldrsb.w	r3, [r3]
 800a088:	3301      	adds	r3, #1
 800a08a:	d019      	beq.n	800a0c0 <sqrt+0x54>
 800a08c:	4622      	mov	r2, r4
 800a08e:	462b      	mov	r3, r5
 800a090:	4620      	mov	r0, r4
 800a092:	4629      	mov	r1, r5
 800a094:	f7f6 fd6a 	bl	8000b6c <__aeabi_dcmpun>
 800a098:	b990      	cbnz	r0, 800a0c0 <sqrt+0x54>
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7f6 fd3b 	bl	8000b1c <__aeabi_dcmplt>
 800a0a6:	b158      	cbz	r0, 800a0c0 <sqrt+0x54>
 800a0a8:	f7fc ffc0 	bl	800702c <__errno>
 800a0ac:	2321      	movs	r3, #33	; 0x21
 800a0ae:	6003      	str	r3, [r0, #0]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	f7f6 fbe8 	bl	800088c <__aeabi_ddiv>
 800a0bc:	ec41 0b18 	vmov	d8, r0, r1
 800a0c0:	eeb0 0a48 	vmov.f32	s0, s16
 800a0c4:	eef0 0a68 	vmov.f32	s1, s17
 800a0c8:	ecbd 8b02 	vpop	{d8}
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200001dc 	.word	0x200001dc
 800a0d4:	00000000 	.word	0x00000000

0800a0d8 <__ieee754_atan2>:
 800a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0dc:	ec57 6b11 	vmov	r6, r7, d1
 800a0e0:	4273      	negs	r3, r6
 800a0e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a268 <__ieee754_atan2+0x190>
 800a0e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a0ea:	4333      	orrs	r3, r6
 800a0ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a0f0:	4573      	cmp	r3, lr
 800a0f2:	ec51 0b10 	vmov	r0, r1, d0
 800a0f6:	ee11 8a10 	vmov	r8, s2
 800a0fa:	d80a      	bhi.n	800a112 <__ieee754_atan2+0x3a>
 800a0fc:	4244      	negs	r4, r0
 800a0fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a102:	4304      	orrs	r4, r0
 800a104:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a108:	4574      	cmp	r4, lr
 800a10a:	ee10 9a10 	vmov	r9, s0
 800a10e:	468c      	mov	ip, r1
 800a110:	d907      	bls.n	800a122 <__ieee754_atan2+0x4a>
 800a112:	4632      	mov	r2, r6
 800a114:	463b      	mov	r3, r7
 800a116:	f7f6 f8d9 	bl	80002cc <__adddf3>
 800a11a:	ec41 0b10 	vmov	d0, r0, r1
 800a11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a122:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a126:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a12a:	4334      	orrs	r4, r6
 800a12c:	d103      	bne.n	800a136 <__ieee754_atan2+0x5e>
 800a12e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a132:	f7ff bd0d 	b.w	8009b50 <atan>
 800a136:	17bc      	asrs	r4, r7, #30
 800a138:	f004 0402 	and.w	r4, r4, #2
 800a13c:	ea53 0909 	orrs.w	r9, r3, r9
 800a140:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a144:	d107      	bne.n	800a156 <__ieee754_atan2+0x7e>
 800a146:	2c02      	cmp	r4, #2
 800a148:	d060      	beq.n	800a20c <__ieee754_atan2+0x134>
 800a14a:	2c03      	cmp	r4, #3
 800a14c:	d1e5      	bne.n	800a11a <__ieee754_atan2+0x42>
 800a14e:	a142      	add	r1, pc, #264	; (adr r1, 800a258 <__ieee754_atan2+0x180>)
 800a150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a154:	e7e1      	b.n	800a11a <__ieee754_atan2+0x42>
 800a156:	ea52 0808 	orrs.w	r8, r2, r8
 800a15a:	d106      	bne.n	800a16a <__ieee754_atan2+0x92>
 800a15c:	f1bc 0f00 	cmp.w	ip, #0
 800a160:	da5f      	bge.n	800a222 <__ieee754_atan2+0x14a>
 800a162:	a13f      	add	r1, pc, #252	; (adr r1, 800a260 <__ieee754_atan2+0x188>)
 800a164:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a168:	e7d7      	b.n	800a11a <__ieee754_atan2+0x42>
 800a16a:	4572      	cmp	r2, lr
 800a16c:	d10f      	bne.n	800a18e <__ieee754_atan2+0xb6>
 800a16e:	4293      	cmp	r3, r2
 800a170:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a174:	d107      	bne.n	800a186 <__ieee754_atan2+0xae>
 800a176:	2c02      	cmp	r4, #2
 800a178:	d84c      	bhi.n	800a214 <__ieee754_atan2+0x13c>
 800a17a:	4b35      	ldr	r3, [pc, #212]	; (800a250 <__ieee754_atan2+0x178>)
 800a17c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a180:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a184:	e7c9      	b.n	800a11a <__ieee754_atan2+0x42>
 800a186:	2c02      	cmp	r4, #2
 800a188:	d848      	bhi.n	800a21c <__ieee754_atan2+0x144>
 800a18a:	4b32      	ldr	r3, [pc, #200]	; (800a254 <__ieee754_atan2+0x17c>)
 800a18c:	e7f6      	b.n	800a17c <__ieee754_atan2+0xa4>
 800a18e:	4573      	cmp	r3, lr
 800a190:	d0e4      	beq.n	800a15c <__ieee754_atan2+0x84>
 800a192:	1a9b      	subs	r3, r3, r2
 800a194:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a198:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a19c:	da1e      	bge.n	800a1dc <__ieee754_atan2+0x104>
 800a19e:	2f00      	cmp	r7, #0
 800a1a0:	da01      	bge.n	800a1a6 <__ieee754_atan2+0xce>
 800a1a2:	323c      	adds	r2, #60	; 0x3c
 800a1a4:	db1e      	blt.n	800a1e4 <__ieee754_atan2+0x10c>
 800a1a6:	4632      	mov	r2, r6
 800a1a8:	463b      	mov	r3, r7
 800a1aa:	f7f6 fb6f 	bl	800088c <__aeabi_ddiv>
 800a1ae:	ec41 0b10 	vmov	d0, r0, r1
 800a1b2:	f7ff febd 	bl	8009f30 <fabs>
 800a1b6:	f7ff fccb 	bl	8009b50 <atan>
 800a1ba:	ec51 0b10 	vmov	r0, r1, d0
 800a1be:	2c01      	cmp	r4, #1
 800a1c0:	d013      	beq.n	800a1ea <__ieee754_atan2+0x112>
 800a1c2:	2c02      	cmp	r4, #2
 800a1c4:	d015      	beq.n	800a1f2 <__ieee754_atan2+0x11a>
 800a1c6:	2c00      	cmp	r4, #0
 800a1c8:	d0a7      	beq.n	800a11a <__ieee754_atan2+0x42>
 800a1ca:	a319      	add	r3, pc, #100	; (adr r3, 800a230 <__ieee754_atan2+0x158>)
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f7f6 f87a 	bl	80002c8 <__aeabi_dsub>
 800a1d4:	a318      	add	r3, pc, #96	; (adr r3, 800a238 <__ieee754_atan2+0x160>)
 800a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1da:	e014      	b.n	800a206 <__ieee754_atan2+0x12e>
 800a1dc:	a118      	add	r1, pc, #96	; (adr r1, 800a240 <__ieee754_atan2+0x168>)
 800a1de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1e2:	e7ec      	b.n	800a1be <__ieee754_atan2+0xe6>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	e7e9      	b.n	800a1be <__ieee754_atan2+0xe6>
 800a1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	e793      	b.n	800a11a <__ieee754_atan2+0x42>
 800a1f2:	a30f      	add	r3, pc, #60	; (adr r3, 800a230 <__ieee754_atan2+0x158>)
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f7f6 f866 	bl	80002c8 <__aeabi_dsub>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	a10d      	add	r1, pc, #52	; (adr r1, 800a238 <__ieee754_atan2+0x160>)
 800a202:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a206:	f7f6 f85f 	bl	80002c8 <__aeabi_dsub>
 800a20a:	e786      	b.n	800a11a <__ieee754_atan2+0x42>
 800a20c:	a10a      	add	r1, pc, #40	; (adr r1, 800a238 <__ieee754_atan2+0x160>)
 800a20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a212:	e782      	b.n	800a11a <__ieee754_atan2+0x42>
 800a214:	a10c      	add	r1, pc, #48	; (adr r1, 800a248 <__ieee754_atan2+0x170>)
 800a216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a21a:	e77e      	b.n	800a11a <__ieee754_atan2+0x42>
 800a21c:	2000      	movs	r0, #0
 800a21e:	2100      	movs	r1, #0
 800a220:	e77b      	b.n	800a11a <__ieee754_atan2+0x42>
 800a222:	a107      	add	r1, pc, #28	; (adr r1, 800a240 <__ieee754_atan2+0x168>)
 800a224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a228:	e777      	b.n	800a11a <__ieee754_atan2+0x42>
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w
 800a230:	33145c07 	.word	0x33145c07
 800a234:	3ca1a626 	.word	0x3ca1a626
 800a238:	54442d18 	.word	0x54442d18
 800a23c:	400921fb 	.word	0x400921fb
 800a240:	54442d18 	.word	0x54442d18
 800a244:	3ff921fb 	.word	0x3ff921fb
 800a248:	54442d18 	.word	0x54442d18
 800a24c:	3fe921fb 	.word	0x3fe921fb
 800a250:	0800baf0 	.word	0x0800baf0
 800a254:	0800bb08 	.word	0x0800bb08
 800a258:	54442d18 	.word	0x54442d18
 800a25c:	c00921fb 	.word	0xc00921fb
 800a260:	54442d18 	.word	0x54442d18
 800a264:	bff921fb 	.word	0xbff921fb
 800a268:	7ff00000 	.word	0x7ff00000

0800a26c <__ieee754_fmod>:
 800a26c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a270:	ec53 2b11 	vmov	r2, r3, d1
 800a274:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800a278:	ea5e 0402 	orrs.w	r4, lr, r2
 800a27c:	ec51 0b10 	vmov	r0, r1, d0
 800a280:	ee11 7a10 	vmov	r7, s2
 800a284:	ee11 ca10 	vmov	ip, s2
 800a288:	461e      	mov	r6, r3
 800a28a:	d00d      	beq.n	800a2a8 <__ieee754_fmod+0x3c>
 800a28c:	4c7a      	ldr	r4, [pc, #488]	; (800a478 <__ieee754_fmod+0x20c>)
 800a28e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800a292:	45a0      	cmp	r8, r4
 800a294:	4689      	mov	r9, r1
 800a296:	dc07      	bgt.n	800a2a8 <__ieee754_fmod+0x3c>
 800a298:	4254      	negs	r4, r2
 800a29a:	4d78      	ldr	r5, [pc, #480]	; (800a47c <__ieee754_fmod+0x210>)
 800a29c:	4314      	orrs	r4, r2
 800a29e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800a2a2:	42ac      	cmp	r4, r5
 800a2a4:	46ab      	mov	fp, r5
 800a2a6:	d909      	bls.n	800a2bc <__ieee754_fmod+0x50>
 800a2a8:	f7f6 f9c6 	bl	8000638 <__aeabi_dmul>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	f7f6 faec 	bl	800088c <__aeabi_ddiv>
 800a2b4:	ec41 0b10 	vmov	d0, r0, r1
 800a2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2bc:	45f0      	cmp	r8, lr
 800a2be:	ee10 aa10 	vmov	sl, s0
 800a2c2:	ee10 4a10 	vmov	r4, s0
 800a2c6:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800a2ca:	dc0a      	bgt.n	800a2e2 <__ieee754_fmod+0x76>
 800a2cc:	dbf2      	blt.n	800a2b4 <__ieee754_fmod+0x48>
 800a2ce:	4290      	cmp	r0, r2
 800a2d0:	d3f0      	bcc.n	800a2b4 <__ieee754_fmod+0x48>
 800a2d2:	d106      	bne.n	800a2e2 <__ieee754_fmod+0x76>
 800a2d4:	4a6a      	ldr	r2, [pc, #424]	; (800a480 <__ieee754_fmod+0x214>)
 800a2d6:	0fed      	lsrs	r5, r5, #31
 800a2d8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a2dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a2e0:	e7e8      	b.n	800a2b4 <__ieee754_fmod+0x48>
 800a2e2:	ea19 0f0b 	tst.w	r9, fp
 800a2e6:	d14a      	bne.n	800a37e <__ieee754_fmod+0x112>
 800a2e8:	f1b8 0f00 	cmp.w	r8, #0
 800a2ec:	d13f      	bne.n	800a36e <__ieee754_fmod+0x102>
 800a2ee:	4965      	ldr	r1, [pc, #404]	; (800a484 <__ieee754_fmod+0x218>)
 800a2f0:	4653      	mov	r3, sl
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	dc38      	bgt.n	800a368 <__ieee754_fmod+0xfc>
 800a2f6:	4b61      	ldr	r3, [pc, #388]	; (800a47c <__ieee754_fmod+0x210>)
 800a2f8:	4033      	ands	r3, r6
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d14f      	bne.n	800a39e <__ieee754_fmod+0x132>
 800a2fe:	f1be 0f00 	cmp.w	lr, #0
 800a302:	d144      	bne.n	800a38e <__ieee754_fmod+0x122>
 800a304:	4a5f      	ldr	r2, [pc, #380]	; (800a484 <__ieee754_fmod+0x218>)
 800a306:	463b      	mov	r3, r7
 800a308:	2b00      	cmp	r3, #0
 800a30a:	dc3d      	bgt.n	800a388 <__ieee754_fmod+0x11c>
 800a30c:	4b5e      	ldr	r3, [pc, #376]	; (800a488 <__ieee754_fmod+0x21c>)
 800a30e:	4299      	cmp	r1, r3
 800a310:	db4a      	blt.n	800a3a8 <__ieee754_fmod+0x13c>
 800a312:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a31a:	485b      	ldr	r0, [pc, #364]	; (800a488 <__ieee754_fmod+0x21c>)
 800a31c:	4282      	cmp	r2, r0
 800a31e:	db57      	blt.n	800a3d0 <__ieee754_fmod+0x164>
 800a320:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800a324:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800a328:	1a89      	subs	r1, r1, r2
 800a32a:	1b98      	subs	r0, r3, r6
 800a32c:	eba4 070c 	sub.w	r7, r4, ip
 800a330:	2900      	cmp	r1, #0
 800a332:	d164      	bne.n	800a3fe <__ieee754_fmod+0x192>
 800a334:	4564      	cmp	r4, ip
 800a336:	bf38      	it	cc
 800a338:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800a33c:	2800      	cmp	r0, #0
 800a33e:	bfa4      	itt	ge
 800a340:	463c      	movge	r4, r7
 800a342:	4603      	movge	r3, r0
 800a344:	ea53 0104 	orrs.w	r1, r3, r4
 800a348:	d0c4      	beq.n	800a2d4 <__ieee754_fmod+0x68>
 800a34a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a34e:	db6b      	blt.n	800a428 <__ieee754_fmod+0x1bc>
 800a350:	494d      	ldr	r1, [pc, #308]	; (800a488 <__ieee754_fmod+0x21c>)
 800a352:	428a      	cmp	r2, r1
 800a354:	db6e      	blt.n	800a434 <__ieee754_fmod+0x1c8>
 800a356:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a35a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800a35e:	431d      	orrs	r5, r3
 800a360:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800a364:	4620      	mov	r0, r4
 800a366:	e7a5      	b.n	800a2b4 <__ieee754_fmod+0x48>
 800a368:	3901      	subs	r1, #1
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	e7c1      	b.n	800a2f2 <__ieee754_fmod+0x86>
 800a36e:	4946      	ldr	r1, [pc, #280]	; (800a488 <__ieee754_fmod+0x21c>)
 800a370:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800a374:	2b00      	cmp	r3, #0
 800a376:	ddbe      	ble.n	800a2f6 <__ieee754_fmod+0x8a>
 800a378:	3901      	subs	r1, #1
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	e7fa      	b.n	800a374 <__ieee754_fmod+0x108>
 800a37e:	ea4f 5128 	mov.w	r1, r8, asr #20
 800a382:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a386:	e7b6      	b.n	800a2f6 <__ieee754_fmod+0x8a>
 800a388:	3a01      	subs	r2, #1
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	e7bc      	b.n	800a308 <__ieee754_fmod+0x9c>
 800a38e:	4a3e      	ldr	r2, [pc, #248]	; (800a488 <__ieee754_fmod+0x21c>)
 800a390:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800a394:	2b00      	cmp	r3, #0
 800a396:	ddb9      	ble.n	800a30c <__ieee754_fmod+0xa0>
 800a398:	3a01      	subs	r2, #1
 800a39a:	005b      	lsls	r3, r3, #1
 800a39c:	e7fa      	b.n	800a394 <__ieee754_fmod+0x128>
 800a39e:	ea4f 522e 	mov.w	r2, lr, asr #20
 800a3a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3a6:	e7b1      	b.n	800a30c <__ieee754_fmod+0xa0>
 800a3a8:	1a5c      	subs	r4, r3, r1
 800a3aa:	2c1f      	cmp	r4, #31
 800a3ac:	dc0a      	bgt.n	800a3c4 <__ieee754_fmod+0x158>
 800a3ae:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800a3b2:	fa08 f804 	lsl.w	r8, r8, r4
 800a3b6:	fa2a f303 	lsr.w	r3, sl, r3
 800a3ba:	ea43 0308 	orr.w	r3, r3, r8
 800a3be:	fa0a f404 	lsl.w	r4, sl, r4
 800a3c2:	e7aa      	b.n	800a31a <__ieee754_fmod+0xae>
 800a3c4:	4b31      	ldr	r3, [pc, #196]	; (800a48c <__ieee754_fmod+0x220>)
 800a3c6:	1a5b      	subs	r3, r3, r1
 800a3c8:	fa0a f303 	lsl.w	r3, sl, r3
 800a3cc:	2400      	movs	r4, #0
 800a3ce:	e7a4      	b.n	800a31a <__ieee754_fmod+0xae>
 800a3d0:	eba0 0c02 	sub.w	ip, r0, r2
 800a3d4:	f1bc 0f1f 	cmp.w	ip, #31
 800a3d8:	dc0a      	bgt.n	800a3f0 <__ieee754_fmod+0x184>
 800a3da:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800a3de:	fa0e fe0c 	lsl.w	lr, lr, ip
 800a3e2:	fa27 f606 	lsr.w	r6, r7, r6
 800a3e6:	ea46 060e 	orr.w	r6, r6, lr
 800a3ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800a3ee:	e79b      	b.n	800a328 <__ieee754_fmod+0xbc>
 800a3f0:	4e26      	ldr	r6, [pc, #152]	; (800a48c <__ieee754_fmod+0x220>)
 800a3f2:	1ab6      	subs	r6, r6, r2
 800a3f4:	fa07 f606 	lsl.w	r6, r7, r6
 800a3f8:	f04f 0c00 	mov.w	ip, #0
 800a3fc:	e794      	b.n	800a328 <__ieee754_fmod+0xbc>
 800a3fe:	4564      	cmp	r4, ip
 800a400:	bf38      	it	cc
 800a402:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800a406:	2800      	cmp	r0, #0
 800a408:	da05      	bge.n	800a416 <__ieee754_fmod+0x1aa>
 800a40a:	0fe0      	lsrs	r0, r4, #31
 800a40c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a410:	0064      	lsls	r4, r4, #1
 800a412:	3901      	subs	r1, #1
 800a414:	e789      	b.n	800a32a <__ieee754_fmod+0xbe>
 800a416:	ea50 0307 	orrs.w	r3, r0, r7
 800a41a:	f43f af5b 	beq.w	800a2d4 <__ieee754_fmod+0x68>
 800a41e:	0ffb      	lsrs	r3, r7, #31
 800a420:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a424:	007c      	lsls	r4, r7, #1
 800a426:	e7f4      	b.n	800a412 <__ieee754_fmod+0x1a6>
 800a428:	0fe1      	lsrs	r1, r4, #31
 800a42a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a42e:	0064      	lsls	r4, r4, #1
 800a430:	3a01      	subs	r2, #1
 800a432:	e78a      	b.n	800a34a <__ieee754_fmod+0xde>
 800a434:	1a89      	subs	r1, r1, r2
 800a436:	2914      	cmp	r1, #20
 800a438:	dc0a      	bgt.n	800a450 <__ieee754_fmod+0x1e4>
 800a43a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a43e:	fa03 f202 	lsl.w	r2, r3, r2
 800a442:	40cc      	lsrs	r4, r1
 800a444:	4322      	orrs	r2, r4
 800a446:	410b      	asrs	r3, r1
 800a448:	ea43 0105 	orr.w	r1, r3, r5
 800a44c:	4610      	mov	r0, r2
 800a44e:	e731      	b.n	800a2b4 <__ieee754_fmod+0x48>
 800a450:	291f      	cmp	r1, #31
 800a452:	dc07      	bgt.n	800a464 <__ieee754_fmod+0x1f8>
 800a454:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a458:	40cc      	lsrs	r4, r1
 800a45a:	fa03 f202 	lsl.w	r2, r3, r2
 800a45e:	4322      	orrs	r2, r4
 800a460:	462b      	mov	r3, r5
 800a462:	e7f1      	b.n	800a448 <__ieee754_fmod+0x1dc>
 800a464:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800a468:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a46c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800a470:	32e2      	adds	r2, #226	; 0xe2
 800a472:	fa43 f202 	asr.w	r2, r3, r2
 800a476:	e7f3      	b.n	800a460 <__ieee754_fmod+0x1f4>
 800a478:	7fefffff 	.word	0x7fefffff
 800a47c:	7ff00000 	.word	0x7ff00000
 800a480:	0800bb20 	.word	0x0800bb20
 800a484:	fffffbed 	.word	0xfffffbed
 800a488:	fffffc02 	.word	0xfffffc02
 800a48c:	fffffbe2 	.word	0xfffffbe2

0800a490 <__ieee754_rem_pio2>:
 800a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	ed2d 8b02 	vpush	{d8}
 800a498:	ec55 4b10 	vmov	r4, r5, d0
 800a49c:	4bca      	ldr	r3, [pc, #808]	; (800a7c8 <__ieee754_rem_pio2+0x338>)
 800a49e:	b08b      	sub	sp, #44	; 0x2c
 800a4a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a4a4:	4598      	cmp	r8, r3
 800a4a6:	4682      	mov	sl, r0
 800a4a8:	9502      	str	r5, [sp, #8]
 800a4aa:	dc08      	bgt.n	800a4be <__ieee754_rem_pio2+0x2e>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	ed80 0b00 	vstr	d0, [r0]
 800a4b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a4b8:	f04f 0b00 	mov.w	fp, #0
 800a4bc:	e028      	b.n	800a510 <__ieee754_rem_pio2+0x80>
 800a4be:	4bc3      	ldr	r3, [pc, #780]	; (800a7cc <__ieee754_rem_pio2+0x33c>)
 800a4c0:	4598      	cmp	r8, r3
 800a4c2:	dc78      	bgt.n	800a5b6 <__ieee754_rem_pio2+0x126>
 800a4c4:	9b02      	ldr	r3, [sp, #8]
 800a4c6:	4ec2      	ldr	r6, [pc, #776]	; (800a7d0 <__ieee754_rem_pio2+0x340>)
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	ee10 0a10 	vmov	r0, s0
 800a4ce:	a3b0      	add	r3, pc, #704	; (adr r3, 800a790 <__ieee754_rem_pio2+0x300>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	dd39      	ble.n	800a54c <__ieee754_rem_pio2+0xbc>
 800a4d8:	f7f5 fef6 	bl	80002c8 <__aeabi_dsub>
 800a4dc:	45b0      	cmp	r8, r6
 800a4de:	4604      	mov	r4, r0
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	d01b      	beq.n	800a51c <__ieee754_rem_pio2+0x8c>
 800a4e4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a798 <__ieee754_rem_pio2+0x308>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7f5 feed 	bl	80002c8 <__aeabi_dsub>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	e9ca 2300 	strd	r2, r3, [sl]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	f7f5 fee5 	bl	80002c8 <__aeabi_dsub>
 800a4fe:	a3a6      	add	r3, pc, #664	; (adr r3, 800a798 <__ieee754_rem_pio2+0x308>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f5 fee0 	bl	80002c8 <__aeabi_dsub>
 800a508:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a50c:	f04f 0b01 	mov.w	fp, #1
 800a510:	4658      	mov	r0, fp
 800a512:	b00b      	add	sp, #44	; 0x2c
 800a514:	ecbd 8b02 	vpop	{d8}
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x310>)
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	f7f5 fed1 	bl	80002c8 <__aeabi_dsub>
 800a526:	a3a0      	add	r3, pc, #640	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x318>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	4604      	mov	r4, r0
 800a52e:	460d      	mov	r5, r1
 800a530:	f7f5 feca 	bl	80002c8 <__aeabi_dsub>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	e9ca 2300 	strd	r2, r3, [sl]
 800a53c:	4620      	mov	r0, r4
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f5 fec2 	bl	80002c8 <__aeabi_dsub>
 800a544:	a398      	add	r3, pc, #608	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x318>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	e7db      	b.n	800a504 <__ieee754_rem_pio2+0x74>
 800a54c:	f7f5 febe 	bl	80002cc <__adddf3>
 800a550:	45b0      	cmp	r8, r6
 800a552:	4604      	mov	r4, r0
 800a554:	460d      	mov	r5, r1
 800a556:	d016      	beq.n	800a586 <__ieee754_rem_pio2+0xf6>
 800a558:	a38f      	add	r3, pc, #572	; (adr r3, 800a798 <__ieee754_rem_pio2+0x308>)
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	f7f5 feb5 	bl	80002cc <__adddf3>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	e9ca 2300 	strd	r2, r3, [sl]
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f5 feab 	bl	80002c8 <__aeabi_dsub>
 800a572:	a389      	add	r3, pc, #548	; (adr r3, 800a798 <__ieee754_rem_pio2+0x308>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f7f5 fea8 	bl	80002cc <__adddf3>
 800a57c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a580:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a584:	e7c4      	b.n	800a510 <__ieee754_rem_pio2+0x80>
 800a586:	a386      	add	r3, pc, #536	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x310>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f5 fe9e 	bl	80002cc <__adddf3>
 800a590:	a385      	add	r3, pc, #532	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x318>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	4604      	mov	r4, r0
 800a598:	460d      	mov	r5, r1
 800a59a:	f7f5 fe97 	bl	80002cc <__adddf3>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	e9ca 2300 	strd	r2, r3, [sl]
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	f7f5 fe8d 	bl	80002c8 <__aeabi_dsub>
 800a5ae:	a37e      	add	r3, pc, #504	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x318>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	e7e0      	b.n	800a578 <__ieee754_rem_pio2+0xe8>
 800a5b6:	4b87      	ldr	r3, [pc, #540]	; (800a7d4 <__ieee754_rem_pio2+0x344>)
 800a5b8:	4598      	cmp	r8, r3
 800a5ba:	f300 80d9 	bgt.w	800a770 <__ieee754_rem_pio2+0x2e0>
 800a5be:	f7ff fcb7 	bl	8009f30 <fabs>
 800a5c2:	ec55 4b10 	vmov	r4, r5, d0
 800a5c6:	ee10 0a10 	vmov	r0, s0
 800a5ca:	a379      	add	r3, pc, #484	; (adr r3, 800a7b0 <__ieee754_rem_pio2+0x320>)
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f6 f831 	bl	8000638 <__aeabi_dmul>
 800a5d6:	4b80      	ldr	r3, [pc, #512]	; (800a7d8 <__ieee754_rem_pio2+0x348>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f7f5 fe77 	bl	80002cc <__adddf3>
 800a5de:	f7f6 fadb 	bl	8000b98 <__aeabi_d2iz>
 800a5e2:	4683      	mov	fp, r0
 800a5e4:	f7f5 ffbe 	bl	8000564 <__aeabi_i2d>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	ec43 2b18 	vmov	d8, r2, r3
 800a5f0:	a367      	add	r3, pc, #412	; (adr r3, 800a790 <__ieee754_rem_pio2+0x300>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f6 f81f 	bl	8000638 <__aeabi_dmul>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4620      	mov	r0, r4
 800a600:	4629      	mov	r1, r5
 800a602:	f7f5 fe61 	bl	80002c8 <__aeabi_dsub>
 800a606:	a364      	add	r3, pc, #400	; (adr r3, 800a798 <__ieee754_rem_pio2+0x308>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	4606      	mov	r6, r0
 800a60e:	460f      	mov	r7, r1
 800a610:	ec51 0b18 	vmov	r0, r1, d8
 800a614:	f7f6 f810 	bl	8000638 <__aeabi_dmul>
 800a618:	f1bb 0f1f 	cmp.w	fp, #31
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	dc0d      	bgt.n	800a63e <__ieee754_rem_pio2+0x1ae>
 800a622:	4b6e      	ldr	r3, [pc, #440]	; (800a7dc <__ieee754_rem_pio2+0x34c>)
 800a624:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62c:	4543      	cmp	r3, r8
 800a62e:	d006      	beq.n	800a63e <__ieee754_rem_pio2+0x1ae>
 800a630:	4622      	mov	r2, r4
 800a632:	462b      	mov	r3, r5
 800a634:	4630      	mov	r0, r6
 800a636:	4639      	mov	r1, r7
 800a638:	f7f5 fe46 	bl	80002c8 <__aeabi_dsub>
 800a63c:	e00f      	b.n	800a65e <__ieee754_rem_pio2+0x1ce>
 800a63e:	462b      	mov	r3, r5
 800a640:	4622      	mov	r2, r4
 800a642:	4630      	mov	r0, r6
 800a644:	4639      	mov	r1, r7
 800a646:	f7f5 fe3f 	bl	80002c8 <__aeabi_dsub>
 800a64a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a654:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a658:	f1b8 0f10 	cmp.w	r8, #16
 800a65c:	dc02      	bgt.n	800a664 <__ieee754_rem_pio2+0x1d4>
 800a65e:	e9ca 0100 	strd	r0, r1, [sl]
 800a662:	e039      	b.n	800a6d8 <__ieee754_rem_pio2+0x248>
 800a664:	a34e      	add	r3, pc, #312	; (adr r3, 800a7a0 <__ieee754_rem_pio2+0x310>)
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	ec51 0b18 	vmov	r0, r1, d8
 800a66e:	f7f5 ffe3 	bl	8000638 <__aeabi_dmul>
 800a672:	4604      	mov	r4, r0
 800a674:	460d      	mov	r5, r1
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	4630      	mov	r0, r6
 800a67c:	4639      	mov	r1, r7
 800a67e:	f7f5 fe23 	bl	80002c8 <__aeabi_dsub>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4680      	mov	r8, r0
 800a688:	4689      	mov	r9, r1
 800a68a:	4630      	mov	r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	f7f5 fe1b 	bl	80002c8 <__aeabi_dsub>
 800a692:	4622      	mov	r2, r4
 800a694:	462b      	mov	r3, r5
 800a696:	f7f5 fe17 	bl	80002c8 <__aeabi_dsub>
 800a69a:	a343      	add	r3, pc, #268	; (adr r3, 800a7a8 <__ieee754_rem_pio2+0x318>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	ec51 0b18 	vmov	r0, r1, d8
 800a6a8:	f7f5 ffc6 	bl	8000638 <__aeabi_dmul>
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	462b      	mov	r3, r5
 800a6b0:	f7f5 fe0a 	bl	80002c8 <__aeabi_dsub>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	4640      	mov	r0, r8
 800a6be:	4649      	mov	r1, r9
 800a6c0:	f7f5 fe02 	bl	80002c8 <__aeabi_dsub>
 800a6c4:	9a03      	ldr	r2, [sp, #12]
 800a6c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	2b31      	cmp	r3, #49	; 0x31
 800a6ce:	dc24      	bgt.n	800a71a <__ieee754_rem_pio2+0x28a>
 800a6d0:	e9ca 0100 	strd	r0, r1, [sl]
 800a6d4:	4646      	mov	r6, r8
 800a6d6:	464f      	mov	r7, r9
 800a6d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6dc:	4630      	mov	r0, r6
 800a6de:	4642      	mov	r2, r8
 800a6e0:	464b      	mov	r3, r9
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f5 fdf0 	bl	80002c8 <__aeabi_dsub>
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	4622      	mov	r2, r4
 800a6ec:	f7f5 fdec 	bl	80002c8 <__aeabi_dsub>
 800a6f0:	9b02      	ldr	r3, [sp, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6f8:	f6bf af0a 	bge.w	800a510 <__ieee754_rem_pio2+0x80>
 800a6fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a700:	f8ca 3004 	str.w	r3, [sl, #4]
 800a704:	f8ca 8000 	str.w	r8, [sl]
 800a708:	f8ca 0008 	str.w	r0, [sl, #8]
 800a70c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a710:	f8ca 300c 	str.w	r3, [sl, #12]
 800a714:	f1cb 0b00 	rsb	fp, fp, #0
 800a718:	e6fa      	b.n	800a510 <__ieee754_rem_pio2+0x80>
 800a71a:	a327      	add	r3, pc, #156	; (adr r3, 800a7b8 <__ieee754_rem_pio2+0x328>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	ec51 0b18 	vmov	r0, r1, d8
 800a724:	f7f5 ff88 	bl	8000638 <__aeabi_dmul>
 800a728:	4604      	mov	r4, r0
 800a72a:	460d      	mov	r5, r1
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4640      	mov	r0, r8
 800a732:	4649      	mov	r1, r9
 800a734:	f7f5 fdc8 	bl	80002c8 <__aeabi_dsub>
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	4606      	mov	r6, r0
 800a73e:	460f      	mov	r7, r1
 800a740:	4640      	mov	r0, r8
 800a742:	4649      	mov	r1, r9
 800a744:	f7f5 fdc0 	bl	80002c8 <__aeabi_dsub>
 800a748:	4622      	mov	r2, r4
 800a74a:	462b      	mov	r3, r5
 800a74c:	f7f5 fdbc 	bl	80002c8 <__aeabi_dsub>
 800a750:	a31b      	add	r3, pc, #108	; (adr r3, 800a7c0 <__ieee754_rem_pio2+0x330>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	4604      	mov	r4, r0
 800a758:	460d      	mov	r5, r1
 800a75a:	ec51 0b18 	vmov	r0, r1, d8
 800a75e:	f7f5 ff6b 	bl	8000638 <__aeabi_dmul>
 800a762:	4622      	mov	r2, r4
 800a764:	462b      	mov	r3, r5
 800a766:	f7f5 fdaf 	bl	80002c8 <__aeabi_dsub>
 800a76a:	4604      	mov	r4, r0
 800a76c:	460d      	mov	r5, r1
 800a76e:	e75f      	b.n	800a630 <__ieee754_rem_pio2+0x1a0>
 800a770:	4b1b      	ldr	r3, [pc, #108]	; (800a7e0 <__ieee754_rem_pio2+0x350>)
 800a772:	4598      	cmp	r8, r3
 800a774:	dd36      	ble.n	800a7e4 <__ieee754_rem_pio2+0x354>
 800a776:	ee10 2a10 	vmov	r2, s0
 800a77a:	462b      	mov	r3, r5
 800a77c:	4620      	mov	r0, r4
 800a77e:	4629      	mov	r1, r5
 800a780:	f7f5 fda2 	bl	80002c8 <__aeabi_dsub>
 800a784:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a788:	e9ca 0100 	strd	r0, r1, [sl]
 800a78c:	e694      	b.n	800a4b8 <__ieee754_rem_pio2+0x28>
 800a78e:	bf00      	nop
 800a790:	54400000 	.word	0x54400000
 800a794:	3ff921fb 	.word	0x3ff921fb
 800a798:	1a626331 	.word	0x1a626331
 800a79c:	3dd0b461 	.word	0x3dd0b461
 800a7a0:	1a600000 	.word	0x1a600000
 800a7a4:	3dd0b461 	.word	0x3dd0b461
 800a7a8:	2e037073 	.word	0x2e037073
 800a7ac:	3ba3198a 	.word	0x3ba3198a
 800a7b0:	6dc9c883 	.word	0x6dc9c883
 800a7b4:	3fe45f30 	.word	0x3fe45f30
 800a7b8:	2e000000 	.word	0x2e000000
 800a7bc:	3ba3198a 	.word	0x3ba3198a
 800a7c0:	252049c1 	.word	0x252049c1
 800a7c4:	397b839a 	.word	0x397b839a
 800a7c8:	3fe921fb 	.word	0x3fe921fb
 800a7cc:	4002d97b 	.word	0x4002d97b
 800a7d0:	3ff921fb 	.word	0x3ff921fb
 800a7d4:	413921fb 	.word	0x413921fb
 800a7d8:	3fe00000 	.word	0x3fe00000
 800a7dc:	0800bb30 	.word	0x0800bb30
 800a7e0:	7fefffff 	.word	0x7fefffff
 800a7e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a7e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a7ec:	ee10 0a10 	vmov	r0, s0
 800a7f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a7f4:	ee10 6a10 	vmov	r6, s0
 800a7f8:	460f      	mov	r7, r1
 800a7fa:	f7f6 f9cd 	bl	8000b98 <__aeabi_d2iz>
 800a7fe:	f7f5 feb1 	bl	8000564 <__aeabi_i2d>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4630      	mov	r0, r6
 800a808:	4639      	mov	r1, r7
 800a80a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a80e:	f7f5 fd5b 	bl	80002c8 <__aeabi_dsub>
 800a812:	4b22      	ldr	r3, [pc, #136]	; (800a89c <__ieee754_rem_pio2+0x40c>)
 800a814:	2200      	movs	r2, #0
 800a816:	f7f5 ff0f 	bl	8000638 <__aeabi_dmul>
 800a81a:	460f      	mov	r7, r1
 800a81c:	4606      	mov	r6, r0
 800a81e:	f7f6 f9bb 	bl	8000b98 <__aeabi_d2iz>
 800a822:	f7f5 fe9f 	bl	8000564 <__aeabi_i2d>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a832:	f7f5 fd49 	bl	80002c8 <__aeabi_dsub>
 800a836:	4b19      	ldr	r3, [pc, #100]	; (800a89c <__ieee754_rem_pio2+0x40c>)
 800a838:	2200      	movs	r2, #0
 800a83a:	f7f5 fefd 	bl	8000638 <__aeabi_dmul>
 800a83e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a842:	ad04      	add	r5, sp, #16
 800a844:	f04f 0803 	mov.w	r8, #3
 800a848:	46a9      	mov	r9, r5
 800a84a:	2600      	movs	r6, #0
 800a84c:	2700      	movs	r7, #0
 800a84e:	4632      	mov	r2, r6
 800a850:	463b      	mov	r3, r7
 800a852:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a856:	46c3      	mov	fp, r8
 800a858:	3d08      	subs	r5, #8
 800a85a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a85e:	f7f6 f953 	bl	8000b08 <__aeabi_dcmpeq>
 800a862:	2800      	cmp	r0, #0
 800a864:	d1f3      	bne.n	800a84e <__ieee754_rem_pio2+0x3be>
 800a866:	4b0e      	ldr	r3, [pc, #56]	; (800a8a0 <__ieee754_rem_pio2+0x410>)
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	2302      	movs	r3, #2
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	4622      	mov	r2, r4
 800a870:	465b      	mov	r3, fp
 800a872:	4651      	mov	r1, sl
 800a874:	4648      	mov	r0, r9
 800a876:	f000 f993 	bl	800aba0 <__kernel_rem_pio2>
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	4683      	mov	fp, r0
 800a880:	f6bf ae46 	bge.w	800a510 <__ieee754_rem_pio2+0x80>
 800a884:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a888:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a88c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a890:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a894:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a898:	e73a      	b.n	800a710 <__ieee754_rem_pio2+0x280>
 800a89a:	bf00      	nop
 800a89c:	41700000 	.word	0x41700000
 800a8a0:	0800bbb0 	.word	0x0800bbb0

0800a8a4 <__ieee754_sqrt>:
 800a8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	ec55 4b10 	vmov	r4, r5, d0
 800a8ac:	4e56      	ldr	r6, [pc, #344]	; (800aa08 <__ieee754_sqrt+0x164>)
 800a8ae:	43ae      	bics	r6, r5
 800a8b0:	ee10 0a10 	vmov	r0, s0
 800a8b4:	ee10 3a10 	vmov	r3, s0
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	d110      	bne.n	800a8e0 <__ieee754_sqrt+0x3c>
 800a8be:	ee10 2a10 	vmov	r2, s0
 800a8c2:	462b      	mov	r3, r5
 800a8c4:	f7f5 feb8 	bl	8000638 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f5 fcfc 	bl	80002cc <__adddf3>
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	460d      	mov	r5, r1
 800a8d8:	ec45 4b10 	vmov	d0, r4, r5
 800a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	dc10      	bgt.n	800a906 <__ieee754_sqrt+0x62>
 800a8e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a8e8:	4330      	orrs	r0, r6
 800a8ea:	d0f5      	beq.n	800a8d8 <__ieee754_sqrt+0x34>
 800a8ec:	b15d      	cbz	r5, 800a906 <__ieee754_sqrt+0x62>
 800a8ee:	ee10 2a10 	vmov	r2, s0
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	ee10 0a10 	vmov	r0, s0
 800a8f8:	f7f5 fce6 	bl	80002c8 <__aeabi_dsub>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	f7f5 ffc4 	bl	800088c <__aeabi_ddiv>
 800a904:	e7e6      	b.n	800a8d4 <__ieee754_sqrt+0x30>
 800a906:	1509      	asrs	r1, r1, #20
 800a908:	d076      	beq.n	800a9f8 <__ieee754_sqrt+0x154>
 800a90a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a90e:	07ce      	lsls	r6, r1, #31
 800a910:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a914:	bf5e      	ittt	pl
 800a916:	0fda      	lsrpl	r2, r3, #31
 800a918:	005b      	lslpl	r3, r3, #1
 800a91a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a91e:	0fda      	lsrs	r2, r3, #31
 800a920:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a924:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a928:	2000      	movs	r0, #0
 800a92a:	106d      	asrs	r5, r5, #1
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	f04f 0e16 	mov.w	lr, #22
 800a932:	4684      	mov	ip, r0
 800a934:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a938:	eb0c 0401 	add.w	r4, ip, r1
 800a93c:	4294      	cmp	r4, r2
 800a93e:	bfde      	ittt	le
 800a940:	1b12      	suble	r2, r2, r4
 800a942:	eb04 0c01 	addle.w	ip, r4, r1
 800a946:	1840      	addle	r0, r0, r1
 800a948:	0052      	lsls	r2, r2, #1
 800a94a:	f1be 0e01 	subs.w	lr, lr, #1
 800a94e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a952:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a956:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a95a:	d1ed      	bne.n	800a938 <__ieee754_sqrt+0x94>
 800a95c:	4671      	mov	r1, lr
 800a95e:	2720      	movs	r7, #32
 800a960:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a964:	4562      	cmp	r2, ip
 800a966:	eb04 060e 	add.w	r6, r4, lr
 800a96a:	dc02      	bgt.n	800a972 <__ieee754_sqrt+0xce>
 800a96c:	d113      	bne.n	800a996 <__ieee754_sqrt+0xf2>
 800a96e:	429e      	cmp	r6, r3
 800a970:	d811      	bhi.n	800a996 <__ieee754_sqrt+0xf2>
 800a972:	2e00      	cmp	r6, #0
 800a974:	eb06 0e04 	add.w	lr, r6, r4
 800a978:	da43      	bge.n	800aa02 <__ieee754_sqrt+0x15e>
 800a97a:	f1be 0f00 	cmp.w	lr, #0
 800a97e:	db40      	blt.n	800aa02 <__ieee754_sqrt+0x15e>
 800a980:	f10c 0801 	add.w	r8, ip, #1
 800a984:	eba2 020c 	sub.w	r2, r2, ip
 800a988:	429e      	cmp	r6, r3
 800a98a:	bf88      	it	hi
 800a98c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a990:	1b9b      	subs	r3, r3, r6
 800a992:	4421      	add	r1, r4
 800a994:	46c4      	mov	ip, r8
 800a996:	0052      	lsls	r2, r2, #1
 800a998:	3f01      	subs	r7, #1
 800a99a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a99e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a9a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9a6:	d1dd      	bne.n	800a964 <__ieee754_sqrt+0xc0>
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	d006      	beq.n	800a9ba <__ieee754_sqrt+0x116>
 800a9ac:	1c4c      	adds	r4, r1, #1
 800a9ae:	bf13      	iteet	ne
 800a9b0:	3101      	addne	r1, #1
 800a9b2:	3001      	addeq	r0, #1
 800a9b4:	4639      	moveq	r1, r7
 800a9b6:	f021 0101 	bicne.w	r1, r1, #1
 800a9ba:	1043      	asrs	r3, r0, #1
 800a9bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a9c0:	0849      	lsrs	r1, r1, #1
 800a9c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a9c6:	07c2      	lsls	r2, r0, #31
 800a9c8:	bf48      	it	mi
 800a9ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a9ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	463d      	mov	r5, r7
 800a9d6:	e77f      	b.n	800a8d8 <__ieee754_sqrt+0x34>
 800a9d8:	0ada      	lsrs	r2, r3, #11
 800a9da:	3815      	subs	r0, #21
 800a9dc:	055b      	lsls	r3, r3, #21
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	d0fa      	beq.n	800a9d8 <__ieee754_sqrt+0x134>
 800a9e2:	02d7      	lsls	r7, r2, #11
 800a9e4:	d50a      	bpl.n	800a9fc <__ieee754_sqrt+0x158>
 800a9e6:	f1c1 0420 	rsb	r4, r1, #32
 800a9ea:	fa23 f404 	lsr.w	r4, r3, r4
 800a9ee:	1e4d      	subs	r5, r1, #1
 800a9f0:	408b      	lsls	r3, r1
 800a9f2:	4322      	orrs	r2, r4
 800a9f4:	1b41      	subs	r1, r0, r5
 800a9f6:	e788      	b.n	800a90a <__ieee754_sqrt+0x66>
 800a9f8:	4608      	mov	r0, r1
 800a9fa:	e7f0      	b.n	800a9de <__ieee754_sqrt+0x13a>
 800a9fc:	0052      	lsls	r2, r2, #1
 800a9fe:	3101      	adds	r1, #1
 800aa00:	e7ef      	b.n	800a9e2 <__ieee754_sqrt+0x13e>
 800aa02:	46e0      	mov	r8, ip
 800aa04:	e7be      	b.n	800a984 <__ieee754_sqrt+0xe0>
 800aa06:	bf00      	nop
 800aa08:	7ff00000 	.word	0x7ff00000
 800aa0c:	00000000 	.word	0x00000000

0800aa10 <__kernel_cos>:
 800aa10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	ec57 6b10 	vmov	r6, r7, d0
 800aa18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aa1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800aa20:	ed8d 1b00 	vstr	d1, [sp]
 800aa24:	da07      	bge.n	800aa36 <__kernel_cos+0x26>
 800aa26:	ee10 0a10 	vmov	r0, s0
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	f7f6 f8b4 	bl	8000b98 <__aeabi_d2iz>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f000 8088 	beq.w	800ab46 <__kernel_cos+0x136>
 800aa36:	4632      	mov	r2, r6
 800aa38:	463b      	mov	r3, r7
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	f7f5 fdfb 	bl	8000638 <__aeabi_dmul>
 800aa42:	4b51      	ldr	r3, [pc, #324]	; (800ab88 <__kernel_cos+0x178>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	4604      	mov	r4, r0
 800aa48:	460d      	mov	r5, r1
 800aa4a:	f7f5 fdf5 	bl	8000638 <__aeabi_dmul>
 800aa4e:	a340      	add	r3, pc, #256	; (adr r3, 800ab50 <__kernel_cos+0x140>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	4682      	mov	sl, r0
 800aa56:	468b      	mov	fp, r1
 800aa58:	4620      	mov	r0, r4
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	f7f5 fdec 	bl	8000638 <__aeabi_dmul>
 800aa60:	a33d      	add	r3, pc, #244	; (adr r3, 800ab58 <__kernel_cos+0x148>)
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	f7f5 fc31 	bl	80002cc <__adddf3>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	f7f5 fde3 	bl	8000638 <__aeabi_dmul>
 800aa72:	a33b      	add	r3, pc, #236	; (adr r3, 800ab60 <__kernel_cos+0x150>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f7f5 fc26 	bl	80002c8 <__aeabi_dsub>
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	462b      	mov	r3, r5
 800aa80:	f7f5 fdda 	bl	8000638 <__aeabi_dmul>
 800aa84:	a338      	add	r3, pc, #224	; (adr r3, 800ab68 <__kernel_cos+0x158>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f7f5 fc1f 	bl	80002cc <__adddf3>
 800aa8e:	4622      	mov	r2, r4
 800aa90:	462b      	mov	r3, r5
 800aa92:	f7f5 fdd1 	bl	8000638 <__aeabi_dmul>
 800aa96:	a336      	add	r3, pc, #216	; (adr r3, 800ab70 <__kernel_cos+0x160>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f7f5 fc14 	bl	80002c8 <__aeabi_dsub>
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	462b      	mov	r3, r5
 800aaa4:	f7f5 fdc8 	bl	8000638 <__aeabi_dmul>
 800aaa8:	a333      	add	r3, pc, #204	; (adr r3, 800ab78 <__kernel_cos+0x168>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fc0d 	bl	80002cc <__adddf3>
 800aab2:	4622      	mov	r2, r4
 800aab4:	462b      	mov	r3, r5
 800aab6:	f7f5 fdbf 	bl	8000638 <__aeabi_dmul>
 800aaba:	4622      	mov	r2, r4
 800aabc:	462b      	mov	r3, r5
 800aabe:	f7f5 fdbb 	bl	8000638 <__aeabi_dmul>
 800aac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aac6:	4604      	mov	r4, r0
 800aac8:	460d      	mov	r5, r1
 800aaca:	4630      	mov	r0, r6
 800aacc:	4639      	mov	r1, r7
 800aace:	f7f5 fdb3 	bl	8000638 <__aeabi_dmul>
 800aad2:	460b      	mov	r3, r1
 800aad4:	4602      	mov	r2, r0
 800aad6:	4629      	mov	r1, r5
 800aad8:	4620      	mov	r0, r4
 800aada:	f7f5 fbf5 	bl	80002c8 <__aeabi_dsub>
 800aade:	4b2b      	ldr	r3, [pc, #172]	; (800ab8c <__kernel_cos+0x17c>)
 800aae0:	4598      	cmp	r8, r3
 800aae2:	4606      	mov	r6, r0
 800aae4:	460f      	mov	r7, r1
 800aae6:	dc10      	bgt.n	800ab0a <__kernel_cos+0xfa>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4650      	mov	r0, sl
 800aaee:	4659      	mov	r1, fp
 800aaf0:	f7f5 fbea 	bl	80002c8 <__aeabi_dsub>
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4926      	ldr	r1, [pc, #152]	; (800ab90 <__kernel_cos+0x180>)
 800aaf8:	4602      	mov	r2, r0
 800aafa:	2000      	movs	r0, #0
 800aafc:	f7f5 fbe4 	bl	80002c8 <__aeabi_dsub>
 800ab00:	ec41 0b10 	vmov	d0, r0, r1
 800ab04:	b003      	add	sp, #12
 800ab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0a:	4b22      	ldr	r3, [pc, #136]	; (800ab94 <__kernel_cos+0x184>)
 800ab0c:	4920      	ldr	r1, [pc, #128]	; (800ab90 <__kernel_cos+0x180>)
 800ab0e:	4598      	cmp	r8, r3
 800ab10:	bfcc      	ite	gt
 800ab12:	4d21      	ldrgt	r5, [pc, #132]	; (800ab98 <__kernel_cos+0x188>)
 800ab14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ab18:	2400      	movs	r4, #0
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	2000      	movs	r0, #0
 800ab20:	f7f5 fbd2 	bl	80002c8 <__aeabi_dsub>
 800ab24:	4622      	mov	r2, r4
 800ab26:	4680      	mov	r8, r0
 800ab28:	4689      	mov	r9, r1
 800ab2a:	462b      	mov	r3, r5
 800ab2c:	4650      	mov	r0, sl
 800ab2e:	4659      	mov	r1, fp
 800ab30:	f7f5 fbca 	bl	80002c8 <__aeabi_dsub>
 800ab34:	4632      	mov	r2, r6
 800ab36:	463b      	mov	r3, r7
 800ab38:	f7f5 fbc6 	bl	80002c8 <__aeabi_dsub>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4640      	mov	r0, r8
 800ab42:	4649      	mov	r1, r9
 800ab44:	e7da      	b.n	800aafc <__kernel_cos+0xec>
 800ab46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ab80 <__kernel_cos+0x170>
 800ab4a:	e7db      	b.n	800ab04 <__kernel_cos+0xf4>
 800ab4c:	f3af 8000 	nop.w
 800ab50:	be8838d4 	.word	0xbe8838d4
 800ab54:	bda8fae9 	.word	0xbda8fae9
 800ab58:	bdb4b1c4 	.word	0xbdb4b1c4
 800ab5c:	3e21ee9e 	.word	0x3e21ee9e
 800ab60:	809c52ad 	.word	0x809c52ad
 800ab64:	3e927e4f 	.word	0x3e927e4f
 800ab68:	19cb1590 	.word	0x19cb1590
 800ab6c:	3efa01a0 	.word	0x3efa01a0
 800ab70:	16c15177 	.word	0x16c15177
 800ab74:	3f56c16c 	.word	0x3f56c16c
 800ab78:	5555554c 	.word	0x5555554c
 800ab7c:	3fa55555 	.word	0x3fa55555
 800ab80:	00000000 	.word	0x00000000
 800ab84:	3ff00000 	.word	0x3ff00000
 800ab88:	3fe00000 	.word	0x3fe00000
 800ab8c:	3fd33332 	.word	0x3fd33332
 800ab90:	3ff00000 	.word	0x3ff00000
 800ab94:	3fe90000 	.word	0x3fe90000
 800ab98:	3fd20000 	.word	0x3fd20000
 800ab9c:	00000000 	.word	0x00000000

0800aba0 <__kernel_rem_pio2>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	ed2d 8b02 	vpush	{d8}
 800aba8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800abac:	f112 0f14 	cmn.w	r2, #20
 800abb0:	9308      	str	r3, [sp, #32]
 800abb2:	9101      	str	r1, [sp, #4]
 800abb4:	4bc6      	ldr	r3, [pc, #792]	; (800aed0 <__kernel_rem_pio2+0x330>)
 800abb6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800abb8:	9009      	str	r0, [sp, #36]	; 0x24
 800abba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	9b08      	ldr	r3, [sp, #32]
 800abc2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800abc6:	bfa8      	it	ge
 800abc8:	1ed4      	subge	r4, r2, #3
 800abca:	9306      	str	r3, [sp, #24]
 800abcc:	bfb2      	itee	lt
 800abce:	2400      	movlt	r4, #0
 800abd0:	2318      	movge	r3, #24
 800abd2:	fb94 f4f3 	sdivge	r4, r4, r3
 800abd6:	f06f 0317 	mvn.w	r3, #23
 800abda:	fb04 3303 	mla	r3, r4, r3, r3
 800abde:	eb03 0a02 	add.w	sl, r3, r2
 800abe2:	9b04      	ldr	r3, [sp, #16]
 800abe4:	9a06      	ldr	r2, [sp, #24]
 800abe6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800aec0 <__kernel_rem_pio2+0x320>
 800abea:	eb03 0802 	add.w	r8, r3, r2
 800abee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800abf0:	1aa7      	subs	r7, r4, r2
 800abf2:	ae20      	add	r6, sp, #128	; 0x80
 800abf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800abf8:	2500      	movs	r5, #0
 800abfa:	4545      	cmp	r5, r8
 800abfc:	dd18      	ble.n	800ac30 <__kernel_rem_pio2+0x90>
 800abfe:	9b08      	ldr	r3, [sp, #32]
 800ac00:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ac04:	aa20      	add	r2, sp, #128	; 0x80
 800ac06:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800aec0 <__kernel_rem_pio2+0x320>
 800ac0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ac0e:	f1c3 0301 	rsb	r3, r3, #1
 800ac12:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ac16:	9307      	str	r3, [sp, #28]
 800ac18:	9b07      	ldr	r3, [sp, #28]
 800ac1a:	9a04      	ldr	r2, [sp, #16]
 800ac1c:	4443      	add	r3, r8
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	db2f      	blt.n	800ac82 <__kernel_rem_pio2+0xe2>
 800ac22:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac26:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ac2a:	462f      	mov	r7, r5
 800ac2c:	2600      	movs	r6, #0
 800ac2e:	e01b      	b.n	800ac68 <__kernel_rem_pio2+0xc8>
 800ac30:	42ef      	cmn	r7, r5
 800ac32:	d407      	bmi.n	800ac44 <__kernel_rem_pio2+0xa4>
 800ac34:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac38:	f7f5 fc94 	bl	8000564 <__aeabi_i2d>
 800ac3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac40:	3501      	adds	r5, #1
 800ac42:	e7da      	b.n	800abfa <__kernel_rem_pio2+0x5a>
 800ac44:	ec51 0b18 	vmov	r0, r1, d8
 800ac48:	e7f8      	b.n	800ac3c <__kernel_rem_pio2+0x9c>
 800ac4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac4e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ac52:	f7f5 fcf1 	bl	8000638 <__aeabi_dmul>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac5e:	f7f5 fb35 	bl	80002cc <__adddf3>
 800ac62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac66:	3601      	adds	r6, #1
 800ac68:	9b06      	ldr	r3, [sp, #24]
 800ac6a:	429e      	cmp	r6, r3
 800ac6c:	f1a7 0708 	sub.w	r7, r7, #8
 800ac70:	ddeb      	ble.n	800ac4a <__kernel_rem_pio2+0xaa>
 800ac72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac76:	3508      	adds	r5, #8
 800ac78:	ecab 7b02 	vstmia	fp!, {d7}
 800ac7c:	f108 0801 	add.w	r8, r8, #1
 800ac80:	e7ca      	b.n	800ac18 <__kernel_rem_pio2+0x78>
 800ac82:	9b04      	ldr	r3, [sp, #16]
 800ac84:	aa0c      	add	r2, sp, #48	; 0x30
 800ac86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac8c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ac8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac92:	9c04      	ldr	r4, [sp, #16]
 800ac94:	930a      	str	r3, [sp, #40]	; 0x28
 800ac96:	ab98      	add	r3, sp, #608	; 0x260
 800ac98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac9c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800aca0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800aca4:	f8cd b008 	str.w	fp, [sp, #8]
 800aca8:	4625      	mov	r5, r4
 800acaa:	2d00      	cmp	r5, #0
 800acac:	dc78      	bgt.n	800ada0 <__kernel_rem_pio2+0x200>
 800acae:	ec47 6b10 	vmov	d0, r6, r7
 800acb2:	4650      	mov	r0, sl
 800acb4:	f000 fbf4 	bl	800b4a0 <scalbn>
 800acb8:	ec57 6b10 	vmov	r6, r7, d0
 800acbc:	2200      	movs	r2, #0
 800acbe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800acc2:	ee10 0a10 	vmov	r0, s0
 800acc6:	4639      	mov	r1, r7
 800acc8:	f7f5 fcb6 	bl	8000638 <__aeabi_dmul>
 800accc:	ec41 0b10 	vmov	d0, r0, r1
 800acd0:	f000 fb66 	bl	800b3a0 <floor>
 800acd4:	4b7f      	ldr	r3, [pc, #508]	; (800aed4 <__kernel_rem_pio2+0x334>)
 800acd6:	ec51 0b10 	vmov	r0, r1, d0
 800acda:	2200      	movs	r2, #0
 800acdc:	f7f5 fcac 	bl	8000638 <__aeabi_dmul>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f7f5 faee 	bl	80002c8 <__aeabi_dsub>
 800acec:	460f      	mov	r7, r1
 800acee:	4606      	mov	r6, r0
 800acf0:	f7f5 ff52 	bl	8000b98 <__aeabi_d2iz>
 800acf4:	9007      	str	r0, [sp, #28]
 800acf6:	f7f5 fc35 	bl	8000564 <__aeabi_i2d>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4630      	mov	r0, r6
 800ad00:	4639      	mov	r1, r7
 800ad02:	f7f5 fae1 	bl	80002c8 <__aeabi_dsub>
 800ad06:	f1ba 0f00 	cmp.w	sl, #0
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	460f      	mov	r7, r1
 800ad0e:	dd70      	ble.n	800adf2 <__kernel_rem_pio2+0x252>
 800ad10:	1e62      	subs	r2, r4, #1
 800ad12:	ab0c      	add	r3, sp, #48	; 0x30
 800ad14:	9d07      	ldr	r5, [sp, #28]
 800ad16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ad1a:	f1ca 0118 	rsb	r1, sl, #24
 800ad1e:	fa40 f301 	asr.w	r3, r0, r1
 800ad22:	441d      	add	r5, r3
 800ad24:	408b      	lsls	r3, r1
 800ad26:	1ac0      	subs	r0, r0, r3
 800ad28:	ab0c      	add	r3, sp, #48	; 0x30
 800ad2a:	9507      	str	r5, [sp, #28]
 800ad2c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ad30:	f1ca 0317 	rsb	r3, sl, #23
 800ad34:	fa40 f303 	asr.w	r3, r0, r3
 800ad38:	9302      	str	r3, [sp, #8]
 800ad3a:	9b02      	ldr	r3, [sp, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dd66      	ble.n	800ae0e <__kernel_rem_pio2+0x26e>
 800ad40:	9b07      	ldr	r3, [sp, #28]
 800ad42:	2200      	movs	r2, #0
 800ad44:	3301      	adds	r3, #1
 800ad46:	9307      	str	r3, [sp, #28]
 800ad48:	4615      	mov	r5, r2
 800ad4a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ad4e:	4294      	cmp	r4, r2
 800ad50:	f300 8099 	bgt.w	800ae86 <__kernel_rem_pio2+0x2e6>
 800ad54:	f1ba 0f00 	cmp.w	sl, #0
 800ad58:	dd07      	ble.n	800ad6a <__kernel_rem_pio2+0x1ca>
 800ad5a:	f1ba 0f01 	cmp.w	sl, #1
 800ad5e:	f000 80a5 	beq.w	800aeac <__kernel_rem_pio2+0x30c>
 800ad62:	f1ba 0f02 	cmp.w	sl, #2
 800ad66:	f000 80c1 	beq.w	800aeec <__kernel_rem_pio2+0x34c>
 800ad6a:	9b02      	ldr	r3, [sp, #8]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d14e      	bne.n	800ae0e <__kernel_rem_pio2+0x26e>
 800ad70:	4632      	mov	r2, r6
 800ad72:	463b      	mov	r3, r7
 800ad74:	4958      	ldr	r1, [pc, #352]	; (800aed8 <__kernel_rem_pio2+0x338>)
 800ad76:	2000      	movs	r0, #0
 800ad78:	f7f5 faa6 	bl	80002c8 <__aeabi_dsub>
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	2d00      	cmp	r5, #0
 800ad82:	d044      	beq.n	800ae0e <__kernel_rem_pio2+0x26e>
 800ad84:	4650      	mov	r0, sl
 800ad86:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800aec8 <__kernel_rem_pio2+0x328>
 800ad8a:	f000 fb89 	bl	800b4a0 <scalbn>
 800ad8e:	4630      	mov	r0, r6
 800ad90:	4639      	mov	r1, r7
 800ad92:	ec53 2b10 	vmov	r2, r3, d0
 800ad96:	f7f5 fa97 	bl	80002c8 <__aeabi_dsub>
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	e036      	b.n	800ae0e <__kernel_rem_pio2+0x26e>
 800ada0:	4b4e      	ldr	r3, [pc, #312]	; (800aedc <__kernel_rem_pio2+0x33c>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	4630      	mov	r0, r6
 800ada6:	4639      	mov	r1, r7
 800ada8:	f7f5 fc46 	bl	8000638 <__aeabi_dmul>
 800adac:	f7f5 fef4 	bl	8000b98 <__aeabi_d2iz>
 800adb0:	f7f5 fbd8 	bl	8000564 <__aeabi_i2d>
 800adb4:	4b4a      	ldr	r3, [pc, #296]	; (800aee0 <__kernel_rem_pio2+0x340>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	4680      	mov	r8, r0
 800adba:	4689      	mov	r9, r1
 800adbc:	f7f5 fc3c 	bl	8000638 <__aeabi_dmul>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fa7e 	bl	80002c8 <__aeabi_dsub>
 800adcc:	f7f5 fee4 	bl	8000b98 <__aeabi_d2iz>
 800add0:	9b02      	ldr	r3, [sp, #8]
 800add2:	f843 0b04 	str.w	r0, [r3], #4
 800add6:	3d01      	subs	r5, #1
 800add8:	9302      	str	r3, [sp, #8]
 800adda:	ab70      	add	r3, sp, #448	; 0x1c0
 800addc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	4640      	mov	r0, r8
 800ade6:	4649      	mov	r1, r9
 800ade8:	f7f5 fa70 	bl	80002cc <__adddf3>
 800adec:	4606      	mov	r6, r0
 800adee:	460f      	mov	r7, r1
 800adf0:	e75b      	b.n	800acaa <__kernel_rem_pio2+0x10a>
 800adf2:	d105      	bne.n	800ae00 <__kernel_rem_pio2+0x260>
 800adf4:	1e63      	subs	r3, r4, #1
 800adf6:	aa0c      	add	r2, sp, #48	; 0x30
 800adf8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800adfc:	15c3      	asrs	r3, r0, #23
 800adfe:	e79b      	b.n	800ad38 <__kernel_rem_pio2+0x198>
 800ae00:	4b38      	ldr	r3, [pc, #224]	; (800aee4 <__kernel_rem_pio2+0x344>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	f7f5 fe9e 	bl	8000b44 <__aeabi_dcmpge>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d139      	bne.n	800ae80 <__kernel_rem_pio2+0x2e0>
 800ae0c:	9002      	str	r0, [sp, #8]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2300      	movs	r3, #0
 800ae12:	4630      	mov	r0, r6
 800ae14:	4639      	mov	r1, r7
 800ae16:	f7f5 fe77 	bl	8000b08 <__aeabi_dcmpeq>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f000 80b4 	beq.w	800af88 <__kernel_rem_pio2+0x3e8>
 800ae20:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800ae24:	465b      	mov	r3, fp
 800ae26:	2200      	movs	r2, #0
 800ae28:	9904      	ldr	r1, [sp, #16]
 800ae2a:	428b      	cmp	r3, r1
 800ae2c:	da65      	bge.n	800aefa <__kernel_rem_pio2+0x35a>
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	d07b      	beq.n	800af2a <__kernel_rem_pio2+0x38a>
 800ae32:	ab0c      	add	r3, sp, #48	; 0x30
 800ae34:	f1aa 0a18 	sub.w	sl, sl, #24
 800ae38:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 80a0 	beq.w	800af82 <__kernel_rem_pio2+0x3e2>
 800ae42:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800aec8 <__kernel_rem_pio2+0x328>
 800ae46:	4650      	mov	r0, sl
 800ae48:	f000 fb2a 	bl	800b4a0 <scalbn>
 800ae4c:	4f23      	ldr	r7, [pc, #140]	; (800aedc <__kernel_rem_pio2+0x33c>)
 800ae4e:	ec55 4b10 	vmov	r4, r5, d0
 800ae52:	46d8      	mov	r8, fp
 800ae54:	2600      	movs	r6, #0
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	f280 80cf 	bge.w	800affc <__kernel_rem_pio2+0x45c>
 800ae5e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800aec0 <__kernel_rem_pio2+0x320>
 800ae62:	465f      	mov	r7, fp
 800ae64:	f04f 0800 	mov.w	r8, #0
 800ae68:	2f00      	cmp	r7, #0
 800ae6a:	f2c0 80fd 	blt.w	800b068 <__kernel_rem_pio2+0x4c8>
 800ae6e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ae70:	f8df a074 	ldr.w	sl, [pc, #116]	; 800aee8 <__kernel_rem_pio2+0x348>
 800ae74:	ec55 4b18 	vmov	r4, r5, d8
 800ae78:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ae7c:	2600      	movs	r6, #0
 800ae7e:	e0e5      	b.n	800b04c <__kernel_rem_pio2+0x4ac>
 800ae80:	2302      	movs	r3, #2
 800ae82:	9302      	str	r3, [sp, #8]
 800ae84:	e75c      	b.n	800ad40 <__kernel_rem_pio2+0x1a0>
 800ae86:	f8db 3000 	ldr.w	r3, [fp]
 800ae8a:	b955      	cbnz	r5, 800aea2 <__kernel_rem_pio2+0x302>
 800ae8c:	b123      	cbz	r3, 800ae98 <__kernel_rem_pio2+0x2f8>
 800ae8e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae92:	f8cb 3000 	str.w	r3, [fp]
 800ae96:	2301      	movs	r3, #1
 800ae98:	3201      	adds	r2, #1
 800ae9a:	f10b 0b04 	add.w	fp, fp, #4
 800ae9e:	461d      	mov	r5, r3
 800aea0:	e755      	b.n	800ad4e <__kernel_rem_pio2+0x1ae>
 800aea2:	1acb      	subs	r3, r1, r3
 800aea4:	f8cb 3000 	str.w	r3, [fp]
 800aea8:	462b      	mov	r3, r5
 800aeaa:	e7f5      	b.n	800ae98 <__kernel_rem_pio2+0x2f8>
 800aeac:	1e62      	subs	r2, r4, #1
 800aeae:	ab0c      	add	r3, sp, #48	; 0x30
 800aeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aeb8:	a90c      	add	r1, sp, #48	; 0x30
 800aeba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aebe:	e754      	b.n	800ad6a <__kernel_rem_pio2+0x1ca>
	...
 800aecc:	3ff00000 	.word	0x3ff00000
 800aed0:	0800bcf8 	.word	0x0800bcf8
 800aed4:	40200000 	.word	0x40200000
 800aed8:	3ff00000 	.word	0x3ff00000
 800aedc:	3e700000 	.word	0x3e700000
 800aee0:	41700000 	.word	0x41700000
 800aee4:	3fe00000 	.word	0x3fe00000
 800aee8:	0800bcb8 	.word	0x0800bcb8
 800aeec:	1e62      	subs	r2, r4, #1
 800aeee:	ab0c      	add	r3, sp, #48	; 0x30
 800aef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aef8:	e7de      	b.n	800aeb8 <__kernel_rem_pio2+0x318>
 800aefa:	a90c      	add	r1, sp, #48	; 0x30
 800aefc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af00:	3b01      	subs	r3, #1
 800af02:	430a      	orrs	r2, r1
 800af04:	e790      	b.n	800ae28 <__kernel_rem_pio2+0x288>
 800af06:	3301      	adds	r3, #1
 800af08:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800af0c:	2900      	cmp	r1, #0
 800af0e:	d0fa      	beq.n	800af06 <__kernel_rem_pio2+0x366>
 800af10:	9a08      	ldr	r2, [sp, #32]
 800af12:	18e3      	adds	r3, r4, r3
 800af14:	18a6      	adds	r6, r4, r2
 800af16:	aa20      	add	r2, sp, #128	; 0x80
 800af18:	1c65      	adds	r5, r4, #1
 800af1a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800af1e:	9302      	str	r3, [sp, #8]
 800af20:	9b02      	ldr	r3, [sp, #8]
 800af22:	42ab      	cmp	r3, r5
 800af24:	da04      	bge.n	800af30 <__kernel_rem_pio2+0x390>
 800af26:	461c      	mov	r4, r3
 800af28:	e6b5      	b.n	800ac96 <__kernel_rem_pio2+0xf6>
 800af2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af2c:	2301      	movs	r3, #1
 800af2e:	e7eb      	b.n	800af08 <__kernel_rem_pio2+0x368>
 800af30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af36:	f7f5 fb15 	bl	8000564 <__aeabi_i2d>
 800af3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800af3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af40:	46b3      	mov	fp, r6
 800af42:	461c      	mov	r4, r3
 800af44:	2700      	movs	r7, #0
 800af46:	f04f 0800 	mov.w	r8, #0
 800af4a:	f04f 0900 	mov.w	r9, #0
 800af4e:	9b06      	ldr	r3, [sp, #24]
 800af50:	429f      	cmp	r7, r3
 800af52:	dd06      	ble.n	800af62 <__kernel_rem_pio2+0x3c2>
 800af54:	ab70      	add	r3, sp, #448	; 0x1c0
 800af56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af5a:	e9c3 8900 	strd	r8, r9, [r3]
 800af5e:	3501      	adds	r5, #1
 800af60:	e7de      	b.n	800af20 <__kernel_rem_pio2+0x380>
 800af62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800af66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800af6a:	f7f5 fb65 	bl	8000638 <__aeabi_dmul>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4640      	mov	r0, r8
 800af74:	4649      	mov	r1, r9
 800af76:	f7f5 f9a9 	bl	80002cc <__adddf3>
 800af7a:	3701      	adds	r7, #1
 800af7c:	4680      	mov	r8, r0
 800af7e:	4689      	mov	r9, r1
 800af80:	e7e5      	b.n	800af4e <__kernel_rem_pio2+0x3ae>
 800af82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800af86:	e754      	b.n	800ae32 <__kernel_rem_pio2+0x292>
 800af88:	ec47 6b10 	vmov	d0, r6, r7
 800af8c:	f1ca 0000 	rsb	r0, sl, #0
 800af90:	f000 fa86 	bl	800b4a0 <scalbn>
 800af94:	ec57 6b10 	vmov	r6, r7, d0
 800af98:	4b9f      	ldr	r3, [pc, #636]	; (800b218 <__kernel_rem_pio2+0x678>)
 800af9a:	ee10 0a10 	vmov	r0, s0
 800af9e:	2200      	movs	r2, #0
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 fdcf 	bl	8000b44 <__aeabi_dcmpge>
 800afa6:	b300      	cbz	r0, 800afea <__kernel_rem_pio2+0x44a>
 800afa8:	4b9c      	ldr	r3, [pc, #624]	; (800b21c <__kernel_rem_pio2+0x67c>)
 800afaa:	2200      	movs	r2, #0
 800afac:	4630      	mov	r0, r6
 800afae:	4639      	mov	r1, r7
 800afb0:	f7f5 fb42 	bl	8000638 <__aeabi_dmul>
 800afb4:	f7f5 fdf0 	bl	8000b98 <__aeabi_d2iz>
 800afb8:	4605      	mov	r5, r0
 800afba:	f7f5 fad3 	bl	8000564 <__aeabi_i2d>
 800afbe:	4b96      	ldr	r3, [pc, #600]	; (800b218 <__kernel_rem_pio2+0x678>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	f7f5 fb39 	bl	8000638 <__aeabi_dmul>
 800afc6:	460b      	mov	r3, r1
 800afc8:	4602      	mov	r2, r0
 800afca:	4639      	mov	r1, r7
 800afcc:	4630      	mov	r0, r6
 800afce:	f7f5 f97b 	bl	80002c8 <__aeabi_dsub>
 800afd2:	f7f5 fde1 	bl	8000b98 <__aeabi_d2iz>
 800afd6:	f104 0b01 	add.w	fp, r4, #1
 800afda:	ab0c      	add	r3, sp, #48	; 0x30
 800afdc:	f10a 0a18 	add.w	sl, sl, #24
 800afe0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800afe4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800afe8:	e72b      	b.n	800ae42 <__kernel_rem_pio2+0x2a2>
 800afea:	4630      	mov	r0, r6
 800afec:	4639      	mov	r1, r7
 800afee:	f7f5 fdd3 	bl	8000b98 <__aeabi_d2iz>
 800aff2:	ab0c      	add	r3, sp, #48	; 0x30
 800aff4:	46a3      	mov	fp, r4
 800aff6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800affa:	e722      	b.n	800ae42 <__kernel_rem_pio2+0x2a2>
 800affc:	ab70      	add	r3, sp, #448	; 0x1c0
 800affe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b002:	ab0c      	add	r3, sp, #48	; 0x30
 800b004:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b008:	f7f5 faac 	bl	8000564 <__aeabi_i2d>
 800b00c:	4622      	mov	r2, r4
 800b00e:	462b      	mov	r3, r5
 800b010:	f7f5 fb12 	bl	8000638 <__aeabi_dmul>
 800b014:	4632      	mov	r2, r6
 800b016:	e9c9 0100 	strd	r0, r1, [r9]
 800b01a:	463b      	mov	r3, r7
 800b01c:	4620      	mov	r0, r4
 800b01e:	4629      	mov	r1, r5
 800b020:	f7f5 fb0a 	bl	8000638 <__aeabi_dmul>
 800b024:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b028:	4604      	mov	r4, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	e713      	b.n	800ae56 <__kernel_rem_pio2+0x2b6>
 800b02e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b032:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b036:	f7f5 faff 	bl	8000638 <__aeabi_dmul>
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	4620      	mov	r0, r4
 800b040:	4629      	mov	r1, r5
 800b042:	f7f5 f943 	bl	80002cc <__adddf3>
 800b046:	3601      	adds	r6, #1
 800b048:	4604      	mov	r4, r0
 800b04a:	460d      	mov	r5, r1
 800b04c:	9b04      	ldr	r3, [sp, #16]
 800b04e:	429e      	cmp	r6, r3
 800b050:	dc01      	bgt.n	800b056 <__kernel_rem_pio2+0x4b6>
 800b052:	45b0      	cmp	r8, r6
 800b054:	daeb      	bge.n	800b02e <__kernel_rem_pio2+0x48e>
 800b056:	ab48      	add	r3, sp, #288	; 0x120
 800b058:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b05c:	e9c3 4500 	strd	r4, r5, [r3]
 800b060:	3f01      	subs	r7, #1
 800b062:	f108 0801 	add.w	r8, r8, #1
 800b066:	e6ff      	b.n	800ae68 <__kernel_rem_pio2+0x2c8>
 800b068:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	dc0b      	bgt.n	800b086 <__kernel_rem_pio2+0x4e6>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dc6e      	bgt.n	800b150 <__kernel_rem_pio2+0x5b0>
 800b072:	d045      	beq.n	800b100 <__kernel_rem_pio2+0x560>
 800b074:	9b07      	ldr	r3, [sp, #28]
 800b076:	f003 0007 	and.w	r0, r3, #7
 800b07a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b07e:	ecbd 8b02 	vpop	{d8}
 800b082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b086:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d1f3      	bne.n	800b074 <__kernel_rem_pio2+0x4d4>
 800b08c:	ab48      	add	r3, sp, #288	; 0x120
 800b08e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b092:	46d0      	mov	r8, sl
 800b094:	46d9      	mov	r9, fp
 800b096:	f1b9 0f00 	cmp.w	r9, #0
 800b09a:	f1a8 0808 	sub.w	r8, r8, #8
 800b09e:	dc64      	bgt.n	800b16a <__kernel_rem_pio2+0x5ca>
 800b0a0:	465c      	mov	r4, fp
 800b0a2:	2c01      	cmp	r4, #1
 800b0a4:	f1aa 0a08 	sub.w	sl, sl, #8
 800b0a8:	dc7e      	bgt.n	800b1a8 <__kernel_rem_pio2+0x608>
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	f1bb 0f01 	cmp.w	fp, #1
 800b0b2:	f300 8097 	bgt.w	800b1e4 <__kernel_rem_pio2+0x644>
 800b0b6:	9b02      	ldr	r3, [sp, #8]
 800b0b8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b0bc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f040 8099 	bne.w	800b1f8 <__kernel_rem_pio2+0x658>
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	e9c3 5600 	strd	r5, r6, [r3]
 800b0cc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b0d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b0d4:	e7ce      	b.n	800b074 <__kernel_rem_pio2+0x4d4>
 800b0d6:	ab48      	add	r3, sp, #288	; 0x120
 800b0d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f7f5 f8f4 	bl	80002cc <__adddf3>
 800b0e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b0e8:	f1bb 0f00 	cmp.w	fp, #0
 800b0ec:	daf3      	bge.n	800b0d6 <__kernel_rem_pio2+0x536>
 800b0ee:	9b02      	ldr	r3, [sp, #8]
 800b0f0:	b113      	cbz	r3, 800b0f8 <__kernel_rem_pio2+0x558>
 800b0f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	e9c3 0100 	strd	r0, r1, [r3]
 800b0fe:	e7b9      	b.n	800b074 <__kernel_rem_pio2+0x4d4>
 800b100:	2000      	movs	r0, #0
 800b102:	2100      	movs	r1, #0
 800b104:	e7f0      	b.n	800b0e8 <__kernel_rem_pio2+0x548>
 800b106:	ab48      	add	r3, sp, #288	; 0x120
 800b108:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f7f5 f8dc 	bl	80002cc <__adddf3>
 800b114:	3c01      	subs	r4, #1
 800b116:	2c00      	cmp	r4, #0
 800b118:	daf5      	bge.n	800b106 <__kernel_rem_pio2+0x566>
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	b1e3      	cbz	r3, 800b158 <__kernel_rem_pio2+0x5b8>
 800b11e:	4602      	mov	r2, r0
 800b120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b124:	9c01      	ldr	r4, [sp, #4]
 800b126:	e9c4 2300 	strd	r2, r3, [r4]
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b132:	f7f5 f8c9 	bl	80002c8 <__aeabi_dsub>
 800b136:	ad4a      	add	r5, sp, #296	; 0x128
 800b138:	2401      	movs	r4, #1
 800b13a:	45a3      	cmp	fp, r4
 800b13c:	da0f      	bge.n	800b15e <__kernel_rem_pio2+0x5be>
 800b13e:	9b02      	ldr	r3, [sp, #8]
 800b140:	b113      	cbz	r3, 800b148 <__kernel_rem_pio2+0x5a8>
 800b142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b146:	4619      	mov	r1, r3
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b14e:	e791      	b.n	800b074 <__kernel_rem_pio2+0x4d4>
 800b150:	465c      	mov	r4, fp
 800b152:	2000      	movs	r0, #0
 800b154:	2100      	movs	r1, #0
 800b156:	e7de      	b.n	800b116 <__kernel_rem_pio2+0x576>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	e7e2      	b.n	800b124 <__kernel_rem_pio2+0x584>
 800b15e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b162:	f7f5 f8b3 	bl	80002cc <__adddf3>
 800b166:	3401      	adds	r4, #1
 800b168:	e7e7      	b.n	800b13a <__kernel_rem_pio2+0x59a>
 800b16a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b16e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b172:	4620      	mov	r0, r4
 800b174:	4632      	mov	r2, r6
 800b176:	463b      	mov	r3, r7
 800b178:	4629      	mov	r1, r5
 800b17a:	f7f5 f8a7 	bl	80002cc <__adddf3>
 800b17e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4620      	mov	r0, r4
 800b188:	4629      	mov	r1, r5
 800b18a:	f7f5 f89d 	bl	80002c8 <__aeabi_dsub>
 800b18e:	4632      	mov	r2, r6
 800b190:	463b      	mov	r3, r7
 800b192:	f7f5 f89b 	bl	80002cc <__adddf3>
 800b196:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b19a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b19e:	ed88 7b00 	vstr	d7, [r8]
 800b1a2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b1a6:	e776      	b.n	800b096 <__kernel_rem_pio2+0x4f6>
 800b1a8:	e9da 8900 	ldrd	r8, r9, [sl]
 800b1ac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	4632      	mov	r2, r6
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	f7f5 f888 	bl	80002cc <__adddf3>
 800b1bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f7f5 f87e 	bl	80002c8 <__aeabi_dsub>
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	f7f5 f87c 	bl	80002cc <__adddf3>
 800b1d4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b1d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b1dc:	ed8a 7b00 	vstr	d7, [sl]
 800b1e0:	3c01      	subs	r4, #1
 800b1e2:	e75e      	b.n	800b0a2 <__kernel_rem_pio2+0x502>
 800b1e4:	ab48      	add	r3, sp, #288	; 0x120
 800b1e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f7f5 f86d 	bl	80002cc <__adddf3>
 800b1f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b1f6:	e75a      	b.n	800b0ae <__kernel_rem_pio2+0x50e>
 800b1f8:	9b01      	ldr	r3, [sp, #4]
 800b1fa:	9a01      	ldr	r2, [sp, #4]
 800b1fc:	601d      	str	r5, [r3, #0]
 800b1fe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b202:	605c      	str	r4, [r3, #4]
 800b204:	609f      	str	r7, [r3, #8]
 800b206:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b20a:	60d3      	str	r3, [r2, #12]
 800b20c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b210:	6110      	str	r0, [r2, #16]
 800b212:	6153      	str	r3, [r2, #20]
 800b214:	e72e      	b.n	800b074 <__kernel_rem_pio2+0x4d4>
 800b216:	bf00      	nop
 800b218:	41700000 	.word	0x41700000
 800b21c:	3e700000 	.word	0x3e700000

0800b220 <__kernel_sin>:
 800b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	ed2d 8b04 	vpush	{d8-d9}
 800b228:	eeb0 8a41 	vmov.f32	s16, s2
 800b22c:	eef0 8a61 	vmov.f32	s17, s3
 800b230:	ec55 4b10 	vmov	r4, r5, d0
 800b234:	b083      	sub	sp, #12
 800b236:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b23a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b23e:	9001      	str	r0, [sp, #4]
 800b240:	da06      	bge.n	800b250 <__kernel_sin+0x30>
 800b242:	ee10 0a10 	vmov	r0, s0
 800b246:	4629      	mov	r1, r5
 800b248:	f7f5 fca6 	bl	8000b98 <__aeabi_d2iz>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d051      	beq.n	800b2f4 <__kernel_sin+0xd4>
 800b250:	4622      	mov	r2, r4
 800b252:	462b      	mov	r3, r5
 800b254:	4620      	mov	r0, r4
 800b256:	4629      	mov	r1, r5
 800b258:	f7f5 f9ee 	bl	8000638 <__aeabi_dmul>
 800b25c:	4682      	mov	sl, r0
 800b25e:	468b      	mov	fp, r1
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4620      	mov	r0, r4
 800b266:	4629      	mov	r1, r5
 800b268:	f7f5 f9e6 	bl	8000638 <__aeabi_dmul>
 800b26c:	a341      	add	r3, pc, #260	; (adr r3, 800b374 <__kernel_sin+0x154>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	4680      	mov	r8, r0
 800b274:	4689      	mov	r9, r1
 800b276:	4650      	mov	r0, sl
 800b278:	4659      	mov	r1, fp
 800b27a:	f7f5 f9dd 	bl	8000638 <__aeabi_dmul>
 800b27e:	a33f      	add	r3, pc, #252	; (adr r3, 800b37c <__kernel_sin+0x15c>)
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	f7f5 f820 	bl	80002c8 <__aeabi_dsub>
 800b288:	4652      	mov	r2, sl
 800b28a:	465b      	mov	r3, fp
 800b28c:	f7f5 f9d4 	bl	8000638 <__aeabi_dmul>
 800b290:	a33c      	add	r3, pc, #240	; (adr r3, 800b384 <__kernel_sin+0x164>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f7f5 f819 	bl	80002cc <__adddf3>
 800b29a:	4652      	mov	r2, sl
 800b29c:	465b      	mov	r3, fp
 800b29e:	f7f5 f9cb 	bl	8000638 <__aeabi_dmul>
 800b2a2:	a33a      	add	r3, pc, #232	; (adr r3, 800b38c <__kernel_sin+0x16c>)
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f7f5 f80e 	bl	80002c8 <__aeabi_dsub>
 800b2ac:	4652      	mov	r2, sl
 800b2ae:	465b      	mov	r3, fp
 800b2b0:	f7f5 f9c2 	bl	8000638 <__aeabi_dmul>
 800b2b4:	a337      	add	r3, pc, #220	; (adr r3, 800b394 <__kernel_sin+0x174>)
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	f7f5 f807 	bl	80002cc <__adddf3>
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	460f      	mov	r7, r1
 800b2c4:	b9eb      	cbnz	r3, 800b302 <__kernel_sin+0xe2>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4650      	mov	r0, sl
 800b2cc:	4659      	mov	r1, fp
 800b2ce:	f7f5 f9b3 	bl	8000638 <__aeabi_dmul>
 800b2d2:	a325      	add	r3, pc, #148	; (adr r3, 800b368 <__kernel_sin+0x148>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f7f4 fff6 	bl	80002c8 <__aeabi_dsub>
 800b2dc:	4642      	mov	r2, r8
 800b2de:	464b      	mov	r3, r9
 800b2e0:	f7f5 f9aa 	bl	8000638 <__aeabi_dmul>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	f7f4 ffee 	bl	80002cc <__adddf3>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	ec45 4b10 	vmov	d0, r4, r5
 800b2f8:	b003      	add	sp, #12
 800b2fa:	ecbd 8b04 	vpop	{d8-d9}
 800b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b302:	4b1b      	ldr	r3, [pc, #108]	; (800b370 <__kernel_sin+0x150>)
 800b304:	ec51 0b18 	vmov	r0, r1, d8
 800b308:	2200      	movs	r2, #0
 800b30a:	f7f5 f995 	bl	8000638 <__aeabi_dmul>
 800b30e:	4632      	mov	r2, r6
 800b310:	ec41 0b19 	vmov	d9, r0, r1
 800b314:	463b      	mov	r3, r7
 800b316:	4640      	mov	r0, r8
 800b318:	4649      	mov	r1, r9
 800b31a:	f7f5 f98d 	bl	8000638 <__aeabi_dmul>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	ec51 0b19 	vmov	r0, r1, d9
 800b326:	f7f4 ffcf 	bl	80002c8 <__aeabi_dsub>
 800b32a:	4652      	mov	r2, sl
 800b32c:	465b      	mov	r3, fp
 800b32e:	f7f5 f983 	bl	8000638 <__aeabi_dmul>
 800b332:	ec53 2b18 	vmov	r2, r3, d8
 800b336:	f7f4 ffc7 	bl	80002c8 <__aeabi_dsub>
 800b33a:	a30b      	add	r3, pc, #44	; (adr r3, 800b368 <__kernel_sin+0x148>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	4606      	mov	r6, r0
 800b342:	460f      	mov	r7, r1
 800b344:	4640      	mov	r0, r8
 800b346:	4649      	mov	r1, r9
 800b348:	f7f5 f976 	bl	8000638 <__aeabi_dmul>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4630      	mov	r0, r6
 800b352:	4639      	mov	r1, r7
 800b354:	f7f4 ffba 	bl	80002cc <__adddf3>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f7f4 ffb2 	bl	80002c8 <__aeabi_dsub>
 800b364:	e7c4      	b.n	800b2f0 <__kernel_sin+0xd0>
 800b366:	bf00      	nop
 800b368:	55555549 	.word	0x55555549
 800b36c:	3fc55555 	.word	0x3fc55555
 800b370:	3fe00000 	.word	0x3fe00000
 800b374:	5acfd57c 	.word	0x5acfd57c
 800b378:	3de5d93a 	.word	0x3de5d93a
 800b37c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b380:	3e5ae5e6 	.word	0x3e5ae5e6
 800b384:	57b1fe7d 	.word	0x57b1fe7d
 800b388:	3ec71de3 	.word	0x3ec71de3
 800b38c:	19c161d5 	.word	0x19c161d5
 800b390:	3f2a01a0 	.word	0x3f2a01a0
 800b394:	1110f8a6 	.word	0x1110f8a6
 800b398:	3f811111 	.word	0x3f811111
 800b39c:	00000000 	.word	0x00000000

0800b3a0 <floor>:
 800b3a0:	ec51 0b10 	vmov	r0, r1, d0
 800b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b3ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b3b0:	2e13      	cmp	r6, #19
 800b3b2:	ee10 5a10 	vmov	r5, s0
 800b3b6:	ee10 8a10 	vmov	r8, s0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	dc32      	bgt.n	800b424 <floor+0x84>
 800b3be:	2e00      	cmp	r6, #0
 800b3c0:	da14      	bge.n	800b3ec <floor+0x4c>
 800b3c2:	a333      	add	r3, pc, #204	; (adr r3, 800b490 <floor+0xf0>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f4 ff80 	bl	80002cc <__adddf3>
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f7f5 fbc2 	bl	8000b58 <__aeabi_dcmpgt>
 800b3d4:	b138      	cbz	r0, 800b3e6 <floor+0x46>
 800b3d6:	2c00      	cmp	r4, #0
 800b3d8:	da57      	bge.n	800b48a <floor+0xea>
 800b3da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b3de:	431d      	orrs	r5, r3
 800b3e0:	d001      	beq.n	800b3e6 <floor+0x46>
 800b3e2:	4c2d      	ldr	r4, [pc, #180]	; (800b498 <floor+0xf8>)
 800b3e4:	2500      	movs	r5, #0
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	e025      	b.n	800b438 <floor+0x98>
 800b3ec:	4f2b      	ldr	r7, [pc, #172]	; (800b49c <floor+0xfc>)
 800b3ee:	4137      	asrs	r7, r6
 800b3f0:	ea01 0307 	and.w	r3, r1, r7
 800b3f4:	4303      	orrs	r3, r0
 800b3f6:	d01f      	beq.n	800b438 <floor+0x98>
 800b3f8:	a325      	add	r3, pc, #148	; (adr r3, 800b490 <floor+0xf0>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	f7f4 ff65 	bl	80002cc <__adddf3>
 800b402:	2200      	movs	r2, #0
 800b404:	2300      	movs	r3, #0
 800b406:	f7f5 fba7 	bl	8000b58 <__aeabi_dcmpgt>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d0eb      	beq.n	800b3e6 <floor+0x46>
 800b40e:	2c00      	cmp	r4, #0
 800b410:	bfbe      	ittt	lt
 800b412:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b416:	fa43 f606 	asrlt.w	r6, r3, r6
 800b41a:	19a4      	addlt	r4, r4, r6
 800b41c:	ea24 0407 	bic.w	r4, r4, r7
 800b420:	2500      	movs	r5, #0
 800b422:	e7e0      	b.n	800b3e6 <floor+0x46>
 800b424:	2e33      	cmp	r6, #51	; 0x33
 800b426:	dd0b      	ble.n	800b440 <floor+0xa0>
 800b428:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b42c:	d104      	bne.n	800b438 <floor+0x98>
 800b42e:	ee10 2a10 	vmov	r2, s0
 800b432:	460b      	mov	r3, r1
 800b434:	f7f4 ff4a 	bl	80002cc <__adddf3>
 800b438:	ec41 0b10 	vmov	d0, r0, r1
 800b43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b440:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b448:	fa23 f707 	lsr.w	r7, r3, r7
 800b44c:	4207      	tst	r7, r0
 800b44e:	d0f3      	beq.n	800b438 <floor+0x98>
 800b450:	a30f      	add	r3, pc, #60	; (adr r3, 800b490 <floor+0xf0>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f7f4 ff39 	bl	80002cc <__adddf3>
 800b45a:	2200      	movs	r2, #0
 800b45c:	2300      	movs	r3, #0
 800b45e:	f7f5 fb7b 	bl	8000b58 <__aeabi_dcmpgt>
 800b462:	2800      	cmp	r0, #0
 800b464:	d0bf      	beq.n	800b3e6 <floor+0x46>
 800b466:	2c00      	cmp	r4, #0
 800b468:	da02      	bge.n	800b470 <floor+0xd0>
 800b46a:	2e14      	cmp	r6, #20
 800b46c:	d103      	bne.n	800b476 <floor+0xd6>
 800b46e:	3401      	adds	r4, #1
 800b470:	ea25 0507 	bic.w	r5, r5, r7
 800b474:	e7b7      	b.n	800b3e6 <floor+0x46>
 800b476:	2301      	movs	r3, #1
 800b478:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b47c:	fa03 f606 	lsl.w	r6, r3, r6
 800b480:	4435      	add	r5, r6
 800b482:	4545      	cmp	r5, r8
 800b484:	bf38      	it	cc
 800b486:	18e4      	addcc	r4, r4, r3
 800b488:	e7f2      	b.n	800b470 <floor+0xd0>
 800b48a:	2500      	movs	r5, #0
 800b48c:	462c      	mov	r4, r5
 800b48e:	e7aa      	b.n	800b3e6 <floor+0x46>
 800b490:	8800759c 	.word	0x8800759c
 800b494:	7e37e43c 	.word	0x7e37e43c
 800b498:	bff00000 	.word	0xbff00000
 800b49c:	000fffff 	.word	0x000fffff

0800b4a0 <scalbn>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	ec55 4b10 	vmov	r4, r5, d0
 800b4a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	462b      	mov	r3, r5
 800b4ae:	b99a      	cbnz	r2, 800b4d8 <scalbn+0x38>
 800b4b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b4b4:	4323      	orrs	r3, r4
 800b4b6:	d036      	beq.n	800b526 <scalbn+0x86>
 800b4b8:	4b39      	ldr	r3, [pc, #228]	; (800b5a0 <scalbn+0x100>)
 800b4ba:	4629      	mov	r1, r5
 800b4bc:	ee10 0a10 	vmov	r0, s0
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f7f5 f8b9 	bl	8000638 <__aeabi_dmul>
 800b4c6:	4b37      	ldr	r3, [pc, #220]	; (800b5a4 <scalbn+0x104>)
 800b4c8:	429e      	cmp	r6, r3
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	460d      	mov	r5, r1
 800b4ce:	da10      	bge.n	800b4f2 <scalbn+0x52>
 800b4d0:	a32b      	add	r3, pc, #172	; (adr r3, 800b580 <scalbn+0xe0>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	e03a      	b.n	800b54e <scalbn+0xae>
 800b4d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b4dc:	428a      	cmp	r2, r1
 800b4de:	d10c      	bne.n	800b4fa <scalbn+0x5a>
 800b4e0:	ee10 2a10 	vmov	r2, s0
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f7f4 fef0 	bl	80002cc <__adddf3>
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	460d      	mov	r5, r1
 800b4f0:	e019      	b.n	800b526 <scalbn+0x86>
 800b4f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	3a36      	subs	r2, #54	; 0x36
 800b4fa:	4432      	add	r2, r6
 800b4fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b500:	428a      	cmp	r2, r1
 800b502:	dd08      	ble.n	800b516 <scalbn+0x76>
 800b504:	2d00      	cmp	r5, #0
 800b506:	a120      	add	r1, pc, #128	; (adr r1, 800b588 <scalbn+0xe8>)
 800b508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b50c:	da1c      	bge.n	800b548 <scalbn+0xa8>
 800b50e:	a120      	add	r1, pc, #128	; (adr r1, 800b590 <scalbn+0xf0>)
 800b510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b514:	e018      	b.n	800b548 <scalbn+0xa8>
 800b516:	2a00      	cmp	r2, #0
 800b518:	dd08      	ble.n	800b52c <scalbn+0x8c>
 800b51a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b51e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b522:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b526:	ec45 4b10 	vmov	d0, r4, r5
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b530:	da19      	bge.n	800b566 <scalbn+0xc6>
 800b532:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b536:	429e      	cmp	r6, r3
 800b538:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b53c:	dd0a      	ble.n	800b554 <scalbn+0xb4>
 800b53e:	a112      	add	r1, pc, #72	; (adr r1, 800b588 <scalbn+0xe8>)
 800b540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1e2      	bne.n	800b50e <scalbn+0x6e>
 800b548:	a30f      	add	r3, pc, #60	; (adr r3, 800b588 <scalbn+0xe8>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f7f5 f873 	bl	8000638 <__aeabi_dmul>
 800b552:	e7cb      	b.n	800b4ec <scalbn+0x4c>
 800b554:	a10a      	add	r1, pc, #40	; (adr r1, 800b580 <scalbn+0xe0>)
 800b556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d0b8      	beq.n	800b4d0 <scalbn+0x30>
 800b55e:	a10e      	add	r1, pc, #56	; (adr r1, 800b598 <scalbn+0xf8>)
 800b560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b564:	e7b4      	b.n	800b4d0 <scalbn+0x30>
 800b566:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b56a:	3236      	adds	r2, #54	; 0x36
 800b56c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b570:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b574:	4620      	mov	r0, r4
 800b576:	4b0c      	ldr	r3, [pc, #48]	; (800b5a8 <scalbn+0x108>)
 800b578:	2200      	movs	r2, #0
 800b57a:	e7e8      	b.n	800b54e <scalbn+0xae>
 800b57c:	f3af 8000 	nop.w
 800b580:	c2f8f359 	.word	0xc2f8f359
 800b584:	01a56e1f 	.word	0x01a56e1f
 800b588:	8800759c 	.word	0x8800759c
 800b58c:	7e37e43c 	.word	0x7e37e43c
 800b590:	8800759c 	.word	0x8800759c
 800b594:	fe37e43c 	.word	0xfe37e43c
 800b598:	c2f8f359 	.word	0xc2f8f359
 800b59c:	81a56e1f 	.word	0x81a56e1f
 800b5a0:	43500000 	.word	0x43500000
 800b5a4:	ffff3cb0 	.word	0xffff3cb0
 800b5a8:	3c900000 	.word	0x3c900000

0800b5ac <_init>:
 800b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ae:	bf00      	nop
 800b5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5b2:	bc08      	pop	{r3}
 800b5b4:	469e      	mov	lr, r3
 800b5b6:	4770      	bx	lr

0800b5b8 <_fini>:
 800b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ba:	bf00      	nop
 800b5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5be:	bc08      	pop	{r3}
 800b5c0:	469e      	mov	lr, r3
 800b5c2:	4770      	bx	lr
