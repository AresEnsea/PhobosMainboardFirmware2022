
PhobosMainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08009040  08009040  00019040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009618  08009618  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009620  08009620  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001e0  08009808  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08009808  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177a0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003121  00000000  00000000  000379b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0003aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  0003ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024825  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141cf  00000000  00000000  000610a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d30e3  00000000  00000000  00075274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e0  00000000  00000000  001483ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009024 	.word	0x08009024

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009024 	.word	0x08009024

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <bezier_new>:
#include "bezier.h"


Bezier* bezier_new(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b091      	sub	sp, #68	; 0x44
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000f8a:	edc7 0a08 	vstr	s1, [r7, #32]
 8000f8e:	ed87 1a07 	vstr	s2, [r7, #28]
 8000f92:	edc7 1a06 	vstr	s3, [r7, #24]
 8000f96:	ed87 2a05 	vstr	s4, [r7, #20]
 8000f9a:	edc7 2a04 	vstr	s5, [r7, #16]
 8000f9e:	ed87 3a03 	vstr	s6, [r7, #12]
 8000fa2:	edc7 3a02 	vstr	s7, [r7, #8]
 8000fa6:	6078      	str	r0, [r7, #4]
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f004 faa7 	bl	80054fc <malloc>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
    b->p1 = vector2_new(x1, y1);
 8000fb2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000fb4:	edd7 0a08 	vldr	s1, [r7, #32]
 8000fb8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000fbc:	f000 fd42 	bl	8001a44 <vector2_new>
 8000fc0:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc4:	eef0 7a60 	vmov.f32	s15, s1
 8000fc8:	ed84 7a00 	vstr	s14, [r4]
 8000fcc:	edc4 7a01 	vstr	s15, [r4, #4]
    b->p2 = vector2_new(x2, y2);
 8000fd0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000fd2:	edd7 0a06 	vldr	s1, [r7, #24]
 8000fd6:	ed97 0a07 	vldr	s0, [r7, #28]
 8000fda:	f000 fd33 	bl	8001a44 <vector2_new>
 8000fde:	eeb0 7a40 	vmov.f32	s14, s0
 8000fe2:	eef0 7a60 	vmov.f32	s15, s1
 8000fe6:	ed84 7a02 	vstr	s14, [r4, #8]
 8000fea:	edc4 7a03 	vstr	s15, [r4, #12]
    b->p3 = vector2_new(x3, y3);
 8000fee:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000ff0:	edd7 0a04 	vldr	s1, [r7, #16]
 8000ff4:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ff8:	f000 fd24 	bl	8001a44 <vector2_new>
 8000ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8001000:	eef0 7a60 	vmov.f32	s15, s1
 8001004:	ed84 7a04 	vstr	s14, [r4, #16]
 8001008:	edc4 7a05 	vstr	s15, [r4, #20]
    b->p4 = vector2_new(x4, y4);
 800100c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800100e:	edd7 0a02 	vldr	s1, [r7, #8]
 8001012:	ed97 0a03 	vldr	s0, [r7, #12]
 8001016:	f000 fd15 	bl	8001a44 <vector2_new>
 800101a:	eeb0 7a40 	vmov.f32	s14, s0
 800101e:	eef0 7a60 	vmov.f32	s15, s1
 8001022:	ed84 7a06 	vstr	s14, [r4, #24]
 8001026:	edc4 7a07 	vstr	s15, [r4, #28]
    b->lutLength = lutLength;
 800102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
    b->lut = (Vector2*) malloc(sizeof(Vector2) * b->lutLength);
 8001030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fa60 	bl	80054fc <malloc>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001042:	621a      	str	r2, [r3, #32]
    for (int i=0; i<b->lutLength; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001048:	e02b      	b.n	80010a2 <bezier_new+0x122>
        float t = (float) i/(b->lutLength-1);
 800104a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	3b01      	subs	r3, #1
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Vector2 eval = bezier_eval0(b, t);
 800106a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800106e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001070:	f000 f86c 	bl	800114c <bezier_eval0>
 8001074:	eeb0 7a40 	vmov.f32	s14, s0
 8001078:	eef0 7a60 	vmov.f32	s15, s1
 800107c:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8001080:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        b->lut[i] = eval;
 8001084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	461a      	mov	r2, r3
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001098:	e882 0003 	stmia.w	r2, {r0, r1}
    for (int i=0; i<b->lutLength; i++) {
 800109c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800109e:	3301      	adds	r3, #1
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbce      	blt.n	800104a <bezier_new+0xca>
    }
    return b;
 80010ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3744      	adds	r7, #68	; 0x44
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
	...

080010b8 <bezier_display>:


void bezier_display(Bezier* b) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    printf("Bezier {\r\n    ");
 80010c0:	481f      	ldr	r0, [pc, #124]	; (8001140 <bezier_display+0x88>)
 80010c2:	f004 ff3f 	bl	8005f44 <iprintf>
    vector2_display(b->p1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80010d0:	eeb0 0a47 	vmov.f32	s0, s14
 80010d4:	eef0 0a67 	vmov.f32	s1, s15
 80010d8:	f000 fcd6 	bl	8001a88 <vector2_display>
    printf("    ");
 80010dc:	4819      	ldr	r0, [pc, #100]	; (8001144 <bezier_display+0x8c>)
 80010de:	f004 ff31 	bl	8005f44 <iprintf>
    vector2_display(b->p2);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80010e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80010ec:	eeb0 0a47 	vmov.f32	s0, s14
 80010f0:	eef0 0a67 	vmov.f32	s1, s15
 80010f4:	f000 fcc8 	bl	8001a88 <vector2_display>
    printf("    ");
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <bezier_display+0x8c>)
 80010fa:	f004 ff23 	bl	8005f44 <iprintf>
    vector2_display(b->p3);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	ed93 7a04 	vldr	s14, [r3, #16]
 8001104:	edd3 7a05 	vldr	s15, [r3, #20]
 8001108:	eeb0 0a47 	vmov.f32	s0, s14
 800110c:	eef0 0a67 	vmov.f32	s1, s15
 8001110:	f000 fcba 	bl	8001a88 <vector2_display>
    printf("    ");
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <bezier_display+0x8c>)
 8001116:	f004 ff15 	bl	8005f44 <iprintf>
    vector2_display(b->p4);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001120:	edd3 7a07 	vldr	s15, [r3, #28]
 8001124:	eeb0 0a47 	vmov.f32	s0, s14
 8001128:	eef0 0a67 	vmov.f32	s1, s15
 800112c:	f000 fcac 	bl	8001a88 <vector2_display>
    printf("}\r\n");
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <bezier_display+0x90>)
 8001132:	f004 ff8d 	bl	8006050 <puts>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	08009040 	.word	0x08009040
 8001144:	08009050 	.word	0x08009050
 8001148:	08009058 	.word	0x08009058

0800114c <bezier_eval0>:


Vector2 bezier_eval0(Bezier* b, float t) {
 800114c:	b480      	push	{r7}
 800114e:	b08d      	sub	sp, #52	; 0x34
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8001158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800115c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001164:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = b->p1.x * u*u*u + b->p2.x * 3*u*u*t + b->p3.x * 3*u*t*t + b->p4.x * t*t*t;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	ed93 7a00 	vldr	s14, [r3]
 800116e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001176:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800117a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	edd3 7a02 	vldr	s15, [r3, #8]
 800118c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001190:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001194:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800119c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80011b6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80011ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80011be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	edd3 6a06 	vldr	s13, [r3, #24]
 80011e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = b->p1.y * u*u*u + b->p2.y * 3*u*u*t + b->p3.y * 3*u*t*t + b->p4.y * t*t*t;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	ed93 7a01 	vldr	s14, [r3, #4]
 8001206:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800120a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	edd3 7a03 	vldr	s15, [r3, #12]
 8001224:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001228:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800122c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001230:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001234:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001238:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800123c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a05 	vldr	s15, [r3, #20]
 800124e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001252:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001256:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800125a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800125e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001262:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001266:	edd7 7a02 	vldr	s15, [r7, #8]
 800126a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	edd3 6a07 	vldr	s13, [r3, #28]
 8001278:	edd7 7a02 	vldr	s15, [r7, #8]
 800127c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001280:	edd7 7a02 	vldr	s15, [r7, #8]
 8001284:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001288:	edd7 7a02 	vldr	s15, [r7, #8]
 800128c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	61bb      	str	r3, [r7, #24]
    return eval;
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	f107 0214 	add.w	r2, r7, #20
 80012a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	ee07 2a10 	vmov	s14, r2
 80012b8:	ee07 3a90 	vmov	s15, r3
}
 80012bc:	eeb0 0a47 	vmov.f32	s0, s14
 80012c0:	eef0 0a67 	vmov.f32	s1, s15
 80012c4:	3734      	adds	r7, #52	; 0x34
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <bezier_eval0Lut>:


Vector2 bezier_eval0Lut(Bezier* b, float t) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b088      	sub	sp, #32
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	ed87 0a02 	vstr	s0, [r7, #8]
    int i = (int) round(t*(b->lutLength-1)); 
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	3b01      	subs	r3, #1
 80012e0:	ee07 3a90 	vmov	s15, r3
 80012e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f0:	ee17 0a90 	vmov	r0, s15
 80012f4:	f7ff f948 	bl	8000588 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	ec43 2b10 	vmov	d0, r2, r3
 8001300:	f006 fe60 	bl	8007fc4 <round>
 8001304:	ec53 2b10 	vmov	r2, r3, d0
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fc44 	bl	8000b98 <__aeabi_d2iz>
 8001310:	4603      	mov	r3, r0
 8001312:	61fb      	str	r3, [r7, #28]
    return b->lut[i];
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	441a      	add	r2, r3
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001326:	e883 0003 	stmia.w	r3, {r0, r1}
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	ee07 2a10 	vmov	s14, r2
 8001332:	ee07 3a90 	vmov	s15, r3
}
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	eef0 0a67 	vmov.f32	s1, s15
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <bezier_eval1>:


Vector2 bezier_eval1(Bezier* b, float t) {
 8001344:	b480      	push	{r7}
 8001346:	b08d      	sub	sp, #52	; 0x34
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8001350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001354:	edd7 7a02 	vldr	s15, [r7, #8]
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p2.x - b->p1.x) * 3*u*u + (b->p3.x - b->p2.x) * 6*u*t + (b->p4.x - b->p3.x) * 3*t*t;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	ed93 7a02 	vldr	s14, [r3, #8]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001374:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001378:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800137c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001380:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	edd3 6a04 	vldr	s13, [r3, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	edd3 7a02 	vldr	s15, [r3, #8]
 8001394:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001398:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800139c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	edd3 6a06 	vldr	s13, [r3, #24]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80013c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013c4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80013c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p2.y - b->p1.y) * 3*u*u + (b->p3.y - b->p2.y) * 6*u*t + (b->p4.y - b->p3.y) * 3*t*t;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001404:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	edd3 7a03 	vldr	s15, [r3, #12]
 8001418:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800141c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001420:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001424:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001428:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800142c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	edd3 6a07 	vldr	s13, [r3, #28]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	edd3 7a05 	vldr	s15, [r3, #20]
 8001444:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001448:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800144c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001450:	edd7 7a02 	vldr	s15, [r7, #8]
 8001454:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001458:	edd7 7a02 	vldr	s15, [r7, #8]
 800145c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	61bb      	str	r3, [r7, #24]
    return eval;
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	f107 0214 	add.w	r2, r7, #20
 8001478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	ee07 2a10 	vmov	s14, r2
 8001488:	ee07 3a90 	vmov	s15, r3
}
 800148c:	eeb0 0a47 	vmov.f32	s0, s14
 8001490:	eef0 0a67 	vmov.f32	s1, s15
 8001494:	3734      	adds	r7, #52	; 0x34
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <bezier_eval2>:


Vector2 bezier_eval2(Bezier* b, float t) {
 800149e:	b480      	push	{r7}
 80014a0:	b08d      	sub	sp, #52	; 0x34
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 80014aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p3.x - 2*b->p2.x + b->p1.x) * 6*u + (b->p4.x - 2*b->p3.x + b->p2.x) * 6*t;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	ed93 7a04 	vldr	s14, [r3, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80014dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	edd3 6a06 	vldr	s13, [r3, #24]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001506:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800150a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800150e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p3.y - 2*b->p2.y + b->p1.y) * 6*u + (b->p4.y - 2*b->p3.y + b->p2.y) * 6*t;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	ed93 7a05 	vldr	s14, [r3, #20]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	edd3 7a03 	vldr	s15, [r3, #12]
 800152a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800152e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	edd3 7a01 	vldr	s15, [r3, #4]
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001540:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001544:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edd3 7a05 	vldr	s15, [r3, #20]
 8001558:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800155c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edd3 7a03 	vldr	s15, [r3, #12]
 8001566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800156a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800156e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001572:	edd7 7a02 	vldr	s15, [r7, #8]
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	61bb      	str	r3, [r7, #24]
    return eval;
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	f107 0214 	add.w	r2, r7, #20
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	e883 0003 	stmia.w	r3, {r0, r1}
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	ee07 2a10 	vmov	s14, r2
 80015a2:	ee07 3a90 	vmov	s15, r3
}
 80015a6:	eeb0 0a47 	vmov.f32	s0, s14
 80015aa:	eef0 0a67 	vmov.f32	s1, s15
 80015ae:	3734      	adds	r7, #52	; 0x34
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <bezier_curvature>:


float bezier_curvature(Bezier* b, float t) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	ed87 0a00 	vstr	s0, [r7]
    Vector2 diff1 = bezier_eval1(b, t); // B'(t)
 80015c4:	ed97 0a00 	vldr	s0, [r7]
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff febb 	bl	8001344 <bezier_eval1>
 80015ce:	eeb0 7a40 	vmov.f32	s14, s0
 80015d2:	eef0 7a60 	vmov.f32	s15, s1
 80015d6:	ed87 7a04 	vstr	s14, [r7, #16]
 80015da:	edc7 7a05 	vstr	s15, [r7, #20]
    Vector2 diff2 = bezier_eval2(b, t); // B''(t)
 80015de:	ed97 0a00 	vldr	s0, [r7]
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff5b 	bl	800149e <bezier_eval2>
 80015e8:	eeb0 7a40 	vmov.f32	s14, s0
 80015ec:	eef0 7a60 	vmov.f32	s15, s1
 80015f0:	ed87 7a02 	vstr	s14, [r7, #8]
 80015f4:	edc7 7a03 	vstr	s15, [r7, #12]
    float num = vector2_cross(diff1, diff2);
 80015f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80015fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001600:	ed97 7a04 	vldr	s14, [r7, #16]
 8001604:	edd7 7a05 	vldr	s15, [r7, #20]
 8001608:	eeb0 1a46 	vmov.f32	s2, s12
 800160c:	eef0 1a66 	vmov.f32	s3, s13
 8001610:	eeb0 0a47 	vmov.f32	s0, s14
 8001614:	eef0 0a67 	vmov.f32	s1, s15
 8001618:	f000 fac3 	bl	8001ba2 <vector2_cross>
 800161c:	ed87 0a07 	vstr	s0, [r7, #28]
    float den = pow(vector2_norm(diff1), 3);
 8001620:	ed97 7a04 	vldr	s14, [r7, #16]
 8001624:	edd7 7a05 	vldr	s15, [r7, #20]
 8001628:	eeb0 0a47 	vmov.f32	s0, s14
 800162c:	eef0 0a67 	vmov.f32	s1, s15
 8001630:	f000 fa4e 	bl	8001ad0 <vector2_norm>
 8001634:	ee10 3a10 	vmov	r3, s0
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffa5 	bl	8000588 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001690 <bezier_curvature+0xd8>
 8001646:	ec43 2b10 	vmov	d0, r2, r3
 800164a:	f006 fd01 	bl	8008050 <pow>
 800164e:	ec53 2b10 	vmov	r2, r3, d0
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fac7 	bl	8000be8 <__aeabi_d2f>
 800165a:	4603      	mov	r3, r0
 800165c:	61bb      	str	r3, [r7, #24]
    if (den == 0)
 800165e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001662:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166a:	d102      	bne.n	8001672 <bezier_curvature+0xba>
        return INFINITY;
 800166c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001698 <bezier_curvature+0xe0>
 8001670:	e005      	b.n	800167e <bezier_curvature+0xc6>
    return num/den;
 8001672:	ed97 7a07 	vldr	s14, [r7, #28]
 8001676:	edd7 7a06 	vldr	s15, [r7, #24]
 800167a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800167e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	f3af 8000 	nop.w
 8001690:	00000000 	.word	0x00000000
 8001694:	40080000 	.word	0x40080000
 8001698:	7f800000 	.word	0x7f800000

0800169c <bezier_projectLut>:


float bezier_projectLut(Bezier* b, Vector2 p) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	eeb0 7a40 	vmov.f32	s14, s0
 80016a8:	eef0 7a60 	vmov.f32	s15, s1
 80016ac:	ed87 7a01 	vstr	s14, [r7, #4]
 80016b0:	edc7 7a02 	vstr	s15, [r7, #8]
    float minDist = INFINITY;
 80016b4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    float minIndex = 0;
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	e02d      	b.n	8001722 <bezier_projectLut+0x86>
        float dist = vector2_dist2(p, b->lut[i]);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	ed93 6a00 	vldr	s12, [r3]
 80016d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80016d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80016dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e0:	eeb0 1a46 	vmov.f32	s2, s12
 80016e4:	eef0 1a66 	vmov.f32	s3, s13
 80016e8:	eeb0 0a47 	vmov.f32	s0, s14
 80016ec:	eef0 0a67 	vmov.f32	s1, s15
 80016f0:	f000 fa1f 	bl	8001b32 <vector2_dist2>
 80016f4:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < minDist) {
 80016f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d508      	bpl.n	800171c <bezier_projectLut+0x80>
            minDist = dist;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
            minIndex = i;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	3301      	adds	r3, #1
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbcc      	blt.n	80016c6 <bezier_projectLut+0x2a>
        }
    }
    float tLut = (float) minIndex/(b->lutLength-1);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	3b01      	subs	r3, #1
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800173a:	edd7 6a08 	vldr	s13, [r7, #32]
 800173e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001742:	edc7 7a06 	vstr	s15, [r7, #24]
    return tLut;
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	ee07 3a90 	vmov	s15, r3
}
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <bezier_project>:


float bezier_project(Bezier* b, Vector2 p, float precision) {
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	eeb0 7a40 	vmov.f32	s14, s0
 8001764:	eef0 7a60 	vmov.f32	s15, s1
 8001768:	ed87 1a00 	vstr	s2, [r7]
 800176c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001770:	edc7 7a02 	vstr	s15, [r7, #8]
    float tLut = bezier_projectLut(b, p);
 8001774:	ed97 7a01 	vldr	s14, [r7, #4]
 8001778:	edd7 7a02 	vldr	s15, [r7, #8]
 800177c:	eeb0 0a47 	vmov.f32	s0, s14
 8001780:	eef0 0a67 	vmov.f32	s1, s15
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff ff89 	bl	800169c <bezier_projectLut>
 800178a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    float t_a = tLut - 1.0/(b->lutLength-1);
 800178e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001790:	f7fe fefa 	bl	8000588 <__aeabi_f2d>
 8001794:	4604      	mov	r4, r0
 8001796:	460d      	mov	r5, r1
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	3b01      	subs	r3, #1
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fee0 	bl	8000564 <__aeabi_i2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	f04f 0000 	mov.w	r0, #0
 80017ac:	4966      	ldr	r1, [pc, #408]	; (8001948 <bezier_project+0x1f0>)
 80017ae:	f7ff f86d 	bl	800088c <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd85 	bl	80002c8 <__aeabi_dsub>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fa0f 	bl	8000be8 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
    t_a = (t_a<0)?0:t_a;
 80017ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d502      	bpl.n	80017e2 <bezier_project+0x8a>
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e000      	b.n	80017e4 <bezier_project+0x8c>
 80017e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34

    float t_b = tLut + 1.0/(b->lutLength-1);
 80017e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017e8:	f7fe fece 	bl	8000588 <__aeabi_f2d>
 80017ec:	4604      	mov	r4, r0
 80017ee:	460d      	mov	r5, r1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe feb4 	bl	8000564 <__aeabi_i2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	4950      	ldr	r1, [pc, #320]	; (8001948 <bezier_project+0x1f0>)
 8001806:	f7ff f841 	bl	800088c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd5b 	bl	80002cc <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f9e3 	bl	8000be8 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
    t_b = (t_b>1)?1:t_b;
 8001826:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800182a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800182e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	dd02      	ble.n	800183e <bezier_project+0xe6>
 8001838:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800183c:	e000      	b.n	8001840 <bezier_project+0xe8>
 800183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001840:	633b      	str	r3, [r7, #48]	; 0x30

    Vector2 p_a, p_b;
    float dist_a, dist_b;

    while (t_b-t_a > precision) {
 8001842:	e063      	b.n	800190c <bezier_project+0x1b4>
        p_a = bezier_eval0(b, t_a);
 8001844:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff fc7f 	bl	800114c <bezier_eval0>
 800184e:	eeb0 7a40 	vmov.f32	s14, s0
 8001852:	eef0 7a60 	vmov.f32	s15, s1
 8001856:	ed87 7a07 	vstr	s14, [r7, #28]
 800185a:	edc7 7a08 	vstr	s15, [r7, #32]
        p_b = bezier_eval0(b, t_b);
 800185e:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f7ff fc72 	bl	800114c <bezier_eval0>
 8001868:	eeb0 7a40 	vmov.f32	s14, s0
 800186c:	eef0 7a60 	vmov.f32	s15, s1
 8001870:	ed87 7a05 	vstr	s14, [r7, #20]
 8001874:	edc7 7a06 	vstr	s15, [r7, #24]
        dist_a = vector2_dist2(p, p_a);
 8001878:	ed97 6a07 	vldr	s12, [r7, #28]
 800187c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001880:	ed97 7a01 	vldr	s14, [r7, #4]
 8001884:	edd7 7a02 	vldr	s15, [r7, #8]
 8001888:	eeb0 1a46 	vmov.f32	s2, s12
 800188c:	eef0 1a66 	vmov.f32	s3, s13
 8001890:	eeb0 0a47 	vmov.f32	s0, s14
 8001894:	eef0 0a67 	vmov.f32	s1, s15
 8001898:	f000 f94b 	bl	8001b32 <vector2_dist2>
 800189c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
        dist_b = vector2_dist2(p, p_b);
 80018a0:	ed97 6a05 	vldr	s12, [r7, #20]
 80018a4:	edd7 6a06 	vldr	s13, [r7, #24]
 80018a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b0:	eeb0 1a46 	vmov.f32	s2, s12
 80018b4:	eef0 1a66 	vmov.f32	s3, s13
 80018b8:	eeb0 0a47 	vmov.f32	s0, s14
 80018bc:	eef0 0a67 	vmov.f32	s1, s15
 80018c0:	f000 f937 	bl	8001b32 <vector2_dist2>
 80018c4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        if (dist_a < dist_b)
 80018c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80018cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	d50c      	bpl.n	80018f4 <bezier_project+0x19c>
            t_b = (t_a + t_b)/2;
 80018da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80018de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80018f2:	e00b      	b.n	800190c <bezier_project+0x1b4>
        else
            t_a = (t_a + t_b)/2;
 80018f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80018f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001900:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001908:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    while (t_b-t_a > precision) {
 800190c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001910:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	ed97 7a00 	vldr	s14, [r7]
 800191c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	d48e      	bmi.n	8001844 <bezier_project+0xec>
    }
    return (t_a + t_b)/2;
 8001926:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800192a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800192e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001932:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001936:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800193a:	eef0 7a66 	vmov.f32	s15, s13
}
 800193e:	eeb0 0a67 	vmov.f32	s0, s15
 8001942:	3738      	adds	r7, #56	; 0x38
 8001944:	46bd      	mov	sp, r7
 8001946:	bdb0      	pop	{r4, r5, r7, pc}
 8001948:	3ff00000 	.word	0x3ff00000

0800194c <drv8825_init>:


void drv8825_init(Stepper *stepper, uint16_t enablePin, 
                  GPIO_TypeDef* enableGPIO, uint16_t dirPin, 
                  GPIO_TypeDef *dirGPIO, TIM_HandleTypeDef *timer, 
                  uint8_t channel) {
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	460b      	mov	r3, r1
 800195a:	817b      	strh	r3, [r7, #10]
 800195c:	4613      	mov	r3, r2
 800195e:	813b      	strh	r3, [r7, #8]
	stepper->enablePin = enablePin;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	897a      	ldrh	r2, [r7, #10]
 8001964:	801a      	strh	r2, [r3, #0]
	stepper->enableGPIO = enableGPIO;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	605a      	str	r2, [r3, #4]

	stepper->dirPin = dirPin;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	893a      	ldrh	r2, [r7, #8]
 8001970:	811a      	strh	r2, [r3, #8]
	stepper->dirGPIO = dirGPIO;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	60da      	str	r2, [r3, #12]

	stepper->timer = timer;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	611a      	str	r2, [r3, #16]
	stepper->channel = channel;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001984:	751a      	strb	r2, [r3, #20]
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <drv8825_enable>:
void drv8825_setDirection(Stepper *stepper, StepperDirection direction) {
	HAL_GPIO_WritePin(stepper->dirGPIO, stepper->dirPin, (uint8_t) direction);
}


void drv8825_enable(Stepper *stepper) {
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6858      	ldr	r0, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	f001 fcb7 	bl	8003318 <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin, 
		(uint8_t) ACTIVE
	);
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <propulsion_initialize>:


extern Robot robot;


void propulsion_initialize() {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af04      	add	r7, sp, #16
	robot.leftMotor = (Stepper*) malloc(sizeof(Stepper));
 80019ba:	2018      	movs	r0, #24
 80019bc:	f003 fd9e 	bl	80054fc <malloc>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <propulsion_initialize+0x60>)
 80019c6:	60da      	str	r2, [r3, #12]
	robot.rightMotor = (Stepper*) malloc(sizeof(Stepper));
 80019c8:	2018      	movs	r0, #24
 80019ca:	f003 fd97 	bl	80054fc <malloc>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <propulsion_initialize+0x60>)
 80019d4:	611a      	str	r2, [r3, #16]

	drv8825_init(
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <propulsion_initialize+0x60>)
 80019d8:	68d8      	ldr	r0, [r3, #12]
 80019da:	2300      	movs	r3, #0
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <propulsion_initialize+0x64>)
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <propulsion_initialize+0x68>)
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2304      	movs	r3, #4
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <propulsion_initialize+0x68>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	f7ff ffae 	bl	800194c <drv8825_init>
		robot.leftMotor,
		L_MOTOR_EN_Pin, L_MOTOR_EN_GPIO_Port, 
		L_MOTOR_DIR_Pin, L_MOTOR_DIR_GPIO_Port, 
		&L_MOTOR_TIMER, TIM_CHANNEL_1
	);
	drv8825_init(
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <propulsion_initialize+0x60>)
 80019f2:	6918      	ldr	r0, [r3, #16]
 80019f4:	230c      	movs	r3, #12
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <propulsion_initialize+0x6c>)
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <propulsion_initialize+0x68>)
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a04:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <propulsion_initialize+0x68>)
 8001a06:	2102      	movs	r1, #2
 8001a08:	f7ff ffa0 	bl	800194c <drv8825_init>
		robot.rightMotor,
		R_MOTOR_EN_Pin, R_MOTOR_EN_GPIO_Port, 
		R_MOTOR_DIR_Pin, R_MOTOR_DIR_GPIO_Port, 
		&R_MOTOR_TIMER, TIM_CHANNEL_4
	);
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000208 	.word	0x20000208
 8001a18:	200002f4 	.word	0x200002f4
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	2000021c 	.word	0x2000021c

08001a24 <propulsion_enableMotors>:


void propulsion_enableMotors() {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	drv8825_enable(robot.leftMotor);
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <propulsion_enableMotors+0x1c>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ffb0 	bl	8001992 <drv8825_enable>
	drv8825_enable(robot.rightMotor);
 8001a32:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <propulsion_enableMotors+0x1c>)
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ffab 	bl	8001992 <drv8825_enable>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000208 	.word	0x20000208

08001a44 <vector2_new>:
#include "vector2.h"


Vector2 vector2_new(float x, float y) {
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a4e:	edc7 0a02 	vstr	s1, [r7, #8]
    Vector2 u = { x, y };
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	617b      	str	r3, [r7, #20]
    return u;
 8001a5a:	f107 0318 	add.w	r3, r7, #24
 8001a5e:	f107 0210 	add.w	r2, r7, #16
 8001a62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a66:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	ee07 2a10 	vmov	s14, r2
 8001a72:	ee07 3a90 	vmov	s15, r3
}
 8001a76:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7a:	eef0 0a67 	vmov.f32	s1, s15
 8001a7e:	3724      	adds	r7, #36	; 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <vector2_display>:


void vector2_display(Vector2 u) {
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a92:	eef0 7a60 	vmov.f32	s15, s1
 8001a96:	ed87 7a00 	vstr	s14, [r7]
 8001a9a:	edc7 7a01 	vstr	s15, [r7, #4]
    printf("{ x: %f, y: %f }\r\n", u.x, u.y);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd71 	bl	8000588 <__aeabi_f2d>
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd6b 	bl	8000588 <__aeabi_f2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	e9cd 2300 	strd	r2, r3, [sp]
 8001aba:	4622      	mov	r2, r4
 8001abc:	462b      	mov	r3, r5
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <vector2_display+0x44>)
 8001ac0:	f004 fa40 	bl	8005f44 <iprintf>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	0800905c 	.word	0x0800905c

08001ad0 <vector2_norm>:


float vector2_norm(Vector2 u) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	eeb0 7a40 	vmov.f32	s14, s0
 8001ada:	eef0 7a60 	vmov.f32	s15, s1
 8001ade:	ed87 7a00 	vstr	s14, [r7]
 8001ae2:	edc7 7a01 	vstr	s15, [r7, #4]
    return sqrt(u.x*u.x + u.y*u.y);
 8001ae6:	ed97 7a00 	vldr	s14, [r7]
 8001aea:	edd7 7a00 	vldr	s15, [r7]
 8001aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001af6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fd3f 	bl	8000588 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	ec43 2b10 	vmov	d0, r2, r3
 8001b12:	f006 fb4b 	bl	80081ac <sqrt>
 8001b16:	ec53 2b10 	vmov	r2, r3, d0
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7ff f863 	bl	8000be8 <__aeabi_d2f>
 8001b22:	4603      	mov	r3, r0
 8001b24:	ee07 3a90 	vmov	s15, r3
}
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <vector2_dist2>:
    Vector2 diff = { v.x - u.x, v.y - u.y };
    return vector2_norm(diff);
}


float vector2_dist2(Vector2 u, Vector2 v) {
 8001b32:	b480      	push	{r7}
 8001b34:	b087      	sub	sp, #28
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	eeb0 6a40 	vmov.f32	s12, s0
 8001b3c:	eef0 6a60 	vmov.f32	s13, s1
 8001b40:	eeb0 7a41 	vmov.f32	s14, s2
 8001b44:	eef0 7a61 	vmov.f32	s15, s3
 8001b48:	ed87 6a02 	vstr	s12, [r7, #8]
 8001b4c:	edc7 6a03 	vstr	s13, [r7, #12]
 8001b50:	ed87 7a00 	vstr	s14, [r7]
 8001b54:	edc7 7a01 	vstr	s15, [r7, #4]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 8001b58:	ed97 7a00 	vldr	s14, [r7]
 8001b5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b64:	edc7 7a04 	vstr	s15, [r7, #16]
 8001b68:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b74:	edc7 7a05 	vstr	s15, [r7, #20]
    return diff.x*diff.x + diff.y*diff.y;
 8001b78:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b84:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <vector2_cross>:
float vector2_dot(Vector2 u, Vector2 v) {
    return u.x * v.x + u.y * v.y;
}


float vector2_cross(Vector2 u, Vector2 v) {
 8001ba2:	b480      	push	{r7}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	eeb0 6a40 	vmov.f32	s12, s0
 8001bac:	eef0 6a60 	vmov.f32	s13, s1
 8001bb0:	eeb0 7a41 	vmov.f32	s14, s2
 8001bb4:	eef0 7a61 	vmov.f32	s15, s3
 8001bb8:	ed87 6a02 	vstr	s12, [r7, #8]
 8001bbc:	edc7 6a03 	vstr	s13, [r7, #12]
 8001bc0:	ed87 7a00 	vstr	s14, [r7]
 8001bc4:	edc7 7a01 	vstr	s15, [r7, #4]
    return u.x * v.y - u.y * v.x;
 8001bc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd4:	edd7 6a03 	vldr	s13, [r7, #12]
 8001bd8:	edd7 7a00 	vldr	s15, [r7]
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001be4:	eeb0 0a67 	vmov.f32	s0, s15
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_GPIO_Init+0xc4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f640 0107 	movw	r1, #2055	; 0x807
 8001c64:	4815      	ldr	r0, [pc, #84]	; (8001cbc <MX_GPIO_Init+0xc8>)
 8001c66:	f001 fb57 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <MX_GPIO_Init+0xcc>)
 8001c70:	f001 fb52 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin;
 8001c74:	f640 0307 	movw	r3, #2055	; 0x807
 8001c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <MX_GPIO_Init+0xc8>)
 8001c8e:	f001 f9af 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c92:	2320      	movs	r3, #32
 8001c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_GPIO_Init+0xcc>)
 8001caa:	f001 f9a1 	bl	8002ff0 <HAL_GPIO_Init>

}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e00b      	b.n	8001cee <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	1c4b      	adds	r3, r1, #1
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <_write+0x3c>)
 8001ce4:	f003 f917 	bl	8004f16 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbef      	blt.n	8001cd6 <_write+0x12>
	}
	return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000045c 	.word	0x2000045c

08001d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b090      	sub	sp, #64	; 0x40
 8001d08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d0a:	f000 ffc9 	bl	8002ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0e:	f000 f93f 	bl	8001f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d12:	f7ff ff6f 	bl	8001bf4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001d16:	f000 fafb 	bl	8002310 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001d1a:	f000 fcab 	bl	8002674 <MX_TIM8_Init>
  MX_TIM11_Init();
 8001d1e:	f000 fd49 	bl	80027b4 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001d22:	f000 fb9b 	bl	800245c <MX_TIM3_Init>
  MX_TIM7_Init();
 8001d26:	f000 fc6f 	bl	8002608 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001d2a:	f000 fb49 	bl	80023c0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001d2e:	f000 fc35 	bl	800259c <MX_TIM6_Init>
  MX_TIM4_Init();
 8001d32:	f000 fbe7 	bl	8002504 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001d36:	f000 ff17 	bl	8002b68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Initializing propulsion system.\r\n");
 8001d3a:	4884      	ldr	r0, [pc, #528]	; (8001f4c <main+0x248>)
 8001d3c:	f004 f988 	bl	8006050 <puts>
  propulsion_initialize();
 8001d40:	f7ff fe38 	bl	80019b4 <propulsion_initialize>

  printf("Enabling propulsion system.\r\n");
 8001d44:	4882      	ldr	r0, [pc, #520]	; (8001f50 <main+0x24c>)
 8001d46:	f004 f983 	bl	8006050 <puts>
  propulsion_enableMotors();
 8001d4a:	f7ff fe6b 	bl	8001a24 <propulsion_enableMotors>

  Bezier* b = bezier_new(0, 0, 100, 0, 0, 100, 100, 100, 30);
 8001d4e:	201e      	movs	r0, #30
 8001d50:	eddf 3a80 	vldr	s7, [pc, #512]	; 8001f54 <main+0x250>
 8001d54:	ed9f 3a7f 	vldr	s6, [pc, #508]	; 8001f54 <main+0x250>
 8001d58:	eddf 2a7e 	vldr	s5, [pc, #504]	; 8001f54 <main+0x250>
 8001d5c:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8001f58 <main+0x254>
 8001d60:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8001f58 <main+0x254>
 8001d64:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8001f54 <main+0x250>
 8001d68:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8001f58 <main+0x254>
 8001d6c:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8001f58 <main+0x254>
 8001d70:	f7ff f906 	bl	8000f80 <bezier_new>
 8001d74:	6338      	str	r0, [r7, #48]	; 0x30

  bezier_display(b);
 8001d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d78:	f7ff f99e 	bl	80010b8 <bezier_display>

  printf("LUT initialized with %d entries.\r\n", b->lutLength);
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	4619      	mov	r1, r3
 8001d82:	4876      	ldr	r0, [pc, #472]	; (8001f5c <main+0x258>)
 8001d84:	f004 f8de 	bl	8005f44 <iprintf>

  printf("\r\nEvaluation.\r\n");
 8001d88:	4875      	ldr	r0, [pc, #468]	; (8001f60 <main+0x25c>)
 8001d8a:	f004 f961 	bl	8006050 <puts>
  double t = 0.25;
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	4b74      	ldr	r3, [pc, #464]	; (8001f64 <main+0x260>)
 8001d94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  printf("b(%3.2f) = ", t); vector2_display(bezier_eval0(b, t));
 8001d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d9c:	4872      	ldr	r0, [pc, #456]	; (8001f68 <main+0x264>)
 8001d9e:	f004 f8d1 	bl	8005f44 <iprintf>
 8001da2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001da6:	f7fe ff1f 	bl	8000be8 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	ee00 3a10 	vmov	s0, r3
 8001db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001db2:	f7ff f9cb 	bl	800114c <bezier_eval0>
 8001db6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dba:	eef0 7a60 	vmov.f32	s15, s1
 8001dbe:	ed87 7a02 	vstr	s14, [r7, #8]
 8001dc2:	edc7 7a03 	vstr	s15, [r7, #12]
 8001dc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dce:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd2:	eef0 0a67 	vmov.f32	s1, s15
 8001dd6:	f7ff fe57 	bl	8001a88 <vector2_display>
  printf("b'(%3.2f) = ", t); vector2_display(bezier_eval1(b, t));
 8001dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dde:	4863      	ldr	r0, [pc, #396]	; (8001f6c <main+0x268>)
 8001de0:	f004 f8b0 	bl	8005f44 <iprintf>
 8001de4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001de8:	f7fe fefe 	bl	8000be8 <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	ee00 3a10 	vmov	s0, r3
 8001df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001df4:	f7ff faa6 	bl	8001344 <bezier_eval1>
 8001df8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dfc:	eef0 7a60 	vmov.f32	s15, s1
 8001e00:	ed87 7a04 	vstr	s14, [r7, #16]
 8001e04:	edc7 7a05 	vstr	s15, [r7, #20]
 8001e08:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e10:	eeb0 0a47 	vmov.f32	s0, s14
 8001e14:	eef0 0a67 	vmov.f32	s1, s15
 8001e18:	f7ff fe36 	bl	8001a88 <vector2_display>
  printf("b''(%3.2f) = ", t); vector2_display(bezier_eval2(b, t));
 8001e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e20:	4853      	ldr	r0, [pc, #332]	; (8001f70 <main+0x26c>)
 8001e22:	f004 f88f 	bl	8005f44 <iprintf>
 8001e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e2a:	f7fe fedd 	bl	8000be8 <__aeabi_d2f>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	ee00 3a10 	vmov	s0, r3
 8001e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e36:	f7ff fb32 	bl	800149e <bezier_eval2>
 8001e3a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e3e:	eef0 7a60 	vmov.f32	s15, s1
 8001e42:	ed87 7a06 	vstr	s14, [r7, #24]
 8001e46:	edc7 7a07 	vstr	s15, [r7, #28]
 8001e4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e52:	eeb0 0a47 	vmov.f32	s0, s14
 8001e56:	eef0 0a67 	vmov.f32	s1, s15
 8001e5a:	f7ff fe15 	bl	8001a88 <vector2_display>

  printf("b_lut(%3.2f) = ", t); vector2_display(bezier_eval0Lut(b, t));
 8001e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e62:	4844      	ldr	r0, [pc, #272]	; (8001f74 <main+0x270>)
 8001e64:	f004 f86e 	bl	8005f44 <iprintf>
 8001e68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e6c:	f7fe febc 	bl	8000be8 <__aeabi_d2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	ee00 3a10 	vmov	s0, r3
 8001e76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e78:	f7ff fa29 	bl	80012ce <bezier_eval0Lut>
 8001e7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e80:	eef0 7a60 	vmov.f32	s15, s1
 8001e84:	ed87 7a08 	vstr	s14, [r7, #32]
 8001e88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001e8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e94:	eeb0 0a47 	vmov.f32	s0, s14
 8001e98:	eef0 0a67 	vmov.f32	s1, s15
 8001e9c:	f7ff fdf4 	bl	8001a88 <vector2_display>

  printf("\r\nCurvature at t=%3.2f: %f\r\n", t, bezier_curvature(b, t));
 8001ea0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ea4:	f7fe fea0 	bl	8000be8 <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	ee00 3a10 	vmov	s0, r3
 8001eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eb0:	f7ff fb82 	bl	80015b8 <bezier_curvature>
 8001eb4:	ee10 3a10 	vmov	r3, s0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb65 	bl	8000588 <__aeabi_f2d>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001eca:	482b      	ldr	r0, [pc, #172]	; (8001f78 <main+0x274>)
 8001ecc:	f004 f83a 	bl	8005f44 <iprintf>

  printf("\r\nProjection.\r\n");
 8001ed0:	482a      	ldr	r0, [pc, #168]	; (8001f7c <main+0x278>)
 8001ed2:	f004 f8bd 	bl	8006050 <puts>
  Vector2 test = { 50, 50 };
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <main+0x27c>)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ede:	e883 0003 	stmia.w	r3, {r0, r1}
  printf("t_lut = %f\r\n", bezier_projectLut(b, test));
 8001ee2:	ed97 7a00 	vldr	s14, [r7]
 8001ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eea:	eeb0 0a47 	vmov.f32	s0, s14
 8001eee:	eef0 0a67 	vmov.f32	s1, s15
 8001ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ef4:	f7ff fbd2 	bl	800169c <bezier_projectLut>
 8001ef8:	ee10 3a10 	vmov	r3, s0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb43 	bl	8000588 <__aeabi_f2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	481f      	ldr	r0, [pc, #124]	; (8001f84 <main+0x280>)
 8001f08:	f004 f81c 	bl	8005f44 <iprintf>
  printf("t_fine = %f\r\n", bezier_project(b, test, 0.0001));
 8001f0c:	ed97 7a00 	vldr	s14, [r7]
 8001f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f14:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8001f88 <main+0x284>
 8001f18:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1c:	eef0 0a67 	vmov.f32	s1, s15
 8001f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f22:	f7ff fc19 	bl	8001758 <bezier_project>
 8001f26:	ee10 3a10 	vmov	r3, s0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fb2c 	bl	8000588 <__aeabi_f2d>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4815      	ldr	r0, [pc, #84]	; (8001f8c <main+0x288>)
 8001f36:	f004 f805 	bl	8005f44 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34

  while (1) {
	  count++;
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f40:	3301      	adds	r3, #1
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_Delay(100);
 8001f44:	2064      	movs	r0, #100	; 0x64
 8001f46:	f000 ff1d 	bl	8002d84 <HAL_Delay>
	  count++;
 8001f4a:	e7f8      	b.n	8001f3e <main+0x23a>
 8001f4c:	08009070 	.word	0x08009070
 8001f50:	08009094 	.word	0x08009094
 8001f54:	42c80000 	.word	0x42c80000
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	080090b4 	.word	0x080090b4
 8001f60:	080090d8 	.word	0x080090d8
 8001f64:	3fd00000 	.word	0x3fd00000
 8001f68:	080090e8 	.word	0x080090e8
 8001f6c:	080090f4 	.word	0x080090f4
 8001f70:	08009104 	.word	0x08009104
 8001f74:	08009114 	.word	0x08009114
 8001f78:	08009124 	.word	0x08009124
 8001f7c:	08009144 	.word	0x08009144
 8001f80:	08009174 	.word	0x08009174
 8001f84:	08009154 	.word	0x08009154
 8001f88:	38d1b717 	.word	0x38d1b717
 8001f8c:	08009164 	.word	0x08009164

08001f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b094      	sub	sp, #80	; 0x50
 8001f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	2234      	movs	r2, #52	; 0x34
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fab4 	bl	800550c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <SystemClock_Config+0xe0>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a2c      	ldr	r2, [pc, #176]	; (8002070 <SystemClock_Config+0xe0>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <SystemClock_Config+0xe0>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <SystemClock_Config+0xe4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <SystemClock_Config+0xe4>)
 8001fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <SystemClock_Config+0xe4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002000:	2310      	movs	r3, #16
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002004:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002008:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800200a:	2302      	movs	r3, #2
 800200c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800200e:	2302      	movs	r3, #2
 8002010:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002012:	2302      	movs	r3, #2
 8002014:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4618      	mov	r0, r3
 800201c:	f001 fcb2 	bl	8003984 <HAL_RCC_OscConfig>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002026:	f000 f827 	bl	8002078 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800202a:	f001 f98f 	bl	800334c <HAL_PWREx_EnableOverDrive>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002034:	f000 f820 	bl	8002078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002038:	230f      	movs	r3, #15
 800203a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203c:	2302      	movs	r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002044:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800204a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	2105      	movs	r1, #5
 8002056:	4618      	mov	r0, r3
 8002058:	f001 f9c8 	bl	80033ec <HAL_RCC_ClockConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002062:	f000 f809 	bl	8002078 <Error_Handler>
  }
}
 8002066:	bf00      	nop
 8002068:	3750      	adds	r7, #80	; 0x50
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("A runtime error occurred.\r\n");
 8002080:	4801      	ldr	r0, [pc, #4]	; (8002088 <Error_Handler+0x10>)
 8002082:	f003 ffe5 	bl	8006050 <puts>
  while (1) {
 8002086:	e7fe      	b.n	8002086 <Error_Handler+0xe>
 8002088:	0800917c 	.word	0x0800917c

0800208c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_MspInit+0x4c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_MspInit+0x4c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>
	...

080020e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("A hard fault occurred.\r\n");
 80020e8:	4801      	ldr	r0, [pc, #4]	; (80020f0 <HardFault_Handler+0xc>)
 80020ea:	f003 ffb1 	bl	8006050 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0xa>
 80020f0:	08009198 	.word	0x08009198

080020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  printf("A memory management fault occurred.\r\n");
 80020f8:	4801      	ldr	r0, [pc, #4]	; (8002100 <MemManage_Handler+0xc>)
 80020fa:	f003 ffa9 	bl	8006050 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <MemManage_Handler+0xa>
 8002100:	080091b0 	.word	0x080091b0

08002104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <BusFault_Handler+0x4>

0800210a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <UsageFault_Handler+0x4>

08002110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213e:	f000 fe01 	bl	8002d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <TIM2_IRQHandler+0x10>)
 800214e:	f002 f805 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200003cc 	.word	0x200003cc

0800215c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <TIM4_IRQHandler+0x10>)
 8002162:	f001 fffb 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000264 	.word	0x20000264

08002170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <TIM6_DAC_IRQHandler+0x10>)
 8002176:	f001 fff1 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000033c 	.word	0x2000033c

08002184 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <TIM7_IRQHandler+0x10>)
 800218a:	f001 ffe7 	bl	800415c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000414 	.word	0x20000414

08002198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021b2:	f003 f979 	bl	80054a8 <__errno>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2216      	movs	r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
	return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe7 	bl	80021a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021da:	e7fe      	b.n	80021da <_exit+0x12>

080021dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e00a      	b.n	8002204 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ee:	f3af 8000 	nop.w
 80021f2:	4601      	mov	r1, r0
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	60ba      	str	r2, [r7, #8]
 80021fa:	b2ca      	uxtb	r2, r1
 80021fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf0      	blt.n	80021ee <_read+0x12>
	}

return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	return -1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800223e:	605a      	str	r2, [r3, #4]
	return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_isatty>:

int _isatty(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return 1;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	return 0;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f003 f8fa 	bl	80054a8 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20020000 	.word	0x20020000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	200001fc 	.word	0x200001fc
 80022e8:	200004b8 	.word	0x200004b8

080022ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <SystemInit+0x20>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <SystemInit+0x20>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	2224      	movs	r2, #36	; 0x24
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f003 f8f4 	bl	800550c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <MX_TIM1_Init+0xa8>)
 800232e:	4a23      	ldr	r2, [pc, #140]	; (80023bc <MX_TIM1_Init+0xac>)
 8002330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002332:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <MX_TIM1_Init+0xa8>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <MX_TIM1_Init+0xa8>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002358:	2303      	movs	r3, #3
 800235a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002360:	2301      	movs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002368:	230a      	movs	r3, #10
 800236a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002370:	2301      	movs	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	4619      	mov	r1, r3
 8002382:	480d      	ldr	r0, [pc, #52]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002384:	f001 fe44 	bl	8004010 <HAL_TIM_Encoder_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800238e:	f7ff fe73 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4806      	ldr	r0, [pc, #24]	; (80023b8 <MX_TIM1_Init+0xa8>)
 80023a0:	f002 fc8a 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023aa:	f7ff fe65 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	3730      	adds	r7, #48	; 0x30
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000384 	.word	0x20000384
 80023bc:	40010000 	.word	0x40010000

080023c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	463b      	mov	r3, r7
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <MX_TIM2_Init+0x98>)
 80023de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <MX_TIM2_Init+0x98>)
 80023e6:	f640 227e 	movw	r2, #2686	; 0xa7e
 80023ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_TIM2_Init+0x98>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <MX_TIM2_Init+0x98>)
 80023f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <MX_TIM2_Init+0x98>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002400:	4b15      	ldr	r3, [pc, #84]	; (8002458 <MX_TIM2_Init+0x98>)
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <MX_TIM2_Init+0x98>)
 8002408:	f001 fd5a 	bl	8003ec0 <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002412:	f7ff fe31 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	4619      	mov	r1, r3
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <MX_TIM2_Init+0x98>)
 8002424:	f002 f864 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800242e:	f7ff fe23 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_TIM2_Init+0x98>)
 8002440:	f002 fc3a 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800244a:	f7ff fe15 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200003cc 	.word	0x200003cc

0800245c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	; 0x30
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	2224      	movs	r2, #36	; 0x24
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f003 f84e 	bl	800550c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <MX_TIM3_Init+0xa0>)
 800247a:	4a21      	ldr	r2, [pc, #132]	; (8002500 <MX_TIM3_Init+0xa4>)
 800247c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <MX_TIM3_Init+0xa0>)
 8002480:	2200      	movs	r2, #0
 8002482:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <MX_TIM3_Init+0xa0>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <MX_TIM3_Init+0xa0>)
 800248c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002490:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <MX_TIM3_Init+0xa0>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002498:	4b18      	ldr	r3, [pc, #96]	; (80024fc <MX_TIM3_Init+0xa0>)
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800249e:	2303      	movs	r3, #3
 80024a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024a6:	2301      	movs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024b6:	2301      	movs	r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	4619      	mov	r1, r3
 80024c8:	480c      	ldr	r0, [pc, #48]	; (80024fc <MX_TIM3_Init+0xa0>)
 80024ca:	f001 fda1 	bl	8004010 <HAL_TIM_Encoder_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024d4:	f7ff fdd0 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_TIM3_Init+0xa0>)
 80024e6:	f002 fbe7 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024f0:	f7ff fdc2 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	3730      	adds	r7, #48	; 0x30
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200002ac 	.word	0x200002ac
 8002500:	40000400 	.word	0x40000400

08002504 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250a:	f107 0308 	add.w	r3, r7, #8
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002518:	463b      	mov	r3, r7
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002520:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <MX_TIM4_Init+0x90>)
 8002522:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <MX_TIM4_Init+0x94>)
 8002524:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <MX_TIM4_Init+0x90>)
 8002528:	2201      	movs	r2, #1
 800252a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <MX_TIM4_Init+0x90>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <MX_TIM4_Init+0x90>)
 8002534:	225a      	movs	r2, #90	; 0x5a
 8002536:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <MX_TIM4_Init+0x90>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <MX_TIM4_Init+0x90>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002544:	4813      	ldr	r0, [pc, #76]	; (8002594 <MX_TIM4_Init+0x90>)
 8002546:	f001 fcbb 	bl	8003ec0 <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002550:	f7ff fd92 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800255a:	f107 0308 	add.w	r3, r7, #8
 800255e:	4619      	mov	r1, r3
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <MX_TIM4_Init+0x90>)
 8002562:	f001 ffc5 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800256c:	f7ff fd84 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002578:	463b      	mov	r3, r7
 800257a:	4619      	mov	r1, r3
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_TIM4_Init+0x90>)
 800257e:	f002 fb9b 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002588:	f7ff fd76 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000264 	.word	0x20000264
 8002598:	40000800 	.word	0x40000800

0800259c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a2:	463b      	mov	r3, r7
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <MX_TIM6_Init+0x64>)
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <MX_TIM6_Init+0x68>)
 80025ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <MX_TIM6_Init+0x64>)
 80025b2:	f242 3227 	movw	r2, #8999	; 0x2327
 80025b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MX_TIM6_Init+0x64>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <MX_TIM6_Init+0x64>)
 80025c0:	2263      	movs	r2, #99	; 0x63
 80025c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <MX_TIM6_Init+0x64>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <MX_TIM6_Init+0x64>)
 80025cc:	f001 fc78 	bl	8003ec0 <HAL_TIM_Base_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80025d6:	f7ff fd4f 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025e2:	463b      	mov	r3, r7
 80025e4:	4619      	mov	r1, r3
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <MX_TIM6_Init+0x64>)
 80025e8:	f002 fb66 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80025f2:	f7ff fd41 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000033c 	.word	0x2000033c
 8002604:	40001000 	.word	0x40001000

08002608 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260e:	463b      	mov	r3, r7
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <MX_TIM7_Init+0x64>)
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <MX_TIM7_Init+0x68>)
 800261a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <MX_TIM7_Init+0x64>)
 800261e:	f242 3227 	movw	r2, #8999	; 0x2327
 8002622:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <MX_TIM7_Init+0x64>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <MX_TIM7_Init+0x64>)
 800262c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002630:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_TIM7_Init+0x64>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <MX_TIM7_Init+0x64>)
 800263a:	f001 fc41 	bl	8003ec0 <HAL_TIM_Base_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002644:	f7ff fd18 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002650:	463b      	mov	r3, r7
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_TIM7_Init+0x64>)
 8002656:	f002 fb2f 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002660:	f7ff fd0a 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000414 	.word	0x20000414
 8002670:	40001400 	.word	0x40001400

08002674 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b096      	sub	sp, #88	; 0x58
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002688:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2220      	movs	r2, #32
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 ff2d 	bl	800550c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026b2:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <MX_TIM8_Init+0x138>)
 80026b4:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <MX_TIM8_Init+0x13c>)
 80026b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 80026b8:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <MX_TIM8_Init+0x138>)
 80026ba:	22b3      	movs	r2, #179	; 0xb3
 80026bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <MX_TIM8_Init+0x138>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80026c4:	4b39      	ldr	r3, [pc, #228]	; (80027ac <MX_TIM8_Init+0x138>)
 80026c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <MX_TIM8_Init+0x138>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <MX_TIM8_Init+0x138>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <MX_TIM8_Init+0x138>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026de:	4833      	ldr	r0, [pc, #204]	; (80027ac <MX_TIM8_Init+0x138>)
 80026e0:	f001 fbee 	bl	8003ec0 <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80026ea:	f7ff fcc5 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f8:	4619      	mov	r1, r3
 80026fa:	482c      	ldr	r0, [pc, #176]	; (80027ac <MX_TIM8_Init+0x138>)
 80026fc:	f001 fef8 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002706:	f7ff fcb7 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800270a:	4828      	ldr	r0, [pc, #160]	; (80027ac <MX_TIM8_Init+0x138>)
 800270c:	f001 fc27 	bl	8003f5e <HAL_TIM_PWM_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002716:	f7ff fcaf 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002726:	4619      	mov	r1, r3
 8002728:	4820      	ldr	r0, [pc, #128]	; (80027ac <MX_TIM8_Init+0x138>)
 800272a:	f002 fac5 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002734:	f7ff fca0 	bl	8002078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002738:	2360      	movs	r3, #96	; 0x60
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800273c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002756:	220c      	movs	r2, #12
 8002758:	4619      	mov	r1, r3
 800275a:	4814      	ldr	r0, [pc, #80]	; (80027ac <MX_TIM8_Init+0x138>)
 800275c:	f001 fe06 	bl	800436c <HAL_TIM_PWM_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8002766:	f7ff fc87 	bl	8002078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800277e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002782:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4619      	mov	r1, r3
 800278c:	4807      	ldr	r0, [pc, #28]	; (80027ac <MX_TIM8_Init+0x138>)
 800278e:	f002 fb0f 	bl	8004db0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002798:	f7ff fc6e 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800279c:	4803      	ldr	r0, [pc, #12]	; (80027ac <MX_TIM8_Init+0x138>)
 800279e:	f000 f97f 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 80027a2:	bf00      	nop
 80027a4:	3758      	adds	r7, #88	; 0x58
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000021c 	.word	0x2000021c
 80027b0:	40010400 	.word	0x40010400

080027b4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
 80027c8:	615a      	str	r2, [r3, #20]
 80027ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <MX_TIM11_Init+0x94>)
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <MX_TIM11_Init+0x98>)
 80027d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <MX_TIM11_Init+0x94>)
 80027d4:	22b3      	movs	r2, #179	; 0xb3
 80027d6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <MX_TIM11_Init+0x94>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <MX_TIM11_Init+0x94>)
 80027e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e6:	4b18      	ldr	r3, [pc, #96]	; (8002848 <MX_TIM11_Init+0x94>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <MX_TIM11_Init+0x94>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80027f2:	4815      	ldr	r0, [pc, #84]	; (8002848 <MX_TIM11_Init+0x94>)
 80027f4:	f001 fb64 	bl	8003ec0 <HAL_TIM_Base_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80027fe:	f7ff fc3b 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002802:	4811      	ldr	r0, [pc, #68]	; (8002848 <MX_TIM11_Init+0x94>)
 8002804:	f001 fbab 	bl	8003f5e <HAL_TIM_PWM_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800280e:	f7ff fc33 	bl	8002078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002812:	2360      	movs	r3, #96	; 0x60
 8002814:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	4619      	mov	r1, r3
 8002828:	4807      	ldr	r0, [pc, #28]	; (8002848 <MX_TIM11_Init+0x94>)
 800282a:	f001 fd9f 	bl	800436c <HAL_TIM_PWM_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002834:	f7ff fc20 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002838:	4803      	ldr	r0, [pc, #12]	; (8002848 <MX_TIM11_Init+0x94>)
 800283a:	f000 f931 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 800283e:	bf00      	nop
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200002f4 	.word	0x200002f4
 800284c:	40014800 	.word	0x40014800

08002850 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	; 0x30
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a32      	ldr	r2, [pc, #200]	; (8002938 <HAL_TIM_Encoder_MspInit+0xe8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d12d      	bne.n	80028ce <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6453      	str	r3, [r2, #68]	; 0x44
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028bc:	2301      	movs	r3, #1
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	481e      	ldr	r0, [pc, #120]	; (8002940 <HAL_TIM_Encoder_MspInit+0xf0>)
 80028c8:	f000 fb92 	bl	8002ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028cc:	e030      	b.n	8002930 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <HAL_TIM_Encoder_MspInit+0xf4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d12b      	bne.n	8002930 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	6413      	str	r3, [r2, #64]	; 0x40
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6313      	str	r3, [r2, #48]	; 0x30
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002910:	23c0      	movs	r3, #192	; 0xc0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002920:	2302      	movs	r3, #2
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_TIM_Encoder_MspInit+0xf0>)
 800292c:	f000 fb60 	bl	8002ff0 <HAL_GPIO_Init>
}
 8002930:	bf00      	nop
 8002932:	3730      	adds	r7, #48	; 0x30
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40010000 	.word	0x40010000
 800293c:	40023800 	.word	0x40023800
 8002940:	40020000 	.word	0x40020000
 8002944:	40000400 	.word	0x40000400

08002948 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d116      	bne.n	8002988 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a49      	ldr	r2, [pc, #292]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	201c      	movs	r0, #28
 800297c:	f000 fb01 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002980:	201c      	movs	r0, #28
 8002982:	f000 fb1a 	bl	8002fba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002986:	e07a      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3f      	ldr	r2, [pc, #252]	; (8002a8c <HAL_TIM_Base_MspInit+0x144>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d116      	bne.n	80029c0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a3b      	ldr	r2, [pc, #236]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	201e      	movs	r0, #30
 80029b4:	f000 fae5 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029b8:	201e      	movs	r0, #30
 80029ba:	f000 fafe 	bl	8002fba <HAL_NVIC_EnableIRQ>
}
 80029be:	e05e      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM6)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a32      	ldr	r2, [pc, #200]	; (8002a90 <HAL_TIM_Base_MspInit+0x148>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d116      	bne.n	80029f8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 80029d4:	f043 0310 	orr.w	r3, r3, #16
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2100      	movs	r1, #0
 80029ea:	2036      	movs	r0, #54	; 0x36
 80029ec:	f000 fac9 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029f0:	2036      	movs	r0, #54	; 0x36
 80029f2:	f000 fae2 	bl	8002fba <HAL_NVIC_EnableIRQ>
}
 80029f6:	e042      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM7)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <HAL_TIM_Base_MspInit+0x14c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d116      	bne.n	8002a30 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a0c:	f043 0320 	orr.w	r3, r3, #32
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2102      	movs	r1, #2
 8002a22:	2037      	movs	r0, #55	; 0x37
 8002a24:	f000 faad 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a28:	2037      	movs	r0, #55	; 0x37
 8002a2a:	f000 fac6 	bl	8002fba <HAL_NVIC_EnableIRQ>
}
 8002a2e:	e026      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM8)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_TIM_Base_MspInit+0x150>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	e012      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM11)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_TIM_Base_MspInit+0x154>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10d      	bne.n	8002a7e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_TIM_Base_MspInit+0x140>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
}
 8002a7e:	bf00      	nop
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40001000 	.word	0x40001000
 8002a94:	40001400 	.word	0x40001400
 8002a98:	40010400 	.word	0x40010400
 8002a9c:	40014800 	.word	0x40014800

08002aa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <HAL_TIM_MspPostInit+0xb4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d11f      	bne.n	8002b02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_TIM_MspPostInit+0xb8>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <HAL_TIM_MspPostInit+0xb8>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_TIM_MspPostInit+0xb8>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002af0:	2303      	movs	r3, #3
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	4818      	ldr	r0, [pc, #96]	; (8002b5c <HAL_TIM_MspPostInit+0xbc>)
 8002afc:	f000 fa78 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002b00:	e023      	b.n	8002b4a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_TIM_MspPostInit+0xc0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d11e      	bne.n	8002b4a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_TIM_MspPostInit+0xb8>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_TIM_MspPostInit+0xb8>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_TIM_MspPostInit+0xb8>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	4807      	ldr	r0, [pc, #28]	; (8002b64 <HAL_TIM_MspPostInit+0xc4>)
 8002b46:	f000 fa53 	bl	8002ff0 <HAL_GPIO_Init>
}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40010400 	.word	0x40010400
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40014800 	.word	0x40014800
 8002b64:	40020400 	.word	0x40020400

08002b68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <MX_USART2_UART_Init+0x50>)
 8002b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <MX_USART2_UART_Init+0x4c>)
 8002ba0:	f002 f96c 	bl	8004e7c <HAL_UART_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002baa:	f7ff fa65 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000045c 	.word	0x2000045c
 8002bb8:	40004400 	.word	0x40004400

08002bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_UART_MspInit+0x84>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12b      	bne.n	8002c36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_UART_MspInit+0x88>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <HAL_UART_MspInit+0x88>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_UART_MspInit+0x88>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <HAL_UART_MspInit+0x88>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <HAL_UART_MspInit+0x88>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_UART_MspInit+0x88>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c16:	230c      	movs	r3, #12
 8002c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c26:	2307      	movs	r3, #7
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4805      	ldr	r0, [pc, #20]	; (8002c48 <HAL_UART_MspInit+0x8c>)
 8002c32:	f000 f9dd 	bl	8002ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c36:	bf00      	nop
 8002c38:	3728      	adds	r7, #40	; 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40004400 	.word	0x40004400
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40020000 	.word	0x40020000

08002c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c50:	480d      	ldr	r0, [pc, #52]	; (8002c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c52:	490e      	ldr	r1, [pc, #56]	; (8002c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c54:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0b      	ldr	r2, [pc, #44]	; (8002c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c68:	4c0b      	ldr	r4, [pc, #44]	; (8002c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c76:	f7ff fb39 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7a:	f002 fc1b 	bl	80054b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7e:	f7ff f841 	bl	8001d04 <main>
  bx  lr    
 8002c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c8c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c90:	08009628 	.word	0x08009628
  ldr r2, =_sbss
 8002c94:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c98:	200004b4 	.word	0x200004b4

08002c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c9c:	e7fe      	b.n	8002c9c <ADC_IRQHandler>
	...

08002ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_Init+0x40>)
 8002caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_Init+0x40>)
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_Init+0x40>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc8:	2003      	movs	r0, #3
 8002cca:	f000 f94f 	bl	8002f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f000 f808 	bl	8002ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd4:	f7ff f9da 	bl	800208c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023c00 	.word	0x40023c00

08002ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_InitTick+0x54>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_InitTick+0x58>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f967 	bl	8002fd6 <HAL_SYSTICK_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00e      	b.n	8002d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d80a      	bhi.n	8002d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d20:	f000 f92f 	bl	8002f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d24:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <HAL_InitTick+0x5c>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_IncTick+0x20>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_IncTick+0x24>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_IncTick+0x24>)
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000008 	.word	0x20000008
 8002d68:	200004a0 	.word	0x200004a0

08002d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_GetTick+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	200004a0 	.word	0x200004a0

08002d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	f7ff ffee 	bl	8002d6c <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d9c:	d005      	beq.n	8002daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_Delay+0x44>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002daa:	bf00      	nop
 8002dac:	f7ff ffde 	bl	8002d6c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d8f7      	bhi.n	8002dac <HAL_Delay+0x28>
  {
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000008 	.word	0x20000008

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <__NVIC_EnableIRQ+0x38>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f38:	d301      	bcc.n	8002f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00f      	b.n	8002f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <SysTick_Config+0x40>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f46:	210f      	movs	r1, #15
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f4c:	f7ff ff8e 	bl	8002e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SysTick_Config+0x40>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <SysTick_Config+0x40>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000e010 	.word	0xe000e010

08002f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff29 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f94:	f7ff ff3e 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f7ff ff8e 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff5d 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fb2:	bf00      	nop
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff31 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ffa2 	bl	8002f28 <SysTick_Config>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e165      	b.n	80032d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800300c:	2201      	movs	r2, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	f040 8154 	bne.w	80032d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d005      	beq.n	8003042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303e:	2b02      	cmp	r3, #2
 8003040:	d130      	bne.n	80030a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003078:	2201      	movs	r2, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0201 	and.w	r2, r3, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d017      	beq.n	80030e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d123      	bne.n	8003134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	08da      	lsrs	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3208      	adds	r2, #8
 80030f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	08da      	lsrs	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	69b9      	ldr	r1, [r7, #24]
 8003130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0203 	and.w	r2, r3, #3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80ae 	beq.w	80032d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_GPIO_Init+0x300>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a5c      	ldr	r2, [pc, #368]	; (80032f0 <HAL_GPIO_Init+0x300>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	4b5a      	ldr	r3, [pc, #360]	; (80032f0 <HAL_GPIO_Init+0x300>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003192:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_GPIO_Init+0x304>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4f      	ldr	r2, [pc, #316]	; (80032f8 <HAL_GPIO_Init+0x308>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d025      	beq.n	800320a <HAL_GPIO_Init+0x21a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4e      	ldr	r2, [pc, #312]	; (80032fc <HAL_GPIO_Init+0x30c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01f      	beq.n	8003206 <HAL_GPIO_Init+0x216>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4d      	ldr	r2, [pc, #308]	; (8003300 <HAL_GPIO_Init+0x310>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_GPIO_Init+0x212>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	; (8003304 <HAL_GPIO_Init+0x314>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x20e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4b      	ldr	r2, [pc, #300]	; (8003308 <HAL_GPIO_Init+0x318>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x20a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4a      	ldr	r2, [pc, #296]	; (800330c <HAL_GPIO_Init+0x31c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x206>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a49      	ldr	r2, [pc, #292]	; (8003310 <HAL_GPIO_Init+0x320>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x202>
 80031ee:	2306      	movs	r3, #6
 80031f0:	e00c      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031f2:	2307      	movs	r3, #7
 80031f4:	e00a      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x21c>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x21c>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x21c>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321c:	4935      	ldr	r1, [pc, #212]	; (80032f4 <HAL_GPIO_Init+0x304>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_GPIO_Init+0x324>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324e:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_GPIO_Init+0x324>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_GPIO_Init+0x324>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_GPIO_Init+0x324>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_GPIO_Init+0x324>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f ae96 	bls.w	800300c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40021400 	.word	0x40021400
 8003310:	40021800 	.word	0x40021800
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
 8003324:	4613      	mov	r3, r2
 8003326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003334:	e003      	b.n	800333e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	619a      	str	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_PWREx_EnableOverDrive+0x90>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003378:	f7ff fcf8 	bl	8002d6c <HAL_GetTick>
 800337c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800337e:	e009      	b.n	8003394 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003380:	f7ff fcf4 	bl	8002d6c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338e:	d901      	bls.n	8003394 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e01f      	b.n	80033d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d1ee      	bne.n	8003380 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033a2:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033a8:	f7ff fce0 	bl	8002d6c <HAL_GetTick>
 80033ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ae:	e009      	b.n	80033c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033b0:	f7ff fcdc 	bl	8002d6c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033be:	d901      	bls.n	80033c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e007      	b.n	80033d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033d0:	d1ee      	bne.n	80033b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	420e0040 	.word	0x420e0040
 80033e4:	40007000 	.word	0x40007000
 80033e8:	420e0044 	.word	0x420e0044

080033ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0cc      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003400:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d90c      	bls.n	8003428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800344a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d044      	beq.n	800350c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d119      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d003      	beq.n	80034aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e06f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e067      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4934      	ldr	r1, [pc, #208]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034dc:	f7ff fc46 	bl	8002d6c <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e4:	f7ff fc42 	bl	8002d6c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e04f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 020c 	and.w	r2, r3, #12
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1eb      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d20c      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003572:	f000 f855 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490a      	ldr	r1, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fba6 	bl	8002ce4 <HAL_InitTick>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023c00 	.word	0x40023c00
 80035a8:	40023800 	.word	0x40023800
 80035ac:	080091d8 	.word	0x080091d8
 80035b0:	20000000 	.word	0x20000000
 80035b4:	20000004 	.word	0x20000004

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	080091e8 	.word	0x080091e8

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	080091e8 	.word	0x080091e8

08003620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	b088      	sub	sp, #32
 8003626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363c:	4bce      	ldr	r3, [pc, #824]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b0c      	cmp	r3, #12
 8003646:	f200 818d 	bhi.w	8003964 <HAL_RCC_GetSysClockFreq+0x344>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <HAL_RCC_GetSysClockFreq+0x30>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003685 	.word	0x08003685
 8003654:	08003965 	.word	0x08003965
 8003658:	08003965 	.word	0x08003965
 800365c:	08003965 	.word	0x08003965
 8003660:	0800368b 	.word	0x0800368b
 8003664:	08003965 	.word	0x08003965
 8003668:	08003965 	.word	0x08003965
 800366c:	08003965 	.word	0x08003965
 8003670:	08003691 	.word	0x08003691
 8003674:	08003965 	.word	0x08003965
 8003678:	08003965 	.word	0x08003965
 800367c:	08003965 	.word	0x08003965
 8003680:	08003805 	.word	0x08003805
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4bbd      	ldr	r3, [pc, #756]	; (800397c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003686:	61bb      	str	r3, [r7, #24]
       break;
 8003688:	e16f      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800368a:	4bbd      	ldr	r3, [pc, #756]	; (8003980 <HAL_RCC_GetSysClockFreq+0x360>)
 800368c:	61bb      	str	r3, [r7, #24]
      break;
 800368e:	e16c      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003690:	4bb9      	ldr	r3, [pc, #740]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003698:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369a:	4bb7      	ldr	r3, [pc, #732]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d053      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a6:	4bb4      	ldr	r3, [pc, #720]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	461a      	mov	r2, r3
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036b6:	f04f 0100 	mov.w	r1, #0
 80036ba:	ea02 0400 	and.w	r4, r2, r0
 80036be:	603c      	str	r4, [r7, #0]
 80036c0:	400b      	ands	r3, r1
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036c8:	4620      	mov	r0, r4
 80036ca:	4629      	mov	r1, r5
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	014b      	lsls	r3, r1, #5
 80036d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036da:	0142      	lsls	r2, r0, #5
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	4623      	mov	r3, r4
 80036e2:	1ac0      	subs	r0, r0, r3
 80036e4:	462b      	mov	r3, r5
 80036e6:	eb61 0103 	sbc.w	r1, r1, r3
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	018b      	lsls	r3, r1, #6
 80036f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036f8:	0182      	lsls	r2, r0, #6
 80036fa:	1a12      	subs	r2, r2, r0
 80036fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003700:	f04f 0000 	mov.w	r0, #0
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	00d9      	lsls	r1, r3, #3
 800370a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800370e:	00d0      	lsls	r0, r2, #3
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4621      	mov	r1, r4
 8003716:	1852      	adds	r2, r2, r1
 8003718:	4629      	mov	r1, r5
 800371a:	eb43 0101 	adc.w	r1, r3, r1
 800371e:	460b      	mov	r3, r1
 8003720:	f04f 0000 	mov.w	r0, #0
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	0259      	lsls	r1, r3, #9
 800372a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800372e:	0250      	lsls	r0, r2, #9
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	461a      	mov	r2, r3
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	f7fd faa2 	bl	8000c88 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4613      	mov	r3, r2
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e04c      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374e:	4b8a      	ldr	r3, [pc, #552]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	461a      	mov	r2, r3
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800375e:	f04f 0100 	mov.w	r1, #0
 8003762:	ea02 0a00 	and.w	sl, r2, r0
 8003766:	ea03 0b01 	and.w	fp, r3, r1
 800376a:	4650      	mov	r0, sl
 800376c:	4659      	mov	r1, fp
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	014b      	lsls	r3, r1, #5
 8003778:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800377c:	0142      	lsls	r2, r0, #5
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	ebb0 000a 	subs.w	r0, r0, sl
 8003786:	eb61 010b 	sbc.w	r1, r1, fp
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	018b      	lsls	r3, r1, #6
 8003794:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003798:	0182      	lsls	r2, r0, #6
 800379a:	1a12      	subs	r2, r2, r0
 800379c:	eb63 0301 	sbc.w	r3, r3, r1
 80037a0:	f04f 0000 	mov.w	r0, #0
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	00d9      	lsls	r1, r3, #3
 80037aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ae:	00d0      	lsls	r0, r2, #3
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	eb12 020a 	adds.w	r2, r2, sl
 80037b8:	eb43 030b 	adc.w	r3, r3, fp
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0299      	lsls	r1, r3, #10
 80037c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037ca:	0290      	lsls	r0, r2, #10
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	f7fd fa54 	bl	8000c88 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037e8:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	3301      	adds	r3, #1
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	61bb      	str	r3, [r7, #24]
      break;
 8003802:	e0b2      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003804:	4b5c      	ldr	r3, [pc, #368]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800380c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800380e:	4b5a      	ldr	r3, [pc, #360]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d04d      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381a:	4b57      	ldr	r3, [pc, #348]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	461a      	mov	r2, r3
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	f240 10ff 	movw	r0, #511	; 0x1ff
 800382a:	f04f 0100 	mov.w	r1, #0
 800382e:	ea02 0800 	and.w	r8, r2, r0
 8003832:	ea03 0901 	and.w	r9, r3, r1
 8003836:	4640      	mov	r0, r8
 8003838:	4649      	mov	r1, r9
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	014b      	lsls	r3, r1, #5
 8003844:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003848:	0142      	lsls	r2, r0, #5
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	ebb0 0008 	subs.w	r0, r0, r8
 8003852:	eb61 0109 	sbc.w	r1, r1, r9
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	018b      	lsls	r3, r1, #6
 8003860:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003864:	0182      	lsls	r2, r0, #6
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	eb63 0301 	sbc.w	r3, r3, r1
 800386c:	f04f 0000 	mov.w	r0, #0
 8003870:	f04f 0100 	mov.w	r1, #0
 8003874:	00d9      	lsls	r1, r3, #3
 8003876:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800387a:	00d0      	lsls	r0, r2, #3
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	eb12 0208 	adds.w	r2, r2, r8
 8003884:	eb43 0309 	adc.w	r3, r3, r9
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	0259      	lsls	r1, r3, #9
 8003892:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003896:	0250      	lsls	r0, r2, #9
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	f7fd f9ee 	bl	8000c88 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4613      	mov	r3, r2
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e04a      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	461a      	mov	r2, r3
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	ea02 0400 	and.w	r4, r2, r0
 80038ce:	ea03 0501 	and.w	r5, r3, r1
 80038d2:	4620      	mov	r0, r4
 80038d4:	4629      	mov	r1, r5
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	014b      	lsls	r3, r1, #5
 80038e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038e4:	0142      	lsls	r2, r0, #5
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	1b00      	subs	r0, r0, r4
 80038ec:	eb61 0105 	sbc.w	r1, r1, r5
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	018b      	lsls	r3, r1, #6
 80038fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038fe:	0182      	lsls	r2, r0, #6
 8003900:	1a12      	subs	r2, r2, r0
 8003902:	eb63 0301 	sbc.w	r3, r3, r1
 8003906:	f04f 0000 	mov.w	r0, #0
 800390a:	f04f 0100 	mov.w	r1, #0
 800390e:	00d9      	lsls	r1, r3, #3
 8003910:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003914:	00d0      	lsls	r0, r2, #3
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	1912      	adds	r2, r2, r4
 800391c:	eb45 0303 	adc.w	r3, r5, r3
 8003920:	f04f 0000 	mov.w	r0, #0
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	0299      	lsls	r1, r3, #10
 800392a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800392e:	0290      	lsls	r0, r2, #10
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	461a      	mov	r2, r3
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	f7fd f9a2 	bl	8000c88 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4613      	mov	r3, r2
 800394a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_GetSysClockFreq+0x358>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	0f1b      	lsrs	r3, r3, #28
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	61bb      	str	r3, [r7, #24]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003966:	61bb      	str	r3, [r7, #24]
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	69bb      	ldr	r3, [r7, #24]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e28d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8083 	beq.w	8003aaa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039a4:	4b94      	ldr	r3, [pc, #592]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d019      	beq.n	80039e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039b0:	4b91      	ldr	r3, [pc, #580]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039bc:	4b8e      	ldr	r3, [pc, #568]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c8:	d00c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b8b      	ldr	r3, [pc, #556]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b84      	ldr	r3, [pc, #528]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x124>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d157      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e25a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x90>
 8003a06:	4b7c      	ldr	r3, [pc, #496]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a7b      	ldr	r2, [pc, #492]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xcc>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0xb4>
 8003a1e:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a75      	ldr	r2, [pc, #468]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b73      	ldr	r3, [pc, #460]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a72      	ldr	r2, [pc, #456]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xcc>
 8003a38:	4b6f      	ldr	r3, [pc, #444]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a6e      	ldr	r2, [pc, #440]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b6c      	ldr	r3, [pc, #432]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a6b      	ldr	r2, [pc, #428]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7ff f988 	bl	8002d6c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7ff f984 	bl	8002d6c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e21f      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xdc>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7ff f974 	bl	8002d6c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7ff f970 	bl	8002d6c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e20b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b57      	ldr	r3, [pc, #348]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x104>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d06f      	beq.n	8003b96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ab6:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d017      	beq.n	8003af2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d105      	bne.n	8003ada <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ace:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d11c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae6:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d116      	bne.n	8003b20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_RCC_OscConfig+0x186>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e1d3      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4937      	ldr	r1, [pc, #220]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	e03a      	b.n	8003b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b28:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x278>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7ff f91d 	bl	8002d6c <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b36:	f7ff f919 	bl	8002d6c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e1b4      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4925      	ldr	r1, [pc, #148]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HAL_RCC_OscConfig+0x278>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7ff f8fc 	bl	8002d6c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b78:	f7ff f8f8 	bl	8002d6c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e193      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d036      	beq.n	8003c10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_RCC_OscConfig+0x27c>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7ff f8dc 	bl	8002d6c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb8:	f7ff f8d8 	bl	8002d6c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e173      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x234>
 8003bd6:	e01b      	b.n	8003c10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_OscConfig+0x27c>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7ff f8c5 	bl	8002d6c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	e00e      	b.n	8003c04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be6:	f7ff f8c1 	bl	8002d6c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d907      	bls.n	8003c04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e15c      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470000 	.word	0x42470000
 8003c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	4b8a      	ldr	r3, [pc, #552]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ea      	bne.n	8003be6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8097 	beq.w	8003d4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c22:	4b83      	ldr	r3, [pc, #524]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a7e      	ldr	r2, [pc, #504]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b7c      	ldr	r3, [pc, #496]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4e:	4b79      	ldr	r3, [pc, #484]	; (8003e34 <HAL_RCC_OscConfig+0x4b0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCC_OscConfig+0x4b0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x4b0>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7ff f881 	bl	8002d6c <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7ff f87d 	bl	8002d6c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e118      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b6c      	ldr	r3, [pc, #432]	; (8003e34 <HAL_RCC_OscConfig+0x4b0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x31e>
 8003c94:	4b66      	ldr	r3, [pc, #408]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a65      	ldr	r2, [pc, #404]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCC_OscConfig+0x358>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x340>
 8003caa:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a60      	ldr	r2, [pc, #384]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	4b5e      	ldr	r3, [pc, #376]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a5d      	ldr	r2, [pc, #372]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0x358>
 8003cc4:	4b5a      	ldr	r3, [pc, #360]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a59      	ldr	r2, [pc, #356]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003cd6:	f023 0304 	bic.w	r3, r3, #4
 8003cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7ff f842 	bl	8002d6c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7ff f83e 	bl	8002d6c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0d7      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	4b4b      	ldr	r3, [pc, #300]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ee      	beq.n	8003cec <HAL_RCC_OscConfig+0x368>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7ff f82c 	bl	8002d6c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7ff f828 	bl	8002d6c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0c1      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2e:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ee      	bne.n	8003d18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4a3a      	ldr	r2, [pc, #232]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80ad 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d060      	beq.n	8003e24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d145      	bne.n	8003df6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b33      	ldr	r3, [pc, #204]	; (8003e38 <HAL_RCC_OscConfig+0x4b4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe fffc 	bl	8002d6c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe fff8 	bl	8002d6c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e093      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	071b      	lsls	r3, r3, #28
 8003dc2:	491b      	ldr	r1, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_RCC_OscConfig+0x4b4>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe ffcd 	bl	8002d6c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe ffc9 	bl	8002d6c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e064      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de8:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x452>
 8003df4:	e05c      	b.n	8003eb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <HAL_RCC_OscConfig+0x4b4>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe ffb6 	bl	8002d6c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fe ffb2 	bl	8002d6c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e04d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCC_OscConfig+0x4ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x480>
 8003e22:	e045      	b.n	8003eb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e040      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40007000 	.word	0x40007000
 8003e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <HAL_RCC_OscConfig+0x538>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d030      	beq.n	8003eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d129      	bne.n	8003eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d122      	bne.n	8003eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d119      	bne.n	8003eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d10f      	bne.n	8003eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800

08003ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e041      	b.n	8003f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fe fd2e 	bl	8002948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f000 fbf0 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e041      	b.n	8003ff4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f839 	bl	8003ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f000 fba1 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e097      	b.n	8004154 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fe fc09 	bl	8002850 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004054:	f023 0307 	bic.w	r3, r3, #7
 8004058:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f000 fb3d 	bl	80046e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	4313      	orrs	r3, r2
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80040b0:	f023 030c 	bic.w	r3, r3, #12
 80040b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	4313      	orrs	r3, r2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	011a      	lsls	r2, r3, #4
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	031b      	lsls	r3, r3, #12
 80040e0:	4313      	orrs	r3, r2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80040f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	4313      	orrs	r3, r2
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b02      	cmp	r3, #2
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0202 	mvn.w	r2, #2
 8004188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa81 	bl	80046a6 <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa73 	bl	8004692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa84 	bl	80046ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0204 	mvn.w	r2, #4
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fa57 	bl	80046a6 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa49 	bl	8004692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa5a 	bl	80046ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0208 	mvn.w	r2, #8
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2204      	movs	r2, #4
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa2d 	bl	80046a6 <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa1f 	bl	8004692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa30 	bl	80046ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b10      	cmp	r3, #16
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0210 	mvn.w	r2, #16
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2208      	movs	r2, #8
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fa03 	bl	80046a6 <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f9f5 	bl	8004692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa06 	bl	80046ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0201 	mvn.w	r2, #1
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9cf 	bl	800467e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d10e      	bne.n	800430c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d107      	bne.n	800430c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fdae 	bl	8004e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d107      	bne.n	8004338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9cb 	bl	80046ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b20      	cmp	r3, #32
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b20      	cmp	r3, #32
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0220 	mvn.w	r2, #32
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fd78 	bl	8004e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004386:	2302      	movs	r3, #2
 8004388:	e0ae      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b0c      	cmp	r3, #12
 8004396:	f200 809f 	bhi.w	80044d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043d5 	.word	0x080043d5
 80043a4:	080044d9 	.word	0x080044d9
 80043a8:	080044d9 	.word	0x080044d9
 80043ac:	080044d9 	.word	0x080044d9
 80043b0:	08004415 	.word	0x08004415
 80043b4:	080044d9 	.word	0x080044d9
 80043b8:	080044d9 	.word	0x080044d9
 80043bc:	080044d9 	.word	0x080044d9
 80043c0:	08004457 	.word	0x08004457
 80043c4:	080044d9 	.word	0x080044d9
 80043c8:	080044d9 	.word	0x080044d9
 80043cc:	080044d9 	.word	0x080044d9
 80043d0:	08004497 	.word	0x08004497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fa22 	bl	8004824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0208 	orr.w	r2, r2, #8
 80043ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0204 	bic.w	r2, r2, #4
 80043fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6999      	ldr	r1, [r3, #24]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	619a      	str	r2, [r3, #24]
      break;
 8004412:	e064      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fa72 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	021a      	lsls	r2, r3, #8
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	619a      	str	r2, [r3, #24]
      break;
 8004454:	e043      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fac7 	bl	80049f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0208 	orr.w	r2, r2, #8
 8004470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0204 	bic.w	r2, r2, #4
 8004480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69d9      	ldr	r1, [r3, #28]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	61da      	str	r2, [r3, #28]
      break;
 8004494:	e023      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb1b 	bl	8004ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	021a      	lsls	r2, r3, #8
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	61da      	str	r2, [r3, #28]
      break;
 80044d6:	e002      	b.n	80044de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
      break;
 80044dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIM_ConfigClockSource+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e0b4      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x186>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d03e      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	f200 8087 	bhi.w	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	f000 8086 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x172>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d87f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b70      	cmp	r3, #112	; 0x70
 800455e:	d01a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xa6>
 8004560:	2b70      	cmp	r3, #112	; 0x70
 8004562:	d87b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d050      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x11a>
 8004568:	2b60      	cmp	r3, #96	; 0x60
 800456a:	d877      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b50      	cmp	r3, #80	; 0x50
 800456e:	d03c      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xfa>
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d873      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d058      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x13a>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d86f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b30      	cmp	r3, #48	; 0x30
 800457e:	d064      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d86b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d060      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d867      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d05a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	e062      	b.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f000 fb67 	bl	8004c78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]
      break;
 80045c2:	e04f      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f000 fb50 	bl	8004c78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e6:	609a      	str	r2, [r3, #8]
      break;
 80045e8:	e03c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 fac4 	bl	8004b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2150      	movs	r1, #80	; 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fb1d 	bl	8004c42 <TIM_ITRx_SetConfig>
      break;
 8004608:	e02c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	461a      	mov	r2, r3
 8004618:	f000 fae3 	bl	8004be2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2160      	movs	r1, #96	; 0x60
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fb0d 	bl	8004c42 <TIM_ITRx_SetConfig>
      break;
 8004628:	e01c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	461a      	mov	r2, r3
 8004638:	f000 faa4 	bl	8004b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fafd 	bl	8004c42 <TIM_ITRx_SetConfig>
      break;
 8004648:	e00c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 faf4 	bl	8004c42 <TIM_ITRx_SetConfig>
      break;
 800465a:	e003      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e000      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a40      	ldr	r2, [pc, #256]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d00f      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <TIM_Base_SetConfig+0x118>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <TIM_Base_SetConfig+0x120>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3a      	ldr	r2, [pc, #232]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d027      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2c      	ldr	r2, [pc, #176]	; (80047fc <TIM_Base_SetConfig+0x118>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d023      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01f      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <TIM_Base_SetConfig+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a29      	ldr	r2, [pc, #164]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d017      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a28      	ldr	r2, [pc, #160]	; (800480c <TIM_Base_SetConfig+0x128>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <TIM_Base_SetConfig+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a26      	ldr	r2, [pc, #152]	; (8004814 <TIM_Base_SetConfig+0x130>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a25      	ldr	r2, [pc, #148]	; (8004818 <TIM_Base_SetConfig+0x134>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <TIM_Base_SetConfig+0x138>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a23      	ldr	r2, [pc, #140]	; (8004820 <TIM_Base_SetConfig+0x13c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d108      	bne.n	80047a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0xf8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <TIM_Base_SetConfig+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40010400 	.word	0x40010400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	40001800 	.word	0x40001800
 800481c:	40001c00 	.word	0x40001c00
 8004820:	40002000 	.word	0x40002000

08004824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 0302 	bic.w	r3, r3, #2
 800486c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a20      	ldr	r2, [pc, #128]	; (80048fc <TIM_OC1_SetConfig+0xd8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC1_SetConfig+0x64>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <TIM_OC1_SetConfig+0xdc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d10c      	bne.n	80048a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0308 	bic.w	r3, r3, #8
 800488e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	; (80048fc <TIM_OC1_SetConfig+0xd8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC1_SetConfig+0x8e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a14      	ldr	r2, [pc, #80]	; (8004900 <TIM_OC1_SetConfig+0xdc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d111      	bne.n	80048d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010400 	.word	0x40010400

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0210 	bic.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <TIM_OC2_SetConfig+0xe4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC2_SetConfig+0x68>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a21      	ldr	r2, [pc, #132]	; (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10d      	bne.n	8004988 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <TIM_OC2_SetConfig+0xe4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC2_SetConfig+0x94>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d113      	bne.n	80049c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800499e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a21      	ldr	r2, [pc, #132]	; (8004ad0 <TIM_OC3_SetConfig+0xe0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_OC3_SetConfig+0x66>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <TIM_OC3_SetConfig+0xe4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10d      	bne.n	8004a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <TIM_OC3_SetConfig+0xe0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC3_SetConfig+0x92>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <TIM_OC3_SetConfig+0xe4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d113      	bne.n	8004aaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <TIM_OC4_SetConfig+0xa4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC4_SetConfig+0x68>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <TIM_OC4_SetConfig+0xa8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d109      	bne.n	8004b54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40010400 	.word	0x40010400

08004b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f023 030a 	bic.w	r3, r3, #10
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b087      	sub	sp, #28
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f023 0210 	bic.w	r2, r3, #16
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	031b      	lsls	r3, r3, #12
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	621a      	str	r2, [r3, #32]
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f043 0307 	orr.w	r3, r3, #7
 8004c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	021a      	lsls	r2, r3, #8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	609a      	str	r2, [r3, #8]
}
 8004cac:	bf00      	nop
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e05a      	b.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1c:	d01d      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d018      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1a      	ldr	r2, [pc, #104]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10c      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40010400 	.word	0x40010400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40001800 	.word	0x40001800

08004db0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e03d      	b.n	8004e48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e03f      	b.n	8004f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fd fe8a 	bl	8002bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2224      	movs	r2, #36	; 0x24
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f929 	bl	8005118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b08a      	sub	sp, #40	; 0x28
 8004f1a:	af02      	add	r7, sp, #8
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d17c      	bne.n	8005030 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_UART_Transmit+0x2c>
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e075      	b.n	8005032 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_UART_Transmit+0x3e>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e06e      	b.n	8005032 <HAL_UART_Transmit+0x11c>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2221      	movs	r2, #33	; 0x21
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f6a:	f7fd feff 	bl	8002d6c <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	88fa      	ldrh	r2, [r7, #6]
 8004f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	88fa      	ldrh	r2, [r7, #6]
 8004f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f84:	d108      	bne.n	8004f98 <HAL_UART_Transmit+0x82>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	e003      	b.n	8004fa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fa8:	e02a      	b.n	8005000 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2180      	movs	r1, #128	; 0x80
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f840 	bl	800503a <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e036      	b.n	8005032 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10b      	bne.n	8004fe2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	3302      	adds	r3, #2
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	e007      	b.n	8004ff2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1cf      	bne.n	8004faa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2200      	movs	r2, #0
 8005012:	2140      	movs	r1, #64	; 0x40
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f810 	bl	800503a <UART_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e006      	b.n	8005032 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e000      	b.n	8005032 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005030:	2302      	movs	r3, #2
  }
}
 8005032:	4618      	mov	r0, r3
 8005034:	3720      	adds	r7, #32
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b090      	sub	sp, #64	; 0x40
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504a:	e050      	b.n	80050ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005052:	d04c      	beq.n	80050ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0x30>
 800505a:	f7fd fe87 	bl	8002d6c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005066:	429a      	cmp	r2, r3
 8005068:	d241      	bcs.n	80050ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800508a:	637a      	str	r2, [r7, #52]	; 0x34
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e5      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	613b      	str	r3, [r7, #16]
   return(result);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3314      	adds	r3, #20
 80050bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050be:	623a      	str	r2, [r7, #32]
 80050c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	69f9      	ldr	r1, [r7, #28]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e00f      	b.n	800510e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4013      	ands	r3, r2
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2300      	movne	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	429a      	cmp	r2, r3
 800510a:	d09f      	beq.n	800504c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3740      	adds	r7, #64	; 0x40
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	b09f      	sub	sp, #124	; 0x7c
 800511e:	af00      	add	r7, sp, #0
 8005120:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800512c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512e:	68d9      	ldr	r1, [r3, #12]
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	ea40 0301 	orr.w	r3, r0, r1
 8005138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800513a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	431a      	orrs	r2, r3
 8005144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	431a      	orrs	r2, r3
 800514a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	4313      	orrs	r3, r2
 8005150:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800515c:	f021 010c 	bic.w	r1, r1, #12
 8005160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005166:	430b      	orrs	r3, r1
 8005168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800516a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005176:	6999      	ldr	r1, [r3, #24]
 8005178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	ea40 0301 	orr.w	r3, r0, r1
 8005180:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4bc5      	ldr	r3, [pc, #788]	; (800549c <UART_SetConfig+0x384>)
 8005188:	429a      	cmp	r2, r3
 800518a:	d004      	beq.n	8005196 <UART_SetConfig+0x7e>
 800518c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4bc3      	ldr	r3, [pc, #780]	; (80054a0 <UART_SetConfig+0x388>)
 8005192:	429a      	cmp	r2, r3
 8005194:	d103      	bne.n	800519e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005196:	f7fe fa2f 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 800519a:	6778      	str	r0, [r7, #116]	; 0x74
 800519c:	e002      	b.n	80051a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800519e:	f7fe fa17 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80051a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ac:	f040 80b6 	bne.w	800531c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b2:	461c      	mov	r4, r3
 80051b4:	f04f 0500 	mov.w	r5, #0
 80051b8:	4622      	mov	r2, r4
 80051ba:	462b      	mov	r3, r5
 80051bc:	1891      	adds	r1, r2, r2
 80051be:	6439      	str	r1, [r7, #64]	; 0x40
 80051c0:	415b      	adcs	r3, r3
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
 80051c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051c8:	1912      	adds	r2, r2, r4
 80051ca:	eb45 0303 	adc.w	r3, r5, r3
 80051ce:	f04f 0000 	mov.w	r0, #0
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	00d9      	lsls	r1, r3, #3
 80051d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051dc:	00d0      	lsls	r0, r2, #3
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	1911      	adds	r1, r2, r4
 80051e4:	6639      	str	r1, [r7, #96]	; 0x60
 80051e6:	416b      	adcs	r3, r5
 80051e8:	667b      	str	r3, [r7, #100]	; 0x64
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	1891      	adds	r1, r2, r2
 80051f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80051f8:	415b      	adcs	r3, r3
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005200:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005204:	f7fb fd40 	bl	8000c88 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4ba5      	ldr	r3, [pc, #660]	; (80054a4 <UART_SetConfig+0x38c>)
 800520e:	fba3 2302 	umull	r2, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	011e      	lsls	r6, r3, #4
 8005216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005218:	461c      	mov	r4, r3
 800521a:	f04f 0500 	mov.w	r5, #0
 800521e:	4622      	mov	r2, r4
 8005220:	462b      	mov	r3, r5
 8005222:	1891      	adds	r1, r2, r2
 8005224:	6339      	str	r1, [r7, #48]	; 0x30
 8005226:	415b      	adcs	r3, r3
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
 800522a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800522e:	1912      	adds	r2, r2, r4
 8005230:	eb45 0303 	adc.w	r3, r5, r3
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	00d9      	lsls	r1, r3, #3
 800523e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005242:	00d0      	lsls	r0, r2, #3
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	1911      	adds	r1, r2, r4
 800524a:	65b9      	str	r1, [r7, #88]	; 0x58
 800524c:	416b      	adcs	r3, r5
 800524e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	461a      	mov	r2, r3
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	1891      	adds	r1, r2, r2
 800525c:	62b9      	str	r1, [r7, #40]	; 0x28
 800525e:	415b      	adcs	r3, r3
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005262:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005266:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800526a:	f7fb fd0d 	bl	8000c88 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4b8c      	ldr	r3, [pc, #560]	; (80054a4 <UART_SetConfig+0x38c>)
 8005274:	fba3 1302 	umull	r1, r3, r3, r2
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	2164      	movs	r1, #100	; 0x64
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	3332      	adds	r3, #50	; 0x32
 8005286:	4a87      	ldr	r2, [pc, #540]	; (80054a4 <UART_SetConfig+0x38c>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005294:	441e      	add	r6, r3
 8005296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005298:	4618      	mov	r0, r3
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	1894      	adds	r4, r2, r2
 80052a4:	623c      	str	r4, [r7, #32]
 80052a6:	415b      	adcs	r3, r3
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ae:	1812      	adds	r2, r2, r0
 80052b0:	eb41 0303 	adc.w	r3, r1, r3
 80052b4:	f04f 0400 	mov.w	r4, #0
 80052b8:	f04f 0500 	mov.w	r5, #0
 80052bc:	00dd      	lsls	r5, r3, #3
 80052be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052c2:	00d4      	lsls	r4, r2, #3
 80052c4:	4622      	mov	r2, r4
 80052c6:	462b      	mov	r3, r5
 80052c8:	1814      	adds	r4, r2, r0
 80052ca:	653c      	str	r4, [r7, #80]	; 0x50
 80052cc:	414b      	adcs	r3, r1
 80052ce:	657b      	str	r3, [r7, #84]	; 0x54
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	1891      	adds	r1, r2, r2
 80052dc:	61b9      	str	r1, [r7, #24]
 80052de:	415b      	adcs	r3, r3
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052ea:	f7fb fccd 	bl	8000c88 <__aeabi_uldivmod>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4b6c      	ldr	r3, [pc, #432]	; (80054a4 <UART_SetConfig+0x38c>)
 80052f4:	fba3 1302 	umull	r1, r3, r3, r2
 80052f8:	095b      	lsrs	r3, r3, #5
 80052fa:	2164      	movs	r1, #100	; 0x64
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	3332      	adds	r3, #50	; 0x32
 8005306:	4a67      	ldr	r2, [pc, #412]	; (80054a4 <UART_SetConfig+0x38c>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	f003 0207 	and.w	r2, r3, #7
 8005312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4432      	add	r2, r6
 8005318:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800531a:	e0b9      	b.n	8005490 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800531c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531e:	461c      	mov	r4, r3
 8005320:	f04f 0500 	mov.w	r5, #0
 8005324:	4622      	mov	r2, r4
 8005326:	462b      	mov	r3, r5
 8005328:	1891      	adds	r1, r2, r2
 800532a:	6139      	str	r1, [r7, #16]
 800532c:	415b      	adcs	r3, r3
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005334:	1912      	adds	r2, r2, r4
 8005336:	eb45 0303 	adc.w	r3, r5, r3
 800533a:	f04f 0000 	mov.w	r0, #0
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	00d9      	lsls	r1, r3, #3
 8005344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005348:	00d0      	lsls	r0, r2, #3
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	eb12 0804 	adds.w	r8, r2, r4
 8005352:	eb43 0905 	adc.w	r9, r3, r5
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4618      	mov	r0, r3
 800535c:	f04f 0100 	mov.w	r1, #0
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	008b      	lsls	r3, r1, #2
 800536a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800536e:	0082      	lsls	r2, r0, #2
 8005370:	4640      	mov	r0, r8
 8005372:	4649      	mov	r1, r9
 8005374:	f7fb fc88 	bl	8000c88 <__aeabi_uldivmod>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4b49      	ldr	r3, [pc, #292]	; (80054a4 <UART_SetConfig+0x38c>)
 800537e:	fba3 2302 	umull	r2, r3, r3, r2
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	011e      	lsls	r6, r3, #4
 8005386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005388:	4618      	mov	r0, r3
 800538a:	f04f 0100 	mov.w	r1, #0
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	1894      	adds	r4, r2, r2
 8005394:	60bc      	str	r4, [r7, #8]
 8005396:	415b      	adcs	r3, r3
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800539e:	1812      	adds	r2, r2, r0
 80053a0:	eb41 0303 	adc.w	r3, r1, r3
 80053a4:	f04f 0400 	mov.w	r4, #0
 80053a8:	f04f 0500 	mov.w	r5, #0
 80053ac:	00dd      	lsls	r5, r3, #3
 80053ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053b2:	00d4      	lsls	r4, r2, #3
 80053b4:	4622      	mov	r2, r4
 80053b6:	462b      	mov	r3, r5
 80053b8:	1814      	adds	r4, r2, r0
 80053ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80053bc:	414b      	adcs	r3, r1
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	008b      	lsls	r3, r1, #2
 80053d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053d8:	0082      	lsls	r2, r0, #2
 80053da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053de:	f7fb fc53 	bl	8000c88 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4b2f      	ldr	r3, [pc, #188]	; (80054a4 <UART_SetConfig+0x38c>)
 80053e8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	2164      	movs	r1, #100	; 0x64
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	3332      	adds	r3, #50	; 0x32
 80053fa:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <UART_SetConfig+0x38c>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005406:	441e      	add	r6, r3
 8005408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800540a:	4618      	mov	r0, r3
 800540c:	f04f 0100 	mov.w	r1, #0
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	1894      	adds	r4, r2, r2
 8005416:	603c      	str	r4, [r7, #0]
 8005418:	415b      	adcs	r3, r3
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005420:	1812      	adds	r2, r2, r0
 8005422:	eb41 0303 	adc.w	r3, r1, r3
 8005426:	f04f 0400 	mov.w	r4, #0
 800542a:	f04f 0500 	mov.w	r5, #0
 800542e:	00dd      	lsls	r5, r3, #3
 8005430:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005434:	00d4      	lsls	r4, r2, #3
 8005436:	4622      	mov	r2, r4
 8005438:	462b      	mov	r3, r5
 800543a:	eb12 0a00 	adds.w	sl, r2, r0
 800543e:	eb43 0b01 	adc.w	fp, r3, r1
 8005442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4618      	mov	r0, r3
 8005448:	f04f 0100 	mov.w	r1, #0
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	008b      	lsls	r3, r1, #2
 8005456:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800545a:	0082      	lsls	r2, r0, #2
 800545c:	4650      	mov	r0, sl
 800545e:	4659      	mov	r1, fp
 8005460:	f7fb fc12 	bl	8000c88 <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <UART_SetConfig+0x38c>)
 800546a:	fba3 1302 	umull	r1, r3, r3, r2
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2164      	movs	r1, #100	; 0x64
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	3332      	adds	r3, #50	; 0x32
 800547c:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <UART_SetConfig+0x38c>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	f003 020f 	and.w	r2, r3, #15
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4432      	add	r2, r6
 800548e:	609a      	str	r2, [r3, #8]
}
 8005490:	bf00      	nop
 8005492:	377c      	adds	r7, #124	; 0x7c
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	bf00      	nop
 800549c:	40011000 	.word	0x40011000
 80054a0:	40011400 	.word	0x40011400
 80054a4:	51eb851f 	.word	0x51eb851f

080054a8 <__errno>:
 80054a8:	4b01      	ldr	r3, [pc, #4]	; (80054b0 <__errno+0x8>)
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	2000000c 	.word	0x2000000c

080054b4 <__libc_init_array>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4d0d      	ldr	r5, [pc, #52]	; (80054ec <__libc_init_array+0x38>)
 80054b8:	4c0d      	ldr	r4, [pc, #52]	; (80054f0 <__libc_init_array+0x3c>)
 80054ba:	1b64      	subs	r4, r4, r5
 80054bc:	10a4      	asrs	r4, r4, #2
 80054be:	2600      	movs	r6, #0
 80054c0:	42a6      	cmp	r6, r4
 80054c2:	d109      	bne.n	80054d8 <__libc_init_array+0x24>
 80054c4:	4d0b      	ldr	r5, [pc, #44]	; (80054f4 <__libc_init_array+0x40>)
 80054c6:	4c0c      	ldr	r4, [pc, #48]	; (80054f8 <__libc_init_array+0x44>)
 80054c8:	f003 fdac 	bl	8009024 <_init>
 80054cc:	1b64      	subs	r4, r4, r5
 80054ce:	10a4      	asrs	r4, r4, #2
 80054d0:	2600      	movs	r6, #0
 80054d2:	42a6      	cmp	r6, r4
 80054d4:	d105      	bne.n	80054e2 <__libc_init_array+0x2e>
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054dc:	4798      	blx	r3
 80054de:	3601      	adds	r6, #1
 80054e0:	e7ee      	b.n	80054c0 <__libc_init_array+0xc>
 80054e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e6:	4798      	blx	r3
 80054e8:	3601      	adds	r6, #1
 80054ea:	e7f2      	b.n	80054d2 <__libc_init_array+0x1e>
 80054ec:	08009620 	.word	0x08009620
 80054f0:	08009620 	.word	0x08009620
 80054f4:	08009620 	.word	0x08009620
 80054f8:	08009624 	.word	0x08009624

080054fc <malloc>:
 80054fc:	4b02      	ldr	r3, [pc, #8]	; (8005508 <malloc+0xc>)
 80054fe:	4601      	mov	r1, r0
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	f000 b85b 	b.w	80055bc <_malloc_r>
 8005506:	bf00      	nop
 8005508:	2000000c 	.word	0x2000000c

0800550c <memset>:
 800550c:	4402      	add	r2, r0
 800550e:	4603      	mov	r3, r0
 8005510:	4293      	cmp	r3, r2
 8005512:	d100      	bne.n	8005516 <memset+0xa>
 8005514:	4770      	bx	lr
 8005516:	f803 1b01 	strb.w	r1, [r3], #1
 800551a:	e7f9      	b.n	8005510 <memset+0x4>

0800551c <_free_r>:
 800551c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800551e:	2900      	cmp	r1, #0
 8005520:	d048      	beq.n	80055b4 <_free_r+0x98>
 8005522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005526:	9001      	str	r0, [sp, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f1a1 0404 	sub.w	r4, r1, #4
 800552e:	bfb8      	it	lt
 8005530:	18e4      	addlt	r4, r4, r3
 8005532:	f001 ff0f 	bl	8007354 <__malloc_lock>
 8005536:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <_free_r+0x9c>)
 8005538:	9801      	ldr	r0, [sp, #4]
 800553a:	6813      	ldr	r3, [r2, #0]
 800553c:	4615      	mov	r5, r2
 800553e:	b933      	cbnz	r3, 800554e <_free_r+0x32>
 8005540:	6063      	str	r3, [r4, #4]
 8005542:	6014      	str	r4, [r2, #0]
 8005544:	b003      	add	sp, #12
 8005546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800554a:	f001 bf09 	b.w	8007360 <__malloc_unlock>
 800554e:	42a3      	cmp	r3, r4
 8005550:	d90b      	bls.n	800556a <_free_r+0x4e>
 8005552:	6821      	ldr	r1, [r4, #0]
 8005554:	1862      	adds	r2, r4, r1
 8005556:	4293      	cmp	r3, r2
 8005558:	bf04      	itt	eq
 800555a:	681a      	ldreq	r2, [r3, #0]
 800555c:	685b      	ldreq	r3, [r3, #4]
 800555e:	6063      	str	r3, [r4, #4]
 8005560:	bf04      	itt	eq
 8005562:	1852      	addeq	r2, r2, r1
 8005564:	6022      	streq	r2, [r4, #0]
 8005566:	602c      	str	r4, [r5, #0]
 8005568:	e7ec      	b.n	8005544 <_free_r+0x28>
 800556a:	461a      	mov	r2, r3
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	b10b      	cbz	r3, 8005574 <_free_r+0x58>
 8005570:	42a3      	cmp	r3, r4
 8005572:	d9fa      	bls.n	800556a <_free_r+0x4e>
 8005574:	6811      	ldr	r1, [r2, #0]
 8005576:	1855      	adds	r5, r2, r1
 8005578:	42a5      	cmp	r5, r4
 800557a:	d10b      	bne.n	8005594 <_free_r+0x78>
 800557c:	6824      	ldr	r4, [r4, #0]
 800557e:	4421      	add	r1, r4
 8005580:	1854      	adds	r4, r2, r1
 8005582:	42a3      	cmp	r3, r4
 8005584:	6011      	str	r1, [r2, #0]
 8005586:	d1dd      	bne.n	8005544 <_free_r+0x28>
 8005588:	681c      	ldr	r4, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	6053      	str	r3, [r2, #4]
 800558e:	4421      	add	r1, r4
 8005590:	6011      	str	r1, [r2, #0]
 8005592:	e7d7      	b.n	8005544 <_free_r+0x28>
 8005594:	d902      	bls.n	800559c <_free_r+0x80>
 8005596:	230c      	movs	r3, #12
 8005598:	6003      	str	r3, [r0, #0]
 800559a:	e7d3      	b.n	8005544 <_free_r+0x28>
 800559c:	6825      	ldr	r5, [r4, #0]
 800559e:	1961      	adds	r1, r4, r5
 80055a0:	428b      	cmp	r3, r1
 80055a2:	bf04      	itt	eq
 80055a4:	6819      	ldreq	r1, [r3, #0]
 80055a6:	685b      	ldreq	r3, [r3, #4]
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	bf04      	itt	eq
 80055ac:	1949      	addeq	r1, r1, r5
 80055ae:	6021      	streq	r1, [r4, #0]
 80055b0:	6054      	str	r4, [r2, #4]
 80055b2:	e7c7      	b.n	8005544 <_free_r+0x28>
 80055b4:	b003      	add	sp, #12
 80055b6:	bd30      	pop	{r4, r5, pc}
 80055b8:	20000200 	.word	0x20000200

080055bc <_malloc_r>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	1ccd      	adds	r5, r1, #3
 80055c0:	f025 0503 	bic.w	r5, r5, #3
 80055c4:	3508      	adds	r5, #8
 80055c6:	2d0c      	cmp	r5, #12
 80055c8:	bf38      	it	cc
 80055ca:	250c      	movcc	r5, #12
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	4606      	mov	r6, r0
 80055d0:	db01      	blt.n	80055d6 <_malloc_r+0x1a>
 80055d2:	42a9      	cmp	r1, r5
 80055d4:	d903      	bls.n	80055de <_malloc_r+0x22>
 80055d6:	230c      	movs	r3, #12
 80055d8:	6033      	str	r3, [r6, #0]
 80055da:	2000      	movs	r0, #0
 80055dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055de:	f001 feb9 	bl	8007354 <__malloc_lock>
 80055e2:	4921      	ldr	r1, [pc, #132]	; (8005668 <_malloc_r+0xac>)
 80055e4:	680a      	ldr	r2, [r1, #0]
 80055e6:	4614      	mov	r4, r2
 80055e8:	b99c      	cbnz	r4, 8005612 <_malloc_r+0x56>
 80055ea:	4f20      	ldr	r7, [pc, #128]	; (800566c <_malloc_r+0xb0>)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	b923      	cbnz	r3, 80055fa <_malloc_r+0x3e>
 80055f0:	4621      	mov	r1, r4
 80055f2:	4630      	mov	r0, r6
 80055f4:	f000 fd34 	bl	8006060 <_sbrk_r>
 80055f8:	6038      	str	r0, [r7, #0]
 80055fa:	4629      	mov	r1, r5
 80055fc:	4630      	mov	r0, r6
 80055fe:	f000 fd2f 	bl	8006060 <_sbrk_r>
 8005602:	1c43      	adds	r3, r0, #1
 8005604:	d123      	bne.n	800564e <_malloc_r+0x92>
 8005606:	230c      	movs	r3, #12
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	4630      	mov	r0, r6
 800560c:	f001 fea8 	bl	8007360 <__malloc_unlock>
 8005610:	e7e3      	b.n	80055da <_malloc_r+0x1e>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	1b5b      	subs	r3, r3, r5
 8005616:	d417      	bmi.n	8005648 <_malloc_r+0x8c>
 8005618:	2b0b      	cmp	r3, #11
 800561a:	d903      	bls.n	8005624 <_malloc_r+0x68>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	441c      	add	r4, r3
 8005620:	6025      	str	r5, [r4, #0]
 8005622:	e004      	b.n	800562e <_malloc_r+0x72>
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	42a2      	cmp	r2, r4
 8005628:	bf0c      	ite	eq
 800562a:	600b      	streq	r3, [r1, #0]
 800562c:	6053      	strne	r3, [r2, #4]
 800562e:	4630      	mov	r0, r6
 8005630:	f001 fe96 	bl	8007360 <__malloc_unlock>
 8005634:	f104 000b 	add.w	r0, r4, #11
 8005638:	1d23      	adds	r3, r4, #4
 800563a:	f020 0007 	bic.w	r0, r0, #7
 800563e:	1ac2      	subs	r2, r0, r3
 8005640:	d0cc      	beq.n	80055dc <_malloc_r+0x20>
 8005642:	1a1b      	subs	r3, r3, r0
 8005644:	50a3      	str	r3, [r4, r2]
 8005646:	e7c9      	b.n	80055dc <_malloc_r+0x20>
 8005648:	4622      	mov	r2, r4
 800564a:	6864      	ldr	r4, [r4, #4]
 800564c:	e7cc      	b.n	80055e8 <_malloc_r+0x2c>
 800564e:	1cc4      	adds	r4, r0, #3
 8005650:	f024 0403 	bic.w	r4, r4, #3
 8005654:	42a0      	cmp	r0, r4
 8005656:	d0e3      	beq.n	8005620 <_malloc_r+0x64>
 8005658:	1a21      	subs	r1, r4, r0
 800565a:	4630      	mov	r0, r6
 800565c:	f000 fd00 	bl	8006060 <_sbrk_r>
 8005660:	3001      	adds	r0, #1
 8005662:	d1dd      	bne.n	8005620 <_malloc_r+0x64>
 8005664:	e7cf      	b.n	8005606 <_malloc_r+0x4a>
 8005666:	bf00      	nop
 8005668:	20000200 	.word	0x20000200
 800566c:	20000204 	.word	0x20000204

08005670 <__cvt>:
 8005670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	ec55 4b10 	vmov	r4, r5, d0
 8005678:	2d00      	cmp	r5, #0
 800567a:	460e      	mov	r6, r1
 800567c:	4619      	mov	r1, r3
 800567e:	462b      	mov	r3, r5
 8005680:	bfbb      	ittet	lt
 8005682:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005686:	461d      	movlt	r5, r3
 8005688:	2300      	movge	r3, #0
 800568a:	232d      	movlt	r3, #45	; 0x2d
 800568c:	700b      	strb	r3, [r1, #0]
 800568e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005690:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005694:	4691      	mov	r9, r2
 8005696:	f023 0820 	bic.w	r8, r3, #32
 800569a:	bfbc      	itt	lt
 800569c:	4622      	movlt	r2, r4
 800569e:	4614      	movlt	r4, r2
 80056a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056a4:	d005      	beq.n	80056b2 <__cvt+0x42>
 80056a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056aa:	d100      	bne.n	80056ae <__cvt+0x3e>
 80056ac:	3601      	adds	r6, #1
 80056ae:	2102      	movs	r1, #2
 80056b0:	e000      	b.n	80056b4 <__cvt+0x44>
 80056b2:	2103      	movs	r1, #3
 80056b4:	ab03      	add	r3, sp, #12
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	ab02      	add	r3, sp, #8
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	ec45 4b10 	vmov	d0, r4, r5
 80056c0:	4653      	mov	r3, sl
 80056c2:	4632      	mov	r2, r6
 80056c4:	f000 fe28 	bl	8006318 <_dtoa_r>
 80056c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056cc:	4607      	mov	r7, r0
 80056ce:	d102      	bne.n	80056d6 <__cvt+0x66>
 80056d0:	f019 0f01 	tst.w	r9, #1
 80056d4:	d022      	beq.n	800571c <__cvt+0xac>
 80056d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056da:	eb07 0906 	add.w	r9, r7, r6
 80056de:	d110      	bne.n	8005702 <__cvt+0x92>
 80056e0:	783b      	ldrb	r3, [r7, #0]
 80056e2:	2b30      	cmp	r3, #48	; 0x30
 80056e4:	d10a      	bne.n	80056fc <__cvt+0x8c>
 80056e6:	2200      	movs	r2, #0
 80056e8:	2300      	movs	r3, #0
 80056ea:	4620      	mov	r0, r4
 80056ec:	4629      	mov	r1, r5
 80056ee:	f7fb fa0b 	bl	8000b08 <__aeabi_dcmpeq>
 80056f2:	b918      	cbnz	r0, 80056fc <__cvt+0x8c>
 80056f4:	f1c6 0601 	rsb	r6, r6, #1
 80056f8:	f8ca 6000 	str.w	r6, [sl]
 80056fc:	f8da 3000 	ldr.w	r3, [sl]
 8005700:	4499      	add	r9, r3
 8005702:	2200      	movs	r2, #0
 8005704:	2300      	movs	r3, #0
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	f7fb f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 800570e:	b108      	cbz	r0, 8005714 <__cvt+0xa4>
 8005710:	f8cd 900c 	str.w	r9, [sp, #12]
 8005714:	2230      	movs	r2, #48	; 0x30
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	454b      	cmp	r3, r9
 800571a:	d307      	bcc.n	800572c <__cvt+0xbc>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005720:	1bdb      	subs	r3, r3, r7
 8005722:	4638      	mov	r0, r7
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	b004      	add	sp, #16
 8005728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	9103      	str	r1, [sp, #12]
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	e7f0      	b.n	8005716 <__cvt+0xa6>

08005734 <__exponent>:
 8005734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005736:	4603      	mov	r3, r0
 8005738:	2900      	cmp	r1, #0
 800573a:	bfb8      	it	lt
 800573c:	4249      	neglt	r1, r1
 800573e:	f803 2b02 	strb.w	r2, [r3], #2
 8005742:	bfb4      	ite	lt
 8005744:	222d      	movlt	r2, #45	; 0x2d
 8005746:	222b      	movge	r2, #43	; 0x2b
 8005748:	2909      	cmp	r1, #9
 800574a:	7042      	strb	r2, [r0, #1]
 800574c:	dd2a      	ble.n	80057a4 <__exponent+0x70>
 800574e:	f10d 0407 	add.w	r4, sp, #7
 8005752:	46a4      	mov	ip, r4
 8005754:	270a      	movs	r7, #10
 8005756:	46a6      	mov	lr, r4
 8005758:	460a      	mov	r2, r1
 800575a:	fb91 f6f7 	sdiv	r6, r1, r7
 800575e:	fb07 1516 	mls	r5, r7, r6, r1
 8005762:	3530      	adds	r5, #48	; 0x30
 8005764:	2a63      	cmp	r2, #99	; 0x63
 8005766:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800576a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800576e:	4631      	mov	r1, r6
 8005770:	dcf1      	bgt.n	8005756 <__exponent+0x22>
 8005772:	3130      	adds	r1, #48	; 0x30
 8005774:	f1ae 0502 	sub.w	r5, lr, #2
 8005778:	f804 1c01 	strb.w	r1, [r4, #-1]
 800577c:	1c44      	adds	r4, r0, #1
 800577e:	4629      	mov	r1, r5
 8005780:	4561      	cmp	r1, ip
 8005782:	d30a      	bcc.n	800579a <__exponent+0x66>
 8005784:	f10d 0209 	add.w	r2, sp, #9
 8005788:	eba2 020e 	sub.w	r2, r2, lr
 800578c:	4565      	cmp	r5, ip
 800578e:	bf88      	it	hi
 8005790:	2200      	movhi	r2, #0
 8005792:	4413      	add	r3, r2
 8005794:	1a18      	subs	r0, r3, r0
 8005796:	b003      	add	sp, #12
 8005798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800579e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057a2:	e7ed      	b.n	8005780 <__exponent+0x4c>
 80057a4:	2330      	movs	r3, #48	; 0x30
 80057a6:	3130      	adds	r1, #48	; 0x30
 80057a8:	7083      	strb	r3, [r0, #2]
 80057aa:	70c1      	strb	r1, [r0, #3]
 80057ac:	1d03      	adds	r3, r0, #4
 80057ae:	e7f1      	b.n	8005794 <__exponent+0x60>

080057b0 <_printf_float>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	ed2d 8b02 	vpush	{d8}
 80057b8:	b08d      	sub	sp, #52	; 0x34
 80057ba:	460c      	mov	r4, r1
 80057bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057c0:	4616      	mov	r6, r2
 80057c2:	461f      	mov	r7, r3
 80057c4:	4605      	mov	r5, r0
 80057c6:	f001 fd4b 	bl	8007260 <_localeconv_r>
 80057ca:	f8d0 a000 	ldr.w	sl, [r0]
 80057ce:	4650      	mov	r0, sl
 80057d0:	f7fa fd1e 	bl	8000210 <strlen>
 80057d4:	2300      	movs	r3, #0
 80057d6:	930a      	str	r3, [sp, #40]	; 0x28
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	f8d8 3000 	ldr.w	r3, [r8]
 80057e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057e4:	3307      	adds	r3, #7
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	f103 0208 	add.w	r2, r3, #8
 80057ee:	f8c8 2000 	str.w	r2, [r8]
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005802:	9307      	str	r3, [sp, #28]
 8005804:	f8cd 8018 	str.w	r8, [sp, #24]
 8005808:	ee08 0a10 	vmov	s16, r0
 800580c:	4b9f      	ldr	r3, [pc, #636]	; (8005a8c <_printf_float+0x2dc>)
 800580e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005816:	f7fb f9a9 	bl	8000b6c <__aeabi_dcmpun>
 800581a:	bb88      	cbnz	r0, 8005880 <_printf_float+0xd0>
 800581c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005820:	4b9a      	ldr	r3, [pc, #616]	; (8005a8c <_printf_float+0x2dc>)
 8005822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005826:	f7fb f983 	bl	8000b30 <__aeabi_dcmple>
 800582a:	bb48      	cbnz	r0, 8005880 <_printf_float+0xd0>
 800582c:	2200      	movs	r2, #0
 800582e:	2300      	movs	r3, #0
 8005830:	4640      	mov	r0, r8
 8005832:	4649      	mov	r1, r9
 8005834:	f7fb f972 	bl	8000b1c <__aeabi_dcmplt>
 8005838:	b110      	cbz	r0, 8005840 <_printf_float+0x90>
 800583a:	232d      	movs	r3, #45	; 0x2d
 800583c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005840:	4b93      	ldr	r3, [pc, #588]	; (8005a90 <_printf_float+0x2e0>)
 8005842:	4894      	ldr	r0, [pc, #592]	; (8005a94 <_printf_float+0x2e4>)
 8005844:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005848:	bf94      	ite	ls
 800584a:	4698      	movls	r8, r3
 800584c:	4680      	movhi	r8, r0
 800584e:	2303      	movs	r3, #3
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	9b05      	ldr	r3, [sp, #20]
 8005854:	f023 0204 	bic.w	r2, r3, #4
 8005858:	6022      	str	r2, [r4, #0]
 800585a:	f04f 0900 	mov.w	r9, #0
 800585e:	9700      	str	r7, [sp, #0]
 8005860:	4633      	mov	r3, r6
 8005862:	aa0b      	add	r2, sp, #44	; 0x2c
 8005864:	4621      	mov	r1, r4
 8005866:	4628      	mov	r0, r5
 8005868:	f000 f9d8 	bl	8005c1c <_printf_common>
 800586c:	3001      	adds	r0, #1
 800586e:	f040 8090 	bne.w	8005992 <_printf_float+0x1e2>
 8005872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005876:	b00d      	add	sp, #52	; 0x34
 8005878:	ecbd 8b02 	vpop	{d8}
 800587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005880:	4642      	mov	r2, r8
 8005882:	464b      	mov	r3, r9
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fb f970 	bl	8000b6c <__aeabi_dcmpun>
 800588c:	b140      	cbz	r0, 80058a0 <_printf_float+0xf0>
 800588e:	464b      	mov	r3, r9
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfbc      	itt	lt
 8005894:	232d      	movlt	r3, #45	; 0x2d
 8005896:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800589a:	487f      	ldr	r0, [pc, #508]	; (8005a98 <_printf_float+0x2e8>)
 800589c:	4b7f      	ldr	r3, [pc, #508]	; (8005a9c <_printf_float+0x2ec>)
 800589e:	e7d1      	b.n	8005844 <_printf_float+0x94>
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058a6:	9206      	str	r2, [sp, #24]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	d13f      	bne.n	800592c <_printf_float+0x17c>
 80058ac:	2306      	movs	r3, #6
 80058ae:	6063      	str	r3, [r4, #4]
 80058b0:	9b05      	ldr	r3, [sp, #20]
 80058b2:	6861      	ldr	r1, [r4, #4]
 80058b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058b8:	2300      	movs	r3, #0
 80058ba:	9303      	str	r3, [sp, #12]
 80058bc:	ab0a      	add	r3, sp, #40	; 0x28
 80058be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058c2:	ab09      	add	r3, sp, #36	; 0x24
 80058c4:	ec49 8b10 	vmov	d0, r8, r9
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7ff fecd 	bl	8005670 <__cvt>
 80058d6:	9b06      	ldr	r3, [sp, #24]
 80058d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058da:	2b47      	cmp	r3, #71	; 0x47
 80058dc:	4680      	mov	r8, r0
 80058de:	d108      	bne.n	80058f2 <_printf_float+0x142>
 80058e0:	1cc8      	adds	r0, r1, #3
 80058e2:	db02      	blt.n	80058ea <_printf_float+0x13a>
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	4299      	cmp	r1, r3
 80058e8:	dd41      	ble.n	800596e <_printf_float+0x1be>
 80058ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80058ee:	fa5f fb8b 	uxtb.w	fp, fp
 80058f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058f6:	d820      	bhi.n	800593a <_printf_float+0x18a>
 80058f8:	3901      	subs	r1, #1
 80058fa:	465a      	mov	r2, fp
 80058fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005900:	9109      	str	r1, [sp, #36]	; 0x24
 8005902:	f7ff ff17 	bl	8005734 <__exponent>
 8005906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005908:	1813      	adds	r3, r2, r0
 800590a:	2a01      	cmp	r2, #1
 800590c:	4681      	mov	r9, r0
 800590e:	6123      	str	r3, [r4, #16]
 8005910:	dc02      	bgt.n	8005918 <_printf_float+0x168>
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	07d2      	lsls	r2, r2, #31
 8005916:	d501      	bpl.n	800591c <_printf_float+0x16c>
 8005918:	3301      	adds	r3, #1
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005920:	2b00      	cmp	r3, #0
 8005922:	d09c      	beq.n	800585e <_printf_float+0xae>
 8005924:	232d      	movs	r3, #45	; 0x2d
 8005926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592a:	e798      	b.n	800585e <_printf_float+0xae>
 800592c:	9a06      	ldr	r2, [sp, #24]
 800592e:	2a47      	cmp	r2, #71	; 0x47
 8005930:	d1be      	bne.n	80058b0 <_printf_float+0x100>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1bc      	bne.n	80058b0 <_printf_float+0x100>
 8005936:	2301      	movs	r3, #1
 8005938:	e7b9      	b.n	80058ae <_printf_float+0xfe>
 800593a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800593e:	d118      	bne.n	8005972 <_printf_float+0x1c2>
 8005940:	2900      	cmp	r1, #0
 8005942:	6863      	ldr	r3, [r4, #4]
 8005944:	dd0b      	ble.n	800595e <_printf_float+0x1ae>
 8005946:	6121      	str	r1, [r4, #16]
 8005948:	b913      	cbnz	r3, 8005950 <_printf_float+0x1a0>
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	07d0      	lsls	r0, r2, #31
 800594e:	d502      	bpl.n	8005956 <_printf_float+0x1a6>
 8005950:	3301      	adds	r3, #1
 8005952:	440b      	add	r3, r1
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	65a1      	str	r1, [r4, #88]	; 0x58
 8005958:	f04f 0900 	mov.w	r9, #0
 800595c:	e7de      	b.n	800591c <_printf_float+0x16c>
 800595e:	b913      	cbnz	r3, 8005966 <_printf_float+0x1b6>
 8005960:	6822      	ldr	r2, [r4, #0]
 8005962:	07d2      	lsls	r2, r2, #31
 8005964:	d501      	bpl.n	800596a <_printf_float+0x1ba>
 8005966:	3302      	adds	r3, #2
 8005968:	e7f4      	b.n	8005954 <_printf_float+0x1a4>
 800596a:	2301      	movs	r3, #1
 800596c:	e7f2      	b.n	8005954 <_printf_float+0x1a4>
 800596e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005974:	4299      	cmp	r1, r3
 8005976:	db05      	blt.n	8005984 <_printf_float+0x1d4>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	6121      	str	r1, [r4, #16]
 800597c:	07d8      	lsls	r0, r3, #31
 800597e:	d5ea      	bpl.n	8005956 <_printf_float+0x1a6>
 8005980:	1c4b      	adds	r3, r1, #1
 8005982:	e7e7      	b.n	8005954 <_printf_float+0x1a4>
 8005984:	2900      	cmp	r1, #0
 8005986:	bfd4      	ite	le
 8005988:	f1c1 0202 	rsble	r2, r1, #2
 800598c:	2201      	movgt	r2, #1
 800598e:	4413      	add	r3, r2
 8005990:	e7e0      	b.n	8005954 <_printf_float+0x1a4>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	055a      	lsls	r2, r3, #21
 8005996:	d407      	bmi.n	80059a8 <_printf_float+0x1f8>
 8005998:	6923      	ldr	r3, [r4, #16]
 800599a:	4642      	mov	r2, r8
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	d12c      	bne.n	8005a00 <_printf_float+0x250>
 80059a6:	e764      	b.n	8005872 <_printf_float+0xc2>
 80059a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059ac:	f240 80e0 	bls.w	8005b70 <_printf_float+0x3c0>
 80059b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059b4:	2200      	movs	r2, #0
 80059b6:	2300      	movs	r3, #0
 80059b8:	f7fb f8a6 	bl	8000b08 <__aeabi_dcmpeq>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d034      	beq.n	8005a2a <_printf_float+0x27a>
 80059c0:	4a37      	ldr	r2, [pc, #220]	; (8005aa0 <_printf_float+0x2f0>)
 80059c2:	2301      	movs	r3, #1
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	f43f af51 	beq.w	8005872 <_printf_float+0xc2>
 80059d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059d4:	429a      	cmp	r2, r3
 80059d6:	db02      	blt.n	80059de <_printf_float+0x22e>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	07d8      	lsls	r0, r3, #31
 80059dc:	d510      	bpl.n	8005a00 <_printf_float+0x250>
 80059de:	ee18 3a10 	vmov	r3, s16
 80059e2:	4652      	mov	r2, sl
 80059e4:	4631      	mov	r1, r6
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	f43f af41 	beq.w	8005872 <_printf_float+0xc2>
 80059f0:	f04f 0800 	mov.w	r8, #0
 80059f4:	f104 091a 	add.w	r9, r4, #26
 80059f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059fa:	3b01      	subs	r3, #1
 80059fc:	4543      	cmp	r3, r8
 80059fe:	dc09      	bgt.n	8005a14 <_printf_float+0x264>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	079b      	lsls	r3, r3, #30
 8005a04:	f100 8105 	bmi.w	8005c12 <_printf_float+0x462>
 8005a08:	68e0      	ldr	r0, [r4, #12]
 8005a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a0c:	4298      	cmp	r0, r3
 8005a0e:	bfb8      	it	lt
 8005a10:	4618      	movlt	r0, r3
 8005a12:	e730      	b.n	8005876 <_printf_float+0xc6>
 8005a14:	2301      	movs	r3, #1
 8005a16:	464a      	mov	r2, r9
 8005a18:	4631      	mov	r1, r6
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b8      	blx	r7
 8005a1e:	3001      	adds	r0, #1
 8005a20:	f43f af27 	beq.w	8005872 <_printf_float+0xc2>
 8005a24:	f108 0801 	add.w	r8, r8, #1
 8005a28:	e7e6      	b.n	80059f8 <_printf_float+0x248>
 8005a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	dc39      	bgt.n	8005aa4 <_printf_float+0x2f4>
 8005a30:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <_printf_float+0x2f0>)
 8005a32:	2301      	movs	r3, #1
 8005a34:	4631      	mov	r1, r6
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b8      	blx	r7
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	f43f af19 	beq.w	8005872 <_printf_float+0xc2>
 8005a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d102      	bne.n	8005a4e <_printf_float+0x29e>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	07d9      	lsls	r1, r3, #31
 8005a4c:	d5d8      	bpl.n	8005a00 <_printf_float+0x250>
 8005a4e:	ee18 3a10 	vmov	r3, s16
 8005a52:	4652      	mov	r2, sl
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f af09 	beq.w	8005872 <_printf_float+0xc2>
 8005a60:	f04f 0900 	mov.w	r9, #0
 8005a64:	f104 0a1a 	add.w	sl, r4, #26
 8005a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6a:	425b      	negs	r3, r3
 8005a6c:	454b      	cmp	r3, r9
 8005a6e:	dc01      	bgt.n	8005a74 <_printf_float+0x2c4>
 8005a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a72:	e792      	b.n	800599a <_printf_float+0x1ea>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4652      	mov	r2, sl
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f aef7 	beq.w	8005872 <_printf_float+0xc2>
 8005a84:	f109 0901 	add.w	r9, r9, #1
 8005a88:	e7ee      	b.n	8005a68 <_printf_float+0x2b8>
 8005a8a:	bf00      	nop
 8005a8c:	7fefffff 	.word	0x7fefffff
 8005a90:	080091f4 	.word	0x080091f4
 8005a94:	080091f8 	.word	0x080091f8
 8005a98:	08009200 	.word	0x08009200
 8005a9c:	080091fc 	.word	0x080091fc
 8005aa0:	08009204 	.word	0x08009204
 8005aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	bfa8      	it	ge
 8005aac:	461a      	movge	r2, r3
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	4691      	mov	r9, r2
 8005ab2:	dc37      	bgt.n	8005b24 <_printf_float+0x374>
 8005ab4:	f04f 0b00 	mov.w	fp, #0
 8005ab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005abc:	f104 021a 	add.w	r2, r4, #26
 8005ac0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ac2:	9305      	str	r3, [sp, #20]
 8005ac4:	eba3 0309 	sub.w	r3, r3, r9
 8005ac8:	455b      	cmp	r3, fp
 8005aca:	dc33      	bgt.n	8005b34 <_printf_float+0x384>
 8005acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	db3b      	blt.n	8005b4c <_printf_float+0x39c>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	07da      	lsls	r2, r3, #31
 8005ad8:	d438      	bmi.n	8005b4c <_printf_float+0x39c>
 8005ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005adc:	9b05      	ldr	r3, [sp, #20]
 8005ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	eba2 0901 	sub.w	r9, r2, r1
 8005ae6:	4599      	cmp	r9, r3
 8005ae8:	bfa8      	it	ge
 8005aea:	4699      	movge	r9, r3
 8005aec:	f1b9 0f00 	cmp.w	r9, #0
 8005af0:	dc35      	bgt.n	8005b5e <_printf_float+0x3ae>
 8005af2:	f04f 0800 	mov.w	r8, #0
 8005af6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005afa:	f104 0a1a 	add.w	sl, r4, #26
 8005afe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	eba3 0309 	sub.w	r3, r3, r9
 8005b08:	4543      	cmp	r3, r8
 8005b0a:	f77f af79 	ble.w	8005a00 <_printf_float+0x250>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4652      	mov	r2, sl
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f43f aeaa 	beq.w	8005872 <_printf_float+0xc2>
 8005b1e:	f108 0801 	add.w	r8, r8, #1
 8005b22:	e7ec      	b.n	8005afe <_printf_float+0x34e>
 8005b24:	4613      	mov	r3, r2
 8005b26:	4631      	mov	r1, r6
 8005b28:	4642      	mov	r2, r8
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d1c0      	bne.n	8005ab4 <_printf_float+0x304>
 8005b32:	e69e      	b.n	8005872 <_printf_float+0xc2>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	9205      	str	r2, [sp, #20]
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f43f ae97 	beq.w	8005872 <_printf_float+0xc2>
 8005b44:	9a05      	ldr	r2, [sp, #20]
 8005b46:	f10b 0b01 	add.w	fp, fp, #1
 8005b4a:	e7b9      	b.n	8005ac0 <_printf_float+0x310>
 8005b4c:	ee18 3a10 	vmov	r3, s16
 8005b50:	4652      	mov	r2, sl
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d1be      	bne.n	8005ada <_printf_float+0x32a>
 8005b5c:	e689      	b.n	8005872 <_printf_float+0xc2>
 8005b5e:	9a05      	ldr	r2, [sp, #20]
 8005b60:	464b      	mov	r3, r9
 8005b62:	4442      	add	r2, r8
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d1c1      	bne.n	8005af2 <_printf_float+0x342>
 8005b6e:	e680      	b.n	8005872 <_printf_float+0xc2>
 8005b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b72:	2a01      	cmp	r2, #1
 8005b74:	dc01      	bgt.n	8005b7a <_printf_float+0x3ca>
 8005b76:	07db      	lsls	r3, r3, #31
 8005b78:	d538      	bpl.n	8005bec <_printf_float+0x43c>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	f43f ae74 	beq.w	8005872 <_printf_float+0xc2>
 8005b8a:	ee18 3a10 	vmov	r3, s16
 8005b8e:	4652      	mov	r2, sl
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f ae6b 	beq.w	8005872 <_printf_float+0xc2>
 8005b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f7fa ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 8005ba8:	b9d8      	cbnz	r0, 8005be2 <_printf_float+0x432>
 8005baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bac:	f108 0201 	add.w	r2, r8, #1
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b8      	blx	r7
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d10e      	bne.n	8005bda <_printf_float+0x42a>
 8005bbc:	e659      	b.n	8005872 <_printf_float+0xc2>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	f43f ae52 	beq.w	8005872 <_printf_float+0xc2>
 8005bce:	f108 0801 	add.w	r8, r8, #1
 8005bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	4543      	cmp	r3, r8
 8005bd8:	dcf1      	bgt.n	8005bbe <_printf_float+0x40e>
 8005bda:	464b      	mov	r3, r9
 8005bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005be0:	e6dc      	b.n	800599c <_printf_float+0x1ec>
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	f104 0a1a 	add.w	sl, r4, #26
 8005bea:	e7f2      	b.n	8005bd2 <_printf_float+0x422>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4642      	mov	r2, r8
 8005bf0:	e7df      	b.n	8005bb2 <_printf_float+0x402>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	464a      	mov	r2, r9
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f43f ae38 	beq.w	8005872 <_printf_float+0xc2>
 8005c02:	f108 0801 	add.w	r8, r8, #1
 8005c06:	68e3      	ldr	r3, [r4, #12]
 8005c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c0a:	1a5b      	subs	r3, r3, r1
 8005c0c:	4543      	cmp	r3, r8
 8005c0e:	dcf0      	bgt.n	8005bf2 <_printf_float+0x442>
 8005c10:	e6fa      	b.n	8005a08 <_printf_float+0x258>
 8005c12:	f04f 0800 	mov.w	r8, #0
 8005c16:	f104 0919 	add.w	r9, r4, #25
 8005c1a:	e7f4      	b.n	8005c06 <_printf_float+0x456>

08005c1c <_printf_common>:
 8005c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	4616      	mov	r6, r2
 8005c22:	4699      	mov	r9, r3
 8005c24:	688a      	ldr	r2, [r1, #8]
 8005c26:	690b      	ldr	r3, [r1, #16]
 8005c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	bfb8      	it	lt
 8005c30:	4613      	movlt	r3, r2
 8005c32:	6033      	str	r3, [r6, #0]
 8005c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c38:	4607      	mov	r7, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	b10a      	cbz	r2, 8005c42 <_printf_common+0x26>
 8005c3e:	3301      	adds	r3, #1
 8005c40:	6033      	str	r3, [r6, #0]
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	0699      	lsls	r1, r3, #26
 8005c46:	bf42      	ittt	mi
 8005c48:	6833      	ldrmi	r3, [r6, #0]
 8005c4a:	3302      	addmi	r3, #2
 8005c4c:	6033      	strmi	r3, [r6, #0]
 8005c4e:	6825      	ldr	r5, [r4, #0]
 8005c50:	f015 0506 	ands.w	r5, r5, #6
 8005c54:	d106      	bne.n	8005c64 <_printf_common+0x48>
 8005c56:	f104 0a19 	add.w	sl, r4, #25
 8005c5a:	68e3      	ldr	r3, [r4, #12]
 8005c5c:	6832      	ldr	r2, [r6, #0]
 8005c5e:	1a9b      	subs	r3, r3, r2
 8005c60:	42ab      	cmp	r3, r5
 8005c62:	dc26      	bgt.n	8005cb2 <_printf_common+0x96>
 8005c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c68:	1e13      	subs	r3, r2, #0
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	bf18      	it	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	0692      	lsls	r2, r2, #26
 8005c72:	d42b      	bmi.n	8005ccc <_printf_common+0xb0>
 8005c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c78:	4649      	mov	r1, r9
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	47c0      	blx	r8
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d01e      	beq.n	8005cc0 <_printf_common+0xa4>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	68e5      	ldr	r5, [r4, #12]
 8005c86:	6832      	ldr	r2, [r6, #0]
 8005c88:	f003 0306 	and.w	r3, r3, #6
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	bf08      	it	eq
 8005c90:	1aad      	subeq	r5, r5, r2
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	6922      	ldr	r2, [r4, #16]
 8005c96:	bf0c      	ite	eq
 8005c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c9c:	2500      	movne	r5, #0
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	bfc4      	itt	gt
 8005ca2:	1a9b      	subgt	r3, r3, r2
 8005ca4:	18ed      	addgt	r5, r5, r3
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	341a      	adds	r4, #26
 8005caa:	42b5      	cmp	r5, r6
 8005cac:	d11a      	bne.n	8005ce4 <_printf_common+0xc8>
 8005cae:	2000      	movs	r0, #0
 8005cb0:	e008      	b.n	8005cc4 <_printf_common+0xa8>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4652      	mov	r2, sl
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	4638      	mov	r0, r7
 8005cba:	47c0      	blx	r8
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d103      	bne.n	8005cc8 <_printf_common+0xac>
 8005cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc8:	3501      	adds	r5, #1
 8005cca:	e7c6      	b.n	8005c5a <_printf_common+0x3e>
 8005ccc:	18e1      	adds	r1, r4, r3
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	2030      	movs	r0, #48	; 0x30
 8005cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cd6:	4422      	add	r2, r4
 8005cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	e7c7      	b.n	8005c74 <_printf_common+0x58>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4638      	mov	r0, r7
 8005cec:	47c0      	blx	r8
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d0e6      	beq.n	8005cc0 <_printf_common+0xa4>
 8005cf2:	3601      	adds	r6, #1
 8005cf4:	e7d9      	b.n	8005caa <_printf_common+0x8e>
	...

08005cf8 <_printf_i>:
 8005cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	4691      	mov	r9, r2
 8005d00:	7e27      	ldrb	r7, [r4, #24]
 8005d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d04:	2f78      	cmp	r7, #120	; 0x78
 8005d06:	4680      	mov	r8, r0
 8005d08:	469a      	mov	sl, r3
 8005d0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d0e:	d807      	bhi.n	8005d20 <_printf_i+0x28>
 8005d10:	2f62      	cmp	r7, #98	; 0x62
 8005d12:	d80a      	bhi.n	8005d2a <_printf_i+0x32>
 8005d14:	2f00      	cmp	r7, #0
 8005d16:	f000 80d8 	beq.w	8005eca <_printf_i+0x1d2>
 8005d1a:	2f58      	cmp	r7, #88	; 0x58
 8005d1c:	f000 80a3 	beq.w	8005e66 <_printf_i+0x16e>
 8005d20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d28:	e03a      	b.n	8005da0 <_printf_i+0xa8>
 8005d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d2e:	2b15      	cmp	r3, #21
 8005d30:	d8f6      	bhi.n	8005d20 <_printf_i+0x28>
 8005d32:	a001      	add	r0, pc, #4	; (adr r0, 8005d38 <_printf_i+0x40>)
 8005d34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005da5 	.word	0x08005da5
 8005d40:	08005d21 	.word	0x08005d21
 8005d44:	08005d21 	.word	0x08005d21
 8005d48:	08005d21 	.word	0x08005d21
 8005d4c:	08005d21 	.word	0x08005d21
 8005d50:	08005da5 	.word	0x08005da5
 8005d54:	08005d21 	.word	0x08005d21
 8005d58:	08005d21 	.word	0x08005d21
 8005d5c:	08005d21 	.word	0x08005d21
 8005d60:	08005d21 	.word	0x08005d21
 8005d64:	08005eb1 	.word	0x08005eb1
 8005d68:	08005dd5 	.word	0x08005dd5
 8005d6c:	08005e93 	.word	0x08005e93
 8005d70:	08005d21 	.word	0x08005d21
 8005d74:	08005d21 	.word	0x08005d21
 8005d78:	08005ed3 	.word	0x08005ed3
 8005d7c:	08005d21 	.word	0x08005d21
 8005d80:	08005dd5 	.word	0x08005dd5
 8005d84:	08005d21 	.word	0x08005d21
 8005d88:	08005d21 	.word	0x08005d21
 8005d8c:	08005e9b 	.word	0x08005e9b
 8005d90:	680b      	ldr	r3, [r1, #0]
 8005d92:	1d1a      	adds	r2, r3, #4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	600a      	str	r2, [r1, #0]
 8005d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0a3      	b.n	8005eec <_printf_i+0x1f4>
 8005da4:	6825      	ldr	r5, [r4, #0]
 8005da6:	6808      	ldr	r0, [r1, #0]
 8005da8:	062e      	lsls	r6, r5, #24
 8005daa:	f100 0304 	add.w	r3, r0, #4
 8005dae:	d50a      	bpl.n	8005dc6 <_printf_i+0xce>
 8005db0:	6805      	ldr	r5, [r0, #0]
 8005db2:	600b      	str	r3, [r1, #0]
 8005db4:	2d00      	cmp	r5, #0
 8005db6:	da03      	bge.n	8005dc0 <_printf_i+0xc8>
 8005db8:	232d      	movs	r3, #45	; 0x2d
 8005dba:	426d      	negs	r5, r5
 8005dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc0:	485e      	ldr	r0, [pc, #376]	; (8005f3c <_printf_i+0x244>)
 8005dc2:	230a      	movs	r3, #10
 8005dc4:	e019      	b.n	8005dfa <_printf_i+0x102>
 8005dc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005dca:	6805      	ldr	r5, [r0, #0]
 8005dcc:	600b      	str	r3, [r1, #0]
 8005dce:	bf18      	it	ne
 8005dd0:	b22d      	sxthne	r5, r5
 8005dd2:	e7ef      	b.n	8005db4 <_printf_i+0xbc>
 8005dd4:	680b      	ldr	r3, [r1, #0]
 8005dd6:	6825      	ldr	r5, [r4, #0]
 8005dd8:	1d18      	adds	r0, r3, #4
 8005dda:	6008      	str	r0, [r1, #0]
 8005ddc:	0628      	lsls	r0, r5, #24
 8005dde:	d501      	bpl.n	8005de4 <_printf_i+0xec>
 8005de0:	681d      	ldr	r5, [r3, #0]
 8005de2:	e002      	b.n	8005dea <_printf_i+0xf2>
 8005de4:	0669      	lsls	r1, r5, #25
 8005de6:	d5fb      	bpl.n	8005de0 <_printf_i+0xe8>
 8005de8:	881d      	ldrh	r5, [r3, #0]
 8005dea:	4854      	ldr	r0, [pc, #336]	; (8005f3c <_printf_i+0x244>)
 8005dec:	2f6f      	cmp	r7, #111	; 0x6f
 8005dee:	bf0c      	ite	eq
 8005df0:	2308      	moveq	r3, #8
 8005df2:	230a      	movne	r3, #10
 8005df4:	2100      	movs	r1, #0
 8005df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dfa:	6866      	ldr	r6, [r4, #4]
 8005dfc:	60a6      	str	r6, [r4, #8]
 8005dfe:	2e00      	cmp	r6, #0
 8005e00:	bfa2      	ittt	ge
 8005e02:	6821      	ldrge	r1, [r4, #0]
 8005e04:	f021 0104 	bicge.w	r1, r1, #4
 8005e08:	6021      	strge	r1, [r4, #0]
 8005e0a:	b90d      	cbnz	r5, 8005e10 <_printf_i+0x118>
 8005e0c:	2e00      	cmp	r6, #0
 8005e0e:	d04d      	beq.n	8005eac <_printf_i+0x1b4>
 8005e10:	4616      	mov	r6, r2
 8005e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e16:	fb03 5711 	mls	r7, r3, r1, r5
 8005e1a:	5dc7      	ldrb	r7, [r0, r7]
 8005e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e20:	462f      	mov	r7, r5
 8005e22:	42bb      	cmp	r3, r7
 8005e24:	460d      	mov	r5, r1
 8005e26:	d9f4      	bls.n	8005e12 <_printf_i+0x11a>
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d10b      	bne.n	8005e44 <_printf_i+0x14c>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	07df      	lsls	r7, r3, #31
 8005e30:	d508      	bpl.n	8005e44 <_printf_i+0x14c>
 8005e32:	6923      	ldr	r3, [r4, #16]
 8005e34:	6861      	ldr	r1, [r4, #4]
 8005e36:	4299      	cmp	r1, r3
 8005e38:	bfde      	ittt	le
 8005e3a:	2330      	movle	r3, #48	; 0x30
 8005e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005e44:	1b92      	subs	r2, r2, r6
 8005e46:	6122      	str	r2, [r4, #16]
 8005e48:	f8cd a000 	str.w	sl, [sp]
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	aa03      	add	r2, sp, #12
 8005e50:	4621      	mov	r1, r4
 8005e52:	4640      	mov	r0, r8
 8005e54:	f7ff fee2 	bl	8005c1c <_printf_common>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d14c      	bne.n	8005ef6 <_printf_i+0x1fe>
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e60:	b004      	add	sp, #16
 8005e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e66:	4835      	ldr	r0, [pc, #212]	; (8005f3c <_printf_i+0x244>)
 8005e68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	680e      	ldr	r6, [r1, #0]
 8005e70:	061f      	lsls	r7, r3, #24
 8005e72:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e76:	600e      	str	r6, [r1, #0]
 8005e78:	d514      	bpl.n	8005ea4 <_printf_i+0x1ac>
 8005e7a:	07d9      	lsls	r1, r3, #31
 8005e7c:	bf44      	itt	mi
 8005e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e82:	6023      	strmi	r3, [r4, #0]
 8005e84:	b91d      	cbnz	r5, 8005e8e <_printf_i+0x196>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	f023 0320 	bic.w	r3, r3, #32
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	2310      	movs	r3, #16
 8005e90:	e7b0      	b.n	8005df4 <_printf_i+0xfc>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	f043 0320 	orr.w	r3, r3, #32
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	2378      	movs	r3, #120	; 0x78
 8005e9c:	4828      	ldr	r0, [pc, #160]	; (8005f40 <_printf_i+0x248>)
 8005e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ea2:	e7e3      	b.n	8005e6c <_printf_i+0x174>
 8005ea4:	065e      	lsls	r6, r3, #25
 8005ea6:	bf48      	it	mi
 8005ea8:	b2ad      	uxthmi	r5, r5
 8005eaa:	e7e6      	b.n	8005e7a <_printf_i+0x182>
 8005eac:	4616      	mov	r6, r2
 8005eae:	e7bb      	b.n	8005e28 <_printf_i+0x130>
 8005eb0:	680b      	ldr	r3, [r1, #0]
 8005eb2:	6826      	ldr	r6, [r4, #0]
 8005eb4:	6960      	ldr	r0, [r4, #20]
 8005eb6:	1d1d      	adds	r5, r3, #4
 8005eb8:	600d      	str	r5, [r1, #0]
 8005eba:	0635      	lsls	r5, r6, #24
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	d501      	bpl.n	8005ec4 <_printf_i+0x1cc>
 8005ec0:	6018      	str	r0, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <_printf_i+0x1d2>
 8005ec4:	0671      	lsls	r1, r6, #25
 8005ec6:	d5fb      	bpl.n	8005ec0 <_printf_i+0x1c8>
 8005ec8:	8018      	strh	r0, [r3, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	4616      	mov	r6, r2
 8005ed0:	e7ba      	b.n	8005e48 <_printf_i+0x150>
 8005ed2:	680b      	ldr	r3, [r1, #0]
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	600a      	str	r2, [r1, #0]
 8005ed8:	681e      	ldr	r6, [r3, #0]
 8005eda:	6862      	ldr	r2, [r4, #4]
 8005edc:	2100      	movs	r1, #0
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7fa f99e 	bl	8000220 <memchr>
 8005ee4:	b108      	cbz	r0, 8005eea <_printf_i+0x1f2>
 8005ee6:	1b80      	subs	r0, r0, r6
 8005ee8:	6060      	str	r0, [r4, #4]
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ef4:	e7a8      	b.n	8005e48 <_printf_i+0x150>
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	4632      	mov	r2, r6
 8005efa:	4649      	mov	r1, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	47d0      	blx	sl
 8005f00:	3001      	adds	r0, #1
 8005f02:	d0ab      	beq.n	8005e5c <_printf_i+0x164>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	079b      	lsls	r3, r3, #30
 8005f08:	d413      	bmi.n	8005f32 <_printf_i+0x23a>
 8005f0a:	68e0      	ldr	r0, [r4, #12]
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	4298      	cmp	r0, r3
 8005f10:	bfb8      	it	lt
 8005f12:	4618      	movlt	r0, r3
 8005f14:	e7a4      	b.n	8005e60 <_printf_i+0x168>
 8005f16:	2301      	movs	r3, #1
 8005f18:	4632      	mov	r2, r6
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	47d0      	blx	sl
 8005f20:	3001      	adds	r0, #1
 8005f22:	d09b      	beq.n	8005e5c <_printf_i+0x164>
 8005f24:	3501      	adds	r5, #1
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	9903      	ldr	r1, [sp, #12]
 8005f2a:	1a5b      	subs	r3, r3, r1
 8005f2c:	42ab      	cmp	r3, r5
 8005f2e:	dcf2      	bgt.n	8005f16 <_printf_i+0x21e>
 8005f30:	e7eb      	b.n	8005f0a <_printf_i+0x212>
 8005f32:	2500      	movs	r5, #0
 8005f34:	f104 0619 	add.w	r6, r4, #25
 8005f38:	e7f5      	b.n	8005f26 <_printf_i+0x22e>
 8005f3a:	bf00      	nop
 8005f3c:	08009206 	.word	0x08009206
 8005f40:	08009217 	.word	0x08009217

08005f44 <iprintf>:
 8005f44:	b40f      	push	{r0, r1, r2, r3}
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <iprintf+0x2c>)
 8005f48:	b513      	push	{r0, r1, r4, lr}
 8005f4a:	681c      	ldr	r4, [r3, #0]
 8005f4c:	b124      	cbz	r4, 8005f58 <iprintf+0x14>
 8005f4e:	69a3      	ldr	r3, [r4, #24]
 8005f50:	b913      	cbnz	r3, 8005f58 <iprintf+0x14>
 8005f52:	4620      	mov	r0, r4
 8005f54:	f001 f8e6 	bl	8007124 <__sinit>
 8005f58:	ab05      	add	r3, sp, #20
 8005f5a:	9a04      	ldr	r2, [sp, #16]
 8005f5c:	68a1      	ldr	r1, [r4, #8]
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	4620      	mov	r0, r4
 8005f62:	f001 fdb9 	bl	8007ad8 <_vfiprintf_r>
 8005f66:	b002      	add	sp, #8
 8005f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f6c:	b004      	add	sp, #16
 8005f6e:	4770      	bx	lr
 8005f70:	2000000c 	.word	0x2000000c

08005f74 <_puts_r>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	460e      	mov	r6, r1
 8005f78:	4605      	mov	r5, r0
 8005f7a:	b118      	cbz	r0, 8005f84 <_puts_r+0x10>
 8005f7c:	6983      	ldr	r3, [r0, #24]
 8005f7e:	b90b      	cbnz	r3, 8005f84 <_puts_r+0x10>
 8005f80:	f001 f8d0 	bl	8007124 <__sinit>
 8005f84:	69ab      	ldr	r3, [r5, #24]
 8005f86:	68ac      	ldr	r4, [r5, #8]
 8005f88:	b913      	cbnz	r3, 8005f90 <_puts_r+0x1c>
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f001 f8ca 	bl	8007124 <__sinit>
 8005f90:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <_puts_r+0xd0>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d120      	bne.n	8005fd8 <_puts_r+0x64>
 8005f96:	686c      	ldr	r4, [r5, #4]
 8005f98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f9a:	07db      	lsls	r3, r3, #31
 8005f9c:	d405      	bmi.n	8005faa <_puts_r+0x36>
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	0598      	lsls	r0, r3, #22
 8005fa2:	d402      	bmi.n	8005faa <_puts_r+0x36>
 8005fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fa6:	f001 f960 	bl	800726a <__retarget_lock_acquire_recursive>
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	0719      	lsls	r1, r3, #28
 8005fae:	d51d      	bpl.n	8005fec <_puts_r+0x78>
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	b1db      	cbz	r3, 8005fec <_puts_r+0x78>
 8005fb4:	3e01      	subs	r6, #1
 8005fb6:	68a3      	ldr	r3, [r4, #8]
 8005fb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	60a3      	str	r3, [r4, #8]
 8005fc0:	bb39      	cbnz	r1, 8006012 <_puts_r+0x9e>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	da38      	bge.n	8006038 <_puts_r+0xc4>
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	210a      	movs	r1, #10
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f000 f858 	bl	8006080 <__swbuf_r>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d011      	beq.n	8005ff8 <_puts_r+0x84>
 8005fd4:	250a      	movs	r5, #10
 8005fd6:	e011      	b.n	8005ffc <_puts_r+0x88>
 8005fd8:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <_puts_r+0xd4>)
 8005fda:	429c      	cmp	r4, r3
 8005fdc:	d101      	bne.n	8005fe2 <_puts_r+0x6e>
 8005fde:	68ac      	ldr	r4, [r5, #8]
 8005fe0:	e7da      	b.n	8005f98 <_puts_r+0x24>
 8005fe2:	4b1a      	ldr	r3, [pc, #104]	; (800604c <_puts_r+0xd8>)
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	bf08      	it	eq
 8005fe8:	68ec      	ldreq	r4, [r5, #12]
 8005fea:	e7d5      	b.n	8005f98 <_puts_r+0x24>
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f898 	bl	8006124 <__swsetup_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d0dd      	beq.n	8005fb4 <_puts_r+0x40>
 8005ff8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ffe:	07da      	lsls	r2, r3, #31
 8006000:	d405      	bmi.n	800600e <_puts_r+0x9a>
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	059b      	lsls	r3, r3, #22
 8006006:	d402      	bmi.n	800600e <_puts_r+0x9a>
 8006008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800600a:	f001 f92f 	bl	800726c <__retarget_lock_release_recursive>
 800600e:	4628      	mov	r0, r5
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	2b00      	cmp	r3, #0
 8006014:	da04      	bge.n	8006020 <_puts_r+0xac>
 8006016:	69a2      	ldr	r2, [r4, #24]
 8006018:	429a      	cmp	r2, r3
 800601a:	dc06      	bgt.n	800602a <_puts_r+0xb6>
 800601c:	290a      	cmp	r1, #10
 800601e:	d004      	beq.n	800602a <_puts_r+0xb6>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	7019      	strb	r1, [r3, #0]
 8006028:	e7c5      	b.n	8005fb6 <_puts_r+0x42>
 800602a:	4622      	mov	r2, r4
 800602c:	4628      	mov	r0, r5
 800602e:	f000 f827 	bl	8006080 <__swbuf_r>
 8006032:	3001      	adds	r0, #1
 8006034:	d1bf      	bne.n	8005fb6 <_puts_r+0x42>
 8006036:	e7df      	b.n	8005ff8 <_puts_r+0x84>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	250a      	movs	r5, #10
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	6022      	str	r2, [r4, #0]
 8006040:	701d      	strb	r5, [r3, #0]
 8006042:	e7db      	b.n	8005ffc <_puts_r+0x88>
 8006044:	080092dc 	.word	0x080092dc
 8006048:	080092fc 	.word	0x080092fc
 800604c:	080092bc 	.word	0x080092bc

08006050 <puts>:
 8006050:	4b02      	ldr	r3, [pc, #8]	; (800605c <puts+0xc>)
 8006052:	4601      	mov	r1, r0
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f7ff bf8d 	b.w	8005f74 <_puts_r>
 800605a:	bf00      	nop
 800605c:	2000000c 	.word	0x2000000c

08006060 <_sbrk_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	; (800607c <_sbrk_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fc f908 	bl	8002280 <_sbrk>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_sbrk_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_sbrk_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	200004b0 	.word	0x200004b0

08006080 <__swbuf_r>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	460e      	mov	r6, r1
 8006084:	4614      	mov	r4, r2
 8006086:	4605      	mov	r5, r0
 8006088:	b118      	cbz	r0, 8006092 <__swbuf_r+0x12>
 800608a:	6983      	ldr	r3, [r0, #24]
 800608c:	b90b      	cbnz	r3, 8006092 <__swbuf_r+0x12>
 800608e:	f001 f849 	bl	8007124 <__sinit>
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <__swbuf_r+0x98>)
 8006094:	429c      	cmp	r4, r3
 8006096:	d12b      	bne.n	80060f0 <__swbuf_r+0x70>
 8006098:	686c      	ldr	r4, [r5, #4]
 800609a:	69a3      	ldr	r3, [r4, #24]
 800609c:	60a3      	str	r3, [r4, #8]
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	071a      	lsls	r2, r3, #28
 80060a2:	d52f      	bpl.n	8006104 <__swbuf_r+0x84>
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	b36b      	cbz	r3, 8006104 <__swbuf_r+0x84>
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	6820      	ldr	r0, [r4, #0]
 80060ac:	1ac0      	subs	r0, r0, r3
 80060ae:	6963      	ldr	r3, [r4, #20]
 80060b0:	b2f6      	uxtb	r6, r6
 80060b2:	4283      	cmp	r3, r0
 80060b4:	4637      	mov	r7, r6
 80060b6:	dc04      	bgt.n	80060c2 <__swbuf_r+0x42>
 80060b8:	4621      	mov	r1, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 ff9e 	bl	8006ffc <_fflush_r>
 80060c0:	bb30      	cbnz	r0, 8006110 <__swbuf_r+0x90>
 80060c2:	68a3      	ldr	r3, [r4, #8]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	60a3      	str	r3, [r4, #8]
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	6022      	str	r2, [r4, #0]
 80060ce:	701e      	strb	r6, [r3, #0]
 80060d0:	6963      	ldr	r3, [r4, #20]
 80060d2:	3001      	adds	r0, #1
 80060d4:	4283      	cmp	r3, r0
 80060d6:	d004      	beq.n	80060e2 <__swbuf_r+0x62>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	07db      	lsls	r3, r3, #31
 80060dc:	d506      	bpl.n	80060ec <__swbuf_r+0x6c>
 80060de:	2e0a      	cmp	r6, #10
 80060e0:	d104      	bne.n	80060ec <__swbuf_r+0x6c>
 80060e2:	4621      	mov	r1, r4
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 ff89 	bl	8006ffc <_fflush_r>
 80060ea:	b988      	cbnz	r0, 8006110 <__swbuf_r+0x90>
 80060ec:	4638      	mov	r0, r7
 80060ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <__swbuf_r+0x9c>)
 80060f2:	429c      	cmp	r4, r3
 80060f4:	d101      	bne.n	80060fa <__swbuf_r+0x7a>
 80060f6:	68ac      	ldr	r4, [r5, #8]
 80060f8:	e7cf      	b.n	800609a <__swbuf_r+0x1a>
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <__swbuf_r+0xa0>)
 80060fc:	429c      	cmp	r4, r3
 80060fe:	bf08      	it	eq
 8006100:	68ec      	ldreq	r4, [r5, #12]
 8006102:	e7ca      	b.n	800609a <__swbuf_r+0x1a>
 8006104:	4621      	mov	r1, r4
 8006106:	4628      	mov	r0, r5
 8006108:	f000 f80c 	bl	8006124 <__swsetup_r>
 800610c:	2800      	cmp	r0, #0
 800610e:	d0cb      	beq.n	80060a8 <__swbuf_r+0x28>
 8006110:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006114:	e7ea      	b.n	80060ec <__swbuf_r+0x6c>
 8006116:	bf00      	nop
 8006118:	080092dc 	.word	0x080092dc
 800611c:	080092fc 	.word	0x080092fc
 8006120:	080092bc 	.word	0x080092bc

08006124 <__swsetup_r>:
 8006124:	4b32      	ldr	r3, [pc, #200]	; (80061f0 <__swsetup_r+0xcc>)
 8006126:	b570      	push	{r4, r5, r6, lr}
 8006128:	681d      	ldr	r5, [r3, #0]
 800612a:	4606      	mov	r6, r0
 800612c:	460c      	mov	r4, r1
 800612e:	b125      	cbz	r5, 800613a <__swsetup_r+0x16>
 8006130:	69ab      	ldr	r3, [r5, #24]
 8006132:	b913      	cbnz	r3, 800613a <__swsetup_r+0x16>
 8006134:	4628      	mov	r0, r5
 8006136:	f000 fff5 	bl	8007124 <__sinit>
 800613a:	4b2e      	ldr	r3, [pc, #184]	; (80061f4 <__swsetup_r+0xd0>)
 800613c:	429c      	cmp	r4, r3
 800613e:	d10f      	bne.n	8006160 <__swsetup_r+0x3c>
 8006140:	686c      	ldr	r4, [r5, #4]
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006148:	0719      	lsls	r1, r3, #28
 800614a:	d42c      	bmi.n	80061a6 <__swsetup_r+0x82>
 800614c:	06dd      	lsls	r5, r3, #27
 800614e:	d411      	bmi.n	8006174 <__swsetup_r+0x50>
 8006150:	2309      	movs	r3, #9
 8006152:	6033      	str	r3, [r6, #0]
 8006154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006158:	81a3      	strh	r3, [r4, #12]
 800615a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800615e:	e03e      	b.n	80061de <__swsetup_r+0xba>
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <__swsetup_r+0xd4>)
 8006162:	429c      	cmp	r4, r3
 8006164:	d101      	bne.n	800616a <__swsetup_r+0x46>
 8006166:	68ac      	ldr	r4, [r5, #8]
 8006168:	e7eb      	b.n	8006142 <__swsetup_r+0x1e>
 800616a:	4b24      	ldr	r3, [pc, #144]	; (80061fc <__swsetup_r+0xd8>)
 800616c:	429c      	cmp	r4, r3
 800616e:	bf08      	it	eq
 8006170:	68ec      	ldreq	r4, [r5, #12]
 8006172:	e7e6      	b.n	8006142 <__swsetup_r+0x1e>
 8006174:	0758      	lsls	r0, r3, #29
 8006176:	d512      	bpl.n	800619e <__swsetup_r+0x7a>
 8006178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800617a:	b141      	cbz	r1, 800618e <__swsetup_r+0x6a>
 800617c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006180:	4299      	cmp	r1, r3
 8006182:	d002      	beq.n	800618a <__swsetup_r+0x66>
 8006184:	4630      	mov	r0, r6
 8006186:	f7ff f9c9 	bl	800551c <_free_r>
 800618a:	2300      	movs	r3, #0
 800618c:	6363      	str	r3, [r4, #52]	; 0x34
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006194:	81a3      	strh	r3, [r4, #12]
 8006196:	2300      	movs	r3, #0
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	f043 0308 	orr.w	r3, r3, #8
 80061a4:	81a3      	strh	r3, [r4, #12]
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	b94b      	cbnz	r3, 80061be <__swsetup_r+0x9a>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b4:	d003      	beq.n	80061be <__swsetup_r+0x9a>
 80061b6:	4621      	mov	r1, r4
 80061b8:	4630      	mov	r0, r6
 80061ba:	f001 f87d 	bl	80072b8 <__smakebuf_r>
 80061be:	89a0      	ldrh	r0, [r4, #12]
 80061c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061c4:	f010 0301 	ands.w	r3, r0, #1
 80061c8:	d00a      	beq.n	80061e0 <__swsetup_r+0xbc>
 80061ca:	2300      	movs	r3, #0
 80061cc:	60a3      	str	r3, [r4, #8]
 80061ce:	6963      	ldr	r3, [r4, #20]
 80061d0:	425b      	negs	r3, r3
 80061d2:	61a3      	str	r3, [r4, #24]
 80061d4:	6923      	ldr	r3, [r4, #16]
 80061d6:	b943      	cbnz	r3, 80061ea <__swsetup_r+0xc6>
 80061d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061dc:	d1ba      	bne.n	8006154 <__swsetup_r+0x30>
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	0781      	lsls	r1, r0, #30
 80061e2:	bf58      	it	pl
 80061e4:	6963      	ldrpl	r3, [r4, #20]
 80061e6:	60a3      	str	r3, [r4, #8]
 80061e8:	e7f4      	b.n	80061d4 <__swsetup_r+0xb0>
 80061ea:	2000      	movs	r0, #0
 80061ec:	e7f7      	b.n	80061de <__swsetup_r+0xba>
 80061ee:	bf00      	nop
 80061f0:	2000000c 	.word	0x2000000c
 80061f4:	080092dc 	.word	0x080092dc
 80061f8:	080092fc 	.word	0x080092fc
 80061fc:	080092bc 	.word	0x080092bc

08006200 <quorem>:
 8006200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	6903      	ldr	r3, [r0, #16]
 8006206:	690c      	ldr	r4, [r1, #16]
 8006208:	42a3      	cmp	r3, r4
 800620a:	4607      	mov	r7, r0
 800620c:	f2c0 8081 	blt.w	8006312 <quorem+0x112>
 8006210:	3c01      	subs	r4, #1
 8006212:	f101 0814 	add.w	r8, r1, #20
 8006216:	f100 0514 	add.w	r5, r0, #20
 800621a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800621e:	9301      	str	r3, [sp, #4]
 8006220:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006228:	3301      	adds	r3, #1
 800622a:	429a      	cmp	r2, r3
 800622c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006230:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006234:	fbb2 f6f3 	udiv	r6, r2, r3
 8006238:	d331      	bcc.n	800629e <quorem+0x9e>
 800623a:	f04f 0e00 	mov.w	lr, #0
 800623e:	4640      	mov	r0, r8
 8006240:	46ac      	mov	ip, r5
 8006242:	46f2      	mov	sl, lr
 8006244:	f850 2b04 	ldr.w	r2, [r0], #4
 8006248:	b293      	uxth	r3, r2
 800624a:	fb06 e303 	mla	r3, r6, r3, lr
 800624e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006252:	b29b      	uxth	r3, r3
 8006254:	ebaa 0303 	sub.w	r3, sl, r3
 8006258:	0c12      	lsrs	r2, r2, #16
 800625a:	f8dc a000 	ldr.w	sl, [ip]
 800625e:	fb06 e202 	mla	r2, r6, r2, lr
 8006262:	fa13 f38a 	uxtah	r3, r3, sl
 8006266:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800626a:	fa1f fa82 	uxth.w	sl, r2
 800626e:	f8dc 2000 	ldr.w	r2, [ip]
 8006272:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006276:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800627a:	b29b      	uxth	r3, r3
 800627c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006280:	4581      	cmp	r9, r0
 8006282:	f84c 3b04 	str.w	r3, [ip], #4
 8006286:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800628a:	d2db      	bcs.n	8006244 <quorem+0x44>
 800628c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006290:	b92b      	cbnz	r3, 800629e <quorem+0x9e>
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	3b04      	subs	r3, #4
 8006296:	429d      	cmp	r5, r3
 8006298:	461a      	mov	r2, r3
 800629a:	d32e      	bcc.n	80062fa <quorem+0xfa>
 800629c:	613c      	str	r4, [r7, #16]
 800629e:	4638      	mov	r0, r7
 80062a0:	f001 fae2 	bl	8007868 <__mcmp>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	db24      	blt.n	80062f2 <quorem+0xf2>
 80062a8:	3601      	adds	r6, #1
 80062aa:	4628      	mov	r0, r5
 80062ac:	f04f 0c00 	mov.w	ip, #0
 80062b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80062b4:	f8d0 e000 	ldr.w	lr, [r0]
 80062b8:	b293      	uxth	r3, r2
 80062ba:	ebac 0303 	sub.w	r3, ip, r3
 80062be:	0c12      	lsrs	r2, r2, #16
 80062c0:	fa13 f38e 	uxtah	r3, r3, lr
 80062c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062d2:	45c1      	cmp	r9, r8
 80062d4:	f840 3b04 	str.w	r3, [r0], #4
 80062d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062dc:	d2e8      	bcs.n	80062b0 <quorem+0xb0>
 80062de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062e6:	b922      	cbnz	r2, 80062f2 <quorem+0xf2>
 80062e8:	3b04      	subs	r3, #4
 80062ea:	429d      	cmp	r5, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	d30a      	bcc.n	8006306 <quorem+0x106>
 80062f0:	613c      	str	r4, [r7, #16]
 80062f2:	4630      	mov	r0, r6
 80062f4:	b003      	add	sp, #12
 80062f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	3b04      	subs	r3, #4
 80062fe:	2a00      	cmp	r2, #0
 8006300:	d1cc      	bne.n	800629c <quorem+0x9c>
 8006302:	3c01      	subs	r4, #1
 8006304:	e7c7      	b.n	8006296 <quorem+0x96>
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	3b04      	subs	r3, #4
 800630a:	2a00      	cmp	r2, #0
 800630c:	d1f0      	bne.n	80062f0 <quorem+0xf0>
 800630e:	3c01      	subs	r4, #1
 8006310:	e7eb      	b.n	80062ea <quorem+0xea>
 8006312:	2000      	movs	r0, #0
 8006314:	e7ee      	b.n	80062f4 <quorem+0xf4>
	...

08006318 <_dtoa_r>:
 8006318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	ed2d 8b02 	vpush	{d8}
 8006320:	ec57 6b10 	vmov	r6, r7, d0
 8006324:	b095      	sub	sp, #84	; 0x54
 8006326:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006328:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800632c:	9105      	str	r1, [sp, #20]
 800632e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006332:	4604      	mov	r4, r0
 8006334:	9209      	str	r2, [sp, #36]	; 0x24
 8006336:	930f      	str	r3, [sp, #60]	; 0x3c
 8006338:	b975      	cbnz	r5, 8006358 <_dtoa_r+0x40>
 800633a:	2010      	movs	r0, #16
 800633c:	f7ff f8de 	bl	80054fc <malloc>
 8006340:	4602      	mov	r2, r0
 8006342:	6260      	str	r0, [r4, #36]	; 0x24
 8006344:	b920      	cbnz	r0, 8006350 <_dtoa_r+0x38>
 8006346:	4bb2      	ldr	r3, [pc, #712]	; (8006610 <_dtoa_r+0x2f8>)
 8006348:	21ea      	movs	r1, #234	; 0xea
 800634a:	48b2      	ldr	r0, [pc, #712]	; (8006614 <_dtoa_r+0x2fc>)
 800634c:	f001 fd4a 	bl	8007de4 <__assert_func>
 8006350:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006354:	6005      	str	r5, [r0, #0]
 8006356:	60c5      	str	r5, [r0, #12]
 8006358:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800635a:	6819      	ldr	r1, [r3, #0]
 800635c:	b151      	cbz	r1, 8006374 <_dtoa_r+0x5c>
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	604a      	str	r2, [r1, #4]
 8006362:	2301      	movs	r3, #1
 8006364:	4093      	lsls	r3, r2
 8006366:	608b      	str	r3, [r1, #8]
 8006368:	4620      	mov	r0, r4
 800636a:	f001 f83f 	bl	80073ec <_Bfree>
 800636e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	1e3b      	subs	r3, r7, #0
 8006376:	bfb9      	ittee	lt
 8006378:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800637c:	9303      	strlt	r3, [sp, #12]
 800637e:	2300      	movge	r3, #0
 8006380:	f8c8 3000 	strge.w	r3, [r8]
 8006384:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006388:	4ba3      	ldr	r3, [pc, #652]	; (8006618 <_dtoa_r+0x300>)
 800638a:	bfbc      	itt	lt
 800638c:	2201      	movlt	r2, #1
 800638e:	f8c8 2000 	strlt.w	r2, [r8]
 8006392:	ea33 0309 	bics.w	r3, r3, r9
 8006396:	d11b      	bne.n	80063d0 <_dtoa_r+0xb8>
 8006398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800639a:	f242 730f 	movw	r3, #9999	; 0x270f
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063a4:	4333      	orrs	r3, r6
 80063a6:	f000 857a 	beq.w	8006e9e <_dtoa_r+0xb86>
 80063aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063ac:	b963      	cbnz	r3, 80063c8 <_dtoa_r+0xb0>
 80063ae:	4b9b      	ldr	r3, [pc, #620]	; (800661c <_dtoa_r+0x304>)
 80063b0:	e024      	b.n	80063fc <_dtoa_r+0xe4>
 80063b2:	4b9b      	ldr	r3, [pc, #620]	; (8006620 <_dtoa_r+0x308>)
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	9800      	ldr	r0, [sp, #0]
 80063be:	b015      	add	sp, #84	; 0x54
 80063c0:	ecbd 8b02 	vpop	{d8}
 80063c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c8:	4b94      	ldr	r3, [pc, #592]	; (800661c <_dtoa_r+0x304>)
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	3303      	adds	r3, #3
 80063ce:	e7f3      	b.n	80063b8 <_dtoa_r+0xa0>
 80063d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063d4:	2200      	movs	r2, #0
 80063d6:	ec51 0b17 	vmov	r0, r1, d7
 80063da:	2300      	movs	r3, #0
 80063dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80063e0:	f7fa fb92 	bl	8000b08 <__aeabi_dcmpeq>
 80063e4:	4680      	mov	r8, r0
 80063e6:	b158      	cbz	r0, 8006400 <_dtoa_r+0xe8>
 80063e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ea:	2301      	movs	r3, #1
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8551 	beq.w	8006e98 <_dtoa_r+0xb80>
 80063f6:	488b      	ldr	r0, [pc, #556]	; (8006624 <_dtoa_r+0x30c>)
 80063f8:	6018      	str	r0, [r3, #0]
 80063fa:	1e43      	subs	r3, r0, #1
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	e7dd      	b.n	80063bc <_dtoa_r+0xa4>
 8006400:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006404:	aa12      	add	r2, sp, #72	; 0x48
 8006406:	a913      	add	r1, sp, #76	; 0x4c
 8006408:	4620      	mov	r0, r4
 800640a:	f001 fad1 	bl	80079b0 <__d2b>
 800640e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006412:	4683      	mov	fp, r0
 8006414:	2d00      	cmp	r5, #0
 8006416:	d07c      	beq.n	8006512 <_dtoa_r+0x1fa>
 8006418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800641a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800641e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006422:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006426:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800642a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800642e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006432:	4b7d      	ldr	r3, [pc, #500]	; (8006628 <_dtoa_r+0x310>)
 8006434:	2200      	movs	r2, #0
 8006436:	4630      	mov	r0, r6
 8006438:	4639      	mov	r1, r7
 800643a:	f7f9 ff45 	bl	80002c8 <__aeabi_dsub>
 800643e:	a36e      	add	r3, pc, #440	; (adr r3, 80065f8 <_dtoa_r+0x2e0>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7fa f8f8 	bl	8000638 <__aeabi_dmul>
 8006448:	a36d      	add	r3, pc, #436	; (adr r3, 8006600 <_dtoa_r+0x2e8>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f7f9 ff3d 	bl	80002cc <__adddf3>
 8006452:	4606      	mov	r6, r0
 8006454:	4628      	mov	r0, r5
 8006456:	460f      	mov	r7, r1
 8006458:	f7fa f884 	bl	8000564 <__aeabi_i2d>
 800645c:	a36a      	add	r3, pc, #424	; (adr r3, 8006608 <_dtoa_r+0x2f0>)
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	f7fa f8e9 	bl	8000638 <__aeabi_dmul>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4630      	mov	r0, r6
 800646c:	4639      	mov	r1, r7
 800646e:	f7f9 ff2d 	bl	80002cc <__adddf3>
 8006472:	4606      	mov	r6, r0
 8006474:	460f      	mov	r7, r1
 8006476:	f7fa fb8f 	bl	8000b98 <__aeabi_d2iz>
 800647a:	2200      	movs	r2, #0
 800647c:	4682      	mov	sl, r0
 800647e:	2300      	movs	r3, #0
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	f7fa fb4a 	bl	8000b1c <__aeabi_dcmplt>
 8006488:	b148      	cbz	r0, 800649e <_dtoa_r+0x186>
 800648a:	4650      	mov	r0, sl
 800648c:	f7fa f86a 	bl	8000564 <__aeabi_i2d>
 8006490:	4632      	mov	r2, r6
 8006492:	463b      	mov	r3, r7
 8006494:	f7fa fb38 	bl	8000b08 <__aeabi_dcmpeq>
 8006498:	b908      	cbnz	r0, 800649e <_dtoa_r+0x186>
 800649a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800649e:	f1ba 0f16 	cmp.w	sl, #22
 80064a2:	d854      	bhi.n	800654e <_dtoa_r+0x236>
 80064a4:	4b61      	ldr	r3, [pc, #388]	; (800662c <_dtoa_r+0x314>)
 80064a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064b2:	f7fa fb33 	bl	8000b1c <__aeabi_dcmplt>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d04b      	beq.n	8006552 <_dtoa_r+0x23a>
 80064ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80064be:	2300      	movs	r3, #0
 80064c0:	930e      	str	r3, [sp, #56]	; 0x38
 80064c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064c4:	1b5d      	subs	r5, r3, r5
 80064c6:	1e6b      	subs	r3, r5, #1
 80064c8:	9304      	str	r3, [sp, #16]
 80064ca:	bf43      	ittte	mi
 80064cc:	2300      	movmi	r3, #0
 80064ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80064d2:	9304      	strmi	r3, [sp, #16]
 80064d4:	f04f 0800 	movpl.w	r8, #0
 80064d8:	f1ba 0f00 	cmp.w	sl, #0
 80064dc:	db3b      	blt.n	8006556 <_dtoa_r+0x23e>
 80064de:	9b04      	ldr	r3, [sp, #16]
 80064e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80064e4:	4453      	add	r3, sl
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	2300      	movs	r3, #0
 80064ea:	9306      	str	r3, [sp, #24]
 80064ec:	9b05      	ldr	r3, [sp, #20]
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d869      	bhi.n	80065c6 <_dtoa_r+0x2ae>
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	bfc4      	itt	gt
 80064f6:	3b04      	subgt	r3, #4
 80064f8:	9305      	strgt	r3, [sp, #20]
 80064fa:	9b05      	ldr	r3, [sp, #20]
 80064fc:	f1a3 0302 	sub.w	r3, r3, #2
 8006500:	bfcc      	ite	gt
 8006502:	2500      	movgt	r5, #0
 8006504:	2501      	movle	r5, #1
 8006506:	2b03      	cmp	r3, #3
 8006508:	d869      	bhi.n	80065de <_dtoa_r+0x2c6>
 800650a:	e8df f003 	tbb	[pc, r3]
 800650e:	4e2c      	.short	0x4e2c
 8006510:	5a4c      	.short	0x5a4c
 8006512:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006516:	441d      	add	r5, r3
 8006518:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800651c:	2b20      	cmp	r3, #32
 800651e:	bfc1      	itttt	gt
 8006520:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006524:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006528:	fa09 f303 	lslgt.w	r3, r9, r3
 800652c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006530:	bfda      	itte	le
 8006532:	f1c3 0320 	rsble	r3, r3, #32
 8006536:	fa06 f003 	lslle.w	r0, r6, r3
 800653a:	4318      	orrgt	r0, r3
 800653c:	f7fa f802 	bl	8000544 <__aeabi_ui2d>
 8006540:	2301      	movs	r3, #1
 8006542:	4606      	mov	r6, r0
 8006544:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006548:	3d01      	subs	r5, #1
 800654a:	9310      	str	r3, [sp, #64]	; 0x40
 800654c:	e771      	b.n	8006432 <_dtoa_r+0x11a>
 800654e:	2301      	movs	r3, #1
 8006550:	e7b6      	b.n	80064c0 <_dtoa_r+0x1a8>
 8006552:	900e      	str	r0, [sp, #56]	; 0x38
 8006554:	e7b5      	b.n	80064c2 <_dtoa_r+0x1aa>
 8006556:	f1ca 0300 	rsb	r3, sl, #0
 800655a:	9306      	str	r3, [sp, #24]
 800655c:	2300      	movs	r3, #0
 800655e:	eba8 080a 	sub.w	r8, r8, sl
 8006562:	930d      	str	r3, [sp, #52]	; 0x34
 8006564:	e7c2      	b.n	80064ec <_dtoa_r+0x1d4>
 8006566:	2300      	movs	r3, #0
 8006568:	9308      	str	r3, [sp, #32]
 800656a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656c:	2b00      	cmp	r3, #0
 800656e:	dc39      	bgt.n	80065e4 <_dtoa_r+0x2cc>
 8006570:	f04f 0901 	mov.w	r9, #1
 8006574:	f8cd 9004 	str.w	r9, [sp, #4]
 8006578:	464b      	mov	r3, r9
 800657a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800657e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006580:	2200      	movs	r2, #0
 8006582:	6042      	str	r2, [r0, #4]
 8006584:	2204      	movs	r2, #4
 8006586:	f102 0614 	add.w	r6, r2, #20
 800658a:	429e      	cmp	r6, r3
 800658c:	6841      	ldr	r1, [r0, #4]
 800658e:	d92f      	bls.n	80065f0 <_dtoa_r+0x2d8>
 8006590:	4620      	mov	r0, r4
 8006592:	f000 feeb 	bl	800736c <_Balloc>
 8006596:	9000      	str	r0, [sp, #0]
 8006598:	2800      	cmp	r0, #0
 800659a:	d14b      	bne.n	8006634 <_dtoa_r+0x31c>
 800659c:	4b24      	ldr	r3, [pc, #144]	; (8006630 <_dtoa_r+0x318>)
 800659e:	4602      	mov	r2, r0
 80065a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80065a4:	e6d1      	b.n	800634a <_dtoa_r+0x32>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e7de      	b.n	8006568 <_dtoa_r+0x250>
 80065aa:	2300      	movs	r3, #0
 80065ac:	9308      	str	r3, [sp, #32]
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	eb0a 0903 	add.w	r9, sl, r3
 80065b4:	f109 0301 	add.w	r3, r9, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	bfb8      	it	lt
 80065be:	2301      	movlt	r3, #1
 80065c0:	e7dd      	b.n	800657e <_dtoa_r+0x266>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e7f2      	b.n	80065ac <_dtoa_r+0x294>
 80065c6:	2501      	movs	r5, #1
 80065c8:	2300      	movs	r3, #0
 80065ca:	9305      	str	r3, [sp, #20]
 80065cc:	9508      	str	r5, [sp, #32]
 80065ce:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80065d8:	2312      	movs	r3, #18
 80065da:	9209      	str	r2, [sp, #36]	; 0x24
 80065dc:	e7cf      	b.n	800657e <_dtoa_r+0x266>
 80065de:	2301      	movs	r3, #1
 80065e0:	9308      	str	r3, [sp, #32]
 80065e2:	e7f4      	b.n	80065ce <_dtoa_r+0x2b6>
 80065e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80065e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80065ec:	464b      	mov	r3, r9
 80065ee:	e7c6      	b.n	800657e <_dtoa_r+0x266>
 80065f0:	3101      	adds	r1, #1
 80065f2:	6041      	str	r1, [r0, #4]
 80065f4:	0052      	lsls	r2, r2, #1
 80065f6:	e7c6      	b.n	8006586 <_dtoa_r+0x26e>
 80065f8:	636f4361 	.word	0x636f4361
 80065fc:	3fd287a7 	.word	0x3fd287a7
 8006600:	8b60c8b3 	.word	0x8b60c8b3
 8006604:	3fc68a28 	.word	0x3fc68a28
 8006608:	509f79fb 	.word	0x509f79fb
 800660c:	3fd34413 	.word	0x3fd34413
 8006610:	08009235 	.word	0x08009235
 8006614:	0800924c 	.word	0x0800924c
 8006618:	7ff00000 	.word	0x7ff00000
 800661c:	08009231 	.word	0x08009231
 8006620:	08009228 	.word	0x08009228
 8006624:	08009205 	.word	0x08009205
 8006628:	3ff80000 	.word	0x3ff80000
 800662c:	080093a8 	.word	0x080093a8
 8006630:	080092ab 	.word	0x080092ab
 8006634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006636:	9a00      	ldr	r2, [sp, #0]
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	9b01      	ldr	r3, [sp, #4]
 800663c:	2b0e      	cmp	r3, #14
 800663e:	f200 80ad 	bhi.w	800679c <_dtoa_r+0x484>
 8006642:	2d00      	cmp	r5, #0
 8006644:	f000 80aa 	beq.w	800679c <_dtoa_r+0x484>
 8006648:	f1ba 0f00 	cmp.w	sl, #0
 800664c:	dd36      	ble.n	80066bc <_dtoa_r+0x3a4>
 800664e:	4ac3      	ldr	r2, [pc, #780]	; (800695c <_dtoa_r+0x644>)
 8006650:	f00a 030f 	and.w	r3, sl, #15
 8006654:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006658:	ed93 7b00 	vldr	d7, [r3]
 800665c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006660:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006664:	eeb0 8a47 	vmov.f32	s16, s14
 8006668:	eef0 8a67 	vmov.f32	s17, s15
 800666c:	d016      	beq.n	800669c <_dtoa_r+0x384>
 800666e:	4bbc      	ldr	r3, [pc, #752]	; (8006960 <_dtoa_r+0x648>)
 8006670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006678:	f7fa f908 	bl	800088c <__aeabi_ddiv>
 800667c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006680:	f007 070f 	and.w	r7, r7, #15
 8006684:	2503      	movs	r5, #3
 8006686:	4eb6      	ldr	r6, [pc, #728]	; (8006960 <_dtoa_r+0x648>)
 8006688:	b957      	cbnz	r7, 80066a0 <_dtoa_r+0x388>
 800668a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800668e:	ec53 2b18 	vmov	r2, r3, d8
 8006692:	f7fa f8fb 	bl	800088c <__aeabi_ddiv>
 8006696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800669a:	e029      	b.n	80066f0 <_dtoa_r+0x3d8>
 800669c:	2502      	movs	r5, #2
 800669e:	e7f2      	b.n	8006686 <_dtoa_r+0x36e>
 80066a0:	07f9      	lsls	r1, r7, #31
 80066a2:	d508      	bpl.n	80066b6 <_dtoa_r+0x39e>
 80066a4:	ec51 0b18 	vmov	r0, r1, d8
 80066a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066ac:	f7f9 ffc4 	bl	8000638 <__aeabi_dmul>
 80066b0:	ec41 0b18 	vmov	d8, r0, r1
 80066b4:	3501      	adds	r5, #1
 80066b6:	107f      	asrs	r7, r7, #1
 80066b8:	3608      	adds	r6, #8
 80066ba:	e7e5      	b.n	8006688 <_dtoa_r+0x370>
 80066bc:	f000 80a6 	beq.w	800680c <_dtoa_r+0x4f4>
 80066c0:	f1ca 0600 	rsb	r6, sl, #0
 80066c4:	4ba5      	ldr	r3, [pc, #660]	; (800695c <_dtoa_r+0x644>)
 80066c6:	4fa6      	ldr	r7, [pc, #664]	; (8006960 <_dtoa_r+0x648>)
 80066c8:	f006 020f 	and.w	r2, r6, #15
 80066cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066d8:	f7f9 ffae 	bl	8000638 <__aeabi_dmul>
 80066dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e0:	1136      	asrs	r6, r6, #4
 80066e2:	2300      	movs	r3, #0
 80066e4:	2502      	movs	r5, #2
 80066e6:	2e00      	cmp	r6, #0
 80066e8:	f040 8085 	bne.w	80067f6 <_dtoa_r+0x4de>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1d2      	bne.n	8006696 <_dtoa_r+0x37e>
 80066f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 808c 	beq.w	8006810 <_dtoa_r+0x4f8>
 80066f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066fc:	4b99      	ldr	r3, [pc, #612]	; (8006964 <_dtoa_r+0x64c>)
 80066fe:	2200      	movs	r2, #0
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7fa fa0a 	bl	8000b1c <__aeabi_dcmplt>
 8006708:	2800      	cmp	r0, #0
 800670a:	f000 8081 	beq.w	8006810 <_dtoa_r+0x4f8>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d07d      	beq.n	8006810 <_dtoa_r+0x4f8>
 8006714:	f1b9 0f00 	cmp.w	r9, #0
 8006718:	dd3c      	ble.n	8006794 <_dtoa_r+0x47c>
 800671a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	2200      	movs	r2, #0
 8006722:	4b91      	ldr	r3, [pc, #580]	; (8006968 <_dtoa_r+0x650>)
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f7f9 ff86 	bl	8000638 <__aeabi_dmul>
 800672c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006730:	3501      	adds	r5, #1
 8006732:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006736:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800673a:	4628      	mov	r0, r5
 800673c:	f7f9 ff12 	bl	8000564 <__aeabi_i2d>
 8006740:	4632      	mov	r2, r6
 8006742:	463b      	mov	r3, r7
 8006744:	f7f9 ff78 	bl	8000638 <__aeabi_dmul>
 8006748:	4b88      	ldr	r3, [pc, #544]	; (800696c <_dtoa_r+0x654>)
 800674a:	2200      	movs	r2, #0
 800674c:	f7f9 fdbe 	bl	80002cc <__adddf3>
 8006750:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800675c:	2b00      	cmp	r3, #0
 800675e:	d15c      	bne.n	800681a <_dtoa_r+0x502>
 8006760:	4b83      	ldr	r3, [pc, #524]	; (8006970 <_dtoa_r+0x658>)
 8006762:	2200      	movs	r2, #0
 8006764:	4630      	mov	r0, r6
 8006766:	4639      	mov	r1, r7
 8006768:	f7f9 fdae 	bl	80002c8 <__aeabi_dsub>
 800676c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006770:	4606      	mov	r6, r0
 8006772:	460f      	mov	r7, r1
 8006774:	f7fa f9f0 	bl	8000b58 <__aeabi_dcmpgt>
 8006778:	2800      	cmp	r0, #0
 800677a:	f040 8296 	bne.w	8006caa <_dtoa_r+0x992>
 800677e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006782:	4630      	mov	r0, r6
 8006784:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006788:	4639      	mov	r1, r7
 800678a:	f7fa f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800678e:	2800      	cmp	r0, #0
 8006790:	f040 8288 	bne.w	8006ca4 <_dtoa_r+0x98c>
 8006794:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006798:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800679c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f2c0 8158 	blt.w	8006a54 <_dtoa_r+0x73c>
 80067a4:	f1ba 0f0e 	cmp.w	sl, #14
 80067a8:	f300 8154 	bgt.w	8006a54 <_dtoa_r+0x73c>
 80067ac:	4b6b      	ldr	r3, [pc, #428]	; (800695c <_dtoa_r+0x644>)
 80067ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f280 80e3 	bge.w	8006984 <_dtoa_r+0x66c>
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f300 80df 	bgt.w	8006984 <_dtoa_r+0x66c>
 80067c6:	f040 826d 	bne.w	8006ca4 <_dtoa_r+0x98c>
 80067ca:	4b69      	ldr	r3, [pc, #420]	; (8006970 <_dtoa_r+0x658>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	4640      	mov	r0, r8
 80067d0:	4649      	mov	r1, r9
 80067d2:	f7f9 ff31 	bl	8000638 <__aeabi_dmul>
 80067d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067da:	f7fa f9b3 	bl	8000b44 <__aeabi_dcmpge>
 80067de:	9e01      	ldr	r6, [sp, #4]
 80067e0:	4637      	mov	r7, r6
 80067e2:	2800      	cmp	r0, #0
 80067e4:	f040 8243 	bne.w	8006c6e <_dtoa_r+0x956>
 80067e8:	9d00      	ldr	r5, [sp, #0]
 80067ea:	2331      	movs	r3, #49	; 0x31
 80067ec:	f805 3b01 	strb.w	r3, [r5], #1
 80067f0:	f10a 0a01 	add.w	sl, sl, #1
 80067f4:	e23f      	b.n	8006c76 <_dtoa_r+0x95e>
 80067f6:	07f2      	lsls	r2, r6, #31
 80067f8:	d505      	bpl.n	8006806 <_dtoa_r+0x4ee>
 80067fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067fe:	f7f9 ff1b 	bl	8000638 <__aeabi_dmul>
 8006802:	3501      	adds	r5, #1
 8006804:	2301      	movs	r3, #1
 8006806:	1076      	asrs	r6, r6, #1
 8006808:	3708      	adds	r7, #8
 800680a:	e76c      	b.n	80066e6 <_dtoa_r+0x3ce>
 800680c:	2502      	movs	r5, #2
 800680e:	e76f      	b.n	80066f0 <_dtoa_r+0x3d8>
 8006810:	9b01      	ldr	r3, [sp, #4]
 8006812:	f8cd a01c 	str.w	sl, [sp, #28]
 8006816:	930c      	str	r3, [sp, #48]	; 0x30
 8006818:	e78d      	b.n	8006736 <_dtoa_r+0x41e>
 800681a:	9900      	ldr	r1, [sp, #0]
 800681c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800681e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006820:	4b4e      	ldr	r3, [pc, #312]	; (800695c <_dtoa_r+0x644>)
 8006822:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006826:	4401      	add	r1, r0
 8006828:	9102      	str	r1, [sp, #8]
 800682a:	9908      	ldr	r1, [sp, #32]
 800682c:	eeb0 8a47 	vmov.f32	s16, s14
 8006830:	eef0 8a67 	vmov.f32	s17, s15
 8006834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006838:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800683c:	2900      	cmp	r1, #0
 800683e:	d045      	beq.n	80068cc <_dtoa_r+0x5b4>
 8006840:	494c      	ldr	r1, [pc, #304]	; (8006974 <_dtoa_r+0x65c>)
 8006842:	2000      	movs	r0, #0
 8006844:	f7fa f822 	bl	800088c <__aeabi_ddiv>
 8006848:	ec53 2b18 	vmov	r2, r3, d8
 800684c:	f7f9 fd3c 	bl	80002c8 <__aeabi_dsub>
 8006850:	9d00      	ldr	r5, [sp, #0]
 8006852:	ec41 0b18 	vmov	d8, r0, r1
 8006856:	4639      	mov	r1, r7
 8006858:	4630      	mov	r0, r6
 800685a:	f7fa f99d 	bl	8000b98 <__aeabi_d2iz>
 800685e:	900c      	str	r0, [sp, #48]	; 0x30
 8006860:	f7f9 fe80 	bl	8000564 <__aeabi_i2d>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4630      	mov	r0, r6
 800686a:	4639      	mov	r1, r7
 800686c:	f7f9 fd2c 	bl	80002c8 <__aeabi_dsub>
 8006870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006872:	3330      	adds	r3, #48	; 0x30
 8006874:	f805 3b01 	strb.w	r3, [r5], #1
 8006878:	ec53 2b18 	vmov	r2, r3, d8
 800687c:	4606      	mov	r6, r0
 800687e:	460f      	mov	r7, r1
 8006880:	f7fa f94c 	bl	8000b1c <__aeabi_dcmplt>
 8006884:	2800      	cmp	r0, #0
 8006886:	d165      	bne.n	8006954 <_dtoa_r+0x63c>
 8006888:	4632      	mov	r2, r6
 800688a:	463b      	mov	r3, r7
 800688c:	4935      	ldr	r1, [pc, #212]	; (8006964 <_dtoa_r+0x64c>)
 800688e:	2000      	movs	r0, #0
 8006890:	f7f9 fd1a 	bl	80002c8 <__aeabi_dsub>
 8006894:	ec53 2b18 	vmov	r2, r3, d8
 8006898:	f7fa f940 	bl	8000b1c <__aeabi_dcmplt>
 800689c:	2800      	cmp	r0, #0
 800689e:	f040 80b9 	bne.w	8006a14 <_dtoa_r+0x6fc>
 80068a2:	9b02      	ldr	r3, [sp, #8]
 80068a4:	429d      	cmp	r5, r3
 80068a6:	f43f af75 	beq.w	8006794 <_dtoa_r+0x47c>
 80068aa:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <_dtoa_r+0x650>)
 80068ac:	ec51 0b18 	vmov	r0, r1, d8
 80068b0:	2200      	movs	r2, #0
 80068b2:	f7f9 fec1 	bl	8000638 <__aeabi_dmul>
 80068b6:	4b2c      	ldr	r3, [pc, #176]	; (8006968 <_dtoa_r+0x650>)
 80068b8:	ec41 0b18 	vmov	d8, r0, r1
 80068bc:	2200      	movs	r2, #0
 80068be:	4630      	mov	r0, r6
 80068c0:	4639      	mov	r1, r7
 80068c2:	f7f9 feb9 	bl	8000638 <__aeabi_dmul>
 80068c6:	4606      	mov	r6, r0
 80068c8:	460f      	mov	r7, r1
 80068ca:	e7c4      	b.n	8006856 <_dtoa_r+0x53e>
 80068cc:	ec51 0b17 	vmov	r0, r1, d7
 80068d0:	f7f9 feb2 	bl	8000638 <__aeabi_dmul>
 80068d4:	9b02      	ldr	r3, [sp, #8]
 80068d6:	9d00      	ldr	r5, [sp, #0]
 80068d8:	930c      	str	r3, [sp, #48]	; 0x30
 80068da:	ec41 0b18 	vmov	d8, r0, r1
 80068de:	4639      	mov	r1, r7
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7fa f959 	bl	8000b98 <__aeabi_d2iz>
 80068e6:	9011      	str	r0, [sp, #68]	; 0x44
 80068e8:	f7f9 fe3c 	bl	8000564 <__aeabi_i2d>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7f9 fce8 	bl	80002c8 <__aeabi_dsub>
 80068f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068fa:	3330      	adds	r3, #48	; 0x30
 80068fc:	f805 3b01 	strb.w	r3, [r5], #1
 8006900:	9b02      	ldr	r3, [sp, #8]
 8006902:	429d      	cmp	r5, r3
 8006904:	4606      	mov	r6, r0
 8006906:	460f      	mov	r7, r1
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	d134      	bne.n	8006978 <_dtoa_r+0x660>
 800690e:	4b19      	ldr	r3, [pc, #100]	; (8006974 <_dtoa_r+0x65c>)
 8006910:	ec51 0b18 	vmov	r0, r1, d8
 8006914:	f7f9 fcda 	bl	80002cc <__adddf3>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4630      	mov	r0, r6
 800691e:	4639      	mov	r1, r7
 8006920:	f7fa f91a 	bl	8000b58 <__aeabi_dcmpgt>
 8006924:	2800      	cmp	r0, #0
 8006926:	d175      	bne.n	8006a14 <_dtoa_r+0x6fc>
 8006928:	ec53 2b18 	vmov	r2, r3, d8
 800692c:	4911      	ldr	r1, [pc, #68]	; (8006974 <_dtoa_r+0x65c>)
 800692e:	2000      	movs	r0, #0
 8006930:	f7f9 fcca 	bl	80002c8 <__aeabi_dsub>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4630      	mov	r0, r6
 800693a:	4639      	mov	r1, r7
 800693c:	f7fa f8ee 	bl	8000b1c <__aeabi_dcmplt>
 8006940:	2800      	cmp	r0, #0
 8006942:	f43f af27 	beq.w	8006794 <_dtoa_r+0x47c>
 8006946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006948:	1e6b      	subs	r3, r5, #1
 800694a:	930c      	str	r3, [sp, #48]	; 0x30
 800694c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006950:	2b30      	cmp	r3, #48	; 0x30
 8006952:	d0f8      	beq.n	8006946 <_dtoa_r+0x62e>
 8006954:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006958:	e04a      	b.n	80069f0 <_dtoa_r+0x6d8>
 800695a:	bf00      	nop
 800695c:	080093a8 	.word	0x080093a8
 8006960:	08009380 	.word	0x08009380
 8006964:	3ff00000 	.word	0x3ff00000
 8006968:	40240000 	.word	0x40240000
 800696c:	401c0000 	.word	0x401c0000
 8006970:	40140000 	.word	0x40140000
 8006974:	3fe00000 	.word	0x3fe00000
 8006978:	4baf      	ldr	r3, [pc, #700]	; (8006c38 <_dtoa_r+0x920>)
 800697a:	f7f9 fe5d 	bl	8000638 <__aeabi_dmul>
 800697e:	4606      	mov	r6, r0
 8006980:	460f      	mov	r7, r1
 8006982:	e7ac      	b.n	80068de <_dtoa_r+0x5c6>
 8006984:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006988:	9d00      	ldr	r5, [sp, #0]
 800698a:	4642      	mov	r2, r8
 800698c:	464b      	mov	r3, r9
 800698e:	4630      	mov	r0, r6
 8006990:	4639      	mov	r1, r7
 8006992:	f7f9 ff7b 	bl	800088c <__aeabi_ddiv>
 8006996:	f7fa f8ff 	bl	8000b98 <__aeabi_d2iz>
 800699a:	9002      	str	r0, [sp, #8]
 800699c:	f7f9 fde2 	bl	8000564 <__aeabi_i2d>
 80069a0:	4642      	mov	r2, r8
 80069a2:	464b      	mov	r3, r9
 80069a4:	f7f9 fe48 	bl	8000638 <__aeabi_dmul>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7f9 fc8a 	bl	80002c8 <__aeabi_dsub>
 80069b4:	9e02      	ldr	r6, [sp, #8]
 80069b6:	9f01      	ldr	r7, [sp, #4]
 80069b8:	3630      	adds	r6, #48	; 0x30
 80069ba:	f805 6b01 	strb.w	r6, [r5], #1
 80069be:	9e00      	ldr	r6, [sp, #0]
 80069c0:	1bae      	subs	r6, r5, r6
 80069c2:	42b7      	cmp	r7, r6
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	d137      	bne.n	8006a3a <_dtoa_r+0x722>
 80069ca:	f7f9 fc7f 	bl	80002cc <__adddf3>
 80069ce:	4642      	mov	r2, r8
 80069d0:	464b      	mov	r3, r9
 80069d2:	4606      	mov	r6, r0
 80069d4:	460f      	mov	r7, r1
 80069d6:	f7fa f8bf 	bl	8000b58 <__aeabi_dcmpgt>
 80069da:	b9c8      	cbnz	r0, 8006a10 <_dtoa_r+0x6f8>
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	4630      	mov	r0, r6
 80069e2:	4639      	mov	r1, r7
 80069e4:	f7fa f890 	bl	8000b08 <__aeabi_dcmpeq>
 80069e8:	b110      	cbz	r0, 80069f0 <_dtoa_r+0x6d8>
 80069ea:	9b02      	ldr	r3, [sp, #8]
 80069ec:	07d9      	lsls	r1, r3, #31
 80069ee:	d40f      	bmi.n	8006a10 <_dtoa_r+0x6f8>
 80069f0:	4620      	mov	r0, r4
 80069f2:	4659      	mov	r1, fp
 80069f4:	f000 fcfa 	bl	80073ec <_Bfree>
 80069f8:	2300      	movs	r3, #0
 80069fa:	702b      	strb	r3, [r5, #0]
 80069fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069fe:	f10a 0001 	add.w	r0, sl, #1
 8006a02:	6018      	str	r0, [r3, #0]
 8006a04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f43f acd8 	beq.w	80063bc <_dtoa_r+0xa4>
 8006a0c:	601d      	str	r5, [r3, #0]
 8006a0e:	e4d5      	b.n	80063bc <_dtoa_r+0xa4>
 8006a10:	f8cd a01c 	str.w	sl, [sp, #28]
 8006a14:	462b      	mov	r3, r5
 8006a16:	461d      	mov	r5, r3
 8006a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a1c:	2a39      	cmp	r2, #57	; 0x39
 8006a1e:	d108      	bne.n	8006a32 <_dtoa_r+0x71a>
 8006a20:	9a00      	ldr	r2, [sp, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d1f7      	bne.n	8006a16 <_dtoa_r+0x6fe>
 8006a26:	9a07      	ldr	r2, [sp, #28]
 8006a28:	9900      	ldr	r1, [sp, #0]
 8006a2a:	3201      	adds	r2, #1
 8006a2c:	9207      	str	r2, [sp, #28]
 8006a2e:	2230      	movs	r2, #48	; 0x30
 8006a30:	700a      	strb	r2, [r1, #0]
 8006a32:	781a      	ldrb	r2, [r3, #0]
 8006a34:	3201      	adds	r2, #1
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	e78c      	b.n	8006954 <_dtoa_r+0x63c>
 8006a3a:	4b7f      	ldr	r3, [pc, #508]	; (8006c38 <_dtoa_r+0x920>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f7f9 fdfb 	bl	8000638 <__aeabi_dmul>
 8006a42:	2200      	movs	r2, #0
 8006a44:	2300      	movs	r3, #0
 8006a46:	4606      	mov	r6, r0
 8006a48:	460f      	mov	r7, r1
 8006a4a:	f7fa f85d 	bl	8000b08 <__aeabi_dcmpeq>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d09b      	beq.n	800698a <_dtoa_r+0x672>
 8006a52:	e7cd      	b.n	80069f0 <_dtoa_r+0x6d8>
 8006a54:	9a08      	ldr	r2, [sp, #32]
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	f000 80c4 	beq.w	8006be4 <_dtoa_r+0x8cc>
 8006a5c:	9a05      	ldr	r2, [sp, #20]
 8006a5e:	2a01      	cmp	r2, #1
 8006a60:	f300 80a8 	bgt.w	8006bb4 <_dtoa_r+0x89c>
 8006a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	f000 80a0 	beq.w	8006bac <_dtoa_r+0x894>
 8006a6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a70:	9e06      	ldr	r6, [sp, #24]
 8006a72:	4645      	mov	r5, r8
 8006a74:	9a04      	ldr	r2, [sp, #16]
 8006a76:	2101      	movs	r1, #1
 8006a78:	441a      	add	r2, r3
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4498      	add	r8, r3
 8006a7e:	9204      	str	r2, [sp, #16]
 8006a80:	f000 fd70 	bl	8007564 <__i2b>
 8006a84:	4607      	mov	r7, r0
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	dd0b      	ble.n	8006aa2 <_dtoa_r+0x78a>
 8006a8a:	9b04      	ldr	r3, [sp, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dd08      	ble.n	8006aa2 <_dtoa_r+0x78a>
 8006a90:	42ab      	cmp	r3, r5
 8006a92:	9a04      	ldr	r2, [sp, #16]
 8006a94:	bfa8      	it	ge
 8006a96:	462b      	movge	r3, r5
 8006a98:	eba8 0803 	sub.w	r8, r8, r3
 8006a9c:	1aed      	subs	r5, r5, r3
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	9304      	str	r3, [sp, #16]
 8006aa2:	9b06      	ldr	r3, [sp, #24]
 8006aa4:	b1fb      	cbz	r3, 8006ae6 <_dtoa_r+0x7ce>
 8006aa6:	9b08      	ldr	r3, [sp, #32]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 809f 	beq.w	8006bec <_dtoa_r+0x8d4>
 8006aae:	2e00      	cmp	r6, #0
 8006ab0:	dd11      	ble.n	8006ad6 <_dtoa_r+0x7be>
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 fe10 	bl	80076dc <__pow5mult>
 8006abc:	465a      	mov	r2, fp
 8006abe:	4601      	mov	r1, r0
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fd64 	bl	8007590 <__multiply>
 8006ac8:	4659      	mov	r1, fp
 8006aca:	9007      	str	r0, [sp, #28]
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 fc8d 	bl	80073ec <_Bfree>
 8006ad2:	9b07      	ldr	r3, [sp, #28]
 8006ad4:	469b      	mov	fp, r3
 8006ad6:	9b06      	ldr	r3, [sp, #24]
 8006ad8:	1b9a      	subs	r2, r3, r6
 8006ada:	d004      	beq.n	8006ae6 <_dtoa_r+0x7ce>
 8006adc:	4659      	mov	r1, fp
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 fdfc 	bl	80076dc <__pow5mult>
 8006ae4:	4683      	mov	fp, r0
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fd3b 	bl	8007564 <__i2b>
 8006aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	4606      	mov	r6, r0
 8006af4:	dd7c      	ble.n	8006bf0 <_dtoa_r+0x8d8>
 8006af6:	461a      	mov	r2, r3
 8006af8:	4601      	mov	r1, r0
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 fdee 	bl	80076dc <__pow5mult>
 8006b00:	9b05      	ldr	r3, [sp, #20]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	4606      	mov	r6, r0
 8006b06:	dd76      	ble.n	8006bf6 <_dtoa_r+0x8de>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9306      	str	r3, [sp, #24]
 8006b0c:	6933      	ldr	r3, [r6, #16]
 8006b0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b12:	6918      	ldr	r0, [r3, #16]
 8006b14:	f000 fcd6 	bl	80074c4 <__hi0bits>
 8006b18:	f1c0 0020 	rsb	r0, r0, #32
 8006b1c:	9b04      	ldr	r3, [sp, #16]
 8006b1e:	4418      	add	r0, r3
 8006b20:	f010 001f 	ands.w	r0, r0, #31
 8006b24:	f000 8086 	beq.w	8006c34 <_dtoa_r+0x91c>
 8006b28:	f1c0 0320 	rsb	r3, r0, #32
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	dd7f      	ble.n	8006c30 <_dtoa_r+0x918>
 8006b30:	f1c0 001c 	rsb	r0, r0, #28
 8006b34:	9b04      	ldr	r3, [sp, #16]
 8006b36:	4403      	add	r3, r0
 8006b38:	4480      	add	r8, r0
 8006b3a:	4405      	add	r5, r0
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	f1b8 0f00 	cmp.w	r8, #0
 8006b42:	dd05      	ble.n	8006b50 <_dtoa_r+0x838>
 8006b44:	4659      	mov	r1, fp
 8006b46:	4642      	mov	r2, r8
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fe21 	bl	8007790 <__lshift>
 8006b4e:	4683      	mov	fp, r0
 8006b50:	9b04      	ldr	r3, [sp, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	dd05      	ble.n	8006b62 <_dtoa_r+0x84a>
 8006b56:	4631      	mov	r1, r6
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 fe18 	bl	8007790 <__lshift>
 8006b60:	4606      	mov	r6, r0
 8006b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d069      	beq.n	8006c3c <_dtoa_r+0x924>
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4658      	mov	r0, fp
 8006b6c:	f000 fe7c 	bl	8007868 <__mcmp>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	da63      	bge.n	8006c3c <_dtoa_r+0x924>
 8006b74:	2300      	movs	r3, #0
 8006b76:	4659      	mov	r1, fp
 8006b78:	220a      	movs	r2, #10
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fc58 	bl	8007430 <__multadd>
 8006b80:	9b08      	ldr	r3, [sp, #32]
 8006b82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006b86:	4683      	mov	fp, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 818f 	beq.w	8006eac <_dtoa_r+0xb94>
 8006b8e:	4639      	mov	r1, r7
 8006b90:	2300      	movs	r3, #0
 8006b92:	220a      	movs	r2, #10
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 fc4b 	bl	8007430 <__multadd>
 8006b9a:	f1b9 0f00 	cmp.w	r9, #0
 8006b9e:	4607      	mov	r7, r0
 8006ba0:	f300 808e 	bgt.w	8006cc0 <_dtoa_r+0x9a8>
 8006ba4:	9b05      	ldr	r3, [sp, #20]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	dc50      	bgt.n	8006c4c <_dtoa_r+0x934>
 8006baa:	e089      	b.n	8006cc0 <_dtoa_r+0x9a8>
 8006bac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bb2:	e75d      	b.n	8006a70 <_dtoa_r+0x758>
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	1e5e      	subs	r6, r3, #1
 8006bb8:	9b06      	ldr	r3, [sp, #24]
 8006bba:	42b3      	cmp	r3, r6
 8006bbc:	bfbf      	itttt	lt
 8006bbe:	9b06      	ldrlt	r3, [sp, #24]
 8006bc0:	9606      	strlt	r6, [sp, #24]
 8006bc2:	1af2      	sublt	r2, r6, r3
 8006bc4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006bc6:	bfb6      	itet	lt
 8006bc8:	189b      	addlt	r3, r3, r2
 8006bca:	1b9e      	subge	r6, r3, r6
 8006bcc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006bce:	9b01      	ldr	r3, [sp, #4]
 8006bd0:	bfb8      	it	lt
 8006bd2:	2600      	movlt	r6, #0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bfb5      	itete	lt
 8006bd8:	eba8 0503 	sublt.w	r5, r8, r3
 8006bdc:	9b01      	ldrge	r3, [sp, #4]
 8006bde:	2300      	movlt	r3, #0
 8006be0:	4645      	movge	r5, r8
 8006be2:	e747      	b.n	8006a74 <_dtoa_r+0x75c>
 8006be4:	9e06      	ldr	r6, [sp, #24]
 8006be6:	9f08      	ldr	r7, [sp, #32]
 8006be8:	4645      	mov	r5, r8
 8006bea:	e74c      	b.n	8006a86 <_dtoa_r+0x76e>
 8006bec:	9a06      	ldr	r2, [sp, #24]
 8006bee:	e775      	b.n	8006adc <_dtoa_r+0x7c4>
 8006bf0:	9b05      	ldr	r3, [sp, #20]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	dc18      	bgt.n	8006c28 <_dtoa_r+0x910>
 8006bf6:	9b02      	ldr	r3, [sp, #8]
 8006bf8:	b9b3      	cbnz	r3, 8006c28 <_dtoa_r+0x910>
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c00:	b9a3      	cbnz	r3, 8006c2c <_dtoa_r+0x914>
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c08:	0d1b      	lsrs	r3, r3, #20
 8006c0a:	051b      	lsls	r3, r3, #20
 8006c0c:	b12b      	cbz	r3, 8006c1a <_dtoa_r+0x902>
 8006c0e:	9b04      	ldr	r3, [sp, #16]
 8006c10:	3301      	adds	r3, #1
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	f108 0801 	add.w	r8, r8, #1
 8006c18:	2301      	movs	r3, #1
 8006c1a:	9306      	str	r3, [sp, #24]
 8006c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f47f af74 	bne.w	8006b0c <_dtoa_r+0x7f4>
 8006c24:	2001      	movs	r0, #1
 8006c26:	e779      	b.n	8006b1c <_dtoa_r+0x804>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e7f6      	b.n	8006c1a <_dtoa_r+0x902>
 8006c2c:	9b02      	ldr	r3, [sp, #8]
 8006c2e:	e7f4      	b.n	8006c1a <_dtoa_r+0x902>
 8006c30:	d085      	beq.n	8006b3e <_dtoa_r+0x826>
 8006c32:	4618      	mov	r0, r3
 8006c34:	301c      	adds	r0, #28
 8006c36:	e77d      	b.n	8006b34 <_dtoa_r+0x81c>
 8006c38:	40240000 	.word	0x40240000
 8006c3c:	9b01      	ldr	r3, [sp, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	dc38      	bgt.n	8006cb4 <_dtoa_r+0x99c>
 8006c42:	9b05      	ldr	r3, [sp, #20]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	dd35      	ble.n	8006cb4 <_dtoa_r+0x99c>
 8006c48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c4c:	f1b9 0f00 	cmp.w	r9, #0
 8006c50:	d10d      	bne.n	8006c6e <_dtoa_r+0x956>
 8006c52:	4631      	mov	r1, r6
 8006c54:	464b      	mov	r3, r9
 8006c56:	2205      	movs	r2, #5
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 fbe9 	bl	8007430 <__multadd>
 8006c5e:	4601      	mov	r1, r0
 8006c60:	4606      	mov	r6, r0
 8006c62:	4658      	mov	r0, fp
 8006c64:	f000 fe00 	bl	8007868 <__mcmp>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	f73f adbd 	bgt.w	80067e8 <_dtoa_r+0x4d0>
 8006c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c70:	9d00      	ldr	r5, [sp, #0]
 8006c72:	ea6f 0a03 	mvn.w	sl, r3
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 fbb5 	bl	80073ec <_Bfree>
 8006c82:	2f00      	cmp	r7, #0
 8006c84:	f43f aeb4 	beq.w	80069f0 <_dtoa_r+0x6d8>
 8006c88:	f1b8 0f00 	cmp.w	r8, #0
 8006c8c:	d005      	beq.n	8006c9a <_dtoa_r+0x982>
 8006c8e:	45b8      	cmp	r8, r7
 8006c90:	d003      	beq.n	8006c9a <_dtoa_r+0x982>
 8006c92:	4641      	mov	r1, r8
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fba9 	bl	80073ec <_Bfree>
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 fba5 	bl	80073ec <_Bfree>
 8006ca2:	e6a5      	b.n	80069f0 <_dtoa_r+0x6d8>
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	4637      	mov	r7, r6
 8006ca8:	e7e1      	b.n	8006c6e <_dtoa_r+0x956>
 8006caa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006cac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006cb0:	4637      	mov	r7, r6
 8006cb2:	e599      	b.n	80067e8 <_dtoa_r+0x4d0>
 8006cb4:	9b08      	ldr	r3, [sp, #32]
 8006cb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 80fd 	beq.w	8006eba <_dtoa_r+0xba2>
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	dd05      	ble.n	8006cd0 <_dtoa_r+0x9b8>
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fd61 	bl	8007790 <__lshift>
 8006cce:	4607      	mov	r7, r0
 8006cd0:	9b06      	ldr	r3, [sp, #24]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d05c      	beq.n	8006d90 <_dtoa_r+0xa78>
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fb47 	bl	800736c <_Balloc>
 8006cde:	4605      	mov	r5, r0
 8006ce0:	b928      	cbnz	r0, 8006cee <_dtoa_r+0x9d6>
 8006ce2:	4b80      	ldr	r3, [pc, #512]	; (8006ee4 <_dtoa_r+0xbcc>)
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006cea:	f7ff bb2e 	b.w	800634a <_dtoa_r+0x32>
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	3202      	adds	r2, #2
 8006cf2:	0092      	lsls	r2, r2, #2
 8006cf4:	f107 010c 	add.w	r1, r7, #12
 8006cf8:	300c      	adds	r0, #12
 8006cfa:	f000 fb1d 	bl	8007338 <memcpy>
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4629      	mov	r1, r5
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 fd44 	bl	8007790 <__lshift>
 8006d08:	9b00      	ldr	r3, [sp, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	9b00      	ldr	r3, [sp, #0]
 8006d10:	444b      	add	r3, r9
 8006d12:	9307      	str	r3, [sp, #28]
 8006d14:	9b02      	ldr	r3, [sp, #8]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	46b8      	mov	r8, r7
 8006d1c:	9306      	str	r3, [sp, #24]
 8006d1e:	4607      	mov	r7, r0
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	4631      	mov	r1, r6
 8006d24:	3b01      	subs	r3, #1
 8006d26:	4658      	mov	r0, fp
 8006d28:	9302      	str	r3, [sp, #8]
 8006d2a:	f7ff fa69 	bl	8006200 <quorem>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	3330      	adds	r3, #48	; 0x30
 8006d32:	9004      	str	r0, [sp, #16]
 8006d34:	4641      	mov	r1, r8
 8006d36:	4658      	mov	r0, fp
 8006d38:	9308      	str	r3, [sp, #32]
 8006d3a:	f000 fd95 	bl	8007868 <__mcmp>
 8006d3e:	463a      	mov	r2, r7
 8006d40:	4681      	mov	r9, r0
 8006d42:	4631      	mov	r1, r6
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fdab 	bl	80078a0 <__mdiff>
 8006d4a:	68c2      	ldr	r2, [r0, #12]
 8006d4c:	9b08      	ldr	r3, [sp, #32]
 8006d4e:	4605      	mov	r5, r0
 8006d50:	bb02      	cbnz	r2, 8006d94 <_dtoa_r+0xa7c>
 8006d52:	4601      	mov	r1, r0
 8006d54:	4658      	mov	r0, fp
 8006d56:	f000 fd87 	bl	8007868 <__mcmp>
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	4629      	mov	r1, r5
 8006d60:	4620      	mov	r0, r4
 8006d62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006d66:	f000 fb41 	bl	80073ec <_Bfree>
 8006d6a:	9b05      	ldr	r3, [sp, #20]
 8006d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d6e:	9d01      	ldr	r5, [sp, #4]
 8006d70:	ea43 0102 	orr.w	r1, r3, r2
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	430b      	orrs	r3, r1
 8006d78:	9b08      	ldr	r3, [sp, #32]
 8006d7a:	d10d      	bne.n	8006d98 <_dtoa_r+0xa80>
 8006d7c:	2b39      	cmp	r3, #57	; 0x39
 8006d7e:	d029      	beq.n	8006dd4 <_dtoa_r+0xabc>
 8006d80:	f1b9 0f00 	cmp.w	r9, #0
 8006d84:	dd01      	ble.n	8006d8a <_dtoa_r+0xa72>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	3331      	adds	r3, #49	; 0x31
 8006d8a:	9a02      	ldr	r2, [sp, #8]
 8006d8c:	7013      	strb	r3, [r2, #0]
 8006d8e:	e774      	b.n	8006c7a <_dtoa_r+0x962>
 8006d90:	4638      	mov	r0, r7
 8006d92:	e7b9      	b.n	8006d08 <_dtoa_r+0x9f0>
 8006d94:	2201      	movs	r2, #1
 8006d96:	e7e2      	b.n	8006d5e <_dtoa_r+0xa46>
 8006d98:	f1b9 0f00 	cmp.w	r9, #0
 8006d9c:	db06      	blt.n	8006dac <_dtoa_r+0xa94>
 8006d9e:	9905      	ldr	r1, [sp, #20]
 8006da0:	ea41 0909 	orr.w	r9, r1, r9
 8006da4:	9906      	ldr	r1, [sp, #24]
 8006da6:	ea59 0101 	orrs.w	r1, r9, r1
 8006daa:	d120      	bne.n	8006dee <_dtoa_r+0xad6>
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	ddec      	ble.n	8006d8a <_dtoa_r+0xa72>
 8006db0:	4659      	mov	r1, fp
 8006db2:	2201      	movs	r2, #1
 8006db4:	4620      	mov	r0, r4
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	f000 fcea 	bl	8007790 <__lshift>
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4683      	mov	fp, r0
 8006dc0:	f000 fd52 	bl	8007868 <__mcmp>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	dc02      	bgt.n	8006dd0 <_dtoa_r+0xab8>
 8006dca:	d1de      	bne.n	8006d8a <_dtoa_r+0xa72>
 8006dcc:	07da      	lsls	r2, r3, #31
 8006dce:	d5dc      	bpl.n	8006d8a <_dtoa_r+0xa72>
 8006dd0:	2b39      	cmp	r3, #57	; 0x39
 8006dd2:	d1d8      	bne.n	8006d86 <_dtoa_r+0xa6e>
 8006dd4:	9a02      	ldr	r2, [sp, #8]
 8006dd6:	2339      	movs	r3, #57	; 0x39
 8006dd8:	7013      	strb	r3, [r2, #0]
 8006dda:	462b      	mov	r3, r5
 8006ddc:	461d      	mov	r5, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006de4:	2a39      	cmp	r2, #57	; 0x39
 8006de6:	d050      	beq.n	8006e8a <_dtoa_r+0xb72>
 8006de8:	3201      	adds	r2, #1
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	e745      	b.n	8006c7a <_dtoa_r+0x962>
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	dd03      	ble.n	8006dfa <_dtoa_r+0xae2>
 8006df2:	2b39      	cmp	r3, #57	; 0x39
 8006df4:	d0ee      	beq.n	8006dd4 <_dtoa_r+0xabc>
 8006df6:	3301      	adds	r3, #1
 8006df8:	e7c7      	b.n	8006d8a <_dtoa_r+0xa72>
 8006dfa:	9a01      	ldr	r2, [sp, #4]
 8006dfc:	9907      	ldr	r1, [sp, #28]
 8006dfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e02:	428a      	cmp	r2, r1
 8006e04:	d02a      	beq.n	8006e5c <_dtoa_r+0xb44>
 8006e06:	4659      	mov	r1, fp
 8006e08:	2300      	movs	r3, #0
 8006e0a:	220a      	movs	r2, #10
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fb0f 	bl	8007430 <__multadd>
 8006e12:	45b8      	cmp	r8, r7
 8006e14:	4683      	mov	fp, r0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	f04f 020a 	mov.w	r2, #10
 8006e1e:	4641      	mov	r1, r8
 8006e20:	4620      	mov	r0, r4
 8006e22:	d107      	bne.n	8006e34 <_dtoa_r+0xb1c>
 8006e24:	f000 fb04 	bl	8007430 <__multadd>
 8006e28:	4680      	mov	r8, r0
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	9b01      	ldr	r3, [sp, #4]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	e775      	b.n	8006d20 <_dtoa_r+0xa08>
 8006e34:	f000 fafc 	bl	8007430 <__multadd>
 8006e38:	4639      	mov	r1, r7
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	220a      	movs	r2, #10
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 faf5 	bl	8007430 <__multadd>
 8006e46:	4607      	mov	r7, r0
 8006e48:	e7f0      	b.n	8006e2c <_dtoa_r+0xb14>
 8006e4a:	f1b9 0f00 	cmp.w	r9, #0
 8006e4e:	9a00      	ldr	r2, [sp, #0]
 8006e50:	bfcc      	ite	gt
 8006e52:	464d      	movgt	r5, r9
 8006e54:	2501      	movle	r5, #1
 8006e56:	4415      	add	r5, r2
 8006e58:	f04f 0800 	mov.w	r8, #0
 8006e5c:	4659      	mov	r1, fp
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4620      	mov	r0, r4
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	f000 fc94 	bl	8007790 <__lshift>
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4683      	mov	fp, r0
 8006e6c:	f000 fcfc 	bl	8007868 <__mcmp>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	dcb2      	bgt.n	8006dda <_dtoa_r+0xac2>
 8006e74:	d102      	bne.n	8006e7c <_dtoa_r+0xb64>
 8006e76:	9b01      	ldr	r3, [sp, #4]
 8006e78:	07db      	lsls	r3, r3, #31
 8006e7a:	d4ae      	bmi.n	8006dda <_dtoa_r+0xac2>
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	461d      	mov	r5, r3
 8006e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e84:	2a30      	cmp	r2, #48	; 0x30
 8006e86:	d0fa      	beq.n	8006e7e <_dtoa_r+0xb66>
 8006e88:	e6f7      	b.n	8006c7a <_dtoa_r+0x962>
 8006e8a:	9a00      	ldr	r2, [sp, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1a5      	bne.n	8006ddc <_dtoa_r+0xac4>
 8006e90:	f10a 0a01 	add.w	sl, sl, #1
 8006e94:	2331      	movs	r3, #49	; 0x31
 8006e96:	e779      	b.n	8006d8c <_dtoa_r+0xa74>
 8006e98:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <_dtoa_r+0xbd0>)
 8006e9a:	f7ff baaf 	b.w	80063fc <_dtoa_r+0xe4>
 8006e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f47f aa86 	bne.w	80063b2 <_dtoa_r+0x9a>
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <_dtoa_r+0xbd4>)
 8006ea8:	f7ff baa8 	b.w	80063fc <_dtoa_r+0xe4>
 8006eac:	f1b9 0f00 	cmp.w	r9, #0
 8006eb0:	dc03      	bgt.n	8006eba <_dtoa_r+0xba2>
 8006eb2:	9b05      	ldr	r3, [sp, #20]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	f73f aec9 	bgt.w	8006c4c <_dtoa_r+0x934>
 8006eba:	9d00      	ldr	r5, [sp, #0]
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f7ff f99e 	bl	8006200 <quorem>
 8006ec4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ec8:	f805 3b01 	strb.w	r3, [r5], #1
 8006ecc:	9a00      	ldr	r2, [sp, #0]
 8006ece:	1aaa      	subs	r2, r5, r2
 8006ed0:	4591      	cmp	r9, r2
 8006ed2:	ddba      	ble.n	8006e4a <_dtoa_r+0xb32>
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	220a      	movs	r2, #10
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 faa8 	bl	8007430 <__multadd>
 8006ee0:	4683      	mov	fp, r0
 8006ee2:	e7eb      	b.n	8006ebc <_dtoa_r+0xba4>
 8006ee4:	080092ab 	.word	0x080092ab
 8006ee8:	08009204 	.word	0x08009204
 8006eec:	08009228 	.word	0x08009228

08006ef0 <__sflush_r>:
 8006ef0:	898a      	ldrh	r2, [r1, #12]
 8006ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	0710      	lsls	r0, r2, #28
 8006efa:	460c      	mov	r4, r1
 8006efc:	d458      	bmi.n	8006fb0 <__sflush_r+0xc0>
 8006efe:	684b      	ldr	r3, [r1, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	dc05      	bgt.n	8006f10 <__sflush_r+0x20>
 8006f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc02      	bgt.n	8006f10 <__sflush_r+0x20>
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	d0f9      	beq.n	8006f0a <__sflush_r+0x1a>
 8006f16:	2300      	movs	r3, #0
 8006f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f1c:	682f      	ldr	r7, [r5, #0]
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	d032      	beq.n	8006f88 <__sflush_r+0x98>
 8006f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	075a      	lsls	r2, r3, #29
 8006f28:	d505      	bpl.n	8006f36 <__sflush_r+0x46>
 8006f2a:	6863      	ldr	r3, [r4, #4]
 8006f2c:	1ac0      	subs	r0, r0, r3
 8006f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f30:	b10b      	cbz	r3, 8006f36 <__sflush_r+0x46>
 8006f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f34:	1ac0      	subs	r0, r0, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	4602      	mov	r2, r0
 8006f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f3c:	6a21      	ldr	r1, [r4, #32]
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b0      	blx	r6
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	d106      	bne.n	8006f56 <__sflush_r+0x66>
 8006f48:	6829      	ldr	r1, [r5, #0]
 8006f4a:	291d      	cmp	r1, #29
 8006f4c:	d82c      	bhi.n	8006fa8 <__sflush_r+0xb8>
 8006f4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <__sflush_r+0x108>)
 8006f50:	40ca      	lsrs	r2, r1
 8006f52:	07d6      	lsls	r6, r2, #31
 8006f54:	d528      	bpl.n	8006fa8 <__sflush_r+0xb8>
 8006f56:	2200      	movs	r2, #0
 8006f58:	6062      	str	r2, [r4, #4]
 8006f5a:	04d9      	lsls	r1, r3, #19
 8006f5c:	6922      	ldr	r2, [r4, #16]
 8006f5e:	6022      	str	r2, [r4, #0]
 8006f60:	d504      	bpl.n	8006f6c <__sflush_r+0x7c>
 8006f62:	1c42      	adds	r2, r0, #1
 8006f64:	d101      	bne.n	8006f6a <__sflush_r+0x7a>
 8006f66:	682b      	ldr	r3, [r5, #0]
 8006f68:	b903      	cbnz	r3, 8006f6c <__sflush_r+0x7c>
 8006f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8006f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f6e:	602f      	str	r7, [r5, #0]
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d0ca      	beq.n	8006f0a <__sflush_r+0x1a>
 8006f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f78:	4299      	cmp	r1, r3
 8006f7a:	d002      	beq.n	8006f82 <__sflush_r+0x92>
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f7fe facd 	bl	800551c <_free_r>
 8006f82:	2000      	movs	r0, #0
 8006f84:	6360      	str	r0, [r4, #52]	; 0x34
 8006f86:	e7c1      	b.n	8006f0c <__sflush_r+0x1c>
 8006f88:	6a21      	ldr	r1, [r4, #32]
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b0      	blx	r6
 8006f90:	1c41      	adds	r1, r0, #1
 8006f92:	d1c7      	bne.n	8006f24 <__sflush_r+0x34>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0c4      	beq.n	8006f24 <__sflush_r+0x34>
 8006f9a:	2b1d      	cmp	r3, #29
 8006f9c:	d001      	beq.n	8006fa2 <__sflush_r+0xb2>
 8006f9e:	2b16      	cmp	r3, #22
 8006fa0:	d101      	bne.n	8006fa6 <__sflush_r+0xb6>
 8006fa2:	602f      	str	r7, [r5, #0]
 8006fa4:	e7b1      	b.n	8006f0a <__sflush_r+0x1a>
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	e7ad      	b.n	8006f0c <__sflush_r+0x1c>
 8006fb0:	690f      	ldr	r7, [r1, #16]
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	d0a9      	beq.n	8006f0a <__sflush_r+0x1a>
 8006fb6:	0793      	lsls	r3, r2, #30
 8006fb8:	680e      	ldr	r6, [r1, #0]
 8006fba:	bf08      	it	eq
 8006fbc:	694b      	ldreq	r3, [r1, #20]
 8006fbe:	600f      	str	r7, [r1, #0]
 8006fc0:	bf18      	it	ne
 8006fc2:	2300      	movne	r3, #0
 8006fc4:	eba6 0807 	sub.w	r8, r6, r7
 8006fc8:	608b      	str	r3, [r1, #8]
 8006fca:	f1b8 0f00 	cmp.w	r8, #0
 8006fce:	dd9c      	ble.n	8006f0a <__sflush_r+0x1a>
 8006fd0:	6a21      	ldr	r1, [r4, #32]
 8006fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fd4:	4643      	mov	r3, r8
 8006fd6:	463a      	mov	r2, r7
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b0      	blx	r6
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	dc06      	bgt.n	8006fee <__sflush_r+0xfe>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fec:	e78e      	b.n	8006f0c <__sflush_r+0x1c>
 8006fee:	4407      	add	r7, r0
 8006ff0:	eba8 0800 	sub.w	r8, r8, r0
 8006ff4:	e7e9      	b.n	8006fca <__sflush_r+0xda>
 8006ff6:	bf00      	nop
 8006ff8:	20400001 	.word	0x20400001

08006ffc <_fflush_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	690b      	ldr	r3, [r1, #16]
 8007000:	4605      	mov	r5, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b913      	cbnz	r3, 800700c <_fflush_r+0x10>
 8007006:	2500      	movs	r5, #0
 8007008:	4628      	mov	r0, r5
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	b118      	cbz	r0, 8007016 <_fflush_r+0x1a>
 800700e:	6983      	ldr	r3, [r0, #24]
 8007010:	b90b      	cbnz	r3, 8007016 <_fflush_r+0x1a>
 8007012:	f000 f887 	bl	8007124 <__sinit>
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <_fflush_r+0x6c>)
 8007018:	429c      	cmp	r4, r3
 800701a:	d11b      	bne.n	8007054 <_fflush_r+0x58>
 800701c:	686c      	ldr	r4, [r5, #4]
 800701e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0ef      	beq.n	8007006 <_fflush_r+0xa>
 8007026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007028:	07d0      	lsls	r0, r2, #31
 800702a:	d404      	bmi.n	8007036 <_fflush_r+0x3a>
 800702c:	0599      	lsls	r1, r3, #22
 800702e:	d402      	bmi.n	8007036 <_fflush_r+0x3a>
 8007030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007032:	f000 f91a 	bl	800726a <__retarget_lock_acquire_recursive>
 8007036:	4628      	mov	r0, r5
 8007038:	4621      	mov	r1, r4
 800703a:	f7ff ff59 	bl	8006ef0 <__sflush_r>
 800703e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007040:	07da      	lsls	r2, r3, #31
 8007042:	4605      	mov	r5, r0
 8007044:	d4e0      	bmi.n	8007008 <_fflush_r+0xc>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	059b      	lsls	r3, r3, #22
 800704a:	d4dd      	bmi.n	8007008 <_fflush_r+0xc>
 800704c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800704e:	f000 f90d 	bl	800726c <__retarget_lock_release_recursive>
 8007052:	e7d9      	b.n	8007008 <_fflush_r+0xc>
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <_fflush_r+0x70>)
 8007056:	429c      	cmp	r4, r3
 8007058:	d101      	bne.n	800705e <_fflush_r+0x62>
 800705a:	68ac      	ldr	r4, [r5, #8]
 800705c:	e7df      	b.n	800701e <_fflush_r+0x22>
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <_fflush_r+0x74>)
 8007060:	429c      	cmp	r4, r3
 8007062:	bf08      	it	eq
 8007064:	68ec      	ldreq	r4, [r5, #12]
 8007066:	e7da      	b.n	800701e <_fflush_r+0x22>
 8007068:	080092dc 	.word	0x080092dc
 800706c:	080092fc 	.word	0x080092fc
 8007070:	080092bc 	.word	0x080092bc

08007074 <std>:
 8007074:	2300      	movs	r3, #0
 8007076:	b510      	push	{r4, lr}
 8007078:	4604      	mov	r4, r0
 800707a:	e9c0 3300 	strd	r3, r3, [r0]
 800707e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007082:	6083      	str	r3, [r0, #8]
 8007084:	8181      	strh	r1, [r0, #12]
 8007086:	6643      	str	r3, [r0, #100]	; 0x64
 8007088:	81c2      	strh	r2, [r0, #14]
 800708a:	6183      	str	r3, [r0, #24]
 800708c:	4619      	mov	r1, r3
 800708e:	2208      	movs	r2, #8
 8007090:	305c      	adds	r0, #92	; 0x5c
 8007092:	f7fe fa3b 	bl	800550c <memset>
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <std+0x38>)
 8007098:	6263      	str	r3, [r4, #36]	; 0x24
 800709a:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <std+0x3c>)
 800709c:	62a3      	str	r3, [r4, #40]	; 0x28
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <std+0x40>)
 80070a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070a2:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <std+0x44>)
 80070a4:	6224      	str	r4, [r4, #32]
 80070a6:	6323      	str	r3, [r4, #48]	; 0x30
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	bf00      	nop
 80070ac:	08007d39 	.word	0x08007d39
 80070b0:	08007d5b 	.word	0x08007d5b
 80070b4:	08007d93 	.word	0x08007d93
 80070b8:	08007db7 	.word	0x08007db7

080070bc <_cleanup_r>:
 80070bc:	4901      	ldr	r1, [pc, #4]	; (80070c4 <_cleanup_r+0x8>)
 80070be:	f000 b8af 	b.w	8007220 <_fwalk_reent>
 80070c2:	bf00      	nop
 80070c4:	08006ffd 	.word	0x08006ffd

080070c8 <__sfmoreglue>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	1e4a      	subs	r2, r1, #1
 80070cc:	2568      	movs	r5, #104	; 0x68
 80070ce:	4355      	muls	r5, r2
 80070d0:	460e      	mov	r6, r1
 80070d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070d6:	f7fe fa71 	bl	80055bc <_malloc_r>
 80070da:	4604      	mov	r4, r0
 80070dc:	b140      	cbz	r0, 80070f0 <__sfmoreglue+0x28>
 80070de:	2100      	movs	r1, #0
 80070e0:	e9c0 1600 	strd	r1, r6, [r0]
 80070e4:	300c      	adds	r0, #12
 80070e6:	60a0      	str	r0, [r4, #8]
 80070e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070ec:	f7fe fa0e 	bl	800550c <memset>
 80070f0:	4620      	mov	r0, r4
 80070f2:	bd70      	pop	{r4, r5, r6, pc}

080070f4 <__sfp_lock_acquire>:
 80070f4:	4801      	ldr	r0, [pc, #4]	; (80070fc <__sfp_lock_acquire+0x8>)
 80070f6:	f000 b8b8 	b.w	800726a <__retarget_lock_acquire_recursive>
 80070fa:	bf00      	nop
 80070fc:	200004ac 	.word	0x200004ac

08007100 <__sfp_lock_release>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__sfp_lock_release+0x8>)
 8007102:	f000 b8b3 	b.w	800726c <__retarget_lock_release_recursive>
 8007106:	bf00      	nop
 8007108:	200004ac 	.word	0x200004ac

0800710c <__sinit_lock_acquire>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__sinit_lock_acquire+0x8>)
 800710e:	f000 b8ac 	b.w	800726a <__retarget_lock_acquire_recursive>
 8007112:	bf00      	nop
 8007114:	200004a7 	.word	0x200004a7

08007118 <__sinit_lock_release>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__sinit_lock_release+0x8>)
 800711a:	f000 b8a7 	b.w	800726c <__retarget_lock_release_recursive>
 800711e:	bf00      	nop
 8007120:	200004a7 	.word	0x200004a7

08007124 <__sinit>:
 8007124:	b510      	push	{r4, lr}
 8007126:	4604      	mov	r4, r0
 8007128:	f7ff fff0 	bl	800710c <__sinit_lock_acquire>
 800712c:	69a3      	ldr	r3, [r4, #24]
 800712e:	b11b      	cbz	r3, 8007138 <__sinit+0x14>
 8007130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007134:	f7ff bff0 	b.w	8007118 <__sinit_lock_release>
 8007138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800713c:	6523      	str	r3, [r4, #80]	; 0x50
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <__sinit+0x68>)
 8007140:	4a13      	ldr	r2, [pc, #76]	; (8007190 <__sinit+0x6c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	62a2      	str	r2, [r4, #40]	; 0x28
 8007146:	42a3      	cmp	r3, r4
 8007148:	bf04      	itt	eq
 800714a:	2301      	moveq	r3, #1
 800714c:	61a3      	streq	r3, [r4, #24]
 800714e:	4620      	mov	r0, r4
 8007150:	f000 f820 	bl	8007194 <__sfp>
 8007154:	6060      	str	r0, [r4, #4]
 8007156:	4620      	mov	r0, r4
 8007158:	f000 f81c 	bl	8007194 <__sfp>
 800715c:	60a0      	str	r0, [r4, #8]
 800715e:	4620      	mov	r0, r4
 8007160:	f000 f818 	bl	8007194 <__sfp>
 8007164:	2200      	movs	r2, #0
 8007166:	60e0      	str	r0, [r4, #12]
 8007168:	2104      	movs	r1, #4
 800716a:	6860      	ldr	r0, [r4, #4]
 800716c:	f7ff ff82 	bl	8007074 <std>
 8007170:	68a0      	ldr	r0, [r4, #8]
 8007172:	2201      	movs	r2, #1
 8007174:	2109      	movs	r1, #9
 8007176:	f7ff ff7d 	bl	8007074 <std>
 800717a:	68e0      	ldr	r0, [r4, #12]
 800717c:	2202      	movs	r2, #2
 800717e:	2112      	movs	r1, #18
 8007180:	f7ff ff78 	bl	8007074 <std>
 8007184:	2301      	movs	r3, #1
 8007186:	61a3      	str	r3, [r4, #24]
 8007188:	e7d2      	b.n	8007130 <__sinit+0xc>
 800718a:	bf00      	nop
 800718c:	080091f0 	.word	0x080091f0
 8007190:	080070bd 	.word	0x080070bd

08007194 <__sfp>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	4607      	mov	r7, r0
 8007198:	f7ff ffac 	bl	80070f4 <__sfp_lock_acquire>
 800719c:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <__sfp+0x84>)
 800719e:	681e      	ldr	r6, [r3, #0]
 80071a0:	69b3      	ldr	r3, [r6, #24]
 80071a2:	b913      	cbnz	r3, 80071aa <__sfp+0x16>
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff ffbd 	bl	8007124 <__sinit>
 80071aa:	3648      	adds	r6, #72	; 0x48
 80071ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	d503      	bpl.n	80071bc <__sfp+0x28>
 80071b4:	6833      	ldr	r3, [r6, #0]
 80071b6:	b30b      	cbz	r3, 80071fc <__sfp+0x68>
 80071b8:	6836      	ldr	r6, [r6, #0]
 80071ba:	e7f7      	b.n	80071ac <__sfp+0x18>
 80071bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071c0:	b9d5      	cbnz	r5, 80071f8 <__sfp+0x64>
 80071c2:	4b16      	ldr	r3, [pc, #88]	; (800721c <__sfp+0x88>)
 80071c4:	60e3      	str	r3, [r4, #12]
 80071c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071ca:	6665      	str	r5, [r4, #100]	; 0x64
 80071cc:	f000 f84c 	bl	8007268 <__retarget_lock_init_recursive>
 80071d0:	f7ff ff96 	bl	8007100 <__sfp_lock_release>
 80071d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071dc:	6025      	str	r5, [r4, #0]
 80071de:	61a5      	str	r5, [r4, #24]
 80071e0:	2208      	movs	r2, #8
 80071e2:	4629      	mov	r1, r5
 80071e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071e8:	f7fe f990 	bl	800550c <memset>
 80071ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071f4:	4620      	mov	r0, r4
 80071f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f8:	3468      	adds	r4, #104	; 0x68
 80071fa:	e7d9      	b.n	80071b0 <__sfp+0x1c>
 80071fc:	2104      	movs	r1, #4
 80071fe:	4638      	mov	r0, r7
 8007200:	f7ff ff62 	bl	80070c8 <__sfmoreglue>
 8007204:	4604      	mov	r4, r0
 8007206:	6030      	str	r0, [r6, #0]
 8007208:	2800      	cmp	r0, #0
 800720a:	d1d5      	bne.n	80071b8 <__sfp+0x24>
 800720c:	f7ff ff78 	bl	8007100 <__sfp_lock_release>
 8007210:	230c      	movs	r3, #12
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	e7ee      	b.n	80071f4 <__sfp+0x60>
 8007216:	bf00      	nop
 8007218:	080091f0 	.word	0x080091f0
 800721c:	ffff0001 	.word	0xffff0001

08007220 <_fwalk_reent>:
 8007220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007224:	4606      	mov	r6, r0
 8007226:	4688      	mov	r8, r1
 8007228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800722c:	2700      	movs	r7, #0
 800722e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007232:	f1b9 0901 	subs.w	r9, r9, #1
 8007236:	d505      	bpl.n	8007244 <_fwalk_reent+0x24>
 8007238:	6824      	ldr	r4, [r4, #0]
 800723a:	2c00      	cmp	r4, #0
 800723c:	d1f7      	bne.n	800722e <_fwalk_reent+0xe>
 800723e:	4638      	mov	r0, r7
 8007240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007244:	89ab      	ldrh	r3, [r5, #12]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d907      	bls.n	800725a <_fwalk_reent+0x3a>
 800724a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800724e:	3301      	adds	r3, #1
 8007250:	d003      	beq.n	800725a <_fwalk_reent+0x3a>
 8007252:	4629      	mov	r1, r5
 8007254:	4630      	mov	r0, r6
 8007256:	47c0      	blx	r8
 8007258:	4307      	orrs	r7, r0
 800725a:	3568      	adds	r5, #104	; 0x68
 800725c:	e7e9      	b.n	8007232 <_fwalk_reent+0x12>
	...

08007260 <_localeconv_r>:
 8007260:	4800      	ldr	r0, [pc, #0]	; (8007264 <_localeconv_r+0x4>)
 8007262:	4770      	bx	lr
 8007264:	20000160 	.word	0x20000160

08007268 <__retarget_lock_init_recursive>:
 8007268:	4770      	bx	lr

0800726a <__retarget_lock_acquire_recursive>:
 800726a:	4770      	bx	lr

0800726c <__retarget_lock_release_recursive>:
 800726c:	4770      	bx	lr

0800726e <__swhatbuf_r>:
 800726e:	b570      	push	{r4, r5, r6, lr}
 8007270:	460e      	mov	r6, r1
 8007272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007276:	2900      	cmp	r1, #0
 8007278:	b096      	sub	sp, #88	; 0x58
 800727a:	4614      	mov	r4, r2
 800727c:	461d      	mov	r5, r3
 800727e:	da07      	bge.n	8007290 <__swhatbuf_r+0x22>
 8007280:	2300      	movs	r3, #0
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	89b3      	ldrh	r3, [r6, #12]
 8007286:	061a      	lsls	r2, r3, #24
 8007288:	d410      	bmi.n	80072ac <__swhatbuf_r+0x3e>
 800728a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800728e:	e00e      	b.n	80072ae <__swhatbuf_r+0x40>
 8007290:	466a      	mov	r2, sp
 8007292:	f000 fde7 	bl	8007e64 <_fstat_r>
 8007296:	2800      	cmp	r0, #0
 8007298:	dbf2      	blt.n	8007280 <__swhatbuf_r+0x12>
 800729a:	9a01      	ldr	r2, [sp, #4]
 800729c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072a4:	425a      	negs	r2, r3
 80072a6:	415a      	adcs	r2, r3
 80072a8:	602a      	str	r2, [r5, #0]
 80072aa:	e7ee      	b.n	800728a <__swhatbuf_r+0x1c>
 80072ac:	2340      	movs	r3, #64	; 0x40
 80072ae:	2000      	movs	r0, #0
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	b016      	add	sp, #88	; 0x58
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080072b8 <__smakebuf_r>:
 80072b8:	898b      	ldrh	r3, [r1, #12]
 80072ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072bc:	079d      	lsls	r5, r3, #30
 80072be:	4606      	mov	r6, r0
 80072c0:	460c      	mov	r4, r1
 80072c2:	d507      	bpl.n	80072d4 <__smakebuf_r+0x1c>
 80072c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	2301      	movs	r3, #1
 80072ce:	6163      	str	r3, [r4, #20]
 80072d0:	b002      	add	sp, #8
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	ab01      	add	r3, sp, #4
 80072d6:	466a      	mov	r2, sp
 80072d8:	f7ff ffc9 	bl	800726e <__swhatbuf_r>
 80072dc:	9900      	ldr	r1, [sp, #0]
 80072de:	4605      	mov	r5, r0
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7fe f96b 	bl	80055bc <_malloc_r>
 80072e6:	b948      	cbnz	r0, 80072fc <__smakebuf_r+0x44>
 80072e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ec:	059a      	lsls	r2, r3, #22
 80072ee:	d4ef      	bmi.n	80072d0 <__smakebuf_r+0x18>
 80072f0:	f023 0303 	bic.w	r3, r3, #3
 80072f4:	f043 0302 	orr.w	r3, r3, #2
 80072f8:	81a3      	strh	r3, [r4, #12]
 80072fa:	e7e3      	b.n	80072c4 <__smakebuf_r+0xc>
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <__smakebuf_r+0x7c>)
 80072fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	6020      	str	r0, [r4, #0]
 8007304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	9b00      	ldr	r3, [sp, #0]
 800730c:	6163      	str	r3, [r4, #20]
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	6120      	str	r0, [r4, #16]
 8007312:	b15b      	cbz	r3, 800732c <__smakebuf_r+0x74>
 8007314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007318:	4630      	mov	r0, r6
 800731a:	f000 fdb5 	bl	8007e88 <_isatty_r>
 800731e:	b128      	cbz	r0, 800732c <__smakebuf_r+0x74>
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	f023 0303 	bic.w	r3, r3, #3
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	89a0      	ldrh	r0, [r4, #12]
 800732e:	4305      	orrs	r5, r0
 8007330:	81a5      	strh	r5, [r4, #12]
 8007332:	e7cd      	b.n	80072d0 <__smakebuf_r+0x18>
 8007334:	080070bd 	.word	0x080070bd

08007338 <memcpy>:
 8007338:	440a      	add	r2, r1
 800733a:	4291      	cmp	r1, r2
 800733c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007340:	d100      	bne.n	8007344 <memcpy+0xc>
 8007342:	4770      	bx	lr
 8007344:	b510      	push	{r4, lr}
 8007346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800734e:	4291      	cmp	r1, r2
 8007350:	d1f9      	bne.n	8007346 <memcpy+0xe>
 8007352:	bd10      	pop	{r4, pc}

08007354 <__malloc_lock>:
 8007354:	4801      	ldr	r0, [pc, #4]	; (800735c <__malloc_lock+0x8>)
 8007356:	f7ff bf88 	b.w	800726a <__retarget_lock_acquire_recursive>
 800735a:	bf00      	nop
 800735c:	200004a8 	.word	0x200004a8

08007360 <__malloc_unlock>:
 8007360:	4801      	ldr	r0, [pc, #4]	; (8007368 <__malloc_unlock+0x8>)
 8007362:	f7ff bf83 	b.w	800726c <__retarget_lock_release_recursive>
 8007366:	bf00      	nop
 8007368:	200004a8 	.word	0x200004a8

0800736c <_Balloc>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007370:	4604      	mov	r4, r0
 8007372:	460d      	mov	r5, r1
 8007374:	b976      	cbnz	r6, 8007394 <_Balloc+0x28>
 8007376:	2010      	movs	r0, #16
 8007378:	f7fe f8c0 	bl	80054fc <malloc>
 800737c:	4602      	mov	r2, r0
 800737e:	6260      	str	r0, [r4, #36]	; 0x24
 8007380:	b920      	cbnz	r0, 800738c <_Balloc+0x20>
 8007382:	4b18      	ldr	r3, [pc, #96]	; (80073e4 <_Balloc+0x78>)
 8007384:	4818      	ldr	r0, [pc, #96]	; (80073e8 <_Balloc+0x7c>)
 8007386:	2166      	movs	r1, #102	; 0x66
 8007388:	f000 fd2c 	bl	8007de4 <__assert_func>
 800738c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007390:	6006      	str	r6, [r0, #0]
 8007392:	60c6      	str	r6, [r0, #12]
 8007394:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007396:	68f3      	ldr	r3, [r6, #12]
 8007398:	b183      	cbz	r3, 80073bc <_Balloc+0x50>
 800739a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073a2:	b9b8      	cbnz	r0, 80073d4 <_Balloc+0x68>
 80073a4:	2101      	movs	r1, #1
 80073a6:	fa01 f605 	lsl.w	r6, r1, r5
 80073aa:	1d72      	adds	r2, r6, #5
 80073ac:	0092      	lsls	r2, r2, #2
 80073ae:	4620      	mov	r0, r4
 80073b0:	f000 fb5a 	bl	8007a68 <_calloc_r>
 80073b4:	b160      	cbz	r0, 80073d0 <_Balloc+0x64>
 80073b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ba:	e00e      	b.n	80073da <_Balloc+0x6e>
 80073bc:	2221      	movs	r2, #33	; 0x21
 80073be:	2104      	movs	r1, #4
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 fb51 	bl	8007a68 <_calloc_r>
 80073c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073c8:	60f0      	str	r0, [r6, #12]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e4      	bne.n	800739a <_Balloc+0x2e>
 80073d0:	2000      	movs	r0, #0
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	6802      	ldr	r2, [r0, #0]
 80073d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073da:	2300      	movs	r3, #0
 80073dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073e0:	e7f7      	b.n	80073d2 <_Balloc+0x66>
 80073e2:	bf00      	nop
 80073e4:	08009235 	.word	0x08009235
 80073e8:	0800931c 	.word	0x0800931c

080073ec <_Bfree>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073f0:	4605      	mov	r5, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	b976      	cbnz	r6, 8007414 <_Bfree+0x28>
 80073f6:	2010      	movs	r0, #16
 80073f8:	f7fe f880 	bl	80054fc <malloc>
 80073fc:	4602      	mov	r2, r0
 80073fe:	6268      	str	r0, [r5, #36]	; 0x24
 8007400:	b920      	cbnz	r0, 800740c <_Bfree+0x20>
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <_Bfree+0x3c>)
 8007404:	4809      	ldr	r0, [pc, #36]	; (800742c <_Bfree+0x40>)
 8007406:	218a      	movs	r1, #138	; 0x8a
 8007408:	f000 fcec 	bl	8007de4 <__assert_func>
 800740c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007410:	6006      	str	r6, [r0, #0]
 8007412:	60c6      	str	r6, [r0, #12]
 8007414:	b13c      	cbz	r4, 8007426 <_Bfree+0x3a>
 8007416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007418:	6862      	ldr	r2, [r4, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007420:	6021      	str	r1, [r4, #0]
 8007422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	08009235 	.word	0x08009235
 800742c:	0800931c 	.word	0x0800931c

08007430 <__multadd>:
 8007430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007434:	690e      	ldr	r6, [r1, #16]
 8007436:	4607      	mov	r7, r0
 8007438:	4698      	mov	r8, r3
 800743a:	460c      	mov	r4, r1
 800743c:	f101 0014 	add.w	r0, r1, #20
 8007440:	2300      	movs	r3, #0
 8007442:	6805      	ldr	r5, [r0, #0]
 8007444:	b2a9      	uxth	r1, r5
 8007446:	fb02 8101 	mla	r1, r2, r1, r8
 800744a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800744e:	0c2d      	lsrs	r5, r5, #16
 8007450:	fb02 c505 	mla	r5, r2, r5, ip
 8007454:	b289      	uxth	r1, r1
 8007456:	3301      	adds	r3, #1
 8007458:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800745c:	429e      	cmp	r6, r3
 800745e:	f840 1b04 	str.w	r1, [r0], #4
 8007462:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007466:	dcec      	bgt.n	8007442 <__multadd+0x12>
 8007468:	f1b8 0f00 	cmp.w	r8, #0
 800746c:	d022      	beq.n	80074b4 <__multadd+0x84>
 800746e:	68a3      	ldr	r3, [r4, #8]
 8007470:	42b3      	cmp	r3, r6
 8007472:	dc19      	bgt.n	80074a8 <__multadd+0x78>
 8007474:	6861      	ldr	r1, [r4, #4]
 8007476:	4638      	mov	r0, r7
 8007478:	3101      	adds	r1, #1
 800747a:	f7ff ff77 	bl	800736c <_Balloc>
 800747e:	4605      	mov	r5, r0
 8007480:	b928      	cbnz	r0, 800748e <__multadd+0x5e>
 8007482:	4602      	mov	r2, r0
 8007484:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <__multadd+0x8c>)
 8007486:	480e      	ldr	r0, [pc, #56]	; (80074c0 <__multadd+0x90>)
 8007488:	21b5      	movs	r1, #181	; 0xb5
 800748a:	f000 fcab 	bl	8007de4 <__assert_func>
 800748e:	6922      	ldr	r2, [r4, #16]
 8007490:	3202      	adds	r2, #2
 8007492:	f104 010c 	add.w	r1, r4, #12
 8007496:	0092      	lsls	r2, r2, #2
 8007498:	300c      	adds	r0, #12
 800749a:	f7ff ff4d 	bl	8007338 <memcpy>
 800749e:	4621      	mov	r1, r4
 80074a0:	4638      	mov	r0, r7
 80074a2:	f7ff ffa3 	bl	80073ec <_Bfree>
 80074a6:	462c      	mov	r4, r5
 80074a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80074ac:	3601      	adds	r6, #1
 80074ae:	f8c3 8014 	str.w	r8, [r3, #20]
 80074b2:	6126      	str	r6, [r4, #16]
 80074b4:	4620      	mov	r0, r4
 80074b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ba:	bf00      	nop
 80074bc:	080092ab 	.word	0x080092ab
 80074c0:	0800931c 	.word	0x0800931c

080074c4 <__hi0bits>:
 80074c4:	0c03      	lsrs	r3, r0, #16
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	b9d3      	cbnz	r3, 8007500 <__hi0bits+0x3c>
 80074ca:	0400      	lsls	r0, r0, #16
 80074cc:	2310      	movs	r3, #16
 80074ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074d2:	bf04      	itt	eq
 80074d4:	0200      	lsleq	r0, r0, #8
 80074d6:	3308      	addeq	r3, #8
 80074d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074dc:	bf04      	itt	eq
 80074de:	0100      	lsleq	r0, r0, #4
 80074e0:	3304      	addeq	r3, #4
 80074e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074e6:	bf04      	itt	eq
 80074e8:	0080      	lsleq	r0, r0, #2
 80074ea:	3302      	addeq	r3, #2
 80074ec:	2800      	cmp	r0, #0
 80074ee:	db05      	blt.n	80074fc <__hi0bits+0x38>
 80074f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074f4:	f103 0301 	add.w	r3, r3, #1
 80074f8:	bf08      	it	eq
 80074fa:	2320      	moveq	r3, #32
 80074fc:	4618      	mov	r0, r3
 80074fe:	4770      	bx	lr
 8007500:	2300      	movs	r3, #0
 8007502:	e7e4      	b.n	80074ce <__hi0bits+0xa>

08007504 <__lo0bits>:
 8007504:	6803      	ldr	r3, [r0, #0]
 8007506:	f013 0207 	ands.w	r2, r3, #7
 800750a:	4601      	mov	r1, r0
 800750c:	d00b      	beq.n	8007526 <__lo0bits+0x22>
 800750e:	07da      	lsls	r2, r3, #31
 8007510:	d424      	bmi.n	800755c <__lo0bits+0x58>
 8007512:	0798      	lsls	r0, r3, #30
 8007514:	bf49      	itett	mi
 8007516:	085b      	lsrmi	r3, r3, #1
 8007518:	089b      	lsrpl	r3, r3, #2
 800751a:	2001      	movmi	r0, #1
 800751c:	600b      	strmi	r3, [r1, #0]
 800751e:	bf5c      	itt	pl
 8007520:	600b      	strpl	r3, [r1, #0]
 8007522:	2002      	movpl	r0, #2
 8007524:	4770      	bx	lr
 8007526:	b298      	uxth	r0, r3
 8007528:	b9b0      	cbnz	r0, 8007558 <__lo0bits+0x54>
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	2010      	movs	r0, #16
 800752e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007532:	bf04      	itt	eq
 8007534:	0a1b      	lsreq	r3, r3, #8
 8007536:	3008      	addeq	r0, #8
 8007538:	071a      	lsls	r2, r3, #28
 800753a:	bf04      	itt	eq
 800753c:	091b      	lsreq	r3, r3, #4
 800753e:	3004      	addeq	r0, #4
 8007540:	079a      	lsls	r2, r3, #30
 8007542:	bf04      	itt	eq
 8007544:	089b      	lsreq	r3, r3, #2
 8007546:	3002      	addeq	r0, #2
 8007548:	07da      	lsls	r2, r3, #31
 800754a:	d403      	bmi.n	8007554 <__lo0bits+0x50>
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	f100 0001 	add.w	r0, r0, #1
 8007552:	d005      	beq.n	8007560 <__lo0bits+0x5c>
 8007554:	600b      	str	r3, [r1, #0]
 8007556:	4770      	bx	lr
 8007558:	4610      	mov	r0, r2
 800755a:	e7e8      	b.n	800752e <__lo0bits+0x2a>
 800755c:	2000      	movs	r0, #0
 800755e:	4770      	bx	lr
 8007560:	2020      	movs	r0, #32
 8007562:	4770      	bx	lr

08007564 <__i2b>:
 8007564:	b510      	push	{r4, lr}
 8007566:	460c      	mov	r4, r1
 8007568:	2101      	movs	r1, #1
 800756a:	f7ff feff 	bl	800736c <_Balloc>
 800756e:	4602      	mov	r2, r0
 8007570:	b928      	cbnz	r0, 800757e <__i2b+0x1a>
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <__i2b+0x24>)
 8007574:	4805      	ldr	r0, [pc, #20]	; (800758c <__i2b+0x28>)
 8007576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800757a:	f000 fc33 	bl	8007de4 <__assert_func>
 800757e:	2301      	movs	r3, #1
 8007580:	6144      	str	r4, [r0, #20]
 8007582:	6103      	str	r3, [r0, #16]
 8007584:	bd10      	pop	{r4, pc}
 8007586:	bf00      	nop
 8007588:	080092ab 	.word	0x080092ab
 800758c:	0800931c 	.word	0x0800931c

08007590 <__multiply>:
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	4614      	mov	r4, r2
 8007596:	690a      	ldr	r2, [r1, #16]
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	429a      	cmp	r2, r3
 800759c:	bfb8      	it	lt
 800759e:	460b      	movlt	r3, r1
 80075a0:	460d      	mov	r5, r1
 80075a2:	bfbc      	itt	lt
 80075a4:	4625      	movlt	r5, r4
 80075a6:	461c      	movlt	r4, r3
 80075a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80075ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80075b0:	68ab      	ldr	r3, [r5, #8]
 80075b2:	6869      	ldr	r1, [r5, #4]
 80075b4:	eb0a 0709 	add.w	r7, sl, r9
 80075b8:	42bb      	cmp	r3, r7
 80075ba:	b085      	sub	sp, #20
 80075bc:	bfb8      	it	lt
 80075be:	3101      	addlt	r1, #1
 80075c0:	f7ff fed4 	bl	800736c <_Balloc>
 80075c4:	b930      	cbnz	r0, 80075d4 <__multiply+0x44>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4b42      	ldr	r3, [pc, #264]	; (80076d4 <__multiply+0x144>)
 80075ca:	4843      	ldr	r0, [pc, #268]	; (80076d8 <__multiply+0x148>)
 80075cc:	f240 115d 	movw	r1, #349	; 0x15d
 80075d0:	f000 fc08 	bl	8007de4 <__assert_func>
 80075d4:	f100 0614 	add.w	r6, r0, #20
 80075d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80075dc:	4633      	mov	r3, r6
 80075de:	2200      	movs	r2, #0
 80075e0:	4543      	cmp	r3, r8
 80075e2:	d31e      	bcc.n	8007622 <__multiply+0x92>
 80075e4:	f105 0c14 	add.w	ip, r5, #20
 80075e8:	f104 0314 	add.w	r3, r4, #20
 80075ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80075f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80075f4:	9202      	str	r2, [sp, #8]
 80075f6:	ebac 0205 	sub.w	r2, ip, r5
 80075fa:	3a15      	subs	r2, #21
 80075fc:	f022 0203 	bic.w	r2, r2, #3
 8007600:	3204      	adds	r2, #4
 8007602:	f105 0115 	add.w	r1, r5, #21
 8007606:	458c      	cmp	ip, r1
 8007608:	bf38      	it	cc
 800760a:	2204      	movcc	r2, #4
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	9a02      	ldr	r2, [sp, #8]
 8007610:	9303      	str	r3, [sp, #12]
 8007612:	429a      	cmp	r2, r3
 8007614:	d808      	bhi.n	8007628 <__multiply+0x98>
 8007616:	2f00      	cmp	r7, #0
 8007618:	dc55      	bgt.n	80076c6 <__multiply+0x136>
 800761a:	6107      	str	r7, [r0, #16]
 800761c:	b005      	add	sp, #20
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	f843 2b04 	str.w	r2, [r3], #4
 8007626:	e7db      	b.n	80075e0 <__multiply+0x50>
 8007628:	f8b3 a000 	ldrh.w	sl, [r3]
 800762c:	f1ba 0f00 	cmp.w	sl, #0
 8007630:	d020      	beq.n	8007674 <__multiply+0xe4>
 8007632:	f105 0e14 	add.w	lr, r5, #20
 8007636:	46b1      	mov	r9, r6
 8007638:	2200      	movs	r2, #0
 800763a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800763e:	f8d9 b000 	ldr.w	fp, [r9]
 8007642:	b2a1      	uxth	r1, r4
 8007644:	fa1f fb8b 	uxth.w	fp, fp
 8007648:	fb0a b101 	mla	r1, sl, r1, fp
 800764c:	4411      	add	r1, r2
 800764e:	f8d9 2000 	ldr.w	r2, [r9]
 8007652:	0c24      	lsrs	r4, r4, #16
 8007654:	0c12      	lsrs	r2, r2, #16
 8007656:	fb0a 2404 	mla	r4, sl, r4, r2
 800765a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800765e:	b289      	uxth	r1, r1
 8007660:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007664:	45f4      	cmp	ip, lr
 8007666:	f849 1b04 	str.w	r1, [r9], #4
 800766a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800766e:	d8e4      	bhi.n	800763a <__multiply+0xaa>
 8007670:	9901      	ldr	r1, [sp, #4]
 8007672:	5072      	str	r2, [r6, r1]
 8007674:	9a03      	ldr	r2, [sp, #12]
 8007676:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800767a:	3304      	adds	r3, #4
 800767c:	f1b9 0f00 	cmp.w	r9, #0
 8007680:	d01f      	beq.n	80076c2 <__multiply+0x132>
 8007682:	6834      	ldr	r4, [r6, #0]
 8007684:	f105 0114 	add.w	r1, r5, #20
 8007688:	46b6      	mov	lr, r6
 800768a:	f04f 0a00 	mov.w	sl, #0
 800768e:	880a      	ldrh	r2, [r1, #0]
 8007690:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007694:	fb09 b202 	mla	r2, r9, r2, fp
 8007698:	4492      	add	sl, r2
 800769a:	b2a4      	uxth	r4, r4
 800769c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80076a0:	f84e 4b04 	str.w	r4, [lr], #4
 80076a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80076a8:	f8be 2000 	ldrh.w	r2, [lr]
 80076ac:	0c24      	lsrs	r4, r4, #16
 80076ae:	fb09 2404 	mla	r4, r9, r4, r2
 80076b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80076b6:	458c      	cmp	ip, r1
 80076b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80076bc:	d8e7      	bhi.n	800768e <__multiply+0xfe>
 80076be:	9a01      	ldr	r2, [sp, #4]
 80076c0:	50b4      	str	r4, [r6, r2]
 80076c2:	3604      	adds	r6, #4
 80076c4:	e7a3      	b.n	800760e <__multiply+0x7e>
 80076c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1a5      	bne.n	800761a <__multiply+0x8a>
 80076ce:	3f01      	subs	r7, #1
 80076d0:	e7a1      	b.n	8007616 <__multiply+0x86>
 80076d2:	bf00      	nop
 80076d4:	080092ab 	.word	0x080092ab
 80076d8:	0800931c 	.word	0x0800931c

080076dc <__pow5mult>:
 80076dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e0:	4615      	mov	r5, r2
 80076e2:	f012 0203 	ands.w	r2, r2, #3
 80076e6:	4606      	mov	r6, r0
 80076e8:	460f      	mov	r7, r1
 80076ea:	d007      	beq.n	80076fc <__pow5mult+0x20>
 80076ec:	4c25      	ldr	r4, [pc, #148]	; (8007784 <__pow5mult+0xa8>)
 80076ee:	3a01      	subs	r2, #1
 80076f0:	2300      	movs	r3, #0
 80076f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076f6:	f7ff fe9b 	bl	8007430 <__multadd>
 80076fa:	4607      	mov	r7, r0
 80076fc:	10ad      	asrs	r5, r5, #2
 80076fe:	d03d      	beq.n	800777c <__pow5mult+0xa0>
 8007700:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007702:	b97c      	cbnz	r4, 8007724 <__pow5mult+0x48>
 8007704:	2010      	movs	r0, #16
 8007706:	f7fd fef9 	bl	80054fc <malloc>
 800770a:	4602      	mov	r2, r0
 800770c:	6270      	str	r0, [r6, #36]	; 0x24
 800770e:	b928      	cbnz	r0, 800771c <__pow5mult+0x40>
 8007710:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <__pow5mult+0xac>)
 8007712:	481e      	ldr	r0, [pc, #120]	; (800778c <__pow5mult+0xb0>)
 8007714:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007718:	f000 fb64 	bl	8007de4 <__assert_func>
 800771c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007720:	6004      	str	r4, [r0, #0]
 8007722:	60c4      	str	r4, [r0, #12]
 8007724:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800772c:	b94c      	cbnz	r4, 8007742 <__pow5mult+0x66>
 800772e:	f240 2171 	movw	r1, #625	; 0x271
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ff16 	bl	8007564 <__i2b>
 8007738:	2300      	movs	r3, #0
 800773a:	f8c8 0008 	str.w	r0, [r8, #8]
 800773e:	4604      	mov	r4, r0
 8007740:	6003      	str	r3, [r0, #0]
 8007742:	f04f 0900 	mov.w	r9, #0
 8007746:	07eb      	lsls	r3, r5, #31
 8007748:	d50a      	bpl.n	8007760 <__pow5mult+0x84>
 800774a:	4639      	mov	r1, r7
 800774c:	4622      	mov	r2, r4
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff ff1e 	bl	8007590 <__multiply>
 8007754:	4639      	mov	r1, r7
 8007756:	4680      	mov	r8, r0
 8007758:	4630      	mov	r0, r6
 800775a:	f7ff fe47 	bl	80073ec <_Bfree>
 800775e:	4647      	mov	r7, r8
 8007760:	106d      	asrs	r5, r5, #1
 8007762:	d00b      	beq.n	800777c <__pow5mult+0xa0>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	b938      	cbnz	r0, 8007778 <__pow5mult+0x9c>
 8007768:	4622      	mov	r2, r4
 800776a:	4621      	mov	r1, r4
 800776c:	4630      	mov	r0, r6
 800776e:	f7ff ff0f 	bl	8007590 <__multiply>
 8007772:	6020      	str	r0, [r4, #0]
 8007774:	f8c0 9000 	str.w	r9, [r0]
 8007778:	4604      	mov	r4, r0
 800777a:	e7e4      	b.n	8007746 <__pow5mult+0x6a>
 800777c:	4638      	mov	r0, r7
 800777e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007782:	bf00      	nop
 8007784:	08009470 	.word	0x08009470
 8007788:	08009235 	.word	0x08009235
 800778c:	0800931c 	.word	0x0800931c

08007790 <__lshift>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	460c      	mov	r4, r1
 8007796:	6849      	ldr	r1, [r1, #4]
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800779e:	68a3      	ldr	r3, [r4, #8]
 80077a0:	4607      	mov	r7, r0
 80077a2:	4691      	mov	r9, r2
 80077a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077a8:	f108 0601 	add.w	r6, r8, #1
 80077ac:	42b3      	cmp	r3, r6
 80077ae:	db0b      	blt.n	80077c8 <__lshift+0x38>
 80077b0:	4638      	mov	r0, r7
 80077b2:	f7ff fddb 	bl	800736c <_Balloc>
 80077b6:	4605      	mov	r5, r0
 80077b8:	b948      	cbnz	r0, 80077ce <__lshift+0x3e>
 80077ba:	4602      	mov	r2, r0
 80077bc:	4b28      	ldr	r3, [pc, #160]	; (8007860 <__lshift+0xd0>)
 80077be:	4829      	ldr	r0, [pc, #164]	; (8007864 <__lshift+0xd4>)
 80077c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077c4:	f000 fb0e 	bl	8007de4 <__assert_func>
 80077c8:	3101      	adds	r1, #1
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	e7ee      	b.n	80077ac <__lshift+0x1c>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f100 0114 	add.w	r1, r0, #20
 80077d4:	f100 0210 	add.w	r2, r0, #16
 80077d8:	4618      	mov	r0, r3
 80077da:	4553      	cmp	r3, sl
 80077dc:	db33      	blt.n	8007846 <__lshift+0xb6>
 80077de:	6920      	ldr	r0, [r4, #16]
 80077e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077e4:	f104 0314 	add.w	r3, r4, #20
 80077e8:	f019 091f 	ands.w	r9, r9, #31
 80077ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077f4:	d02b      	beq.n	800784e <__lshift+0xbe>
 80077f6:	f1c9 0e20 	rsb	lr, r9, #32
 80077fa:	468a      	mov	sl, r1
 80077fc:	2200      	movs	r2, #0
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	fa00 f009 	lsl.w	r0, r0, r9
 8007804:	4302      	orrs	r2, r0
 8007806:	f84a 2b04 	str.w	r2, [sl], #4
 800780a:	f853 2b04 	ldr.w	r2, [r3], #4
 800780e:	459c      	cmp	ip, r3
 8007810:	fa22 f20e 	lsr.w	r2, r2, lr
 8007814:	d8f3      	bhi.n	80077fe <__lshift+0x6e>
 8007816:	ebac 0304 	sub.w	r3, ip, r4
 800781a:	3b15      	subs	r3, #21
 800781c:	f023 0303 	bic.w	r3, r3, #3
 8007820:	3304      	adds	r3, #4
 8007822:	f104 0015 	add.w	r0, r4, #21
 8007826:	4584      	cmp	ip, r0
 8007828:	bf38      	it	cc
 800782a:	2304      	movcc	r3, #4
 800782c:	50ca      	str	r2, [r1, r3]
 800782e:	b10a      	cbz	r2, 8007834 <__lshift+0xa4>
 8007830:	f108 0602 	add.w	r6, r8, #2
 8007834:	3e01      	subs	r6, #1
 8007836:	4638      	mov	r0, r7
 8007838:	612e      	str	r6, [r5, #16]
 800783a:	4621      	mov	r1, r4
 800783c:	f7ff fdd6 	bl	80073ec <_Bfree>
 8007840:	4628      	mov	r0, r5
 8007842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007846:	f842 0f04 	str.w	r0, [r2, #4]!
 800784a:	3301      	adds	r3, #1
 800784c:	e7c5      	b.n	80077da <__lshift+0x4a>
 800784e:	3904      	subs	r1, #4
 8007850:	f853 2b04 	ldr.w	r2, [r3], #4
 8007854:	f841 2f04 	str.w	r2, [r1, #4]!
 8007858:	459c      	cmp	ip, r3
 800785a:	d8f9      	bhi.n	8007850 <__lshift+0xc0>
 800785c:	e7ea      	b.n	8007834 <__lshift+0xa4>
 800785e:	bf00      	nop
 8007860:	080092ab 	.word	0x080092ab
 8007864:	0800931c 	.word	0x0800931c

08007868 <__mcmp>:
 8007868:	b530      	push	{r4, r5, lr}
 800786a:	6902      	ldr	r2, [r0, #16]
 800786c:	690c      	ldr	r4, [r1, #16]
 800786e:	1b12      	subs	r2, r2, r4
 8007870:	d10e      	bne.n	8007890 <__mcmp+0x28>
 8007872:	f100 0314 	add.w	r3, r0, #20
 8007876:	3114      	adds	r1, #20
 8007878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800787c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007888:	42a5      	cmp	r5, r4
 800788a:	d003      	beq.n	8007894 <__mcmp+0x2c>
 800788c:	d305      	bcc.n	800789a <__mcmp+0x32>
 800788e:	2201      	movs	r2, #1
 8007890:	4610      	mov	r0, r2
 8007892:	bd30      	pop	{r4, r5, pc}
 8007894:	4283      	cmp	r3, r0
 8007896:	d3f3      	bcc.n	8007880 <__mcmp+0x18>
 8007898:	e7fa      	b.n	8007890 <__mcmp+0x28>
 800789a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800789e:	e7f7      	b.n	8007890 <__mcmp+0x28>

080078a0 <__mdiff>:
 80078a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	460c      	mov	r4, r1
 80078a6:	4606      	mov	r6, r0
 80078a8:	4611      	mov	r1, r2
 80078aa:	4620      	mov	r0, r4
 80078ac:	4617      	mov	r7, r2
 80078ae:	f7ff ffdb 	bl	8007868 <__mcmp>
 80078b2:	1e05      	subs	r5, r0, #0
 80078b4:	d110      	bne.n	80078d8 <__mdiff+0x38>
 80078b6:	4629      	mov	r1, r5
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff fd57 	bl	800736c <_Balloc>
 80078be:	b930      	cbnz	r0, 80078ce <__mdiff+0x2e>
 80078c0:	4b39      	ldr	r3, [pc, #228]	; (80079a8 <__mdiff+0x108>)
 80078c2:	4602      	mov	r2, r0
 80078c4:	f240 2132 	movw	r1, #562	; 0x232
 80078c8:	4838      	ldr	r0, [pc, #224]	; (80079ac <__mdiff+0x10c>)
 80078ca:	f000 fa8b 	bl	8007de4 <__assert_func>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d8:	bfa4      	itt	ge
 80078da:	463b      	movge	r3, r7
 80078dc:	4627      	movge	r7, r4
 80078de:	4630      	mov	r0, r6
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	bfa6      	itte	ge
 80078e4:	461c      	movge	r4, r3
 80078e6:	2500      	movge	r5, #0
 80078e8:	2501      	movlt	r5, #1
 80078ea:	f7ff fd3f 	bl	800736c <_Balloc>
 80078ee:	b920      	cbnz	r0, 80078fa <__mdiff+0x5a>
 80078f0:	4b2d      	ldr	r3, [pc, #180]	; (80079a8 <__mdiff+0x108>)
 80078f2:	4602      	mov	r2, r0
 80078f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078f8:	e7e6      	b.n	80078c8 <__mdiff+0x28>
 80078fa:	693e      	ldr	r6, [r7, #16]
 80078fc:	60c5      	str	r5, [r0, #12]
 80078fe:	6925      	ldr	r5, [r4, #16]
 8007900:	f107 0114 	add.w	r1, r7, #20
 8007904:	f104 0914 	add.w	r9, r4, #20
 8007908:	f100 0e14 	add.w	lr, r0, #20
 800790c:	f107 0210 	add.w	r2, r7, #16
 8007910:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007914:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007918:	46f2      	mov	sl, lr
 800791a:	2700      	movs	r7, #0
 800791c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007920:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007924:	fa1f f883 	uxth.w	r8, r3
 8007928:	fa17 f78b 	uxtah	r7, r7, fp
 800792c:	0c1b      	lsrs	r3, r3, #16
 800792e:	eba7 0808 	sub.w	r8, r7, r8
 8007932:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007936:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800793a:	fa1f f888 	uxth.w	r8, r8
 800793e:	141f      	asrs	r7, r3, #16
 8007940:	454d      	cmp	r5, r9
 8007942:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007946:	f84a 3b04 	str.w	r3, [sl], #4
 800794a:	d8e7      	bhi.n	800791c <__mdiff+0x7c>
 800794c:	1b2b      	subs	r3, r5, r4
 800794e:	3b15      	subs	r3, #21
 8007950:	f023 0303 	bic.w	r3, r3, #3
 8007954:	3304      	adds	r3, #4
 8007956:	3415      	adds	r4, #21
 8007958:	42a5      	cmp	r5, r4
 800795a:	bf38      	it	cc
 800795c:	2304      	movcc	r3, #4
 800795e:	4419      	add	r1, r3
 8007960:	4473      	add	r3, lr
 8007962:	469e      	mov	lr, r3
 8007964:	460d      	mov	r5, r1
 8007966:	4565      	cmp	r5, ip
 8007968:	d30e      	bcc.n	8007988 <__mdiff+0xe8>
 800796a:	f10c 0203 	add.w	r2, ip, #3
 800796e:	1a52      	subs	r2, r2, r1
 8007970:	f022 0203 	bic.w	r2, r2, #3
 8007974:	3903      	subs	r1, #3
 8007976:	458c      	cmp	ip, r1
 8007978:	bf38      	it	cc
 800797a:	2200      	movcc	r2, #0
 800797c:	441a      	add	r2, r3
 800797e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007982:	b17b      	cbz	r3, 80079a4 <__mdiff+0x104>
 8007984:	6106      	str	r6, [r0, #16]
 8007986:	e7a5      	b.n	80078d4 <__mdiff+0x34>
 8007988:	f855 8b04 	ldr.w	r8, [r5], #4
 800798c:	fa17 f488 	uxtah	r4, r7, r8
 8007990:	1422      	asrs	r2, r4, #16
 8007992:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007996:	b2a4      	uxth	r4, r4
 8007998:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800799c:	f84e 4b04 	str.w	r4, [lr], #4
 80079a0:	1417      	asrs	r7, r2, #16
 80079a2:	e7e0      	b.n	8007966 <__mdiff+0xc6>
 80079a4:	3e01      	subs	r6, #1
 80079a6:	e7ea      	b.n	800797e <__mdiff+0xde>
 80079a8:	080092ab 	.word	0x080092ab
 80079ac:	0800931c 	.word	0x0800931c

080079b0 <__d2b>:
 80079b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079b4:	4689      	mov	r9, r1
 80079b6:	2101      	movs	r1, #1
 80079b8:	ec57 6b10 	vmov	r6, r7, d0
 80079bc:	4690      	mov	r8, r2
 80079be:	f7ff fcd5 	bl	800736c <_Balloc>
 80079c2:	4604      	mov	r4, r0
 80079c4:	b930      	cbnz	r0, 80079d4 <__d2b+0x24>
 80079c6:	4602      	mov	r2, r0
 80079c8:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <__d2b+0xb0>)
 80079ca:	4826      	ldr	r0, [pc, #152]	; (8007a64 <__d2b+0xb4>)
 80079cc:	f240 310a 	movw	r1, #778	; 0x30a
 80079d0:	f000 fa08 	bl	8007de4 <__assert_func>
 80079d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80079d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079dc:	bb35      	cbnz	r5, 8007a2c <__d2b+0x7c>
 80079de:	2e00      	cmp	r6, #0
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	d028      	beq.n	8007a36 <__d2b+0x86>
 80079e4:	4668      	mov	r0, sp
 80079e6:	9600      	str	r6, [sp, #0]
 80079e8:	f7ff fd8c 	bl	8007504 <__lo0bits>
 80079ec:	9900      	ldr	r1, [sp, #0]
 80079ee:	b300      	cbz	r0, 8007a32 <__d2b+0x82>
 80079f0:	9a01      	ldr	r2, [sp, #4]
 80079f2:	f1c0 0320 	rsb	r3, r0, #32
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	430b      	orrs	r3, r1
 80079fc:	40c2      	lsrs	r2, r0
 80079fe:	6163      	str	r3, [r4, #20]
 8007a00:	9201      	str	r2, [sp, #4]
 8007a02:	9b01      	ldr	r3, [sp, #4]
 8007a04:	61a3      	str	r3, [r4, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bf14      	ite	ne
 8007a0a:	2202      	movne	r2, #2
 8007a0c:	2201      	moveq	r2, #1
 8007a0e:	6122      	str	r2, [r4, #16]
 8007a10:	b1d5      	cbz	r5, 8007a48 <__d2b+0x98>
 8007a12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a16:	4405      	add	r5, r0
 8007a18:	f8c9 5000 	str.w	r5, [r9]
 8007a1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a20:	f8c8 0000 	str.w	r0, [r8]
 8007a24:	4620      	mov	r0, r4
 8007a26:	b003      	add	sp, #12
 8007a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a30:	e7d5      	b.n	80079de <__d2b+0x2e>
 8007a32:	6161      	str	r1, [r4, #20]
 8007a34:	e7e5      	b.n	8007a02 <__d2b+0x52>
 8007a36:	a801      	add	r0, sp, #4
 8007a38:	f7ff fd64 	bl	8007504 <__lo0bits>
 8007a3c:	9b01      	ldr	r3, [sp, #4]
 8007a3e:	6163      	str	r3, [r4, #20]
 8007a40:	2201      	movs	r2, #1
 8007a42:	6122      	str	r2, [r4, #16]
 8007a44:	3020      	adds	r0, #32
 8007a46:	e7e3      	b.n	8007a10 <__d2b+0x60>
 8007a48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a50:	f8c9 0000 	str.w	r0, [r9]
 8007a54:	6918      	ldr	r0, [r3, #16]
 8007a56:	f7ff fd35 	bl	80074c4 <__hi0bits>
 8007a5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a5e:	e7df      	b.n	8007a20 <__d2b+0x70>
 8007a60:	080092ab 	.word	0x080092ab
 8007a64:	0800931c 	.word	0x0800931c

08007a68 <_calloc_r>:
 8007a68:	b513      	push	{r0, r1, r4, lr}
 8007a6a:	434a      	muls	r2, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	9201      	str	r2, [sp, #4]
 8007a70:	f7fd fda4 	bl	80055bc <_malloc_r>
 8007a74:	4604      	mov	r4, r0
 8007a76:	b118      	cbz	r0, 8007a80 <_calloc_r+0x18>
 8007a78:	9a01      	ldr	r2, [sp, #4]
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	f7fd fd46 	bl	800550c <memset>
 8007a80:	4620      	mov	r0, r4
 8007a82:	b002      	add	sp, #8
 8007a84:	bd10      	pop	{r4, pc}

08007a86 <__sfputc_r>:
 8007a86:	6893      	ldr	r3, [r2, #8]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	b410      	push	{r4}
 8007a8e:	6093      	str	r3, [r2, #8]
 8007a90:	da08      	bge.n	8007aa4 <__sfputc_r+0x1e>
 8007a92:	6994      	ldr	r4, [r2, #24]
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	db01      	blt.n	8007a9c <__sfputc_r+0x16>
 8007a98:	290a      	cmp	r1, #10
 8007a9a:	d103      	bne.n	8007aa4 <__sfputc_r+0x1e>
 8007a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa0:	f7fe baee 	b.w	8006080 <__swbuf_r>
 8007aa4:	6813      	ldr	r3, [r2, #0]
 8007aa6:	1c58      	adds	r0, r3, #1
 8007aa8:	6010      	str	r0, [r2, #0]
 8007aaa:	7019      	strb	r1, [r3, #0]
 8007aac:	4608      	mov	r0, r1
 8007aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <__sfputs_r>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460f      	mov	r7, r1
 8007aba:	4614      	mov	r4, r2
 8007abc:	18d5      	adds	r5, r2, r3
 8007abe:	42ac      	cmp	r4, r5
 8007ac0:	d101      	bne.n	8007ac6 <__sfputs_r+0x12>
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	e007      	b.n	8007ad6 <__sfputs_r+0x22>
 8007ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aca:	463a      	mov	r2, r7
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff ffda 	bl	8007a86 <__sfputc_r>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	d1f3      	bne.n	8007abe <__sfputs_r+0xa>
 8007ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ad8 <_vfiprintf_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	460d      	mov	r5, r1
 8007ade:	b09d      	sub	sp, #116	; 0x74
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	4698      	mov	r8, r3
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	b118      	cbz	r0, 8007af0 <_vfiprintf_r+0x18>
 8007ae8:	6983      	ldr	r3, [r0, #24]
 8007aea:	b90b      	cbnz	r3, 8007af0 <_vfiprintf_r+0x18>
 8007aec:	f7ff fb1a 	bl	8007124 <__sinit>
 8007af0:	4b89      	ldr	r3, [pc, #548]	; (8007d18 <_vfiprintf_r+0x240>)
 8007af2:	429d      	cmp	r5, r3
 8007af4:	d11b      	bne.n	8007b2e <_vfiprintf_r+0x56>
 8007af6:	6875      	ldr	r5, [r6, #4]
 8007af8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007afa:	07d9      	lsls	r1, r3, #31
 8007afc:	d405      	bmi.n	8007b0a <_vfiprintf_r+0x32>
 8007afe:	89ab      	ldrh	r3, [r5, #12]
 8007b00:	059a      	lsls	r2, r3, #22
 8007b02:	d402      	bmi.n	8007b0a <_vfiprintf_r+0x32>
 8007b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b06:	f7ff fbb0 	bl	800726a <__retarget_lock_acquire_recursive>
 8007b0a:	89ab      	ldrh	r3, [r5, #12]
 8007b0c:	071b      	lsls	r3, r3, #28
 8007b0e:	d501      	bpl.n	8007b14 <_vfiprintf_r+0x3c>
 8007b10:	692b      	ldr	r3, [r5, #16]
 8007b12:	b9eb      	cbnz	r3, 8007b50 <_vfiprintf_r+0x78>
 8007b14:	4629      	mov	r1, r5
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7fe fb04 	bl	8006124 <__swsetup_r>
 8007b1c:	b1c0      	cbz	r0, 8007b50 <_vfiprintf_r+0x78>
 8007b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b20:	07dc      	lsls	r4, r3, #31
 8007b22:	d50e      	bpl.n	8007b42 <_vfiprintf_r+0x6a>
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b28:	b01d      	add	sp, #116	; 0x74
 8007b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2e:	4b7b      	ldr	r3, [pc, #492]	; (8007d1c <_vfiprintf_r+0x244>)
 8007b30:	429d      	cmp	r5, r3
 8007b32:	d101      	bne.n	8007b38 <_vfiprintf_r+0x60>
 8007b34:	68b5      	ldr	r5, [r6, #8]
 8007b36:	e7df      	b.n	8007af8 <_vfiprintf_r+0x20>
 8007b38:	4b79      	ldr	r3, [pc, #484]	; (8007d20 <_vfiprintf_r+0x248>)
 8007b3a:	429d      	cmp	r5, r3
 8007b3c:	bf08      	it	eq
 8007b3e:	68f5      	ldreq	r5, [r6, #12]
 8007b40:	e7da      	b.n	8007af8 <_vfiprintf_r+0x20>
 8007b42:	89ab      	ldrh	r3, [r5, #12]
 8007b44:	0598      	lsls	r0, r3, #22
 8007b46:	d4ed      	bmi.n	8007b24 <_vfiprintf_r+0x4c>
 8007b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b4a:	f7ff fb8f 	bl	800726c <__retarget_lock_release_recursive>
 8007b4e:	e7e9      	b.n	8007b24 <_vfiprintf_r+0x4c>
 8007b50:	2300      	movs	r3, #0
 8007b52:	9309      	str	r3, [sp, #36]	; 0x24
 8007b54:	2320      	movs	r3, #32
 8007b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b5e:	2330      	movs	r3, #48	; 0x30
 8007b60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d24 <_vfiprintf_r+0x24c>
 8007b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b68:	f04f 0901 	mov.w	r9, #1
 8007b6c:	4623      	mov	r3, r4
 8007b6e:	469a      	mov	sl, r3
 8007b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b74:	b10a      	cbz	r2, 8007b7a <_vfiprintf_r+0xa2>
 8007b76:	2a25      	cmp	r2, #37	; 0x25
 8007b78:	d1f9      	bne.n	8007b6e <_vfiprintf_r+0x96>
 8007b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b7e:	d00b      	beq.n	8007b98 <_vfiprintf_r+0xc0>
 8007b80:	465b      	mov	r3, fp
 8007b82:	4622      	mov	r2, r4
 8007b84:	4629      	mov	r1, r5
 8007b86:	4630      	mov	r0, r6
 8007b88:	f7ff ff94 	bl	8007ab4 <__sfputs_r>
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f000 80aa 	beq.w	8007ce6 <_vfiprintf_r+0x20e>
 8007b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b94:	445a      	add	r2, fp
 8007b96:	9209      	str	r2, [sp, #36]	; 0x24
 8007b98:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 80a2 	beq.w	8007ce6 <_vfiprintf_r+0x20e>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bac:	f10a 0a01 	add.w	sl, sl, #1
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	9307      	str	r3, [sp, #28]
 8007bb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8007bba:	4654      	mov	r4, sl
 8007bbc:	2205      	movs	r2, #5
 8007bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc2:	4858      	ldr	r0, [pc, #352]	; (8007d24 <_vfiprintf_r+0x24c>)
 8007bc4:	f7f8 fb2c 	bl	8000220 <memchr>
 8007bc8:	9a04      	ldr	r2, [sp, #16]
 8007bca:	b9d8      	cbnz	r0, 8007c04 <_vfiprintf_r+0x12c>
 8007bcc:	06d1      	lsls	r1, r2, #27
 8007bce:	bf44      	itt	mi
 8007bd0:	2320      	movmi	r3, #32
 8007bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd6:	0713      	lsls	r3, r2, #28
 8007bd8:	bf44      	itt	mi
 8007bda:	232b      	movmi	r3, #43	; 0x2b
 8007bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007be0:	f89a 3000 	ldrb.w	r3, [sl]
 8007be4:	2b2a      	cmp	r3, #42	; 0x2a
 8007be6:	d015      	beq.n	8007c14 <_vfiprintf_r+0x13c>
 8007be8:	9a07      	ldr	r2, [sp, #28]
 8007bea:	4654      	mov	r4, sl
 8007bec:	2000      	movs	r0, #0
 8007bee:	f04f 0c0a 	mov.w	ip, #10
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bf8:	3b30      	subs	r3, #48	; 0x30
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	d94e      	bls.n	8007c9c <_vfiprintf_r+0x1c4>
 8007bfe:	b1b0      	cbz	r0, 8007c2e <_vfiprintf_r+0x156>
 8007c00:	9207      	str	r2, [sp, #28]
 8007c02:	e014      	b.n	8007c2e <_vfiprintf_r+0x156>
 8007c04:	eba0 0308 	sub.w	r3, r0, r8
 8007c08:	fa09 f303 	lsl.w	r3, r9, r3
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	9304      	str	r3, [sp, #16]
 8007c10:	46a2      	mov	sl, r4
 8007c12:	e7d2      	b.n	8007bba <_vfiprintf_r+0xe2>
 8007c14:	9b03      	ldr	r3, [sp, #12]
 8007c16:	1d19      	adds	r1, r3, #4
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	9103      	str	r1, [sp, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bfbb      	ittet	lt
 8007c20:	425b      	neglt	r3, r3
 8007c22:	f042 0202 	orrlt.w	r2, r2, #2
 8007c26:	9307      	strge	r3, [sp, #28]
 8007c28:	9307      	strlt	r3, [sp, #28]
 8007c2a:	bfb8      	it	lt
 8007c2c:	9204      	strlt	r2, [sp, #16]
 8007c2e:	7823      	ldrb	r3, [r4, #0]
 8007c30:	2b2e      	cmp	r3, #46	; 0x2e
 8007c32:	d10c      	bne.n	8007c4e <_vfiprintf_r+0x176>
 8007c34:	7863      	ldrb	r3, [r4, #1]
 8007c36:	2b2a      	cmp	r3, #42	; 0x2a
 8007c38:	d135      	bne.n	8007ca6 <_vfiprintf_r+0x1ce>
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	1d1a      	adds	r2, r3, #4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	9203      	str	r2, [sp, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bfb8      	it	lt
 8007c46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c4a:	3402      	adds	r4, #2
 8007c4c:	9305      	str	r3, [sp, #20]
 8007c4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d34 <_vfiprintf_r+0x25c>
 8007c52:	7821      	ldrb	r1, [r4, #0]
 8007c54:	2203      	movs	r2, #3
 8007c56:	4650      	mov	r0, sl
 8007c58:	f7f8 fae2 	bl	8000220 <memchr>
 8007c5c:	b140      	cbz	r0, 8007c70 <_vfiprintf_r+0x198>
 8007c5e:	2340      	movs	r3, #64	; 0x40
 8007c60:	eba0 000a 	sub.w	r0, r0, sl
 8007c64:	fa03 f000 	lsl.w	r0, r3, r0
 8007c68:	9b04      	ldr	r3, [sp, #16]
 8007c6a:	4303      	orrs	r3, r0
 8007c6c:	3401      	adds	r4, #1
 8007c6e:	9304      	str	r3, [sp, #16]
 8007c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c74:	482c      	ldr	r0, [pc, #176]	; (8007d28 <_vfiprintf_r+0x250>)
 8007c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c7a:	2206      	movs	r2, #6
 8007c7c:	f7f8 fad0 	bl	8000220 <memchr>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d03f      	beq.n	8007d04 <_vfiprintf_r+0x22c>
 8007c84:	4b29      	ldr	r3, [pc, #164]	; (8007d2c <_vfiprintf_r+0x254>)
 8007c86:	bb1b      	cbnz	r3, 8007cd0 <_vfiprintf_r+0x1f8>
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	3307      	adds	r3, #7
 8007c8c:	f023 0307 	bic.w	r3, r3, #7
 8007c90:	3308      	adds	r3, #8
 8007c92:	9303      	str	r3, [sp, #12]
 8007c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c96:	443b      	add	r3, r7
 8007c98:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9a:	e767      	b.n	8007b6c <_vfiprintf_r+0x94>
 8007c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	e7a5      	b.n	8007bf2 <_vfiprintf_r+0x11a>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	3401      	adds	r4, #1
 8007caa:	9305      	str	r3, [sp, #20]
 8007cac:	4619      	mov	r1, r3
 8007cae:	f04f 0c0a 	mov.w	ip, #10
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cb8:	3a30      	subs	r2, #48	; 0x30
 8007cba:	2a09      	cmp	r2, #9
 8007cbc:	d903      	bls.n	8007cc6 <_vfiprintf_r+0x1ee>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0c5      	beq.n	8007c4e <_vfiprintf_r+0x176>
 8007cc2:	9105      	str	r1, [sp, #20]
 8007cc4:	e7c3      	b.n	8007c4e <_vfiprintf_r+0x176>
 8007cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cca:	4604      	mov	r4, r0
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e7f0      	b.n	8007cb2 <_vfiprintf_r+0x1da>
 8007cd0:	ab03      	add	r3, sp, #12
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <_vfiprintf_r+0x258>)
 8007cd8:	a904      	add	r1, sp, #16
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7fd fd68 	bl	80057b0 <_printf_float>
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	1c78      	adds	r0, r7, #1
 8007ce4:	d1d6      	bne.n	8007c94 <_vfiprintf_r+0x1bc>
 8007ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ce8:	07d9      	lsls	r1, r3, #31
 8007cea:	d405      	bmi.n	8007cf8 <_vfiprintf_r+0x220>
 8007cec:	89ab      	ldrh	r3, [r5, #12]
 8007cee:	059a      	lsls	r2, r3, #22
 8007cf0:	d402      	bmi.n	8007cf8 <_vfiprintf_r+0x220>
 8007cf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cf4:	f7ff faba 	bl	800726c <__retarget_lock_release_recursive>
 8007cf8:	89ab      	ldrh	r3, [r5, #12]
 8007cfa:	065b      	lsls	r3, r3, #25
 8007cfc:	f53f af12 	bmi.w	8007b24 <_vfiprintf_r+0x4c>
 8007d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d02:	e711      	b.n	8007b28 <_vfiprintf_r+0x50>
 8007d04:	ab03      	add	r3, sp, #12
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	462a      	mov	r2, r5
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <_vfiprintf_r+0x258>)
 8007d0c:	a904      	add	r1, sp, #16
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7fd fff2 	bl	8005cf8 <_printf_i>
 8007d14:	e7e4      	b.n	8007ce0 <_vfiprintf_r+0x208>
 8007d16:	bf00      	nop
 8007d18:	080092dc 	.word	0x080092dc
 8007d1c:	080092fc 	.word	0x080092fc
 8007d20:	080092bc 	.word	0x080092bc
 8007d24:	0800947c 	.word	0x0800947c
 8007d28:	08009486 	.word	0x08009486
 8007d2c:	080057b1 	.word	0x080057b1
 8007d30:	08007ab5 	.word	0x08007ab5
 8007d34:	08009482 	.word	0x08009482

08007d38 <__sread>:
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d40:	f000 f8d6 	bl	8007ef0 <_read_r>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	bfab      	itete	ge
 8007d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d4c:	181b      	addge	r3, r3, r0
 8007d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d52:	bfac      	ite	ge
 8007d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d56:	81a3      	strhlt	r3, [r4, #12]
 8007d58:	bd10      	pop	{r4, pc}

08007d5a <__swrite>:
 8007d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5e:	461f      	mov	r7, r3
 8007d60:	898b      	ldrh	r3, [r1, #12]
 8007d62:	05db      	lsls	r3, r3, #23
 8007d64:	4605      	mov	r5, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	4616      	mov	r6, r2
 8007d6a:	d505      	bpl.n	8007d78 <__swrite+0x1e>
 8007d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d70:	2302      	movs	r3, #2
 8007d72:	2200      	movs	r2, #0
 8007d74:	f000 f898 	bl	8007ea8 <_lseek_r>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	4632      	mov	r2, r6
 8007d86:	463b      	mov	r3, r7
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8e:	f000 b817 	b.w	8007dc0 <_write_r>

08007d92 <__sseek>:
 8007d92:	b510      	push	{r4, lr}
 8007d94:	460c      	mov	r4, r1
 8007d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9a:	f000 f885 	bl	8007ea8 <_lseek_r>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	bf15      	itete	ne
 8007da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dae:	81a3      	strheq	r3, [r4, #12]
 8007db0:	bf18      	it	ne
 8007db2:	81a3      	strhne	r3, [r4, #12]
 8007db4:	bd10      	pop	{r4, pc}

08007db6 <__sclose>:
 8007db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dba:	f000 b831 	b.w	8007e20 <_close_r>
	...

08007dc0 <_write_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	; (8007de0 <_write_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7f9 ff78 	bl	8001cc4 <_write>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_write_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_write_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	200004b0 	.word	0x200004b0

08007de4 <__assert_func>:
 8007de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007de6:	4614      	mov	r4, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <__assert_func+0x2c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4605      	mov	r5, r0
 8007df0:	68d8      	ldr	r0, [r3, #12]
 8007df2:	b14c      	cbz	r4, 8007e08 <__assert_func+0x24>
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <__assert_func+0x30>)
 8007df6:	9100      	str	r1, [sp, #0]
 8007df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dfc:	4906      	ldr	r1, [pc, #24]	; (8007e18 <__assert_func+0x34>)
 8007dfe:	462b      	mov	r3, r5
 8007e00:	f000 f81e 	bl	8007e40 <fiprintf>
 8007e04:	f000 f893 	bl	8007f2e <abort>
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <__assert_func+0x38>)
 8007e0a:	461c      	mov	r4, r3
 8007e0c:	e7f3      	b.n	8007df6 <__assert_func+0x12>
 8007e0e:	bf00      	nop
 8007e10:	2000000c 	.word	0x2000000c
 8007e14:	0800948d 	.word	0x0800948d
 8007e18:	0800949a 	.word	0x0800949a
 8007e1c:	080094c8 	.word	0x080094c8

08007e20 <_close_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d06      	ldr	r5, [pc, #24]	; (8007e3c <_close_r+0x1c>)
 8007e24:	2300      	movs	r3, #0
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	602b      	str	r3, [r5, #0]
 8007e2c:	f7fa f9f3 	bl	8002216 <_close>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_close_r+0x1a>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_close_r+0x1a>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	200004b0 	.word	0x200004b0

08007e40 <fiprintf>:
 8007e40:	b40e      	push	{r1, r2, r3}
 8007e42:	b503      	push	{r0, r1, lr}
 8007e44:	4601      	mov	r1, r0
 8007e46:	ab03      	add	r3, sp, #12
 8007e48:	4805      	ldr	r0, [pc, #20]	; (8007e60 <fiprintf+0x20>)
 8007e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e4e:	6800      	ldr	r0, [r0, #0]
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	f7ff fe41 	bl	8007ad8 <_vfiprintf_r>
 8007e56:	b002      	add	sp, #8
 8007e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e5c:	b003      	add	sp, #12
 8007e5e:	4770      	bx	lr
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <_fstat_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	; (8007e84 <_fstat_r+0x20>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	f7fa f9dc 	bl	800222e <_fstat>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d102      	bne.n	8007e80 <_fstat_r+0x1c>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b103      	cbz	r3, 8007e80 <_fstat_r+0x1c>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	200004b0 	.word	0x200004b0

08007e88 <_isatty_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d06      	ldr	r5, [pc, #24]	; (8007ea4 <_isatty_r+0x1c>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	f7fa f9db 	bl	800224e <_isatty>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_isatty_r+0x1a>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_isatty_r+0x1a>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	200004b0 	.word	0x200004b0

08007ea8 <_lseek_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d07      	ldr	r5, [pc, #28]	; (8007ec8 <_lseek_r+0x20>)
 8007eac:	4604      	mov	r4, r0
 8007eae:	4608      	mov	r0, r1
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	602a      	str	r2, [r5, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f7fa f9d4 	bl	8002264 <_lseek>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_lseek_r+0x1e>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_lseek_r+0x1e>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	200004b0 	.word	0x200004b0

08007ecc <__ascii_mbtowc>:
 8007ecc:	b082      	sub	sp, #8
 8007ece:	b901      	cbnz	r1, 8007ed2 <__ascii_mbtowc+0x6>
 8007ed0:	a901      	add	r1, sp, #4
 8007ed2:	b142      	cbz	r2, 8007ee6 <__ascii_mbtowc+0x1a>
 8007ed4:	b14b      	cbz	r3, 8007eea <__ascii_mbtowc+0x1e>
 8007ed6:	7813      	ldrb	r3, [r2, #0]
 8007ed8:	600b      	str	r3, [r1, #0]
 8007eda:	7812      	ldrb	r2, [r2, #0]
 8007edc:	1e10      	subs	r0, r2, #0
 8007ede:	bf18      	it	ne
 8007ee0:	2001      	movne	r0, #1
 8007ee2:	b002      	add	sp, #8
 8007ee4:	4770      	bx	lr
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	e7fb      	b.n	8007ee2 <__ascii_mbtowc+0x16>
 8007eea:	f06f 0001 	mvn.w	r0, #1
 8007eee:	e7f8      	b.n	8007ee2 <__ascii_mbtowc+0x16>

08007ef0 <_read_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d07      	ldr	r5, [pc, #28]	; (8007f10 <_read_r+0x20>)
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	4608      	mov	r0, r1
 8007ef8:	4611      	mov	r1, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	602a      	str	r2, [r5, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f7fa f96c 	bl	80021dc <_read>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_read_r+0x1e>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_read_r+0x1e>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	200004b0 	.word	0x200004b0

08007f14 <__ascii_wctomb>:
 8007f14:	b149      	cbz	r1, 8007f2a <__ascii_wctomb+0x16>
 8007f16:	2aff      	cmp	r2, #255	; 0xff
 8007f18:	bf85      	ittet	hi
 8007f1a:	238a      	movhi	r3, #138	; 0x8a
 8007f1c:	6003      	strhi	r3, [r0, #0]
 8007f1e:	700a      	strbls	r2, [r1, #0]
 8007f20:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007f24:	bf98      	it	ls
 8007f26:	2001      	movls	r0, #1
 8007f28:	4770      	bx	lr
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	4770      	bx	lr

08007f2e <abort>:
 8007f2e:	b508      	push	{r3, lr}
 8007f30:	2006      	movs	r0, #6
 8007f32:	f000 f82b 	bl	8007f8c <raise>
 8007f36:	2001      	movs	r0, #1
 8007f38:	f7fa f946 	bl	80021c8 <_exit>

08007f3c <_raise_r>:
 8007f3c:	291f      	cmp	r1, #31
 8007f3e:	b538      	push	{r3, r4, r5, lr}
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
 8007f44:	d904      	bls.n	8007f50 <_raise_r+0x14>
 8007f46:	2316      	movs	r3, #22
 8007f48:	6003      	str	r3, [r0, #0]
 8007f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f52:	b112      	cbz	r2, 8007f5a <_raise_r+0x1e>
 8007f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f58:	b94b      	cbnz	r3, 8007f6e <_raise_r+0x32>
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 f830 	bl	8007fc0 <_getpid_r>
 8007f60:	462a      	mov	r2, r5
 8007f62:	4601      	mov	r1, r0
 8007f64:	4620      	mov	r0, r4
 8007f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f6a:	f000 b817 	b.w	8007f9c <_kill_r>
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d00a      	beq.n	8007f88 <_raise_r+0x4c>
 8007f72:	1c59      	adds	r1, r3, #1
 8007f74:	d103      	bne.n	8007f7e <_raise_r+0x42>
 8007f76:	2316      	movs	r3, #22
 8007f78:	6003      	str	r3, [r0, #0]
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	e7e7      	b.n	8007f4e <_raise_r+0x12>
 8007f7e:	2400      	movs	r4, #0
 8007f80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f84:	4628      	mov	r0, r5
 8007f86:	4798      	blx	r3
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e7e0      	b.n	8007f4e <_raise_r+0x12>

08007f8c <raise>:
 8007f8c:	4b02      	ldr	r3, [pc, #8]	; (8007f98 <raise+0xc>)
 8007f8e:	4601      	mov	r1, r0
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	f7ff bfd3 	b.w	8007f3c <_raise_r>
 8007f96:	bf00      	nop
 8007f98:	2000000c 	.word	0x2000000c

08007f9c <_kill_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	; (8007fbc <_kill_r+0x20>)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	602b      	str	r3, [r5, #0]
 8007faa:	f7fa f8fd 	bl	80021a8 <_kill>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	d102      	bne.n	8007fb8 <_kill_r+0x1c>
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	b103      	cbz	r3, 8007fb8 <_kill_r+0x1c>
 8007fb6:	6023      	str	r3, [r4, #0]
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
 8007fba:	bf00      	nop
 8007fbc:	200004b0 	.word	0x200004b0

08007fc0 <_getpid_r>:
 8007fc0:	f7fa b8ea 	b.w	8002198 <_getpid>

08007fc4 <round>:
 8007fc4:	ec51 0b10 	vmov	r0, r1, d0
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007fce:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007fd2:	2c13      	cmp	r4, #19
 8007fd4:	ee10 2a10 	vmov	r2, s0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	dc19      	bgt.n	8008010 <round+0x4c>
 8007fdc:	2c00      	cmp	r4, #0
 8007fde:	da09      	bge.n	8007ff4 <round+0x30>
 8007fe0:	3401      	adds	r4, #1
 8007fe2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007fe6:	d103      	bne.n	8007ff0 <round+0x2c>
 8007fe8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007fec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	e028      	b.n	8008046 <round+0x82>
 8007ff4:	4d15      	ldr	r5, [pc, #84]	; (800804c <round+0x88>)
 8007ff6:	4125      	asrs	r5, r4
 8007ff8:	ea01 0605 	and.w	r6, r1, r5
 8007ffc:	4332      	orrs	r2, r6
 8007ffe:	d00e      	beq.n	800801e <round+0x5a>
 8008000:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008004:	fa42 f404 	asr.w	r4, r2, r4
 8008008:	4423      	add	r3, r4
 800800a:	ea23 0305 	bic.w	r3, r3, r5
 800800e:	e7ef      	b.n	8007ff0 <round+0x2c>
 8008010:	2c33      	cmp	r4, #51	; 0x33
 8008012:	dd07      	ble.n	8008024 <round+0x60>
 8008014:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008018:	d101      	bne.n	800801e <round+0x5a>
 800801a:	f7f8 f957 	bl	80002cc <__adddf3>
 800801e:	ec41 0b10 	vmov	d0, r0, r1
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8008028:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800802c:	40f5      	lsrs	r5, r6
 800802e:	4228      	tst	r0, r5
 8008030:	d0f5      	beq.n	800801e <round+0x5a>
 8008032:	2101      	movs	r1, #1
 8008034:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008038:	fa01 f404 	lsl.w	r4, r1, r4
 800803c:	1912      	adds	r2, r2, r4
 800803e:	bf28      	it	cs
 8008040:	185b      	addcs	r3, r3, r1
 8008042:	ea22 0105 	bic.w	r1, r2, r5
 8008046:	4608      	mov	r0, r1
 8008048:	4619      	mov	r1, r3
 800804a:	e7e8      	b.n	800801e <round+0x5a>
 800804c:	000fffff 	.word	0x000fffff

08008050 <pow>:
 8008050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008054:	ec59 8b10 	vmov	r8, r9, d0
 8008058:	ec57 6b11 	vmov	r6, r7, d1
 800805c:	f000 f8dc 	bl	8008218 <__ieee754_pow>
 8008060:	4b4e      	ldr	r3, [pc, #312]	; (800819c <pow+0x14c>)
 8008062:	f993 3000 	ldrsb.w	r3, [r3]
 8008066:	3301      	adds	r3, #1
 8008068:	ec55 4b10 	vmov	r4, r5, d0
 800806c:	d015      	beq.n	800809a <pow+0x4a>
 800806e:	4632      	mov	r2, r6
 8008070:	463b      	mov	r3, r7
 8008072:	4630      	mov	r0, r6
 8008074:	4639      	mov	r1, r7
 8008076:	f7f8 fd79 	bl	8000b6c <__aeabi_dcmpun>
 800807a:	b970      	cbnz	r0, 800809a <pow+0x4a>
 800807c:	4642      	mov	r2, r8
 800807e:	464b      	mov	r3, r9
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 fd72 	bl	8000b6c <__aeabi_dcmpun>
 8008088:	2200      	movs	r2, #0
 800808a:	2300      	movs	r3, #0
 800808c:	b148      	cbz	r0, 80080a2 <pow+0x52>
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	f7f8 fd39 	bl	8000b08 <__aeabi_dcmpeq>
 8008096:	2800      	cmp	r0, #0
 8008098:	d17d      	bne.n	8008196 <pow+0x146>
 800809a:	ec45 4b10 	vmov	d0, r4, r5
 800809e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80080aa:	b1e0      	cbz	r0, 80080e6 <pow+0x96>
 80080ac:	2200      	movs	r2, #0
 80080ae:	2300      	movs	r3, #0
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fd28 	bl	8000b08 <__aeabi_dcmpeq>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d16c      	bne.n	8008196 <pow+0x146>
 80080bc:	ec47 6b10 	vmov	d0, r6, r7
 80080c0:	f000 fe89 	bl	8008dd6 <finite>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0e8      	beq.n	800809a <pow+0x4a>
 80080c8:	2200      	movs	r2, #0
 80080ca:	2300      	movs	r3, #0
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 fd24 	bl	8000b1c <__aeabi_dcmplt>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d0e0      	beq.n	800809a <pow+0x4a>
 80080d8:	f7fd f9e6 	bl	80054a8 <__errno>
 80080dc:	2321      	movs	r3, #33	; 0x21
 80080de:	6003      	str	r3, [r0, #0]
 80080e0:	2400      	movs	r4, #0
 80080e2:	4d2f      	ldr	r5, [pc, #188]	; (80081a0 <pow+0x150>)
 80080e4:	e7d9      	b.n	800809a <pow+0x4a>
 80080e6:	ec45 4b10 	vmov	d0, r4, r5
 80080ea:	f000 fe74 	bl	8008dd6 <finite>
 80080ee:	bbb8      	cbnz	r0, 8008160 <pow+0x110>
 80080f0:	ec49 8b10 	vmov	d0, r8, r9
 80080f4:	f000 fe6f 	bl	8008dd6 <finite>
 80080f8:	b390      	cbz	r0, 8008160 <pow+0x110>
 80080fa:	ec47 6b10 	vmov	d0, r6, r7
 80080fe:	f000 fe6a 	bl	8008dd6 <finite>
 8008102:	b368      	cbz	r0, 8008160 <pow+0x110>
 8008104:	4622      	mov	r2, r4
 8008106:	462b      	mov	r3, r5
 8008108:	4620      	mov	r0, r4
 800810a:	4629      	mov	r1, r5
 800810c:	f7f8 fd2e 	bl	8000b6c <__aeabi_dcmpun>
 8008110:	b160      	cbz	r0, 800812c <pow+0xdc>
 8008112:	f7fd f9c9 	bl	80054a8 <__errno>
 8008116:	2321      	movs	r3, #33	; 0x21
 8008118:	6003      	str	r3, [r0, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	4610      	mov	r0, r2
 8008120:	4619      	mov	r1, r3
 8008122:	f7f8 fbb3 	bl	800088c <__aeabi_ddiv>
 8008126:	4604      	mov	r4, r0
 8008128:	460d      	mov	r5, r1
 800812a:	e7b6      	b.n	800809a <pow+0x4a>
 800812c:	f7fd f9bc 	bl	80054a8 <__errno>
 8008130:	2322      	movs	r3, #34	; 0x22
 8008132:	6003      	str	r3, [r0, #0]
 8008134:	2200      	movs	r2, #0
 8008136:	2300      	movs	r3, #0
 8008138:	4640      	mov	r0, r8
 800813a:	4649      	mov	r1, r9
 800813c:	f7f8 fcee 	bl	8000b1c <__aeabi_dcmplt>
 8008140:	2400      	movs	r4, #0
 8008142:	b158      	cbz	r0, 800815c <pow+0x10c>
 8008144:	ec47 6b10 	vmov	d0, r6, r7
 8008148:	f000 fe5a 	bl	8008e00 <rint>
 800814c:	4632      	mov	r2, r6
 800814e:	ec51 0b10 	vmov	r0, r1, d0
 8008152:	463b      	mov	r3, r7
 8008154:	f7f8 fcd8 	bl	8000b08 <__aeabi_dcmpeq>
 8008158:	2800      	cmp	r0, #0
 800815a:	d0c2      	beq.n	80080e2 <pow+0x92>
 800815c:	4d11      	ldr	r5, [pc, #68]	; (80081a4 <pow+0x154>)
 800815e:	e79c      	b.n	800809a <pow+0x4a>
 8008160:	2200      	movs	r2, #0
 8008162:	2300      	movs	r3, #0
 8008164:	4620      	mov	r0, r4
 8008166:	4629      	mov	r1, r5
 8008168:	f7f8 fcce 	bl	8000b08 <__aeabi_dcmpeq>
 800816c:	2800      	cmp	r0, #0
 800816e:	d094      	beq.n	800809a <pow+0x4a>
 8008170:	ec49 8b10 	vmov	d0, r8, r9
 8008174:	f000 fe2f 	bl	8008dd6 <finite>
 8008178:	2800      	cmp	r0, #0
 800817a:	d08e      	beq.n	800809a <pow+0x4a>
 800817c:	ec47 6b10 	vmov	d0, r6, r7
 8008180:	f000 fe29 	bl	8008dd6 <finite>
 8008184:	2800      	cmp	r0, #0
 8008186:	d088      	beq.n	800809a <pow+0x4a>
 8008188:	f7fd f98e 	bl	80054a8 <__errno>
 800818c:	2322      	movs	r3, #34	; 0x22
 800818e:	6003      	str	r3, [r0, #0]
 8008190:	2400      	movs	r4, #0
 8008192:	2500      	movs	r5, #0
 8008194:	e781      	b.n	800809a <pow+0x4a>
 8008196:	4d04      	ldr	r5, [pc, #16]	; (80081a8 <pow+0x158>)
 8008198:	2400      	movs	r4, #0
 800819a:	e77e      	b.n	800809a <pow+0x4a>
 800819c:	200001dc 	.word	0x200001dc
 80081a0:	fff00000 	.word	0xfff00000
 80081a4:	7ff00000 	.word	0x7ff00000
 80081a8:	3ff00000 	.word	0x3ff00000

080081ac <sqrt>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	ed2d 8b02 	vpush	{d8}
 80081b2:	ec55 4b10 	vmov	r4, r5, d0
 80081b6:	f000 fd51 	bl	8008c5c <__ieee754_sqrt>
 80081ba:	4b15      	ldr	r3, [pc, #84]	; (8008210 <sqrt+0x64>)
 80081bc:	eeb0 8a40 	vmov.f32	s16, s0
 80081c0:	eef0 8a60 	vmov.f32	s17, s1
 80081c4:	f993 3000 	ldrsb.w	r3, [r3]
 80081c8:	3301      	adds	r3, #1
 80081ca:	d019      	beq.n	8008200 <sqrt+0x54>
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	4620      	mov	r0, r4
 80081d2:	4629      	mov	r1, r5
 80081d4:	f7f8 fcca 	bl	8000b6c <__aeabi_dcmpun>
 80081d8:	b990      	cbnz	r0, 8008200 <sqrt+0x54>
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7f8 fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80081e6:	b158      	cbz	r0, 8008200 <sqrt+0x54>
 80081e8:	f7fd f95e 	bl	80054a8 <__errno>
 80081ec:	2321      	movs	r3, #33	; 0x21
 80081ee:	6003      	str	r3, [r0, #0]
 80081f0:	2200      	movs	r2, #0
 80081f2:	2300      	movs	r3, #0
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	f7f8 fb48 	bl	800088c <__aeabi_ddiv>
 80081fc:	ec41 0b18 	vmov	d8, r0, r1
 8008200:	eeb0 0a48 	vmov.f32	s0, s16
 8008204:	eef0 0a68 	vmov.f32	s1, s17
 8008208:	ecbd 8b02 	vpop	{d8}
 800820c:	bd38      	pop	{r3, r4, r5, pc}
 800820e:	bf00      	nop
 8008210:	200001dc 	.word	0x200001dc
 8008214:	00000000 	.word	0x00000000

08008218 <__ieee754_pow>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	ed2d 8b06 	vpush	{d8-d10}
 8008220:	b08d      	sub	sp, #52	; 0x34
 8008222:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008226:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800822a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800822e:	ea56 0100 	orrs.w	r1, r6, r0
 8008232:	ec53 2b10 	vmov	r2, r3, d0
 8008236:	f000 84d1 	beq.w	8008bdc <__ieee754_pow+0x9c4>
 800823a:	497f      	ldr	r1, [pc, #508]	; (8008438 <__ieee754_pow+0x220>)
 800823c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008240:	428c      	cmp	r4, r1
 8008242:	ee10 8a10 	vmov	r8, s0
 8008246:	4699      	mov	r9, r3
 8008248:	dc09      	bgt.n	800825e <__ieee754_pow+0x46>
 800824a:	d103      	bne.n	8008254 <__ieee754_pow+0x3c>
 800824c:	b97a      	cbnz	r2, 800826e <__ieee754_pow+0x56>
 800824e:	42a6      	cmp	r6, r4
 8008250:	dd02      	ble.n	8008258 <__ieee754_pow+0x40>
 8008252:	e00c      	b.n	800826e <__ieee754_pow+0x56>
 8008254:	428e      	cmp	r6, r1
 8008256:	dc02      	bgt.n	800825e <__ieee754_pow+0x46>
 8008258:	428e      	cmp	r6, r1
 800825a:	d110      	bne.n	800827e <__ieee754_pow+0x66>
 800825c:	b178      	cbz	r0, 800827e <__ieee754_pow+0x66>
 800825e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008262:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008266:	ea54 0308 	orrs.w	r3, r4, r8
 800826a:	f000 84b7 	beq.w	8008bdc <__ieee754_pow+0x9c4>
 800826e:	4873      	ldr	r0, [pc, #460]	; (800843c <__ieee754_pow+0x224>)
 8008270:	b00d      	add	sp, #52	; 0x34
 8008272:	ecbd 8b06 	vpop	{d8-d10}
 8008276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	f000 bdb9 	b.w	8008df0 <nan>
 800827e:	f1b9 0f00 	cmp.w	r9, #0
 8008282:	da36      	bge.n	80082f2 <__ieee754_pow+0xda>
 8008284:	496e      	ldr	r1, [pc, #440]	; (8008440 <__ieee754_pow+0x228>)
 8008286:	428e      	cmp	r6, r1
 8008288:	dc51      	bgt.n	800832e <__ieee754_pow+0x116>
 800828a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800828e:	428e      	cmp	r6, r1
 8008290:	f340 84af 	ble.w	8008bf2 <__ieee754_pow+0x9da>
 8008294:	1531      	asrs	r1, r6, #20
 8008296:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800829a:	2914      	cmp	r1, #20
 800829c:	dd0f      	ble.n	80082be <__ieee754_pow+0xa6>
 800829e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80082a2:	fa20 fc01 	lsr.w	ip, r0, r1
 80082a6:	fa0c f101 	lsl.w	r1, ip, r1
 80082aa:	4281      	cmp	r1, r0
 80082ac:	f040 84a1 	bne.w	8008bf2 <__ieee754_pow+0x9da>
 80082b0:	f00c 0c01 	and.w	ip, ip, #1
 80082b4:	f1cc 0102 	rsb	r1, ip, #2
 80082b8:	9100      	str	r1, [sp, #0]
 80082ba:	b180      	cbz	r0, 80082de <__ieee754_pow+0xc6>
 80082bc:	e059      	b.n	8008372 <__ieee754_pow+0x15a>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d155      	bne.n	800836e <__ieee754_pow+0x156>
 80082c2:	f1c1 0114 	rsb	r1, r1, #20
 80082c6:	fa46 fc01 	asr.w	ip, r6, r1
 80082ca:	fa0c f101 	lsl.w	r1, ip, r1
 80082ce:	42b1      	cmp	r1, r6
 80082d0:	f040 848c 	bne.w	8008bec <__ieee754_pow+0x9d4>
 80082d4:	f00c 0c01 	and.w	ip, ip, #1
 80082d8:	f1cc 0102 	rsb	r1, ip, #2
 80082dc:	9100      	str	r1, [sp, #0]
 80082de:	4959      	ldr	r1, [pc, #356]	; (8008444 <__ieee754_pow+0x22c>)
 80082e0:	428e      	cmp	r6, r1
 80082e2:	d12d      	bne.n	8008340 <__ieee754_pow+0x128>
 80082e4:	2f00      	cmp	r7, #0
 80082e6:	da79      	bge.n	80083dc <__ieee754_pow+0x1c4>
 80082e8:	4956      	ldr	r1, [pc, #344]	; (8008444 <__ieee754_pow+0x22c>)
 80082ea:	2000      	movs	r0, #0
 80082ec:	f7f8 face 	bl	800088c <__aeabi_ddiv>
 80082f0:	e016      	b.n	8008320 <__ieee754_pow+0x108>
 80082f2:	2100      	movs	r1, #0
 80082f4:	9100      	str	r1, [sp, #0]
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d13b      	bne.n	8008372 <__ieee754_pow+0x15a>
 80082fa:	494f      	ldr	r1, [pc, #316]	; (8008438 <__ieee754_pow+0x220>)
 80082fc:	428e      	cmp	r6, r1
 80082fe:	d1ee      	bne.n	80082de <__ieee754_pow+0xc6>
 8008300:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008304:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008308:	ea53 0308 	orrs.w	r3, r3, r8
 800830c:	f000 8466 	beq.w	8008bdc <__ieee754_pow+0x9c4>
 8008310:	4b4d      	ldr	r3, [pc, #308]	; (8008448 <__ieee754_pow+0x230>)
 8008312:	429c      	cmp	r4, r3
 8008314:	dd0d      	ble.n	8008332 <__ieee754_pow+0x11a>
 8008316:	2f00      	cmp	r7, #0
 8008318:	f280 8464 	bge.w	8008be4 <__ieee754_pow+0x9cc>
 800831c:	2000      	movs	r0, #0
 800831e:	2100      	movs	r1, #0
 8008320:	ec41 0b10 	vmov	d0, r0, r1
 8008324:	b00d      	add	sp, #52	; 0x34
 8008326:	ecbd 8b06 	vpop	{d8-d10}
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	2102      	movs	r1, #2
 8008330:	e7e0      	b.n	80082f4 <__ieee754_pow+0xdc>
 8008332:	2f00      	cmp	r7, #0
 8008334:	daf2      	bge.n	800831c <__ieee754_pow+0x104>
 8008336:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800833a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800833e:	e7ef      	b.n	8008320 <__ieee754_pow+0x108>
 8008340:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008344:	d104      	bne.n	8008350 <__ieee754_pow+0x138>
 8008346:	4610      	mov	r0, r2
 8008348:	4619      	mov	r1, r3
 800834a:	f7f8 f975 	bl	8000638 <__aeabi_dmul>
 800834e:	e7e7      	b.n	8008320 <__ieee754_pow+0x108>
 8008350:	493e      	ldr	r1, [pc, #248]	; (800844c <__ieee754_pow+0x234>)
 8008352:	428f      	cmp	r7, r1
 8008354:	d10d      	bne.n	8008372 <__ieee754_pow+0x15a>
 8008356:	f1b9 0f00 	cmp.w	r9, #0
 800835a:	db0a      	blt.n	8008372 <__ieee754_pow+0x15a>
 800835c:	ec43 2b10 	vmov	d0, r2, r3
 8008360:	b00d      	add	sp, #52	; 0x34
 8008362:	ecbd 8b06 	vpop	{d8-d10}
 8008366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836a:	f000 bc77 	b.w	8008c5c <__ieee754_sqrt>
 800836e:	2100      	movs	r1, #0
 8008370:	9100      	str	r1, [sp, #0]
 8008372:	ec43 2b10 	vmov	d0, r2, r3
 8008376:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800837a:	f000 fd23 	bl	8008dc4 <fabs>
 800837e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008382:	ec51 0b10 	vmov	r0, r1, d0
 8008386:	f1b8 0f00 	cmp.w	r8, #0
 800838a:	d12a      	bne.n	80083e2 <__ieee754_pow+0x1ca>
 800838c:	b12c      	cbz	r4, 800839a <__ieee754_pow+0x182>
 800838e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008444 <__ieee754_pow+0x22c>
 8008392:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008396:	45e6      	cmp	lr, ip
 8008398:	d123      	bne.n	80083e2 <__ieee754_pow+0x1ca>
 800839a:	2f00      	cmp	r7, #0
 800839c:	da05      	bge.n	80083aa <__ieee754_pow+0x192>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	2000      	movs	r0, #0
 80083a4:	4927      	ldr	r1, [pc, #156]	; (8008444 <__ieee754_pow+0x22c>)
 80083a6:	f7f8 fa71 	bl	800088c <__aeabi_ddiv>
 80083aa:	f1b9 0f00 	cmp.w	r9, #0
 80083ae:	dab7      	bge.n	8008320 <__ieee754_pow+0x108>
 80083b0:	9b00      	ldr	r3, [sp, #0]
 80083b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80083b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80083ba:	4323      	orrs	r3, r4
 80083bc:	d108      	bne.n	80083d0 <__ieee754_pow+0x1b8>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4610      	mov	r0, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	f7f7 ff7f 	bl	80002c8 <__aeabi_dsub>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	e78d      	b.n	80082ec <__ieee754_pow+0xd4>
 80083d0:	9b00      	ldr	r3, [sp, #0]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d1a4      	bne.n	8008320 <__ieee754_pow+0x108>
 80083d6:	4602      	mov	r2, r0
 80083d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	e79e      	b.n	8008320 <__ieee754_pow+0x108>
 80083e2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80083e6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80083ea:	950a      	str	r5, [sp, #40]	; 0x28
 80083ec:	9d00      	ldr	r5, [sp, #0]
 80083ee:	46ac      	mov	ip, r5
 80083f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80083f2:	ea5c 0505 	orrs.w	r5, ip, r5
 80083f6:	d0e4      	beq.n	80083c2 <__ieee754_pow+0x1aa>
 80083f8:	4b15      	ldr	r3, [pc, #84]	; (8008450 <__ieee754_pow+0x238>)
 80083fa:	429e      	cmp	r6, r3
 80083fc:	f340 80fc 	ble.w	80085f8 <__ieee754_pow+0x3e0>
 8008400:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008404:	429e      	cmp	r6, r3
 8008406:	4b10      	ldr	r3, [pc, #64]	; (8008448 <__ieee754_pow+0x230>)
 8008408:	dd07      	ble.n	800841a <__ieee754_pow+0x202>
 800840a:	429c      	cmp	r4, r3
 800840c:	dc0a      	bgt.n	8008424 <__ieee754_pow+0x20c>
 800840e:	2f00      	cmp	r7, #0
 8008410:	da84      	bge.n	800831c <__ieee754_pow+0x104>
 8008412:	a307      	add	r3, pc, #28	; (adr r3, 8008430 <__ieee754_pow+0x218>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	e795      	b.n	8008346 <__ieee754_pow+0x12e>
 800841a:	429c      	cmp	r4, r3
 800841c:	dbf7      	blt.n	800840e <__ieee754_pow+0x1f6>
 800841e:	4b09      	ldr	r3, [pc, #36]	; (8008444 <__ieee754_pow+0x22c>)
 8008420:	429c      	cmp	r4, r3
 8008422:	dd17      	ble.n	8008454 <__ieee754_pow+0x23c>
 8008424:	2f00      	cmp	r7, #0
 8008426:	dcf4      	bgt.n	8008412 <__ieee754_pow+0x1fa>
 8008428:	e778      	b.n	800831c <__ieee754_pow+0x104>
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w
 8008430:	8800759c 	.word	0x8800759c
 8008434:	7e37e43c 	.word	0x7e37e43c
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	080094c8 	.word	0x080094c8
 8008440:	433fffff 	.word	0x433fffff
 8008444:	3ff00000 	.word	0x3ff00000
 8008448:	3fefffff 	.word	0x3fefffff
 800844c:	3fe00000 	.word	0x3fe00000
 8008450:	41e00000 	.word	0x41e00000
 8008454:	4b64      	ldr	r3, [pc, #400]	; (80085e8 <__ieee754_pow+0x3d0>)
 8008456:	2200      	movs	r2, #0
 8008458:	f7f7 ff36 	bl	80002c8 <__aeabi_dsub>
 800845c:	a356      	add	r3, pc, #344	; (adr r3, 80085b8 <__ieee754_pow+0x3a0>)
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	f7f8 f8e7 	bl	8000638 <__aeabi_dmul>
 800846a:	a355      	add	r3, pc, #340	; (adr r3, 80085c0 <__ieee754_pow+0x3a8>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	4606      	mov	r6, r0
 8008472:	460f      	mov	r7, r1
 8008474:	4620      	mov	r0, r4
 8008476:	4629      	mov	r1, r5
 8008478:	f7f8 f8de 	bl	8000638 <__aeabi_dmul>
 800847c:	4b5b      	ldr	r3, [pc, #364]	; (80085ec <__ieee754_pow+0x3d4>)
 800847e:	4682      	mov	sl, r0
 8008480:	468b      	mov	fp, r1
 8008482:	2200      	movs	r2, #0
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f7f8 f8d6 	bl	8000638 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	a14d      	add	r1, pc, #308	; (adr r1, 80085c8 <__ieee754_pow+0x3b0>)
 8008492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008496:	f7f7 ff17 	bl	80002c8 <__aeabi_dsub>
 800849a:	4622      	mov	r2, r4
 800849c:	462b      	mov	r3, r5
 800849e:	f7f8 f8cb 	bl	8000638 <__aeabi_dmul>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	2000      	movs	r0, #0
 80084a8:	4951      	ldr	r1, [pc, #324]	; (80085f0 <__ieee754_pow+0x3d8>)
 80084aa:	f7f7 ff0d 	bl	80002c8 <__aeabi_dsub>
 80084ae:	4622      	mov	r2, r4
 80084b0:	4680      	mov	r8, r0
 80084b2:	4689      	mov	r9, r1
 80084b4:	462b      	mov	r3, r5
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f8 f8bd 	bl	8000638 <__aeabi_dmul>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	f7f8 f8b7 	bl	8000638 <__aeabi_dmul>
 80084ca:	a341      	add	r3, pc, #260	; (adr r3, 80085d0 <__ieee754_pow+0x3b8>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f7f8 f8b2 	bl	8000638 <__aeabi_dmul>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4650      	mov	r0, sl
 80084da:	4659      	mov	r1, fp
 80084dc:	f7f7 fef4 	bl	80002c8 <__aeabi_dsub>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	4680      	mov	r8, r0
 80084e6:	4689      	mov	r9, r1
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f7 feee 	bl	80002cc <__adddf3>
 80084f0:	2400      	movs	r4, #0
 80084f2:	4632      	mov	r2, r6
 80084f4:	463b      	mov	r3, r7
 80084f6:	4620      	mov	r0, r4
 80084f8:	460d      	mov	r5, r1
 80084fa:	f7f7 fee5 	bl	80002c8 <__aeabi_dsub>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f7 fedf 	bl	80002c8 <__aeabi_dsub>
 800850a:	9b00      	ldr	r3, [sp, #0]
 800850c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800850e:	3b01      	subs	r3, #1
 8008510:	4313      	orrs	r3, r2
 8008512:	4682      	mov	sl, r0
 8008514:	468b      	mov	fp, r1
 8008516:	f040 81f1 	bne.w	80088fc <__ieee754_pow+0x6e4>
 800851a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80085d8 <__ieee754_pow+0x3c0>
 800851e:	eeb0 8a47 	vmov.f32	s16, s14
 8008522:	eef0 8a67 	vmov.f32	s17, s15
 8008526:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800852a:	2600      	movs	r6, #0
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008534:	f7f7 fec8 	bl	80002c8 <__aeabi_dsub>
 8008538:	4622      	mov	r2, r4
 800853a:	462b      	mov	r3, r5
 800853c:	f7f8 f87c 	bl	8000638 <__aeabi_dmul>
 8008540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008544:	4680      	mov	r8, r0
 8008546:	4689      	mov	r9, r1
 8008548:	4650      	mov	r0, sl
 800854a:	4659      	mov	r1, fp
 800854c:	f7f8 f874 	bl	8000638 <__aeabi_dmul>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4640      	mov	r0, r8
 8008556:	4649      	mov	r1, r9
 8008558:	f7f7 feb8 	bl	80002cc <__adddf3>
 800855c:	4632      	mov	r2, r6
 800855e:	463b      	mov	r3, r7
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7f8 f866 	bl	8000638 <__aeabi_dmul>
 800856c:	460b      	mov	r3, r1
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	4602      	mov	r2, r0
 8008574:	4649      	mov	r1, r9
 8008576:	4640      	mov	r0, r8
 8008578:	f7f7 fea8 	bl	80002cc <__adddf3>
 800857c:	4b1d      	ldr	r3, [pc, #116]	; (80085f4 <__ieee754_pow+0x3dc>)
 800857e:	4299      	cmp	r1, r3
 8008580:	ec45 4b19 	vmov	d9, r4, r5
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	468b      	mov	fp, r1
 800858a:	f340 82fe 	ble.w	8008b8a <__ieee754_pow+0x972>
 800858e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008596:	4303      	orrs	r3, r0
 8008598:	f000 81f0 	beq.w	800897c <__ieee754_pow+0x764>
 800859c:	a310      	add	r3, pc, #64	; (adr r3, 80085e0 <__ieee754_pow+0x3c8>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	ec51 0b18 	vmov	r0, r1, d8
 80085a6:	f7f8 f847 	bl	8000638 <__aeabi_dmul>
 80085aa:	a30d      	add	r3, pc, #52	; (adr r3, 80085e0 <__ieee754_pow+0x3c8>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	e6cb      	b.n	800834a <__ieee754_pow+0x132>
 80085b2:	bf00      	nop
 80085b4:	f3af 8000 	nop.w
 80085b8:	60000000 	.word	0x60000000
 80085bc:	3ff71547 	.word	0x3ff71547
 80085c0:	f85ddf44 	.word	0xf85ddf44
 80085c4:	3e54ae0b 	.word	0x3e54ae0b
 80085c8:	55555555 	.word	0x55555555
 80085cc:	3fd55555 	.word	0x3fd55555
 80085d0:	652b82fe 	.word	0x652b82fe
 80085d4:	3ff71547 	.word	0x3ff71547
 80085d8:	00000000 	.word	0x00000000
 80085dc:	bff00000 	.word	0xbff00000
 80085e0:	8800759c 	.word	0x8800759c
 80085e4:	7e37e43c 	.word	0x7e37e43c
 80085e8:	3ff00000 	.word	0x3ff00000
 80085ec:	3fd00000 	.word	0x3fd00000
 80085f0:	3fe00000 	.word	0x3fe00000
 80085f4:	408fffff 	.word	0x408fffff
 80085f8:	4bd7      	ldr	r3, [pc, #860]	; (8008958 <__ieee754_pow+0x740>)
 80085fa:	ea03 0309 	and.w	r3, r3, r9
 80085fe:	2200      	movs	r2, #0
 8008600:	b92b      	cbnz	r3, 800860e <__ieee754_pow+0x3f6>
 8008602:	4bd6      	ldr	r3, [pc, #856]	; (800895c <__ieee754_pow+0x744>)
 8008604:	f7f8 f818 	bl	8000638 <__aeabi_dmul>
 8008608:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800860c:	460c      	mov	r4, r1
 800860e:	1523      	asrs	r3, r4, #20
 8008610:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008614:	4413      	add	r3, r2
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	4bd1      	ldr	r3, [pc, #836]	; (8008960 <__ieee754_pow+0x748>)
 800861a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800861e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008622:	429c      	cmp	r4, r3
 8008624:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008628:	dd08      	ble.n	800863c <__ieee754_pow+0x424>
 800862a:	4bce      	ldr	r3, [pc, #824]	; (8008964 <__ieee754_pow+0x74c>)
 800862c:	429c      	cmp	r4, r3
 800862e:	f340 8163 	ble.w	80088f8 <__ieee754_pow+0x6e0>
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	3301      	adds	r3, #1
 8008636:	9309      	str	r3, [sp, #36]	; 0x24
 8008638:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800863c:	2400      	movs	r4, #0
 800863e:	00e3      	lsls	r3, r4, #3
 8008640:	930b      	str	r3, [sp, #44]	; 0x2c
 8008642:	4bc9      	ldr	r3, [pc, #804]	; (8008968 <__ieee754_pow+0x750>)
 8008644:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008648:	ed93 7b00 	vldr	d7, [r3]
 800864c:	4629      	mov	r1, r5
 800864e:	ec53 2b17 	vmov	r2, r3, d7
 8008652:	eeb0 8a47 	vmov.f32	s16, s14
 8008656:	eef0 8a67 	vmov.f32	s17, s15
 800865a:	4682      	mov	sl, r0
 800865c:	f7f7 fe34 	bl	80002c8 <__aeabi_dsub>
 8008660:	4652      	mov	r2, sl
 8008662:	4606      	mov	r6, r0
 8008664:	460f      	mov	r7, r1
 8008666:	462b      	mov	r3, r5
 8008668:	ec51 0b18 	vmov	r0, r1, d8
 800866c:	f7f7 fe2e 	bl	80002cc <__adddf3>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	2000      	movs	r0, #0
 8008676:	49bd      	ldr	r1, [pc, #756]	; (800896c <__ieee754_pow+0x754>)
 8008678:	f7f8 f908 	bl	800088c <__aeabi_ddiv>
 800867c:	ec41 0b19 	vmov	d9, r0, r1
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	4630      	mov	r0, r6
 8008686:	4639      	mov	r1, r7
 8008688:	f7f7 ffd6 	bl	8000638 <__aeabi_dmul>
 800868c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008694:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008698:	2300      	movs	r3, #0
 800869a:	9304      	str	r3, [sp, #16]
 800869c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80086a0:	46ab      	mov	fp, r5
 80086a2:	106d      	asrs	r5, r5, #1
 80086a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80086a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80086ac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80086b0:	2200      	movs	r2, #0
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	4614      	mov	r4, r2
 80086b8:	461d      	mov	r5, r3
 80086ba:	f7f7 ffbd 	bl	8000638 <__aeabi_dmul>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4630      	mov	r0, r6
 80086c4:	4639      	mov	r1, r7
 80086c6:	f7f7 fdff 	bl	80002c8 <__aeabi_dsub>
 80086ca:	ec53 2b18 	vmov	r2, r3, d8
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f7 fdf7 	bl	80002c8 <__aeabi_dsub>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4650      	mov	r0, sl
 80086e0:	4659      	mov	r1, fp
 80086e2:	f7f7 fdf1 	bl	80002c8 <__aeabi_dsub>
 80086e6:	4642      	mov	r2, r8
 80086e8:	464b      	mov	r3, r9
 80086ea:	f7f7 ffa5 	bl	8000638 <__aeabi_dmul>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4630      	mov	r0, r6
 80086f4:	4639      	mov	r1, r7
 80086f6:	f7f7 fde7 	bl	80002c8 <__aeabi_dsub>
 80086fa:	ec53 2b19 	vmov	r2, r3, d9
 80086fe:	f7f7 ff9b 	bl	8000638 <__aeabi_dmul>
 8008702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008706:	ec41 0b18 	vmov	d8, r0, r1
 800870a:	4610      	mov	r0, r2
 800870c:	4619      	mov	r1, r3
 800870e:	f7f7 ff93 	bl	8000638 <__aeabi_dmul>
 8008712:	a37d      	add	r3, pc, #500	; (adr r3, 8008908 <__ieee754_pow+0x6f0>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	f7f7 ff8c 	bl	8000638 <__aeabi_dmul>
 8008720:	a37b      	add	r3, pc, #492	; (adr r3, 8008910 <__ieee754_pow+0x6f8>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fdd1 	bl	80002cc <__adddf3>
 800872a:	4622      	mov	r2, r4
 800872c:	462b      	mov	r3, r5
 800872e:	f7f7 ff83 	bl	8000638 <__aeabi_dmul>
 8008732:	a379      	add	r3, pc, #484	; (adr r3, 8008918 <__ieee754_pow+0x700>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 fdc8 	bl	80002cc <__adddf3>
 800873c:	4622      	mov	r2, r4
 800873e:	462b      	mov	r3, r5
 8008740:	f7f7 ff7a 	bl	8000638 <__aeabi_dmul>
 8008744:	a376      	add	r3, pc, #472	; (adr r3, 8008920 <__ieee754_pow+0x708>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fdbf 	bl	80002cc <__adddf3>
 800874e:	4622      	mov	r2, r4
 8008750:	462b      	mov	r3, r5
 8008752:	f7f7 ff71 	bl	8000638 <__aeabi_dmul>
 8008756:	a374      	add	r3, pc, #464	; (adr r3, 8008928 <__ieee754_pow+0x710>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fdb6 	bl	80002cc <__adddf3>
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	f7f7 ff68 	bl	8000638 <__aeabi_dmul>
 8008768:	a371      	add	r3, pc, #452	; (adr r3, 8008930 <__ieee754_pow+0x718>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fdad 	bl	80002cc <__adddf3>
 8008772:	4622      	mov	r2, r4
 8008774:	4606      	mov	r6, r0
 8008776:	460f      	mov	r7, r1
 8008778:	462b      	mov	r3, r5
 800877a:	4620      	mov	r0, r4
 800877c:	4629      	mov	r1, r5
 800877e:	f7f7 ff5b 	bl	8000638 <__aeabi_dmul>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4630      	mov	r0, r6
 8008788:	4639      	mov	r1, r7
 800878a:	f7f7 ff55 	bl	8000638 <__aeabi_dmul>
 800878e:	4642      	mov	r2, r8
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	464b      	mov	r3, r9
 8008796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800879a:	f7f7 fd97 	bl	80002cc <__adddf3>
 800879e:	ec53 2b18 	vmov	r2, r3, d8
 80087a2:	f7f7 ff49 	bl	8000638 <__aeabi_dmul>
 80087a6:	4622      	mov	r2, r4
 80087a8:	462b      	mov	r3, r5
 80087aa:	f7f7 fd8f 	bl	80002cc <__adddf3>
 80087ae:	4642      	mov	r2, r8
 80087b0:	4682      	mov	sl, r0
 80087b2:	468b      	mov	fp, r1
 80087b4:	464b      	mov	r3, r9
 80087b6:	4640      	mov	r0, r8
 80087b8:	4649      	mov	r1, r9
 80087ba:	f7f7 ff3d 	bl	8000638 <__aeabi_dmul>
 80087be:	4b6c      	ldr	r3, [pc, #432]	; (8008970 <__ieee754_pow+0x758>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	4606      	mov	r6, r0
 80087c4:	460f      	mov	r7, r1
 80087c6:	f7f7 fd81 	bl	80002cc <__adddf3>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	f7f7 fd7d 	bl	80002cc <__adddf3>
 80087d2:	9c04      	ldr	r4, [sp, #16]
 80087d4:	460d      	mov	r5, r1
 80087d6:	4622      	mov	r2, r4
 80087d8:	460b      	mov	r3, r1
 80087da:	4640      	mov	r0, r8
 80087dc:	4649      	mov	r1, r9
 80087de:	f7f7 ff2b 	bl	8000638 <__aeabi_dmul>
 80087e2:	4b63      	ldr	r3, [pc, #396]	; (8008970 <__ieee754_pow+0x758>)
 80087e4:	4680      	mov	r8, r0
 80087e6:	4689      	mov	r9, r1
 80087e8:	2200      	movs	r2, #0
 80087ea:	4620      	mov	r0, r4
 80087ec:	4629      	mov	r1, r5
 80087ee:	f7f7 fd6b 	bl	80002c8 <__aeabi_dsub>
 80087f2:	4632      	mov	r2, r6
 80087f4:	463b      	mov	r3, r7
 80087f6:	f7f7 fd67 	bl	80002c8 <__aeabi_dsub>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4650      	mov	r0, sl
 8008800:	4659      	mov	r1, fp
 8008802:	f7f7 fd61 	bl	80002c8 <__aeabi_dsub>
 8008806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800880a:	f7f7 ff15 	bl	8000638 <__aeabi_dmul>
 800880e:	4622      	mov	r2, r4
 8008810:	4606      	mov	r6, r0
 8008812:	460f      	mov	r7, r1
 8008814:	462b      	mov	r3, r5
 8008816:	ec51 0b18 	vmov	r0, r1, d8
 800881a:	f7f7 ff0d 	bl	8000638 <__aeabi_dmul>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4630      	mov	r0, r6
 8008824:	4639      	mov	r1, r7
 8008826:	f7f7 fd51 	bl	80002cc <__adddf3>
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	f7f7 fd49 	bl	80002cc <__adddf3>
 800883a:	9c04      	ldr	r4, [sp, #16]
 800883c:	a33e      	add	r3, pc, #248	; (adr r3, 8008938 <__ieee754_pow+0x720>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	4620      	mov	r0, r4
 8008844:	460d      	mov	r5, r1
 8008846:	f7f7 fef7 	bl	8000638 <__aeabi_dmul>
 800884a:	4642      	mov	r2, r8
 800884c:	ec41 0b18 	vmov	d8, r0, r1
 8008850:	464b      	mov	r3, r9
 8008852:	4620      	mov	r0, r4
 8008854:	4629      	mov	r1, r5
 8008856:	f7f7 fd37 	bl	80002c8 <__aeabi_dsub>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4630      	mov	r0, r6
 8008860:	4639      	mov	r1, r7
 8008862:	f7f7 fd31 	bl	80002c8 <__aeabi_dsub>
 8008866:	a336      	add	r3, pc, #216	; (adr r3, 8008940 <__ieee754_pow+0x728>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f7f7 fee4 	bl	8000638 <__aeabi_dmul>
 8008870:	a335      	add	r3, pc, #212	; (adr r3, 8008948 <__ieee754_pow+0x730>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	4606      	mov	r6, r0
 8008878:	460f      	mov	r7, r1
 800887a:	4620      	mov	r0, r4
 800887c:	4629      	mov	r1, r5
 800887e:	f7f7 fedb 	bl	8000638 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4630      	mov	r0, r6
 8008888:	4639      	mov	r1, r7
 800888a:	f7f7 fd1f 	bl	80002cc <__adddf3>
 800888e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008890:	4b38      	ldr	r3, [pc, #224]	; (8008974 <__ieee754_pow+0x75c>)
 8008892:	4413      	add	r3, r2
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f7f7 fd18 	bl	80002cc <__adddf3>
 800889c:	4682      	mov	sl, r0
 800889e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088a0:	468b      	mov	fp, r1
 80088a2:	f7f7 fe5f 	bl	8000564 <__aeabi_i2d>
 80088a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088a8:	4b33      	ldr	r3, [pc, #204]	; (8008978 <__ieee754_pow+0x760>)
 80088aa:	4413      	add	r3, r2
 80088ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088b0:	4606      	mov	r6, r0
 80088b2:	460f      	mov	r7, r1
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	ec51 0b18 	vmov	r0, r1, d8
 80088bc:	f7f7 fd06 	bl	80002cc <__adddf3>
 80088c0:	4642      	mov	r2, r8
 80088c2:	464b      	mov	r3, r9
 80088c4:	f7f7 fd02 	bl	80002cc <__adddf3>
 80088c8:	4632      	mov	r2, r6
 80088ca:	463b      	mov	r3, r7
 80088cc:	f7f7 fcfe 	bl	80002cc <__adddf3>
 80088d0:	9c04      	ldr	r4, [sp, #16]
 80088d2:	4632      	mov	r2, r6
 80088d4:	463b      	mov	r3, r7
 80088d6:	4620      	mov	r0, r4
 80088d8:	460d      	mov	r5, r1
 80088da:	f7f7 fcf5 	bl	80002c8 <__aeabi_dsub>
 80088de:	4642      	mov	r2, r8
 80088e0:	464b      	mov	r3, r9
 80088e2:	f7f7 fcf1 	bl	80002c8 <__aeabi_dsub>
 80088e6:	ec53 2b18 	vmov	r2, r3, d8
 80088ea:	f7f7 fced 	bl	80002c8 <__aeabi_dsub>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4650      	mov	r0, sl
 80088f4:	4659      	mov	r1, fp
 80088f6:	e606      	b.n	8008506 <__ieee754_pow+0x2ee>
 80088f8:	2401      	movs	r4, #1
 80088fa:	e6a0      	b.n	800863e <__ieee754_pow+0x426>
 80088fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008950 <__ieee754_pow+0x738>
 8008900:	e60d      	b.n	800851e <__ieee754_pow+0x306>
 8008902:	bf00      	nop
 8008904:	f3af 8000 	nop.w
 8008908:	4a454eef 	.word	0x4a454eef
 800890c:	3fca7e28 	.word	0x3fca7e28
 8008910:	93c9db65 	.word	0x93c9db65
 8008914:	3fcd864a 	.word	0x3fcd864a
 8008918:	a91d4101 	.word	0xa91d4101
 800891c:	3fd17460 	.word	0x3fd17460
 8008920:	518f264d 	.word	0x518f264d
 8008924:	3fd55555 	.word	0x3fd55555
 8008928:	db6fabff 	.word	0xdb6fabff
 800892c:	3fdb6db6 	.word	0x3fdb6db6
 8008930:	33333303 	.word	0x33333303
 8008934:	3fe33333 	.word	0x3fe33333
 8008938:	e0000000 	.word	0xe0000000
 800893c:	3feec709 	.word	0x3feec709
 8008940:	dc3a03fd 	.word	0xdc3a03fd
 8008944:	3feec709 	.word	0x3feec709
 8008948:	145b01f5 	.word	0x145b01f5
 800894c:	be3e2fe0 	.word	0xbe3e2fe0
 8008950:	00000000 	.word	0x00000000
 8008954:	3ff00000 	.word	0x3ff00000
 8008958:	7ff00000 	.word	0x7ff00000
 800895c:	43400000 	.word	0x43400000
 8008960:	0003988e 	.word	0x0003988e
 8008964:	000bb679 	.word	0x000bb679
 8008968:	080095d8 	.word	0x080095d8
 800896c:	3ff00000 	.word	0x3ff00000
 8008970:	40080000 	.word	0x40080000
 8008974:	080095f8 	.word	0x080095f8
 8008978:	080095e8 	.word	0x080095e8
 800897c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008c54 <__ieee754_pow+0xa3c>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	4640      	mov	r0, r8
 8008984:	4649      	mov	r1, r9
 8008986:	f7f7 fca1 	bl	80002cc <__adddf3>
 800898a:	4622      	mov	r2, r4
 800898c:	ec41 0b1a 	vmov	d10, r0, r1
 8008990:	462b      	mov	r3, r5
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f7 fc97 	bl	80002c8 <__aeabi_dsub>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	ec51 0b1a 	vmov	r0, r1, d10
 80089a2:	f7f8 f8d9 	bl	8000b58 <__aeabi_dcmpgt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f47f adf8 	bne.w	800859c <__ieee754_pow+0x384>
 80089ac:	4aa4      	ldr	r2, [pc, #656]	; (8008c40 <__ieee754_pow+0xa28>)
 80089ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089b2:	4293      	cmp	r3, r2
 80089b4:	f340 810b 	ble.w	8008bce <__ieee754_pow+0x9b6>
 80089b8:	151b      	asrs	r3, r3, #20
 80089ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80089be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80089c2:	fa4a f303 	asr.w	r3, sl, r3
 80089c6:	445b      	add	r3, fp
 80089c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80089cc:	4e9d      	ldr	r6, [pc, #628]	; (8008c44 <__ieee754_pow+0xa2c>)
 80089ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80089d2:	4116      	asrs	r6, r2
 80089d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80089d8:	2000      	movs	r0, #0
 80089da:	ea23 0106 	bic.w	r1, r3, r6
 80089de:	f1c2 0214 	rsb	r2, r2, #20
 80089e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80089e6:	fa4a fa02 	asr.w	sl, sl, r2
 80089ea:	f1bb 0f00 	cmp.w	fp, #0
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4620      	mov	r0, r4
 80089f4:	4629      	mov	r1, r5
 80089f6:	bfb8      	it	lt
 80089f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80089fc:	f7f7 fc64 	bl	80002c8 <__aeabi_dsub>
 8008a00:	ec41 0b19 	vmov	d9, r0, r1
 8008a04:	4642      	mov	r2, r8
 8008a06:	464b      	mov	r3, r9
 8008a08:	ec51 0b19 	vmov	r0, r1, d9
 8008a0c:	f7f7 fc5e 	bl	80002cc <__adddf3>
 8008a10:	2400      	movs	r4, #0
 8008a12:	a379      	add	r3, pc, #484	; (adr r3, 8008bf8 <__ieee754_pow+0x9e0>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	f7f7 fe0c 	bl	8000638 <__aeabi_dmul>
 8008a20:	ec53 2b19 	vmov	r2, r3, d9
 8008a24:	4606      	mov	r6, r0
 8008a26:	460f      	mov	r7, r1
 8008a28:	4620      	mov	r0, r4
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	f7f7 fc4c 	bl	80002c8 <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4640      	mov	r0, r8
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f7 fc46 	bl	80002c8 <__aeabi_dsub>
 8008a3c:	a370      	add	r3, pc, #448	; (adr r3, 8008c00 <__ieee754_pow+0x9e8>)
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	f7f7 fdf9 	bl	8000638 <__aeabi_dmul>
 8008a46:	a370      	add	r3, pc, #448	; (adr r3, 8008c08 <__ieee754_pow+0x9f0>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	4689      	mov	r9, r1
 8008a50:	4620      	mov	r0, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f7 fdf0 	bl	8000638 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	4649      	mov	r1, r9
 8008a60:	f7f7 fc34 	bl	80002cc <__adddf3>
 8008a64:	4604      	mov	r4, r0
 8008a66:	460d      	mov	r5, r1
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	4639      	mov	r1, r7
 8008a70:	f7f7 fc2c 	bl	80002cc <__adddf3>
 8008a74:	4632      	mov	r2, r6
 8008a76:	463b      	mov	r3, r7
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4689      	mov	r9, r1
 8008a7c:	f7f7 fc24 	bl	80002c8 <__aeabi_dsub>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f7 fc1e 	bl	80002c8 <__aeabi_dsub>
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	4606      	mov	r6, r0
 8008a90:	460f      	mov	r7, r1
 8008a92:	464b      	mov	r3, r9
 8008a94:	4640      	mov	r0, r8
 8008a96:	4649      	mov	r1, r9
 8008a98:	f7f7 fdce 	bl	8000638 <__aeabi_dmul>
 8008a9c:	a35c      	add	r3, pc, #368	; (adr r3, 8008c10 <__ieee754_pow+0x9f8>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	f7f7 fdc7 	bl	8000638 <__aeabi_dmul>
 8008aaa:	a35b      	add	r3, pc, #364	; (adr r3, 8008c18 <__ieee754_pow+0xa00>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f7f7 fc0a 	bl	80002c8 <__aeabi_dsub>
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	462b      	mov	r3, r5
 8008ab8:	f7f7 fdbe 	bl	8000638 <__aeabi_dmul>
 8008abc:	a358      	add	r3, pc, #352	; (adr r3, 8008c20 <__ieee754_pow+0xa08>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fc03 	bl	80002cc <__adddf3>
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	462b      	mov	r3, r5
 8008aca:	f7f7 fdb5 	bl	8000638 <__aeabi_dmul>
 8008ace:	a356      	add	r3, pc, #344	; (adr r3, 8008c28 <__ieee754_pow+0xa10>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f7 fbf8 	bl	80002c8 <__aeabi_dsub>
 8008ad8:	4622      	mov	r2, r4
 8008ada:	462b      	mov	r3, r5
 8008adc:	f7f7 fdac 	bl	8000638 <__aeabi_dmul>
 8008ae0:	a353      	add	r3, pc, #332	; (adr r3, 8008c30 <__ieee754_pow+0xa18>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fbf1 	bl	80002cc <__adddf3>
 8008aea:	4622      	mov	r2, r4
 8008aec:	462b      	mov	r3, r5
 8008aee:	f7f7 fda3 	bl	8000638 <__aeabi_dmul>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4640      	mov	r0, r8
 8008af8:	4649      	mov	r1, r9
 8008afa:	f7f7 fbe5 	bl	80002c8 <__aeabi_dsub>
 8008afe:	4604      	mov	r4, r0
 8008b00:	460d      	mov	r5, r1
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f7 fd95 	bl	8000638 <__aeabi_dmul>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	ec41 0b19 	vmov	d9, r0, r1
 8008b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b18:	4620      	mov	r0, r4
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	f7f7 fbd4 	bl	80002c8 <__aeabi_dsub>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	ec51 0b19 	vmov	r0, r1, d9
 8008b28:	f7f7 feb0 	bl	800088c <__aeabi_ddiv>
 8008b2c:	4632      	mov	r2, r6
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	463b      	mov	r3, r7
 8008b34:	4640      	mov	r0, r8
 8008b36:	4649      	mov	r1, r9
 8008b38:	f7f7 fd7e 	bl	8000638 <__aeabi_dmul>
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	f7f7 fbc4 	bl	80002cc <__adddf3>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	f7f7 fbbc 	bl	80002c8 <__aeabi_dsub>
 8008b50:	4642      	mov	r2, r8
 8008b52:	464b      	mov	r3, r9
 8008b54:	f7f7 fbb8 	bl	80002c8 <__aeabi_dsub>
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	493a      	ldr	r1, [pc, #232]	; (8008c48 <__ieee754_pow+0xa30>)
 8008b5e:	2000      	movs	r0, #0
 8008b60:	f7f7 fbb2 	bl	80002c8 <__aeabi_dsub>
 8008b64:	e9cd 0100 	strd	r0, r1, [sp]
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b72:	da2f      	bge.n	8008bd4 <__ieee754_pow+0x9bc>
 8008b74:	4650      	mov	r0, sl
 8008b76:	ed9d 0b00 	vldr	d0, [sp]
 8008b7a:	f000 f9cd 	bl	8008f18 <scalbn>
 8008b7e:	ec51 0b10 	vmov	r0, r1, d0
 8008b82:	ec53 2b18 	vmov	r2, r3, d8
 8008b86:	f7ff bbe0 	b.w	800834a <__ieee754_pow+0x132>
 8008b8a:	4b30      	ldr	r3, [pc, #192]	; (8008c4c <__ieee754_pow+0xa34>)
 8008b8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b90:	429e      	cmp	r6, r3
 8008b92:	f77f af0b 	ble.w	80089ac <__ieee754_pow+0x794>
 8008b96:	4b2e      	ldr	r3, [pc, #184]	; (8008c50 <__ieee754_pow+0xa38>)
 8008b98:	440b      	add	r3, r1
 8008b9a:	4303      	orrs	r3, r0
 8008b9c:	d00b      	beq.n	8008bb6 <__ieee754_pow+0x99e>
 8008b9e:	a326      	add	r3, pc, #152	; (adr r3, 8008c38 <__ieee754_pow+0xa20>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	ec51 0b18 	vmov	r0, r1, d8
 8008ba8:	f7f7 fd46 	bl	8000638 <__aeabi_dmul>
 8008bac:	a322      	add	r3, pc, #136	; (adr r3, 8008c38 <__ieee754_pow+0xa20>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f7ff bbca 	b.w	800834a <__ieee754_pow+0x132>
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	462b      	mov	r3, r5
 8008bba:	f7f7 fb85 	bl	80002c8 <__aeabi_dsub>
 8008bbe:	4642      	mov	r2, r8
 8008bc0:	464b      	mov	r3, r9
 8008bc2:	f7f7 ffbf 	bl	8000b44 <__aeabi_dcmpge>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f aef0 	beq.w	80089ac <__ieee754_pow+0x794>
 8008bcc:	e7e7      	b.n	8008b9e <__ieee754_pow+0x986>
 8008bce:	f04f 0a00 	mov.w	sl, #0
 8008bd2:	e717      	b.n	8008a04 <__ieee754_pow+0x7ec>
 8008bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bd8:	4619      	mov	r1, r3
 8008bda:	e7d2      	b.n	8008b82 <__ieee754_pow+0x96a>
 8008bdc:	491a      	ldr	r1, [pc, #104]	; (8008c48 <__ieee754_pow+0xa30>)
 8008bde:	2000      	movs	r0, #0
 8008be0:	f7ff bb9e 	b.w	8008320 <__ieee754_pow+0x108>
 8008be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be8:	f7ff bb9a 	b.w	8008320 <__ieee754_pow+0x108>
 8008bec:	9000      	str	r0, [sp, #0]
 8008bee:	f7ff bb76 	b.w	80082de <__ieee754_pow+0xc6>
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	f7ff bb60 	b.w	80082b8 <__ieee754_pow+0xa0>
 8008bf8:	00000000 	.word	0x00000000
 8008bfc:	3fe62e43 	.word	0x3fe62e43
 8008c00:	fefa39ef 	.word	0xfefa39ef
 8008c04:	3fe62e42 	.word	0x3fe62e42
 8008c08:	0ca86c39 	.word	0x0ca86c39
 8008c0c:	be205c61 	.word	0xbe205c61
 8008c10:	72bea4d0 	.word	0x72bea4d0
 8008c14:	3e663769 	.word	0x3e663769
 8008c18:	c5d26bf1 	.word	0xc5d26bf1
 8008c1c:	3ebbbd41 	.word	0x3ebbbd41
 8008c20:	af25de2c 	.word	0xaf25de2c
 8008c24:	3f11566a 	.word	0x3f11566a
 8008c28:	16bebd93 	.word	0x16bebd93
 8008c2c:	3f66c16c 	.word	0x3f66c16c
 8008c30:	5555553e 	.word	0x5555553e
 8008c34:	3fc55555 	.word	0x3fc55555
 8008c38:	c2f8f359 	.word	0xc2f8f359
 8008c3c:	01a56e1f 	.word	0x01a56e1f
 8008c40:	3fe00000 	.word	0x3fe00000
 8008c44:	000fffff 	.word	0x000fffff
 8008c48:	3ff00000 	.word	0x3ff00000
 8008c4c:	4090cbff 	.word	0x4090cbff
 8008c50:	3f6f3400 	.word	0x3f6f3400
 8008c54:	652b82fe 	.word	0x652b82fe
 8008c58:	3c971547 	.word	0x3c971547

08008c5c <__ieee754_sqrt>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	ec55 4b10 	vmov	r4, r5, d0
 8008c64:	4e56      	ldr	r6, [pc, #344]	; (8008dc0 <__ieee754_sqrt+0x164>)
 8008c66:	43ae      	bics	r6, r5
 8008c68:	ee10 0a10 	vmov	r0, s0
 8008c6c:	ee10 3a10 	vmov	r3, s0
 8008c70:	4629      	mov	r1, r5
 8008c72:	462a      	mov	r2, r5
 8008c74:	d110      	bne.n	8008c98 <__ieee754_sqrt+0x3c>
 8008c76:	ee10 2a10 	vmov	r2, s0
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	f7f7 fcdc 	bl	8000638 <__aeabi_dmul>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4620      	mov	r0, r4
 8008c86:	4629      	mov	r1, r5
 8008c88:	f7f7 fb20 	bl	80002cc <__adddf3>
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	ec45 4b10 	vmov	d0, r4, r5
 8008c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	dc10      	bgt.n	8008cbe <__ieee754_sqrt+0x62>
 8008c9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ca0:	4330      	orrs	r0, r6
 8008ca2:	d0f5      	beq.n	8008c90 <__ieee754_sqrt+0x34>
 8008ca4:	b15d      	cbz	r5, 8008cbe <__ieee754_sqrt+0x62>
 8008ca6:	ee10 2a10 	vmov	r2, s0
 8008caa:	462b      	mov	r3, r5
 8008cac:	ee10 0a10 	vmov	r0, s0
 8008cb0:	f7f7 fb0a 	bl	80002c8 <__aeabi_dsub>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	f7f7 fde8 	bl	800088c <__aeabi_ddiv>
 8008cbc:	e7e6      	b.n	8008c8c <__ieee754_sqrt+0x30>
 8008cbe:	1509      	asrs	r1, r1, #20
 8008cc0:	d076      	beq.n	8008db0 <__ieee754_sqrt+0x154>
 8008cc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008cc6:	07ce      	lsls	r6, r1, #31
 8008cc8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008ccc:	bf5e      	ittt	pl
 8008cce:	0fda      	lsrpl	r2, r3, #31
 8008cd0:	005b      	lslpl	r3, r3, #1
 8008cd2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008cd6:	0fda      	lsrs	r2, r3, #31
 8008cd8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008cdc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	106d      	asrs	r5, r5, #1
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	f04f 0e16 	mov.w	lr, #22
 8008cea:	4684      	mov	ip, r0
 8008cec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cf0:	eb0c 0401 	add.w	r4, ip, r1
 8008cf4:	4294      	cmp	r4, r2
 8008cf6:	bfde      	ittt	le
 8008cf8:	1b12      	suble	r2, r2, r4
 8008cfa:	eb04 0c01 	addle.w	ip, r4, r1
 8008cfe:	1840      	addle	r0, r0, r1
 8008d00:	0052      	lsls	r2, r2, #1
 8008d02:	f1be 0e01 	subs.w	lr, lr, #1
 8008d06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008d0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008d0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d12:	d1ed      	bne.n	8008cf0 <__ieee754_sqrt+0x94>
 8008d14:	4671      	mov	r1, lr
 8008d16:	2720      	movs	r7, #32
 8008d18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008d1c:	4562      	cmp	r2, ip
 8008d1e:	eb04 060e 	add.w	r6, r4, lr
 8008d22:	dc02      	bgt.n	8008d2a <__ieee754_sqrt+0xce>
 8008d24:	d113      	bne.n	8008d4e <__ieee754_sqrt+0xf2>
 8008d26:	429e      	cmp	r6, r3
 8008d28:	d811      	bhi.n	8008d4e <__ieee754_sqrt+0xf2>
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	eb06 0e04 	add.w	lr, r6, r4
 8008d30:	da43      	bge.n	8008dba <__ieee754_sqrt+0x15e>
 8008d32:	f1be 0f00 	cmp.w	lr, #0
 8008d36:	db40      	blt.n	8008dba <__ieee754_sqrt+0x15e>
 8008d38:	f10c 0801 	add.w	r8, ip, #1
 8008d3c:	eba2 020c 	sub.w	r2, r2, ip
 8008d40:	429e      	cmp	r6, r3
 8008d42:	bf88      	it	hi
 8008d44:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008d48:	1b9b      	subs	r3, r3, r6
 8008d4a:	4421      	add	r1, r4
 8008d4c:	46c4      	mov	ip, r8
 8008d4e:	0052      	lsls	r2, r2, #1
 8008d50:	3f01      	subs	r7, #1
 8008d52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008d56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008d5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d5e:	d1dd      	bne.n	8008d1c <__ieee754_sqrt+0xc0>
 8008d60:	4313      	orrs	r3, r2
 8008d62:	d006      	beq.n	8008d72 <__ieee754_sqrt+0x116>
 8008d64:	1c4c      	adds	r4, r1, #1
 8008d66:	bf13      	iteet	ne
 8008d68:	3101      	addne	r1, #1
 8008d6a:	3001      	addeq	r0, #1
 8008d6c:	4639      	moveq	r1, r7
 8008d6e:	f021 0101 	bicne.w	r1, r1, #1
 8008d72:	1043      	asrs	r3, r0, #1
 8008d74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d78:	0849      	lsrs	r1, r1, #1
 8008d7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d7e:	07c2      	lsls	r2, r0, #31
 8008d80:	bf48      	it	mi
 8008d82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008d86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	463d      	mov	r5, r7
 8008d8e:	e77f      	b.n	8008c90 <__ieee754_sqrt+0x34>
 8008d90:	0ada      	lsrs	r2, r3, #11
 8008d92:	3815      	subs	r0, #21
 8008d94:	055b      	lsls	r3, r3, #21
 8008d96:	2a00      	cmp	r2, #0
 8008d98:	d0fa      	beq.n	8008d90 <__ieee754_sqrt+0x134>
 8008d9a:	02d7      	lsls	r7, r2, #11
 8008d9c:	d50a      	bpl.n	8008db4 <__ieee754_sqrt+0x158>
 8008d9e:	f1c1 0420 	rsb	r4, r1, #32
 8008da2:	fa23 f404 	lsr.w	r4, r3, r4
 8008da6:	1e4d      	subs	r5, r1, #1
 8008da8:	408b      	lsls	r3, r1
 8008daa:	4322      	orrs	r2, r4
 8008dac:	1b41      	subs	r1, r0, r5
 8008dae:	e788      	b.n	8008cc2 <__ieee754_sqrt+0x66>
 8008db0:	4608      	mov	r0, r1
 8008db2:	e7f0      	b.n	8008d96 <__ieee754_sqrt+0x13a>
 8008db4:	0052      	lsls	r2, r2, #1
 8008db6:	3101      	adds	r1, #1
 8008db8:	e7ef      	b.n	8008d9a <__ieee754_sqrt+0x13e>
 8008dba:	46e0      	mov	r8, ip
 8008dbc:	e7be      	b.n	8008d3c <__ieee754_sqrt+0xe0>
 8008dbe:	bf00      	nop
 8008dc0:	7ff00000 	.word	0x7ff00000

08008dc4 <fabs>:
 8008dc4:	ec51 0b10 	vmov	r0, r1, d0
 8008dc8:	ee10 2a10 	vmov	r2, s0
 8008dcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008dd0:	ec43 2b10 	vmov	d0, r2, r3
 8008dd4:	4770      	bx	lr

08008dd6 <finite>:
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	ed8d 0b00 	vstr	d0, [sp]
 8008ddc:	9801      	ldr	r0, [sp, #4]
 8008dde:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008de2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008de6:	0fc0      	lsrs	r0, r0, #31
 8008de8:	b002      	add	sp, #8
 8008dea:	4770      	bx	lr
 8008dec:	0000      	movs	r0, r0
	...

08008df0 <nan>:
 8008df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008df8 <nan+0x8>
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	7ff80000 	.word	0x7ff80000

08008e00 <rint>:
 8008e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e02:	ec51 0b10 	vmov	r0, r1, d0
 8008e06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e0a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008e0e:	2e13      	cmp	r6, #19
 8008e10:	ee10 4a10 	vmov	r4, s0
 8008e14:	460b      	mov	r3, r1
 8008e16:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008e1a:	dc58      	bgt.n	8008ece <rint+0xce>
 8008e1c:	2e00      	cmp	r6, #0
 8008e1e:	da2b      	bge.n	8008e78 <rint+0x78>
 8008e20:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008e24:	4302      	orrs	r2, r0
 8008e26:	d023      	beq.n	8008e70 <rint+0x70>
 8008e28:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008e2c:	4302      	orrs	r2, r0
 8008e2e:	4254      	negs	r4, r2
 8008e30:	4314      	orrs	r4, r2
 8008e32:	0c4b      	lsrs	r3, r1, #17
 8008e34:	0b24      	lsrs	r4, r4, #12
 8008e36:	045b      	lsls	r3, r3, #17
 8008e38:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008e3c:	ea44 0103 	orr.w	r1, r4, r3
 8008e40:	4b32      	ldr	r3, [pc, #200]	; (8008f0c <rint+0x10c>)
 8008e42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008e46:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4630      	mov	r0, r6
 8008e50:	4639      	mov	r1, r7
 8008e52:	f7f7 fa3b 	bl	80002cc <__adddf3>
 8008e56:	e9cd 0100 	strd	r0, r1, [sp]
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e60:	4632      	mov	r2, r6
 8008e62:	f7f7 fa31 	bl	80002c8 <__aeabi_dsub>
 8008e66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e6a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008e6e:	4639      	mov	r1, r7
 8008e70:	ec41 0b10 	vmov	d0, r0, r1
 8008e74:	b003      	add	sp, #12
 8008e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e78:	4a25      	ldr	r2, [pc, #148]	; (8008f10 <rint+0x110>)
 8008e7a:	4132      	asrs	r2, r6
 8008e7c:	ea01 0702 	and.w	r7, r1, r2
 8008e80:	4307      	orrs	r7, r0
 8008e82:	d0f5      	beq.n	8008e70 <rint+0x70>
 8008e84:	0851      	lsrs	r1, r2, #1
 8008e86:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008e8a:	4314      	orrs	r4, r2
 8008e8c:	d00c      	beq.n	8008ea8 <rint+0xa8>
 8008e8e:	ea23 0201 	bic.w	r2, r3, r1
 8008e92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e96:	2e13      	cmp	r6, #19
 8008e98:	fa43 f606 	asr.w	r6, r3, r6
 8008e9c:	bf0c      	ite	eq
 8008e9e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008ea2:	2400      	movne	r4, #0
 8008ea4:	ea42 0306 	orr.w	r3, r2, r6
 8008ea8:	4918      	ldr	r1, [pc, #96]	; (8008f0c <rint+0x10c>)
 8008eaa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008eae:	4622      	mov	r2, r4
 8008eb0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fa08 	bl	80002cc <__adddf3>
 8008ebc:	e9cd 0100 	strd	r0, r1, [sp]
 8008ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	462b      	mov	r3, r5
 8008ec8:	f7f7 f9fe 	bl	80002c8 <__aeabi_dsub>
 8008ecc:	e7d0      	b.n	8008e70 <rint+0x70>
 8008ece:	2e33      	cmp	r6, #51	; 0x33
 8008ed0:	dd07      	ble.n	8008ee2 <rint+0xe2>
 8008ed2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ed6:	d1cb      	bne.n	8008e70 <rint+0x70>
 8008ed8:	ee10 2a10 	vmov	r2, s0
 8008edc:	f7f7 f9f6 	bl	80002cc <__adddf3>
 8008ee0:	e7c6      	b.n	8008e70 <rint+0x70>
 8008ee2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008ee6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008eea:	40d6      	lsrs	r6, r2
 8008eec:	4230      	tst	r0, r6
 8008eee:	d0bf      	beq.n	8008e70 <rint+0x70>
 8008ef0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8008ef4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008ef8:	bf1f      	itttt	ne
 8008efa:	ea24 0101 	bicne.w	r1, r4, r1
 8008efe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008f02:	fa44 f202 	asrne.w	r2, r4, r2
 8008f06:	ea41 0402 	orrne.w	r4, r1, r2
 8008f0a:	e7cd      	b.n	8008ea8 <rint+0xa8>
 8008f0c:	08009608 	.word	0x08009608
 8008f10:	000fffff 	.word	0x000fffff
 8008f14:	00000000 	.word	0x00000000

08008f18 <scalbn>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	ec55 4b10 	vmov	r4, r5, d0
 8008f1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008f22:	4606      	mov	r6, r0
 8008f24:	462b      	mov	r3, r5
 8008f26:	b99a      	cbnz	r2, 8008f50 <scalbn+0x38>
 8008f28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f2c:	4323      	orrs	r3, r4
 8008f2e:	d036      	beq.n	8008f9e <scalbn+0x86>
 8008f30:	4b39      	ldr	r3, [pc, #228]	; (8009018 <scalbn+0x100>)
 8008f32:	4629      	mov	r1, r5
 8008f34:	ee10 0a10 	vmov	r0, s0
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f7f7 fb7d 	bl	8000638 <__aeabi_dmul>
 8008f3e:	4b37      	ldr	r3, [pc, #220]	; (800901c <scalbn+0x104>)
 8008f40:	429e      	cmp	r6, r3
 8008f42:	4604      	mov	r4, r0
 8008f44:	460d      	mov	r5, r1
 8008f46:	da10      	bge.n	8008f6a <scalbn+0x52>
 8008f48:	a32b      	add	r3, pc, #172	; (adr r3, 8008ff8 <scalbn+0xe0>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	e03a      	b.n	8008fc6 <scalbn+0xae>
 8008f50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008f54:	428a      	cmp	r2, r1
 8008f56:	d10c      	bne.n	8008f72 <scalbn+0x5a>
 8008f58:	ee10 2a10 	vmov	r2, s0
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	4629      	mov	r1, r5
 8008f60:	f7f7 f9b4 	bl	80002cc <__adddf3>
 8008f64:	4604      	mov	r4, r0
 8008f66:	460d      	mov	r5, r1
 8008f68:	e019      	b.n	8008f9e <scalbn+0x86>
 8008f6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f6e:	460b      	mov	r3, r1
 8008f70:	3a36      	subs	r2, #54	; 0x36
 8008f72:	4432      	add	r2, r6
 8008f74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f78:	428a      	cmp	r2, r1
 8008f7a:	dd08      	ble.n	8008f8e <scalbn+0x76>
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	a120      	add	r1, pc, #128	; (adr r1, 8009000 <scalbn+0xe8>)
 8008f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f84:	da1c      	bge.n	8008fc0 <scalbn+0xa8>
 8008f86:	a120      	add	r1, pc, #128	; (adr r1, 8009008 <scalbn+0xf0>)
 8008f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8c:	e018      	b.n	8008fc0 <scalbn+0xa8>
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	dd08      	ble.n	8008fa4 <scalbn+0x8c>
 8008f92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f9e:	ec45 4b10 	vmov	d0, r4, r5
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008fa8:	da19      	bge.n	8008fde <scalbn+0xc6>
 8008faa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008fae:	429e      	cmp	r6, r3
 8008fb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008fb4:	dd0a      	ble.n	8008fcc <scalbn+0xb4>
 8008fb6:	a112      	add	r1, pc, #72	; (adr r1, 8009000 <scalbn+0xe8>)
 8008fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e2      	bne.n	8008f86 <scalbn+0x6e>
 8008fc0:	a30f      	add	r3, pc, #60	; (adr r3, 8009000 <scalbn+0xe8>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 fb37 	bl	8000638 <__aeabi_dmul>
 8008fca:	e7cb      	b.n	8008f64 <scalbn+0x4c>
 8008fcc:	a10a      	add	r1, pc, #40	; (adr r1, 8008ff8 <scalbn+0xe0>)
 8008fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0b8      	beq.n	8008f48 <scalbn+0x30>
 8008fd6:	a10e      	add	r1, pc, #56	; (adr r1, 8009010 <scalbn+0xf8>)
 8008fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fdc:	e7b4      	b.n	8008f48 <scalbn+0x30>
 8008fde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fe2:	3236      	adds	r2, #54	; 0x36
 8008fe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fe8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008fec:	4620      	mov	r0, r4
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <scalbn+0x108>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	e7e8      	b.n	8008fc6 <scalbn+0xae>
 8008ff4:	f3af 8000 	nop.w
 8008ff8:	c2f8f359 	.word	0xc2f8f359
 8008ffc:	01a56e1f 	.word	0x01a56e1f
 8009000:	8800759c 	.word	0x8800759c
 8009004:	7e37e43c 	.word	0x7e37e43c
 8009008:	8800759c 	.word	0x8800759c
 800900c:	fe37e43c 	.word	0xfe37e43c
 8009010:	c2f8f359 	.word	0xc2f8f359
 8009014:	81a56e1f 	.word	0x81a56e1f
 8009018:	43500000 	.word	0x43500000
 800901c:	ffff3cb0 	.word	0xffff3cb0
 8009020:	3c900000 	.word	0x3c900000

08009024 <_init>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr

08009030 <_fini>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr
