<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="fr">
  <compounddef id="vector2_8c" kind="file" language="C++">
    <compoundname>vector2.c</compoundname>
    <includes refid="vector2_8h" local="yes">vector2.h</includes>
    <incdepgraph>
      <node id="2">
        <label>vector2.h</label>
        <link refid="vector2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Core/Prod/Src/vector2.c</label>
        <link refid="vector2_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector2_8c_1a821b038b65af78d18bfb467903b2a85a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 vector2_new</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>vector2_new</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Renvoit un nouveau vecteur de coordonnées <formula id="2">$(x, y)$</formula>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;abscisse du point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;ordonnée du point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="4" column="9" bodyfile="Core/Prod/Src/vector2.c" bodystart="4" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1a341d1d9c577a9c97628697d2f3bf1bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector2_display</definition>
        <argsstring>(Vector2 u)</argsstring>
        <name>vector2_display</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Affiche les coordonnées du vecteur <computeroutput>u</computeroutput> via <computeroutput>printf</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Le vecteur à afficher. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="10" column="6" bodyfile="Core/Prod/Src/vector2.c" bodystart="10" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1af2f0520156a8c662c49860a7913f07ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vector2_norm</definition>
        <argsstring>(Vector2 u)</argsstring>
        <name>vector2_norm</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Renvoit la norme de <computeroutput>u</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Le vecteur dont la norme est calculée. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="15" column="8" bodyfile="Core/Prod/Src/vector2.c" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1a06d17e6358b8dbecd268afa873cb9eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vector2_angle</definition>
        <argsstring>(Vector2 u)</argsstring>
        <name>vector2_angle</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rennvoit l&apos;angle formé par le vecteur <computeroutput>u</computeroutput> avec l&apos;horizontale. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Le vecteur dont on calcule l&apos;angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="20" column="8" bodyfile="Core/Prod/Src/vector2.c" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1a7de90d9daa27357cbf29e0588ed8935a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vector2_dist</definition>
        <argsstring>(Vector2 u, Vector2 v)</argsstring>
        <name>vector2_dist</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Revoit la distance entre <computeroutput>u</computeroutput> et <computeroutput>v</computeroutput> (norme de la différence). L&apos;ordre n&apos;a pas d&apos;importance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Un premier vecteur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Un second vecteur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="25" column="8" bodyfile="Core/Prod/Src/vector2.c" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1addf037d7729fb5baf80810fee41e1413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 vector2_sum</definition>
        <argsstring>(Vector2 u, Vector2 v)</argsstring>
        <name>vector2_sum</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calcule la somme de deux vecteur <computeroutput>u</computeroutput> et <computeroutput>v</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Un premier vecteur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Un second vecteur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="31" column="9" bodyfile="Core/Prod/Src/vector2.c" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1a1db069bf1c62849e00e2b02b96f1073d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 vector2_diff</definition>
        <argsstring>(Vector2 u, Vector2 v)</argsstring>
        <name>vector2_diff</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calcule la différence <computeroutput>u - v</computeroutput> pour deux vecteur <computeroutput>u</computeroutput> et <computeroutput>v</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Le premier vecteur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Le second vecteur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="37" column="9" bodyfile="Core/Prod/Src/vector2.c" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1a24814df5bf9841f11368adeb17d094d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vector2_dot</definition>
        <argsstring>(Vector2 u, Vector2 v)</argsstring>
        <name>vector2_dot</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calcule le produit scalaire de deux vecteurs <computeroutput>u</computeroutput> et <computeroutput>v</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Un premier vecteur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Un second vecteur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="43" column="8" bodyfile="Core/Prod/Src/vector2.c" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1ae15342af1e40ae21fbc76d9a8ea8b209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vector2_cross</definition>
        <argsstring>(Vector2 u, Vector2 v)</argsstring>
        <name>vector2_cross</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calcule le produit en croix de deux vecteurs <computeroutput>u</computeroutput> et <computeroutput>v</computeroutput>. Cela correspond à l&apos;aire (algébrique) du paralélogramme formé à partir des points <formula id="3">$0$</formula>, <formula id="4">$u$</formula>, <formula id="5">$u+v$</formula> et <formula id="6">$v$</formula>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Un premier vecteur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Un second vecteur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="48" column="8" bodyfile="Core/Prod/Src/vector2.c" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1a6c9c4cf97c353f6ae9caf0addae1a49a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector2_normalize</definition>
        <argsstring>(Vector2 *u)</argsstring>
        <name>vector2_normalize</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref> *</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normalise le vecteur donné en entrée. Fonction à effet de bord. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointeur vers le vecteur à normaliser. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="55" column="6" bodyfile="Core/Prod/Src/vector2.c" bodystart="55" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1acf2cab5ad6bf5ddb8281dcfb24beb087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector2_scale</definition>
        <argsstring>(Vector2 *u, double k)</argsstring>
        <name>vector2_scale</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref> *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplie le vecteur <computeroutput>*u</computeroutput> par le scalaire <computeroutput>k</computeroutput>. Fonction à effet de bord. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointeur vers le vecteur dont on change la longueur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalaire. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="67" column="6" bodyfile="Core/Prod/Src/vector2.c" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1a090fe1d7de1fc3019c946c32dbdf4bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector2_rotate</definition>
        <argsstring>(Vector2 *u, double a)</argsstring>
        <name>vector2_rotate</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref> *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applique une rotation de <computeroutput>a</computeroutput> radians au vecteur <computeroutput>*u</computeroutput>. Fonction à effet de bord. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointeur vers le vecteur dont on change l&apos;angle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Angle en radians. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="73" column="6" bodyfile="Core/Prod/Src/vector2.c" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="vector2_8c_1a8c7390f599d70eaf163d8238a127fd73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector2_rotate90</definition>
        <argsstring>(Vector2 *u)</argsstring>
        <name>vector2_rotate90</name>
        <param>
          <type><ref refid="structvector2" kindref="compound">Vector2</ref> *</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applique une rotation de 90° au vecteur <computeroutput>*u</computeroutput>. L&apos;effet est equivalent à l&apos;appel de <computeroutput>vector2_rotate</computeroutput> avec <computeroutput>a</computeroutput> <formula id="7">$ = \pi/2$</formula> mais évite de calculer <formula id="8">$\cos(\pi/2)$</formula> et <formula id="9">$\sin(\pi/2)$</formula>. Fonction à effet de bord. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointeur vers le vecteur dont on change l&apos;angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Prod/Src/vector2.c" line="82" column="6" bodyfile="Core/Prod/Src/vector2.c" bodystart="82" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vector2_8h" kindref="compound">vector2.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="structvector2" kindref="compound">Vector2</ref><sp/><ref refid="vector2_8h_1a821b038b65af78d18bfb467903b2a85a" kindref="member">vector2_new</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u<sp/>=<sp/>{<sp/>x,<sp/>y<sp/>};</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1a341d1d9c577a9c97628697d2f3bf1bf4" kindref="member">vector2_display</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;{<sp/>x:<sp/>%f,<sp/>y:<sp/>%f<sp/>}\n&quot;</highlight><highlight class="normal">,<sp/>u.x,<sp/>u.y);</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1af2f0520156a8c662c49860a7913f07ae" kindref="member">vector2_norm</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(u.x*u.x<sp/>+<sp/>u.y*u.y);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1a06d17e6358b8dbecd268afa873cb9eba" kindref="member">vector2_angle</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atan2(u.y,<sp/>u.x);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1a7de90d9daa27357cbf29e0588ed8935a" kindref="member">vector2_dist</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u,<sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>diff<sp/>=<sp/>{<sp/>v.x<sp/>-<sp/>u.x,<sp/>v.y<sp/>-<sp/>u.y<sp/>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1af2f0520156a8c662c49860a7913f07ae" kindref="member">vector2_norm</ref>(diff);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="structvector2" kindref="compound">Vector2</ref><sp/><ref refid="vector2_8h_1addf037d7729fb5baf80810fee41e1413" kindref="member">vector2_sum</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u,<sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>sum<sp/>=<sp/>{<sp/>v.x<sp/>+<sp/>u.x,<sp/>v.y<sp/>+<sp/>u.y<sp/>};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="structvector2" kindref="compound">Vector2</ref><sp/><ref refid="vector2_8h_1a1db069bf1c62849e00e2b02b96f1073d" kindref="member">vector2_diff</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u,<sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>diff<sp/>=<sp/>{<sp/>v.x<sp/>-<sp/>u.x,<sp/>v.y<sp/>-<sp/>u.y<sp/>};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1a24814df5bf9841f11368adeb17d094d4" kindref="member">vector2_dot</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u,<sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u.x<sp/>*<sp/>v.x<sp/>+<sp/>u.y<sp/>*<sp/>v.y;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1ae15342af1e40ae21fbc76d9a8ea8b209" kindref="member">vector2_cross</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref><sp/>u,<sp/><ref refid="structvector2" kindref="compound">Vector2</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u.x<sp/>*<sp/>v.y<sp/>-<sp/>u.y<sp/>*<sp/>v.x;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Fonctions<sp/>à<sp/>effet<sp/>de<sp/>bord<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1a6c9c4cf97c353f6ae9caf0addae1a49a" kindref="member">vector2_normalize</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref>*<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l<sp/>=<sp/><ref refid="vector2_8h_1af2f0520156a8c662c49860a7913f07ae" kindref="member">vector2_norm</ref>(*u);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u-&gt;x<sp/>/=<sp/>l;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u-&gt;y<sp/>/=<sp/>l;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u-&gt;x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u-&gt;y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1acf2cab5ad6bf5ddb8281dcfb24beb087" kindref="member">vector2_scale</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref>*<sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>u-&gt;x<sp/>*=<sp/>k;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>u-&gt;y<sp/>*=<sp/>k;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1a090fe1d7de1fc3019c946c32dbdf4bf8" kindref="member">vector2_rotate</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref>*<sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cos_a<sp/>=<sp/>cos(a);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sin_a<sp/>=<sp/>sin(a);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newX<sp/>=<sp/>cos_a*u-&gt;x<sp/>-<sp/>sin_a*u-&gt;y;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>u-&gt;y<sp/>=<sp/>sin_a*u-&gt;x<sp/>+<sp/>cos_a*u-&gt;y;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>u-&gt;x<sp/>=<sp/>newX;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="vector2_8h_1a8c7390f599d70eaf163d8238a127fd73" kindref="member">vector2_rotate90</ref>(<ref refid="structvector2" kindref="compound">Vector2</ref>*<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newX<sp/>=<sp/>-u-&gt;y;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>u-&gt;y<sp/>=<sp/>u-&gt;x;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>u-&gt;x<sp/>=<sp/>newX;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Core/Prod/Src/vector2.c"/>
  </compounddef>
</doxygen>
